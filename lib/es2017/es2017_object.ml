[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2016
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type _ObjectConstructor = [ `ObjectConstructor ] intf
        let rec _ObjectConstructor_of_js : Ojs.t -> _ObjectConstructor =
          Obj.magic
        and _ObjectConstructor_to_js : _ObjectConstructor -> Ojs.t =
          Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) -> anonymous_interface_0_of_js x2
    and t_to_js : t -> Ojs.t =
      fun (x1 : anonymous_interface_0) -> anonymous_interface_0_to_js x1
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x4 : Ojs.t) -> anonymous_interface_1_of_js x4
    and t_to_js : t -> Ojs.t =
      fun (x3 : anonymous_interface_1) -> anonymous_interface_1_to_js x3
    let (get : t -> string -> 'T) =
      fun (x5 : t) ->
        fun (x6 : string) ->
          Obj.magic (Ojs.get_prop (t_to_js x5) (Ojs.string_to_js x6))
    let (set : t -> string -> 'T -> unit) =
      fun (x7 : t) ->
        fun (x8 : string) ->
          fun (x9 : 'T) ->
            Ojs.set_prop (t_to_js x7) (Ojs.string_to_js x8) (Obj.magic x9)
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x11 : Ojs.t) -> anonymous_interface_2_of_js x11
    and t_to_js : t -> Ojs.t =
      fun (x10 : anonymous_interface_2) -> anonymous_interface_2_to_js x10
    let (get : t -> string -> PropertyDescriptor.t) =
      fun (x12 : t) ->
        fun (x13 : string) ->
          PropertyDescriptor.t_of_js
            (Ojs.get_prop (t_to_js x12) (Ojs.string_to_js x13))
    let (set : t -> string -> PropertyDescriptor.t -> unit) =
      fun (x14 : t) ->
        fun (x15 : string) ->
          fun (x16 : PropertyDescriptor.t) ->
            Ojs.set_prop (t_to_js x14) (Ojs.string_to_js x15)
              (PropertyDescriptor.t_to_js x16)
  end
module ObjectConstructor =
  struct
    type t = _ObjectConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x18 : Ojs.t) -> _ObjectConstructor_of_js x18
    and t_to_js : t -> Ojs.t =
      fun (x17 : _ObjectConstructor) -> _ObjectConstructor_to_js x17
    let (values :
      t -> o:(anonymous_interface_1, 'T Array.t) union2 -> 'T list) =
      fun (x23 : t) ->
        fun ~o:(x19 : (anonymous_interface_1, 'T Array.t) union2) ->
          Ojs.list_of_js Obj.magic
            (Ojs.call (t_to_js x23) "values"
               [|(union2_to_js anonymous_interface_1_to_js
                    (fun (x21 : 'T Array.t) -> Array.t_to_js Obj.magic x21)
                    x19)|])
    let (values' : t -> o:anonymous_interface_0 -> any list) =
      fun (x26 : t) ->
        fun ~o:(x25 : anonymous_interface_0) ->
          Ojs.list_of_js any_of_js
            (Ojs.call (t_to_js x26) "values"
               [|(anonymous_interface_0_to_js x25)|])
    let (entries :
      t -> o:(anonymous_interface_1, 'T Array.t) union2 -> (string * 'T) list)
      =
      fun (x32 : t) ->
        fun ~o:(x28 : (anonymous_interface_1, 'T Array.t) union2) ->
          Ojs.list_of_js
            (fun (x33 : Ojs.t) ->
               let x34 = x33 in
               ((Ojs.string_of_js (Ojs.array_get x34 0)),
                 (Obj.magic (Ojs.array_get x34 1))))
            (Ojs.call (t_to_js x32) "entries"
               [|(union2_to_js anonymous_interface_1_to_js
                    (fun (x30 : 'T Array.t) -> Array.t_to_js Obj.magic x30)
                    x28)|])
    let (entries' : t -> o:anonymous_interface_0 -> (string * any) list) =
      fun (x36 : t) ->
        fun ~o:(x35 : anonymous_interface_0) ->
          Ojs.list_of_js
            (fun (x37 : Ojs.t) ->
               let x38 = x37 in
               ((Ojs.string_of_js (Ojs.array_get x38 0)),
                 (any_of_js (Ojs.array_get x38 1))))
            (Ojs.call (t_to_js x36) "entries"
               [|(anonymous_interface_0_to_js x35)|])
    let (getOwnPropertyDescriptors :
      t -> o:'T -> (any, anonymous_interface_2) intersection2) =
      fun (x40 : t) ->
        fun ~o:(x39 : 'T) ->
          intersection2_of_js any_of_js anonymous_interface_2_of_js
            (Ojs.call (t_to_js x40) "getOwnPropertyDescriptors"
               [|(Obj.magic x39)|])
  end
