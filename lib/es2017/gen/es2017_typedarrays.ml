[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2016
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type _Float32ArrayConstructor = [ `Float32ArrayConstructor ] intf
        and _Float64ArrayConstructor = [ `Float64ArrayConstructor ] intf
        and _Int16ArrayConstructor = [ `Int16ArrayConstructor ] intf
        and _Int32ArrayConstructor = [ `Int32ArrayConstructor ] intf
        and _Int8ArrayConstructor = [ `Int8ArrayConstructor ] intf
        and _Uint16ArrayConstructor = [ `Uint16ArrayConstructor ] intf
        and _Uint32ArrayConstructor = [ `Uint32ArrayConstructor ] intf
        and _Uint8ArrayConstructor = [ `Uint8ArrayConstructor ] intf
        and _Uint8ClampedArrayConstructor =
          [ `Uint8ClampedArrayConstructor ] intf
        let rec _Float32ArrayConstructor_of_js :
          Ojs.t -> _Float32ArrayConstructor = Obj.magic
        and _Float32ArrayConstructor_to_js :
          _Float32ArrayConstructor -> Ojs.t = Obj.magic
        and _Float64ArrayConstructor_of_js :
          Ojs.t -> _Float64ArrayConstructor = Obj.magic
        and _Float64ArrayConstructor_to_js :
          _Float64ArrayConstructor -> Ojs.t = Obj.magic
        and _Int16ArrayConstructor_of_js : Ojs.t -> _Int16ArrayConstructor =
          Obj.magic
        and _Int16ArrayConstructor_to_js : _Int16ArrayConstructor -> Ojs.t =
          Obj.magic
        and _Int32ArrayConstructor_of_js : Ojs.t -> _Int32ArrayConstructor =
          Obj.magic
        and _Int32ArrayConstructor_to_js : _Int32ArrayConstructor -> Ojs.t =
          Obj.magic
        and _Int8ArrayConstructor_of_js : Ojs.t -> _Int8ArrayConstructor =
          Obj.magic
        and _Int8ArrayConstructor_to_js : _Int8ArrayConstructor -> Ojs.t =
          Obj.magic
        and _Uint16ArrayConstructor_of_js : Ojs.t -> _Uint16ArrayConstructor
          = Obj.magic
        and _Uint16ArrayConstructor_to_js : _Uint16ArrayConstructor -> Ojs.t
          = Obj.magic
        and _Uint32ArrayConstructor_of_js : Ojs.t -> _Uint32ArrayConstructor
          = Obj.magic
        and _Uint32ArrayConstructor_to_js : _Uint32ArrayConstructor -> Ojs.t
          = Obj.magic
        and _Uint8ArrayConstructor_of_js : Ojs.t -> _Uint8ArrayConstructor =
          Obj.magic
        and _Uint8ArrayConstructor_to_js : _Uint8ArrayConstructor -> Ojs.t =
          Obj.magic
        and _Uint8ClampedArrayConstructor_of_js :
          Ojs.t -> _Uint8ClampedArrayConstructor = Obj.magic
        and _Uint8ClampedArrayConstructor_to_js :
          _Uint8ClampedArrayConstructor -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module Int8ArrayConstructor =
  struct
    type t = _Int8ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) -> _Int8ArrayConstructor_of_js x2
    and t_to_js : t -> Ojs.t =
      fun (x1 : _Int8ArrayConstructor) -> _Int8ArrayConstructor_to_js x1
    let (create : t -> Int8Array.t) =
      fun (x3 : t) -> Int8Array.t_of_js (Ojs.new_obj (t_to_js x3) [||])
  end
module Uint8ArrayConstructor =
  struct
    type t = _Uint8ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x5 : Ojs.t) -> _Uint8ArrayConstructor_of_js x5
    and t_to_js : t -> Ojs.t =
      fun (x4 : _Uint8ArrayConstructor) -> _Uint8ArrayConstructor_to_js x4
    let (create : t -> Uint8Array.t) =
      fun (x6 : t) -> Uint8Array.t_of_js (Ojs.new_obj (t_to_js x6) [||])
  end
module Uint8ClampedArrayConstructor =
  struct
    type t = _Uint8ClampedArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x8 : Ojs.t) -> _Uint8ClampedArrayConstructor_of_js x8
    and t_to_js : t -> Ojs.t =
      fun (x7 : _Uint8ClampedArrayConstructor) ->
        _Uint8ClampedArrayConstructor_to_js x7
    let (create : t -> Uint8ClampedArray.t) =
      fun (x9 : t) ->
        Uint8ClampedArray.t_of_js (Ojs.new_obj (t_to_js x9) [||])
  end
module Int16ArrayConstructor =
  struct
    type t = _Int16ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x11 : Ojs.t) -> _Int16ArrayConstructor_of_js x11
    and t_to_js : t -> Ojs.t =
      fun (x10 : _Int16ArrayConstructor) -> _Int16ArrayConstructor_to_js x10
    let (create : t -> Int16Array.t) =
      fun (x12 : t) -> Int16Array.t_of_js (Ojs.new_obj (t_to_js x12) [||])
  end
module Uint16ArrayConstructor =
  struct
    type t = _Uint16ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x14 : Ojs.t) -> _Uint16ArrayConstructor_of_js x14
    and t_to_js : t -> Ojs.t =
      fun (x13 : _Uint16ArrayConstructor) ->
        _Uint16ArrayConstructor_to_js x13
    let (create : t -> Uint16Array.t) =
      fun (x15 : t) -> Uint16Array.t_of_js (Ojs.new_obj (t_to_js x15) [||])
  end
module Int32ArrayConstructor =
  struct
    type t = _Int32ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x17 : Ojs.t) -> _Int32ArrayConstructor_of_js x17
    and t_to_js : t -> Ojs.t =
      fun (x16 : _Int32ArrayConstructor) -> _Int32ArrayConstructor_to_js x16
    let (create : t -> Int32Array.t) =
      fun (x18 : t) -> Int32Array.t_of_js (Ojs.new_obj (t_to_js x18) [||])
  end
module Uint32ArrayConstructor =
  struct
    type t = _Uint32ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x20 : Ojs.t) -> _Uint32ArrayConstructor_of_js x20
    and t_to_js : t -> Ojs.t =
      fun (x19 : _Uint32ArrayConstructor) ->
        _Uint32ArrayConstructor_to_js x19
    let (create : t -> Uint32Array.t) =
      fun (x21 : t) -> Uint32Array.t_of_js (Ojs.new_obj (t_to_js x21) [||])
  end
module Float32ArrayConstructor =
  struct
    type t = _Float32ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x23 : Ojs.t) -> _Float32ArrayConstructor_of_js x23
    and t_to_js : t -> Ojs.t =
      fun (x22 : _Float32ArrayConstructor) ->
        _Float32ArrayConstructor_to_js x22
    let (create : t -> Float32Array.t) =
      fun (x24 : t) -> Float32Array.t_of_js (Ojs.new_obj (t_to_js x24) [||])
  end
module Float64ArrayConstructor =
  struct
    type t = _Float64ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x26 : Ojs.t) -> _Float64ArrayConstructor_of_js x26
    and t_to_js : t -> Ojs.t =
      fun (x25 : _Float64ArrayConstructor) ->
        _Float64ArrayConstructor_to_js x25
    let (create : t -> Float64Array.t) =
      fun (x27 : t) -> Float64Array.t_of_js (Ojs.new_obj (t_to_js x27) [||])
  end
