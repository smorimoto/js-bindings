[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2016
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type _ArrayBufferTypes = [ `ArrayBufferTypes ] intf
        and _Atomics = [ `Atomics ] intf
        and _SharedArrayBuffer = [ `SharedArrayBuffer ] intf
        and _SharedArrayBufferConstructor =
          [ `SharedArrayBufferConstructor ] intf
        let rec _ArrayBufferTypes_of_js : Ojs.t -> _ArrayBufferTypes =
          Obj.magic
        and _ArrayBufferTypes_to_js : _ArrayBufferTypes -> Ojs.t = Obj.magic
        and _Atomics_of_js : Ojs.t -> _Atomics = Obj.magic
        and _Atomics_to_js : _Atomics -> Ojs.t = Obj.magic
        and _SharedArrayBuffer_of_js : Ojs.t -> _SharedArrayBuffer =
          Obj.magic
        and _SharedArrayBuffer_to_js : _SharedArrayBuffer -> Ojs.t =
          Obj.magic
        and _SharedArrayBufferConstructor_of_js :
          Ojs.t -> _SharedArrayBufferConstructor = Obj.magic
        and _SharedArrayBufferConstructor_to_js :
          _SharedArrayBufferConstructor -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module SharedArrayBuffer =
  struct
    type t = _SharedArrayBuffer
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) -> _SharedArrayBuffer_of_js x2
    and t_to_js : t -> Ojs.t =
      fun (x1 : _SharedArrayBuffer) -> _SharedArrayBuffer_to_js x1
    let (get_byteLength : t -> float) =
      fun (x3 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3) "byteLength")
    let (slice : t -> begin_:float -> ?end_:float -> unit -> t) =
      fun (x8 : t) ->
        fun ~begin_:(x4 : float) ->
          fun ?end_:(x5 : float option) ->
            fun () ->
              t_of_js
                (let x9 = t_to_js x8 in
                 Ojs.call (Ojs.get_prop_ascii x9 "slice") "apply"
                   [|x9;((let x6 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x6 "push" [|(Ojs.float_to_js x4)|]);
                          (match x5 with
                           | Some x7 ->
                               ignore
                                 (Ojs.call x6 "push" [|(Ojs.float_to_js x7)|])
                           | None -> ());
                          x6))|])
    let (create : byteLength:float -> _SharedArrayBuffer) =
      fun ~byteLength:(x10 : float) ->
        _SharedArrayBuffer_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SharedArrayBuffer")
             [|(Ojs.float_to_js x10)|])
  end
module SharedArrayBufferConstructor =
  struct
    type t = _SharedArrayBufferConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x12 : Ojs.t) -> _SharedArrayBufferConstructor_of_js x12
    and t_to_js : t -> Ojs.t =
      fun (x11 : _SharedArrayBufferConstructor) ->
        _SharedArrayBufferConstructor_to_js x11
    let (get_prototype : t -> _SharedArrayBuffer) =
      fun (x13 : t) ->
        _SharedArrayBuffer_of_js
          (Ojs.get_prop_ascii (t_to_js x13) "prototype")
    let (create : t -> byteLength:float -> _SharedArrayBuffer) =
      fun (x15 : t) ->
        fun ~byteLength:(x14 : float) ->
          _SharedArrayBuffer_of_js
            (Ojs.new_obj (t_to_js x15) [|(Ojs.float_to_js x14)|])
  end
let (sharedArrayBuffer : _SharedArrayBufferConstructor) =
  _SharedArrayBufferConstructor_of_js
    (Ojs.get_prop_ascii Ojs.global "SharedArrayBuffer")
module ArrayBufferTypes =
  struct
    type t = _ArrayBufferTypes
    let rec t_of_js : Ojs.t -> t =
      fun (x17 : Ojs.t) -> _ArrayBufferTypes_of_js x17
    and t_to_js : t -> Ojs.t =
      fun (x16 : _ArrayBufferTypes) -> _ArrayBufferTypes_to_js x16
    let (get_SharedArrayBuffer : t -> _SharedArrayBuffer) =
      fun (x18 : t) ->
        _SharedArrayBuffer_of_js
          (Ojs.get_prop_ascii (t_to_js x18) "SharedArrayBuffer")
    let (set_SharedArrayBuffer : t -> _SharedArrayBuffer -> unit) =
      fun (x19 : t) ->
        fun (x20 : _SharedArrayBuffer) ->
          Ojs.set_prop_ascii (t_to_js x19) "SharedArrayBuffer"
            (_SharedArrayBuffer_to_js x20)
  end
module Atomics =
  struct
    type t = _Atomics
    let rec t_of_js : Ojs.t -> t = fun (x22 : Ojs.t) -> _Atomics_of_js x22
    and t_to_js : t -> Ojs.t = fun (x21 : _Atomics) -> _Atomics_to_js x21
    let (add :
      t ->
        typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:float -> value:float -> float)
      =
      fun (x32 : t) ->
        fun
          ~typedArray:(x23 :
                        (Int16Array.t, Int32Array.t, Int8Array.t,
                          Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x30 : float) ->
            fun ~value:(x31 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x32) "add"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x23);(
                     Ojs.float_to_js x30);(Ojs.float_to_js x31)|])
    let (and_ :
      t ->
        typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:float -> value:float -> float)
      =
      fun (x42 : t) ->
        fun
          ~typedArray:(x33 :
                        (Int16Array.t, Int32Array.t, Int8Array.t,
                          Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x40 : float) ->
            fun ~value:(x41 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x42) "and"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x33);(
                     Ojs.float_to_js x40);(Ojs.float_to_js x41)|])
    let (compareExchange :
      t ->
        typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:float ->
            expectedValue:float -> replacementValue:float -> float)
      =
      fun (x53 : t) ->
        fun
          ~typedArray:(x43 :
                        (Int16Array.t, Int32Array.t, Int8Array.t,
                          Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x50 : float) ->
            fun ~expectedValue:(x51 : float) ->
              fun ~replacementValue:(x52 : float) ->
                Ojs.float_of_js
                  (Ojs.call (t_to_js x53) "compareExchange"
                     [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                          Int8Array.t_to_js Uint16Array.t_to_js
                          Uint32Array.t_to_js Uint8Array.t_to_js x43);(
                       Ojs.float_to_js x50);(Ojs.float_to_js x51);(Ojs.float_to_js
                                                                    x52)|])
    let (exchange :
      t ->
        typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:float -> value:float -> float)
      =
      fun (x63 : t) ->
        fun
          ~typedArray:(x54 :
                        (Int16Array.t, Int32Array.t, Int8Array.t,
                          Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x61 : float) ->
            fun ~value:(x62 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x63) "exchange"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x54);(
                     Ojs.float_to_js x61);(Ojs.float_to_js x62)|])
    let (isLockFree : t -> size:float -> bool) =
      fun (x65 : t) ->
        fun ~size:(x64 : float) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x65) "isLockFree" [|(Ojs.float_to_js x64)|])
    let (load :
      t ->
        typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 -> index:float -> float)
      =
      fun (x74 : t) ->
        fun
          ~typedArray:(x66 :
                        (Int16Array.t, Int32Array.t, Int8Array.t,
                          Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x73 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x74) "load"
                 [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                      Int8Array.t_to_js Uint16Array.t_to_js
                      Uint32Array.t_to_js Uint8Array.t_to_js x66);(Ojs.float_to_js
                                                                    x73)|])
    let (or_ :
      t ->
        typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:float -> value:float -> float)
      =
      fun (x84 : t) ->
        fun
          ~typedArray:(x75 :
                        (Int16Array.t, Int32Array.t, Int8Array.t,
                          Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x82 : float) ->
            fun ~value:(x83 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x84) "or"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x75);(
                     Ojs.float_to_js x82);(Ojs.float_to_js x83)|])
    let (store :
      t ->
        typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:float -> value:float -> float)
      =
      fun (x94 : t) ->
        fun
          ~typedArray:(x85 :
                        (Int16Array.t, Int32Array.t, Int8Array.t,
                          Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x92 : float) ->
            fun ~value:(x93 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x94) "store"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x85);(
                     Ojs.float_to_js x92);(Ojs.float_to_js x93)|])
    let (sub :
      t ->
        typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:float -> value:float -> float)
      =
      fun (x104 : t) ->
        fun
          ~typedArray:(x95 :
                        (Int16Array.t, Int32Array.t, Int8Array.t,
                          Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x102 : float) ->
            fun ~value:(x103 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x104) "sub"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x95);(
                     Ojs.float_to_js x102);(Ojs.float_to_js x103)|])
    let (wait :
      t ->
        typedArray:Int32Array.t ->
          index:float ->
            value:float ->
              ?timeout:float -> unit -> [ `not_equal  | `ok  | `timed_out ])
      =
      fun (x111 : t) ->
        fun ~typedArray:(x105 : Int32Array.t) ->
          fun ~index:(x106 : float) ->
            fun ~value:(x107 : float) ->
              fun ?timeout:(x108 : float option) ->
                fun () ->
                  let x113 =
                    let x112 = t_to_js x111 in
                    Ojs.call (Ojs.get_prop_ascii x112 "wait") "apply"
                      [|x112;((let x109 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x109 "push"
                                    [|(Int32Array.t_to_js x105)|]);
                               ignore
                                 (Ojs.call x109 "push"
                                    [|(Ojs.float_to_js x106)|]);
                               ignore
                                 (Ojs.call x109 "push"
                                    [|(Ojs.float_to_js x107)|]);
                               (match x108 with
                                | Some x110 ->
                                    ignore
                                      (Ojs.call x109 "push"
                                         [|(Ojs.float_to_js x110)|])
                                | None -> ());
                               x109))|] in
                  match Ojs.string_of_js x113 with
                  | "not-equal" -> `not_equal
                  | "ok" -> `ok
                  | "timed-out" -> `timed_out
                  | _ -> assert false
    let (notify :
      t ->
        typedArray:Int32Array.t ->
          index:float -> ?count:float -> unit -> float)
      =
      fun (x119 : t) ->
        fun ~typedArray:(x114 : Int32Array.t) ->
          fun ~index:(x115 : float) ->
            fun ?count:(x116 : float option) ->
              fun () ->
                Ojs.float_of_js
                  (let x120 = t_to_js x119 in
                   Ojs.call (Ojs.get_prop_ascii x120 "notify") "apply"
                     [|x120;((let x117 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x117 "push"
                                   [|(Int32Array.t_to_js x114)|]);
                              ignore
                                (Ojs.call x117 "push"
                                   [|(Ojs.float_to_js x115)|]);
                              (match x116 with
                               | Some x118 ->
                                   ignore
                                     (Ojs.call x117 "push"
                                        [|(Ojs.float_to_js x118)|])
                               | None -> ());
                              x117))|])
    let (xor :
      t ->
        typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:float -> value:float -> float)
      =
      fun (x130 : t) ->
        fun
          ~typedArray:(x121 :
                        (Int16Array.t, Int32Array.t, Int8Array.t,
                          Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x128 : float) ->
            fun ~value:(x129 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x130) "xor"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x121);(
                     Ojs.float_to_js x128);(Ojs.float_to_js x129)|])
  end
let (atomics : _Atomics) =
  _Atomics_of_js (Ojs.get_prop_ascii Ojs.global "Atomics")
