[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type stream_internal = [ `Stream_internal ] intf
        and stream_internal_Duplex =
          [ `Stream_internal_Duplex  | `Stream_internal_Readable 
          | `Stream_internal_Stream  | `Stream_internal_Writable 
          | `Stream_internal ] intf
        and stream_internal_DuplexOptions =
          [ `Stream_internal_DuplexOptions 
          | `Stream_internal_ReadableOptions 
          | `Stream_internal_WritableOptions ] intf
        and stream_internal_FinishedOptions =
          [ `Stream_internal_FinishedOptions ] intf
        and stream_internal_PassThrough =
          [ `Stream_internal_PassThrough  | `Stream_internal_Duplex 
          | `Stream_internal_Readable  | `Stream_internal_Stream 
          | `Stream_internal_Transform  | `Stream_internal_Writable 
          | `Stream_internal ] intf
        and stream_internal_Pipe = [ `Stream_internal_Pipe ] intf
        and stream_internal_Readable =
          [ `Stream_internal_Readable  | `Stream_internal_Stream 
          | `Stream_internal ] intf
        and stream_internal_ReadableOptions =
          [ `Stream_internal_ReadableOptions ] intf
        and stream_internal_Stream =
          [ `Stream_internal_Stream  | `Stream_internal ] intf
        and stream_internal_Transform =
          [ `Stream_internal_Transform  | `Stream_internal_Duplex 
          | `Stream_internal_Readable  | `Stream_internal_Stream 
          | `Stream_internal_Writable  | `Stream_internal ] intf
        and stream_internal_TransformCallback =
          [ `Stream_internal_TransformCallback ] intf
        and stream_internal_TransformOptions =
          [ `Stream_internal_TransformOptions 
          | `Stream_internal_DuplexOptions 
          | `Stream_internal_ReadableOptions 
          | `Stream_internal_WritableOptions ] intf
        and stream_internal_Writable =
          [ `Stream_internal_Writable  | `Stream_internal_Stream 
          | `Stream_internal ] intf
        and stream_internal_WritableOptions =
          [ `Stream_internal_WritableOptions ] intf
        let rec stream_internal_of_js : Ojs.t -> stream_internal = Obj.magic
        and stream_internal_to_js : stream_internal -> Ojs.t = Obj.magic
        and stream_internal_Duplex_of_js : Ojs.t -> stream_internal_Duplex =
          Obj.magic
        and stream_internal_Duplex_to_js : stream_internal_Duplex -> Ojs.t =
          Obj.magic
        and stream_internal_DuplexOptions_of_js :
          Ojs.t -> stream_internal_DuplexOptions = Obj.magic
        and stream_internal_DuplexOptions_to_js :
          stream_internal_DuplexOptions -> Ojs.t = Obj.magic
        and stream_internal_FinishedOptions_of_js :
          Ojs.t -> stream_internal_FinishedOptions = Obj.magic
        and stream_internal_FinishedOptions_to_js :
          stream_internal_FinishedOptions -> Ojs.t = Obj.magic
        and stream_internal_PassThrough_of_js :
          Ojs.t -> stream_internal_PassThrough = Obj.magic
        and stream_internal_PassThrough_to_js :
          stream_internal_PassThrough -> Ojs.t = Obj.magic
        and stream_internal_Pipe_of_js : Ojs.t -> stream_internal_Pipe =
          Obj.magic
        and stream_internal_Pipe_to_js : stream_internal_Pipe -> Ojs.t =
          Obj.magic
        and stream_internal_Readable_of_js :
          Ojs.t -> stream_internal_Readable = Obj.magic
        and stream_internal_Readable_to_js :
          stream_internal_Readable -> Ojs.t = Obj.magic
        and stream_internal_ReadableOptions_of_js :
          Ojs.t -> stream_internal_ReadableOptions = Obj.magic
        and stream_internal_ReadableOptions_to_js :
          stream_internal_ReadableOptions -> Ojs.t = Obj.magic
        and stream_internal_Stream_of_js : Ojs.t -> stream_internal_Stream =
          Obj.magic
        and stream_internal_Stream_to_js : stream_internal_Stream -> Ojs.t =
          Obj.magic
        and stream_internal_Transform_of_js :
          Ojs.t -> stream_internal_Transform = Obj.magic
        and stream_internal_Transform_to_js :
          stream_internal_Transform -> Ojs.t = Obj.magic
        and stream_internal_TransformCallback_of_js :
          Ojs.t -> stream_internal_TransformCallback = Obj.magic
        and stream_internal_TransformCallback_to_js :
          stream_internal_TransformCallback -> Ojs.t = Obj.magic
        and stream_internal_TransformOptions_of_js :
          Ojs.t -> stream_internal_TransformOptions = Obj.magic
        and stream_internal_TransformOptions_to_js :
          stream_internal_TransformOptions -> Ojs.t = Obj.magic
        and stream_internal_Writable_of_js :
          Ojs.t -> stream_internal_Writable = Obj.magic
        and stream_internal_Writable_to_js :
          stream_internal_Writable -> Ojs.t = Obj.magic
        and stream_internal_WritableOptions_of_js :
          Ojs.t -> stream_internal_WritableOptions = Obj.magic
        and stream_internal_WritableOptions_to_js :
          stream_internal_WritableOptions -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) -> anonymous_interface_0_of_js x2
    and t_to_js : t -> Ojs.t =
      fun (x1 : anonymous_interface_0) -> anonymous_interface_0_to_js x1
    let (get_chunk : t -> any) =
      fun (x3 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x3) "chunk")
    let (set_chunk : t -> any -> unit) =
      fun (x4 : t) ->
        fun (x5 : any) ->
          Ojs.set_prop_ascii (t_to_js x4) "chunk" (any_to_js x5)
    let (get_encoding : t -> BufferEncoding.t_0) =
      fun (x6 : t) ->
        BufferEncoding.t_0_of_js (Ojs.get_prop_ascii (t_to_js x6) "encoding")
    let (set_encoding : t -> BufferEncoding.t_0 -> unit) =
      fun (x7 : t) ->
        fun (x8 : BufferEncoding.t_0) ->
          Ojs.set_prop_ascii (t_to_js x7) "encoding"
            (BufferEncoding.t_0_to_js x8)
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x10 : Ojs.t) -> anonymous_interface_1_of_js x10
    and t_to_js : t -> Ojs.t =
      fun (x9 : anonymous_interface_1) -> anonymous_interface_1_to_js x9
    let (get_end : t -> bool) =
      fun (x11 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x11) "end")
    let (set_end : t -> bool -> unit) =
      fun (x12 : t) ->
        fun (x13 : bool) ->
          Ojs.set_prop_ascii (t_to_js x12) "end" (Ojs.bool_to_js x13)
  end
module Node_stream = struct  end
module Stream =
  struct
    module Internal =
      struct
        type t = stream_internal
        let rec t_of_js : Ojs.t -> t =
          fun (x15 : Ojs.t) -> stream_internal_of_js x15
        and t_to_js : t -> Ojs.t =
          fun (x14 : stream_internal) -> stream_internal_to_js x14
        let (pipe :
          t -> destination:'T -> ?options:anonymous_interface_1 -> unit -> 'T)
          =
          fun (x20 : t) ->
            fun ~destination:(x16 : 'T) ->
              fun ?options:(x17 : anonymous_interface_1 option) ->
                fun () ->
                  Obj.magic
                    (let x21 = t_to_js x20 in
                     Ojs.call (Ojs.get_prop_ascii x21 "pipe") "apply"
                       [|x21;((let x18 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x18 "push" [|(Obj.magic x16)|]);
                               (match x17 with
                                | Some x19 ->
                                    ignore
                                      (Ojs.call x18 "push"
                                         [|(anonymous_interface_1_to_js x19)|])
                                | None -> ());
                               x18))|])
        let (cast : t -> EventEmitter.t_0) =
          fun (x22 : t) -> EventEmitter.t_0_of_js (t_to_js x22)
      end
    module Internal =
      struct
        module Stream =
          struct
            type t = stream_internal_Stream
            let rec t_of_js : Ojs.t -> t =
              fun (x24 : Ojs.t) -> stream_internal_Stream_of_js x24
            and t_to_js : t -> Ojs.t =
              fun (x23 : stream_internal_Stream) ->
                stream_internal_Stream_to_js x23
            let (create : ?opts:stream_internal_ReadableOptions -> unit -> t)
              =
              fun ?opts:(x25 : stream_internal_ReadableOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global "stream")
                             "internal") "Stream")
                       (let x26 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x25 with
                         | Some x27 ->
                             ignore
                               (Ojs.call x26 "push"
                                  [|(stream_internal_ReadableOptions_to_js
                                       x27)|])
                         | None -> ());
                        x26))
            let (cast : t -> stream_internal) =
              fun (x28 : t) -> stream_internal_of_js (t_to_js x28)
          end
        module ReadableOptions =
          struct
            type t = stream_internal_ReadableOptions
            let rec t_of_js : Ojs.t -> t =
              fun (x30 : Ojs.t) -> stream_internal_ReadableOptions_of_js x30
            and t_to_js : t -> Ojs.t =
              fun (x29 : stream_internal_ReadableOptions) ->
                stream_internal_ReadableOptions_to_js x29
            let (get_highWaterMark : t -> float) =
              fun (x31 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x31) "highWaterMark")
            let (set_highWaterMark : t -> float -> unit) =
              fun (x32 : t) ->
                fun (x33 : float) ->
                  Ojs.set_prop_ascii (t_to_js x32) "highWaterMark"
                    (Ojs.float_to_js x33)
            let (get_encoding : t -> BufferEncoding.t_0) =
              fun (x34 : t) ->
                BufferEncoding.t_0_of_js
                  (Ojs.get_prop_ascii (t_to_js x34) "encoding")
            let (set_encoding : t -> BufferEncoding.t_0 -> unit) =
              fun (x35 : t) ->
                fun (x36 : BufferEncoding.t_0) ->
                  Ojs.set_prop_ascii (t_to_js x35) "encoding"
                    (BufferEncoding.t_0_to_js x36)
            let (get_objectMode : t -> bool) =
              fun (x37 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x37) "objectMode")
            let (set_objectMode : t -> bool -> unit) =
              fun (x38 : t) ->
                fun (x39 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x38) "objectMode"
                    (Ojs.bool_to_js x39)
            let (read :
              t -> this:stream_internal_Readable -> size:float -> unit) =
              fun (x42 : t) ->
                fun ~this:(x40 : stream_internal_Readable) ->
                  fun ~size:(x41 : float) ->
                    ignore
                      (Ojs.call (t_to_js x42) "read"
                         [|(stream_internal_Readable_to_js x40);(Ojs.float_to_js
                                                                   x41)|])
            let (destroy :
              t ->
                this:stream_internal_Readable ->
                  error:Error.t_0 or_null ->
                    callback:(error:Error.t_0 or_null -> unit) -> unit)
              =
              fun (x49 : t) ->
                fun ~this:(x43 : stream_internal_Readable) ->
                  fun ~error:(x44 : Error.t_0 or_null) ->
                    fun ~callback:(x46 : error:Error.t_0 or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x49) "destroy"
                           [|(stream_internal_Readable_to_js x43);(or_null_to_js
                                                                    Error.t_0_to_js
                                                                    x44);(
                             Ojs.fun_to_js 1
                               (fun (x47 : Ojs.t) ->
                                  x46
                                    ~error:(or_null_of_js Error.t_0_of_js x47)))|])
            let (get_autoDestroy : t -> bool) =
              fun (x50 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x50) "autoDestroy")
            let (set_autoDestroy : t -> bool -> unit) =
              fun (x51 : t) ->
                fun (x52 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x51) "autoDestroy"
                    (Ojs.bool_to_js x52)
          end
        module Readable =
          struct
            type t = stream_internal_Readable
            let rec t_of_js : Ojs.t -> t =
              fun (x54 : Ojs.t) -> stream_internal_Readable_of_js x54
            and t_to_js : t -> Ojs.t =
              fun (x53 : stream_internal_Readable) ->
                stream_internal_Readable_to_js x53
            let (from :
              iterable:(any AsyncIterable.t, any Iterable.t) union2 ->
                ?options:stream_internal_ReadableOptions -> unit -> t)
              =
              fun
                ~iterable:(x55 :
                            (any AsyncIterable.t, any Iterable.t) union2)
                ->
                fun ?options:(x56 : stream_internal_ReadableOptions option)
                  ->
                  fun () ->
                    t_of_js
                      (let x63 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global "stream")
                              "internal") "Readable" in
                       Ojs.call (Ojs.get_prop_ascii x63 "from") "apply"
                         [|x63;((let x57 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x57 "push"
                                      [|(union2_to_js
                                           (fun (x59 : any AsyncIterable.t)
                                              ->
                                              AsyncIterable.t_to_js any_to_js
                                                x59)
                                           (fun (x61 : any Iterable.t) ->
                                              Iterable.t_to_js any_to_js x61)
                                           x55)|]);
                                 (match x56 with
                                  | Some x58 ->
                                      ignore
                                        (Ojs.call x57 "push"
                                           [|(stream_internal_ReadableOptions_to_js
                                                x58)|])
                                  | None -> ());
                                 x57))|])
            let (get_readable : t -> bool) =
              fun (x64 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x64) "readable")
            let (set_readable : t -> bool -> unit) =
              fun (x65 : t) ->
                fun (x66 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x65) "readable"
                    (Ojs.bool_to_js x66)
            let (get_readableEncoding : t -> BufferEncoding.t_0 or_null) =
              fun (x67 : t) ->
                or_null_of_js BufferEncoding.t_0_of_js
                  (Ojs.get_prop_ascii (t_to_js x67) "readableEncoding")
            let (get_readableEnded : t -> bool) =
              fun (x69 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x69) "readableEnded")
            let (get_readableFlowing : t -> bool or_null) =
              fun (x70 : t) ->
                or_null_of_js Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x70) "readableFlowing")
            let (get_readableHighWaterMark : t -> float) =
              fun (x72 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x72) "readableHighWaterMark")
            let (get_readableLength : t -> float) =
              fun (x73 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x73) "readableLength")
            let (get_readableObjectMode : t -> bool) =
              fun (x74 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x74) "readableObjectMode")
            let (get_destroyed : t -> bool) =
              fun (x75 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x75) "destroyed")
            let (set_destroyed : t -> bool -> unit) =
              fun (x76 : t) ->
                fun (x77 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x76) "destroyed"
                    (Ojs.bool_to_js x77)
            let (create : ?opts:stream_internal_ReadableOptions -> unit -> t)
              =
              fun ?opts:(x78 : stream_internal_ReadableOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global "stream")
                             "internal") "Readable")
                       (let x79 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x78 with
                         | Some x80 ->
                             ignore
                               (Ojs.call x79 "push"
                                  [|(stream_internal_ReadableOptions_to_js
                                       x80)|])
                         | None -> ());
                        x79))
            let (_read : t -> size:float -> unit) =
              fun (x82 : t) ->
                fun ~size:(x81 : float) ->
                  ignore
                    (Ojs.call (t_to_js x82) "_read" [|(Ojs.float_to_js x81)|])
            let (read : t -> ?size:float -> unit -> any) =
              fun (x86 : t) ->
                fun ?size:(x83 : float option) ->
                  fun () ->
                    any_of_js
                      (let x87 = t_to_js x86 in
                       Ojs.call (Ojs.get_prop_ascii x87 "read") "apply"
                         [|x87;((let x84 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x83 with
                                  | Some x85 ->
                                      ignore
                                        (Ojs.call x84 "push"
                                           [|(Ojs.float_to_js x85)|])
                                  | None -> ());
                                 x84))|])
            let (setEncoding : t -> encoding:BufferEncoding.t_0 -> t) =
              fun (x89 : t) ->
                fun ~encoding:(x88 : BufferEncoding.t_0) ->
                  t_of_js
                    (Ojs.call (t_to_js x89) "setEncoding"
                       [|(BufferEncoding.t_0_to_js x88)|])
            let (pause : t -> t) =
              fun (x90 : t) -> t_of_js (Ojs.call (t_to_js x90) "pause" [||])
            let (resume : t -> t) =
              fun (x91 : t) -> t_of_js (Ojs.call (t_to_js x91) "resume" [||])
            let (isPaused : t -> bool) =
              fun (x92 : t) ->
                Ojs.bool_of_js (Ojs.call (t_to_js x92) "isPaused" [||])
            let (unpipe :
              t -> ?destination:NodeJS.WritableStream.t_0 -> unit -> t) =
              fun (x96 : t) ->
                fun ?destination:(x93 : NodeJS.WritableStream.t_0 option) ->
                  fun () ->
                    t_of_js
                      (let x97 = t_to_js x96 in
                       Ojs.call (Ojs.get_prop_ascii x97 "unpipe") "apply"
                         [|x97;((let x94 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x93 with
                                  | Some x95 ->
                                      ignore
                                        (Ojs.call x94 "push"
                                           [|(NodeJS.WritableStream.t_0_to_js
                                                x95)|])
                                  | None -> ());
                                 x94))|])
            let (unshift :
              t -> chunk:any -> ?encoding:BufferEncoding.t_0 -> unit -> unit)
              =
              fun (x102 : t) ->
                fun ~chunk:(x98 : any) ->
                  fun ?encoding:(x99 : BufferEncoding.t_0 option) ->
                    fun () ->
                      ignore
                        (let x103 = t_to_js x102 in
                         Ojs.call (Ojs.get_prop_ascii x103 "unshift") "apply"
                           [|x103;((let x100 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x100 "push"
                                         [|(any_to_js x98)|]);
                                    (match x99 with
                                     | Some x101 ->
                                         ignore
                                           (Ojs.call x100 "push"
                                              [|(BufferEncoding.t_0_to_js
                                                   x101)|])
                                     | None -> ());
                                    x100))|])
            let (wrap : t -> oldStream:NodeJS.ReadableStream.t_0 -> t) =
              fun (x105 : t) ->
                fun ~oldStream:(x104 : NodeJS.ReadableStream.t_0) ->
                  t_of_js
                    (Ojs.call (t_to_js x105) "wrap"
                       [|(NodeJS.ReadableStream.t_0_to_js x104)|])
            let (push :
              t -> chunk:any -> ?encoding:BufferEncoding.t_0 -> unit -> bool)
              =
              fun (x110 : t) ->
                fun ~chunk:(x106 : any) ->
                  fun ?encoding:(x107 : BufferEncoding.t_0 option) ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x111 = t_to_js x110 in
                         Ojs.call (Ojs.get_prop_ascii x111 "push") "apply"
                           [|x111;((let x108 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x108 "push"
                                         [|(any_to_js x106)|]);
                                    (match x107 with
                                     | Some x109 ->
                                         ignore
                                           (Ojs.call x108 "push"
                                              [|(BufferEncoding.t_0_to_js
                                                   x109)|])
                                     | None -> ());
                                    x108))|])
            let (_destroy :
              t ->
                error:Error.t_0 or_null ->
                  callback:(?error:Error.t_0 or_null -> unit -> unit) -> unit)
              =
              fun (x118 : t) ->
                fun ~error:(x112 : Error.t_0 or_null) ->
                  fun
                    ~callback:(x114 :
                                ?error:Error.t_0 or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x118) "_destroy"
                         [|(or_null_to_js Error.t_0_to_js x112);(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x115 :
                                                                    Ojs.t) ->
                                                                    x114
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x116 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_0_of_js
                                                                    x116)
                                                                    x115) ()))|])
            let (destroy : t -> ?error:Error.t_0 -> unit -> unit) =
              fun (x122 : t) ->
                fun ?error:(x119 : Error.t_0 option) ->
                  fun () ->
                    ignore
                      (let x123 = t_to_js x122 in
                       Ojs.call (Ojs.get_prop_ascii x123 "destroy") "apply"
                         [|x123;((let x120 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x119 with
                                   | Some x121 ->
                                       ignore
                                         (Ojs.call x120 "push"
                                            [|(Error.t_0_to_js x121)|])
                                   | None -> ());
                                  x120))|])
            let (addListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x126 : t) ->
                fun ~event:(x124 : [ `close ]) ->
                  fun ~listener:(x125 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x126) "addListener"
                         [|((match x124 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x125 ()))|])
            let (addListener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x130 : t) ->
                fun ~event:(x127 : [ `data ]) ->
                  fun ~listener:(x128 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x130) "addListener"
                         [|((match x127 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x129 :
                                                                    Ojs.t) ->
                                                                    x128
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x129)))|])
            let (addListener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x133 : t) ->
                fun ~event:(x131 : [ `end_ ]) ->
                  fun ~listener:(x132 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x133) "addListener"
                         [|((match x131 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x132 ()))|])
            let (addListener''' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x137 : t) ->
                fun ~event:(x134 : [ `error ]) ->
                  fun ~listener:(x135 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x137) "addListener"
                         [|((match x134 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x136 : Ojs.t) ->
                                x135 ~err:(Error.t_0_of_js x136)))|])
            let (addListener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x140 : t) ->
                fun ~event:(x138 : [ `pause ]) ->
                  fun ~listener:(x139 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x140) "addListener"
                         [|((match x138 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x139 ()))|])
            let (addListener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x143 : t) ->
                fun ~event:(x141 : [ `readable ]) ->
                  fun ~listener:(x142 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x143) "addListener"
                         [|((match x141 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x142 ()))|])
            let (addListener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x146 : t) ->
                fun ~event:(x144 : [ `resume ]) ->
                  fun ~listener:(x145 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x146) "addListener"
                         [|((match x144 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x145 ()))|])
            let (addListener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x152 : t) ->
                fun ~event:(x147 : symbol or_string) ->
                  fun ~listener:(x149 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x152) "addListener"
                         [|(or_string_to_js symbol_to_js x147);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x150 :
                                                                    _) ->
                                                                    x149
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x150 0)))|])
            let (emit : t -> event:[ `close ] -> bool) =
              fun (x154 : t) ->
                fun ~event:(x153 : [ `close ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x154) "emit"
                       [|((match x153 with
                           | `close -> Ojs.string_to_js "close"))|])
            let (emit' : t -> event:[ `data ] -> chunk:any -> bool) =
              fun (x157 : t) ->
                fun ~event:(x155 : [ `data ]) ->
                  fun ~chunk:(x156 : any) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x157) "emit"
                         [|((match x155 with
                             | `data -> Ojs.string_to_js "data"));(any_to_js
                                                                    x156)|])
            let (emit'' : t -> event:[ `end_ ] -> bool) =
              fun (x159 : t) ->
                fun ~event:(x158 : [ `end_ ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x159) "emit"
                       [|((match x158 with | `end_ -> Ojs.string_to_js "end"))|])
            let (emit''' : t -> event:[ `error ] -> err:Error.t_0 -> bool) =
              fun (x162 : t) ->
                fun ~event:(x160 : [ `error ]) ->
                  fun ~err:(x161 : Error.t_0) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x162) "emit"
                         [|((match x160 with
                             | `error -> Ojs.string_to_js "error"));(
                           Error.t_0_to_js x161)|])
            let (emit'''' : t -> event:[ `pause ] -> bool) =
              fun (x164 : t) ->
                fun ~event:(x163 : [ `pause ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x164) "emit"
                       [|((match x163 with
                           | `pause -> Ojs.string_to_js "pause"))|])
            let (emit''''' : t -> event:[ `readable ] -> bool) =
              fun (x166 : t) ->
                fun ~event:(x165 : [ `readable ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x166) "emit"
                       [|((match x165 with
                           | `readable -> Ojs.string_to_js "readable"))|])
            let (emit'''''' : t -> event:[ `resume ] -> bool) =
              fun (x168 : t) ->
                fun ~event:(x167 : [ `resume ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x168) "emit"
                       [|((match x167 with
                           | `resume -> Ojs.string_to_js "resume"))|])
            let (emit''''''' :
              t -> event:symbol or_string -> args:any list -> bool) =
              fun (x174 : t) ->
                fun ~event:(x169 : symbol or_string) ->
                  fun ~args:(x170 : any list) ->
                    Ojs.bool_of_js
                      (let x175 = t_to_js x174 in
                       Ojs.call (Ojs.get_prop_ascii x175 "emit") "apply"
                         [|x175;((let x171 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x171 "push"
                                       [|(or_string_to_js symbol_to_js x169)|]);
                                  List.iter
                                    (fun (x172 : any) ->
                                       ignore
                                         (Ojs.call x171 "push"
                                            [|(any_to_js x172)|])) x170;
                                  x171))|])
            let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t)
              =
              fun (x178 : t) ->
                fun ~event:(x176 : [ `close ]) ->
                  fun ~listener:(x177 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x178) "on"
                         [|((match x176 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x177 ()))|])
            let (on' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x182 : t) ->
                fun ~event:(x179 : [ `data ]) ->
                  fun ~listener:(x180 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x182) "on"
                         [|((match x179 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x181 :
                                                                    Ojs.t) ->
                                                                    x180
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x181)))|])
            let (on'' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
              =
              fun (x185 : t) ->
                fun ~event:(x183 : [ `end_ ]) ->
                  fun ~listener:(x184 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x185) "on"
                         [|((match x183 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x184 ()))|])
            let (on''' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x189 : t) ->
                fun ~event:(x186 : [ `error ]) ->
                  fun ~listener:(x187 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x189) "on"
                         [|((match x186 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x188 : Ojs.t) ->
                                x187 ~err:(Error.t_0_of_js x188)))|])
            let (on'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x192 : t) ->
                fun ~event:(x190 : [ `pause ]) ->
                  fun ~listener:(x191 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x192) "on"
                         [|((match x190 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x191 ()))|])
            let (on''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x195 : t) ->
                fun ~event:(x193 : [ `readable ]) ->
                  fun ~listener:(x194 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x195) "on"
                         [|((match x193 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x194 ()))|])
            let (on'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x198 : t) ->
                fun ~event:(x196 : [ `resume ]) ->
                  fun ~listener:(x197 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x198) "on"
                         [|((match x196 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x197 ()))|])
            let (on''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x204 : t) ->
                fun ~event:(x199 : symbol or_string) ->
                  fun ~listener:(x201 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x204) "on"
                         [|(or_string_to_js symbol_to_js x199);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x202 :
                                                                    _) ->
                                                                    x201
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x202 0)))|])
            let (once :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x207 : t) ->
                fun ~event:(x205 : [ `close ]) ->
                  fun ~listener:(x206 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x207) "once"
                         [|((match x205 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x206 ()))|])
            let (once' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x211 : t) ->
                fun ~event:(x208 : [ `data ]) ->
                  fun ~listener:(x209 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x211) "once"
                         [|((match x208 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x210 :
                                                                    Ojs.t) ->
                                                                    x209
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x210)))|])
            let (once'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x214 : t) ->
                fun ~event:(x212 : [ `end_ ]) ->
                  fun ~listener:(x213 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x214) "once"
                         [|((match x212 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x213 ()))|])
            let (once''' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x218 : t) ->
                fun ~event:(x215 : [ `error ]) ->
                  fun ~listener:(x216 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x218) "once"
                         [|((match x215 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x217 : Ojs.t) ->
                                x216 ~err:(Error.t_0_of_js x217)))|])
            let (once'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x221 : t) ->
                fun ~event:(x219 : [ `pause ]) ->
                  fun ~listener:(x220 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x221) "once"
                         [|((match x219 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x220 ()))|])
            let (once''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x224 : t) ->
                fun ~event:(x222 : [ `readable ]) ->
                  fun ~listener:(x223 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x224) "once"
                         [|((match x222 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x223 ()))|])
            let (once'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x227 : t) ->
                fun ~event:(x225 : [ `resume ]) ->
                  fun ~listener:(x226 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x227) "once"
                         [|((match x225 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x226 ()))|])
            let (once''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x233 : t) ->
                fun ~event:(x228 : symbol or_string) ->
                  fun ~listener:(x230 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x233) "once"
                         [|(or_string_to_js symbol_to_js x228);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x231 :
                                                                    _) ->
                                                                    x230
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x231 0)))|])
            let (prependListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x236 : t) ->
                fun ~event:(x234 : [ `close ]) ->
                  fun ~listener:(x235 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x236) "prependListener"
                         [|((match x234 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x235 ()))|])
            let (prependListener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x240 : t) ->
                fun ~event:(x237 : [ `data ]) ->
                  fun ~listener:(x238 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x240) "prependListener"
                         [|((match x237 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x239 :
                                                                    Ojs.t) ->
                                                                    x238
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x239)))|])
            let (prependListener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x243 : t) ->
                fun ~event:(x241 : [ `end_ ]) ->
                  fun ~listener:(x242 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x243) "prependListener"
                         [|((match x241 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x242 ()))|])
            let (prependListener''' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x247 : t) ->
                fun ~event:(x244 : [ `error ]) ->
                  fun ~listener:(x245 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x247) "prependListener"
                         [|((match x244 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x246 : Ojs.t) ->
                                x245 ~err:(Error.t_0_of_js x246)))|])
            let (prependListener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x250 : t) ->
                fun ~event:(x248 : [ `pause ]) ->
                  fun ~listener:(x249 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x250) "prependListener"
                         [|((match x248 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x249 ()))|])
            let (prependListener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x253 : t) ->
                fun ~event:(x251 : [ `readable ]) ->
                  fun ~listener:(x252 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x253) "prependListener"
                         [|((match x251 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x252 ()))|])
            let (prependListener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x256 : t) ->
                fun ~event:(x254 : [ `resume ]) ->
                  fun ~listener:(x255 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x256) "prependListener"
                         [|((match x254 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x255 ()))|])
            let (prependListener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x262 : t) ->
                fun ~event:(x257 : symbol or_string) ->
                  fun ~listener:(x259 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x262) "prependListener"
                         [|(or_string_to_js symbol_to_js x257);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x260 :
                                                                    _) ->
                                                                    x259
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x260 0)))|])
            let (prependOnceListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x265 : t) ->
                fun ~event:(x263 : [ `close ]) ->
                  fun ~listener:(x264 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x265) "prependOnceListener"
                         [|((match x263 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x264 ()))|])
            let (prependOnceListener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x269 : t) ->
                fun ~event:(x266 : [ `data ]) ->
                  fun ~listener:(x267 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x269) "prependOnceListener"
                         [|((match x266 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x268 :
                                                                    Ojs.t) ->
                                                                    x267
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x268)))|])
            let (prependOnceListener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x272 : t) ->
                fun ~event:(x270 : [ `end_ ]) ->
                  fun ~listener:(x271 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x272) "prependOnceListener"
                         [|((match x270 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x271 ()))|])
            let (prependOnceListener''' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x276 : t) ->
                fun ~event:(x273 : [ `error ]) ->
                  fun ~listener:(x274 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x276) "prependOnceListener"
                         [|((match x273 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x275 : Ojs.t) ->
                                x274 ~err:(Error.t_0_of_js x275)))|])
            let (prependOnceListener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x279 : t) ->
                fun ~event:(x277 : [ `pause ]) ->
                  fun ~listener:(x278 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x279) "prependOnceListener"
                         [|((match x277 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x278 ()))|])
            let (prependOnceListener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x282 : t) ->
                fun ~event:(x280 : [ `readable ]) ->
                  fun ~listener:(x281 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x282) "prependOnceListener"
                         [|((match x280 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x281 ()))|])
            let (prependOnceListener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x285 : t) ->
                fun ~event:(x283 : [ `resume ]) ->
                  fun ~listener:(x284 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x285) "prependOnceListener"
                         [|((match x283 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x284 ()))|])
            let (prependOnceListener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x291 : t) ->
                fun ~event:(x286 : symbol or_string) ->
                  fun ~listener:(x288 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x291) "prependOnceListener"
                         [|(or_string_to_js symbol_to_js x286);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x289 :
                                                                    _) ->
                                                                    x288
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x289 0)))|])
            let (removeListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x294 : t) ->
                fun ~event:(x292 : [ `close ]) ->
                  fun ~listener:(x293 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x294) "removeListener"
                         [|((match x292 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x293 ()))|])
            let (removeListener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x298 : t) ->
                fun ~event:(x295 : [ `data ]) ->
                  fun ~listener:(x296 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x298) "removeListener"
                         [|((match x295 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x297 :
                                                                    Ojs.t) ->
                                                                    x296
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x297)))|])
            let (removeListener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x301 : t) ->
                fun ~event:(x299 : [ `end_ ]) ->
                  fun ~listener:(x300 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x301) "removeListener"
                         [|((match x299 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x300 ()))|])
            let (removeListener''' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x305 : t) ->
                fun ~event:(x302 : [ `error ]) ->
                  fun ~listener:(x303 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x305) "removeListener"
                         [|((match x302 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x304 : Ojs.t) ->
                                x303 ~err:(Error.t_0_of_js x304)))|])
            let (removeListener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x308 : t) ->
                fun ~event:(x306 : [ `pause ]) ->
                  fun ~listener:(x307 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x308) "removeListener"
                         [|((match x306 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x307 ()))|])
            let (removeListener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x311 : t) ->
                fun ~event:(x309 : [ `readable ]) ->
                  fun ~listener:(x310 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x311) "removeListener"
                         [|((match x309 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x310 ()))|])
            let (removeListener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x314 : t) ->
                fun ~event:(x312 : [ `resume ]) ->
                  fun ~listener:(x313 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x314) "removeListener"
                         [|((match x312 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x313 ()))|])
            let (removeListener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x320 : t) ->
                fun ~event:(x315 : symbol or_string) ->
                  fun ~listener:(x317 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x320) "removeListener"
                         [|(or_string_to_js symbol_to_js x315);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x318 :
                                                                    _) ->
                                                                    x317
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x318 0)))|])
            let (cast : t -> stream_internal_Stream) =
              fun (x321 : t) -> stream_internal_Stream_of_js (t_to_js x321)
            let (cast' : t -> NodeJS.ReadableStream.t_0) =
              fun (x322 : t) ->
                NodeJS.ReadableStream.t_0_of_js (t_to_js x322)
          end
        module WritableOptions =
          struct
            type t = stream_internal_WritableOptions
            let rec t_of_js : Ojs.t -> t =
              fun (x324 : Ojs.t) ->
                stream_internal_WritableOptions_of_js x324
            and t_to_js : t -> Ojs.t =
              fun (x323 : stream_internal_WritableOptions) ->
                stream_internal_WritableOptions_to_js x323
            let (get_highWaterMark : t -> float) =
              fun (x325 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x325) "highWaterMark")
            let (set_highWaterMark : t -> float -> unit) =
              fun (x326 : t) ->
                fun (x327 : float) ->
                  Ojs.set_prop_ascii (t_to_js x326) "highWaterMark"
                    (Ojs.float_to_js x327)
            let (get_decodeStrings : t -> bool) =
              fun (x328 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x328) "decodeStrings")
            let (set_decodeStrings : t -> bool -> unit) =
              fun (x329 : t) ->
                fun (x330 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x329) "decodeStrings"
                    (Ojs.bool_to_js x330)
            let (get_defaultEncoding : t -> BufferEncoding.t_0) =
              fun (x331 : t) ->
                BufferEncoding.t_0_of_js
                  (Ojs.get_prop_ascii (t_to_js x331) "defaultEncoding")
            let (set_defaultEncoding : t -> BufferEncoding.t_0 -> unit) =
              fun (x332 : t) ->
                fun (x333 : BufferEncoding.t_0) ->
                  Ojs.set_prop_ascii (t_to_js x332) "defaultEncoding"
                    (BufferEncoding.t_0_to_js x333)
            let (get_objectMode : t -> bool) =
              fun (x334 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x334) "objectMode")
            let (set_objectMode : t -> bool -> unit) =
              fun (x335 : t) ->
                fun (x336 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x335) "objectMode"
                    (Ojs.bool_to_js x336)
            let (get_emitClose : t -> bool) =
              fun (x337 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x337) "emitClose")
            let (set_emitClose : t -> bool -> unit) =
              fun (x338 : t) ->
                fun (x339 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x338) "emitClose"
                    (Ojs.bool_to_js x339)
            let (write :
              t ->
                this:stream_internal_Writable ->
                  chunk:any ->
                    encoding:BufferEncoding.t_0 ->
                      callback:(?error:Error.t_0 or_null -> unit -> unit) ->
                        unit)
              =
              fun (x347 : t) ->
                fun ~this:(x340 : stream_internal_Writable) ->
                  fun ~chunk:(x341 : any) ->
                    fun ~encoding:(x342 : BufferEncoding.t_0) ->
                      fun
                        ~callback:(x343 :
                                    ?error:Error.t_0 or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x347) "write"
                             [|(stream_internal_Writable_to_js x340);(
                               any_to_js x341);(BufferEncoding.t_0_to_js x342);(
                               Ojs.fun_to_js 1
                                 (fun (x344 : Ojs.t) ->
                                    x343
                                      ?error:(Ojs.option_of_js
                                                (fun (x345 : Ojs.t) ->
                                                   or_null_of_js
                                                     Error.t_0_of_js x345)
                                                x344) ()))|])
            let (writev :
              t ->
                this:stream_internal_Writable ->
                  chunks:anonymous_interface_0 list ->
                    callback:(?error:Error.t_0 or_null -> unit -> unit) ->
                      unit)
              =
              fun (x355 : t) ->
                fun ~this:(x348 : stream_internal_Writable) ->
                  fun ~chunks:(x349 : anonymous_interface_0 list) ->
                    fun
                      ~callback:(x351 :
                                  ?error:Error.t_0 or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x355) "writev"
                           [|(stream_internal_Writable_to_js x348);(Ojs.list_to_js
                                                                    anonymous_interface_0_to_js
                                                                    x349);(
                             Ojs.fun_to_js 1
                               (fun (x352 : Ojs.t) ->
                                  x351
                                    ?error:(Ojs.option_of_js
                                              (fun (x353 : Ojs.t) ->
                                                 or_null_of_js
                                                   Error.t_0_of_js x353) x352)
                                    ()))|])
            let (destroy :
              t ->
                this:stream_internal_Writable ->
                  error:Error.t_0 or_null ->
                    callback:(error:Error.t_0 or_null -> unit) -> unit)
              =
              fun (x362 : t) ->
                fun ~this:(x356 : stream_internal_Writable) ->
                  fun ~error:(x357 : Error.t_0 or_null) ->
                    fun ~callback:(x359 : error:Error.t_0 or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x362) "destroy"
                           [|(stream_internal_Writable_to_js x356);(or_null_to_js
                                                                    Error.t_0_to_js
                                                                    x357);(
                             Ojs.fun_to_js 1
                               (fun (x360 : Ojs.t) ->
                                  x359
                                    ~error:(or_null_of_js Error.t_0_of_js
                                              x360)))|])
            let (final :
              t ->
                this:stream_internal_Writable ->
                  callback:(?error:Error.t_0 or_null -> unit -> unit) -> unit)
              =
              fun (x368 : t) ->
                fun ~this:(x363 : stream_internal_Writable) ->
                  fun
                    ~callback:(x364 :
                                ?error:Error.t_0 or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x368) "final"
                         [|(stream_internal_Writable_to_js x363);(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x365 :
                                                                    Ojs.t) ->
                                                                    x364
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x366 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_0_of_js
                                                                    x366)
                                                                    x365) ()))|])
            let (get_autoDestroy : t -> bool) =
              fun (x369 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x369) "autoDestroy")
            let (set_autoDestroy : t -> bool -> unit) =
              fun (x370 : t) ->
                fun (x371 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x370) "autoDestroy"
                    (Ojs.bool_to_js x371)
          end
        module Writable =
          struct
            type t = stream_internal_Writable
            let rec t_of_js : Ojs.t -> t =
              fun (x373 : Ojs.t) -> stream_internal_Writable_of_js x373
            and t_to_js : t -> Ojs.t =
              fun (x372 : stream_internal_Writable) ->
                stream_internal_Writable_to_js x372
            let (get_writable : t -> bool) =
              fun (x374 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x374) "writable")
            let (get_writableEnded : t -> bool) =
              fun (x375 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x375) "writableEnded")
            let (get_writableFinished : t -> bool) =
              fun (x376 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x376) "writableFinished")
            let (get_writableHighWaterMark : t -> float) =
              fun (x377 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x377) "writableHighWaterMark")
            let (get_writableLength : t -> float) =
              fun (x378 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x378) "writableLength")
            let (get_writableObjectMode : t -> bool) =
              fun (x379 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x379) "writableObjectMode")
            let (get_writableCorked : t -> float) =
              fun (x380 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x380) "writableCorked")
            let (get_destroyed : t -> bool) =
              fun (x381 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x381) "destroyed")
            let (set_destroyed : t -> bool -> unit) =
              fun (x382 : t) ->
                fun (x383 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x382) "destroyed"
                    (Ojs.bool_to_js x383)
            let (create : ?opts:stream_internal_WritableOptions -> unit -> t)
              =
              fun ?opts:(x384 : stream_internal_WritableOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global "stream")
                             "internal") "Writable")
                       (let x385 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x384 with
                         | Some x386 ->
                             ignore
                               (Ojs.call x385 "push"
                                  [|(stream_internal_WritableOptions_to_js
                                       x386)|])
                         | None -> ());
                        x385))
            let (_write :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t_0 ->
                    callback:(?error:Error.t_0 or_null -> unit -> unit) ->
                      unit)
              =
              fun (x393 : t) ->
                fun ~chunk:(x387 : any) ->
                  fun ~encoding:(x388 : BufferEncoding.t_0) ->
                    fun
                      ~callback:(x389 :
                                  ?error:Error.t_0 or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x393) "_write"
                           [|(any_to_js x387);(BufferEncoding.t_0_to_js x388);(
                             Ojs.fun_to_js 1
                               (fun (x390 : Ojs.t) ->
                                  x389
                                    ?error:(Ojs.option_of_js
                                              (fun (x391 : Ojs.t) ->
                                                 or_null_of_js
                                                   Error.t_0_of_js x391) x390)
                                    ()))|])
            let (_writev :
              t ->
                chunks:anonymous_interface_0 list ->
                  callback:(?error:Error.t_0 or_null -> unit -> unit) -> unit)
              =
              fun (x400 : t) ->
                fun ~chunks:(x394 : anonymous_interface_0 list) ->
                  fun
                    ~callback:(x396 :
                                ?error:Error.t_0 or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x400) "_writev"
                         [|(Ojs.list_to_js anonymous_interface_0_to_js x394);(
                           Ojs.fun_to_js 1
                             (fun (x397 : Ojs.t) ->
                                x396
                                  ?error:(Ojs.option_of_js
                                            (fun (x398 : Ojs.t) ->
                                               or_null_of_js Error.t_0_of_js
                                                 x398) x397) ()))|])
            let (_destroy :
              t ->
                error:Error.t_0 or_null ->
                  callback:(?error:Error.t_0 or_null -> unit -> unit) -> unit)
              =
              fun (x407 : t) ->
                fun ~error:(x401 : Error.t_0 or_null) ->
                  fun
                    ~callback:(x403 :
                                ?error:Error.t_0 or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x407) "_destroy"
                         [|(or_null_to_js Error.t_0_to_js x401);(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x404 :
                                                                    Ojs.t) ->
                                                                    x403
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x405 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_0_of_js
                                                                    x405)
                                                                    x404) ()))|])
            let (_final :
              t ->
                callback:(?error:Error.t_0 or_null -> unit -> unit) -> unit)
              =
              fun (x412 : t) ->
                fun
                  ~callback:(x408 : ?error:Error.t_0 or_null -> unit -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x412) "_final"
                       [|(Ojs.fun_to_js 1
                            (fun (x409 : Ojs.t) ->
                               x408
                                 ?error:(Ojs.option_of_js
                                           (fun (x410 : Ojs.t) ->
                                              or_null_of_js Error.t_0_of_js
                                                x410) x409) ()))|])
            let (write :
              t ->
                chunk:any ->
                  ?cb:(error:Error.t_0 or_null_or_undefined -> unit) ->
                    unit -> bool)
              =
              fun (x419 : t) ->
                fun ~chunk:(x413 : any) ->
                  fun
                    ?cb:(x414 :
                          (error:Error.t_0 or_null_or_undefined -> unit)
                            option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x420 = t_to_js x419 in
                         Ojs.call (Ojs.get_prop_ascii x420 "write") "apply"
                           [|x420;((let x415 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x415 "push"
                                         [|(any_to_js x413)|]);
                                    (match x414 with
                                     | Some x416 ->
                                         ignore
                                           (Ojs.call x415 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x417 : Ojs.t) ->
                                                      x416
                                                        ~error:(or_null_or_undefined_of_js
                                                                  Error.t_0_of_js
                                                                  x417)))|])
                                     | None -> ());
                                    x415))|])
            let (write' :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t_0 ->
                    ?cb:(error:Error.t_0 or_null_or_undefined -> unit) ->
                      unit -> bool)
              =
              fun (x428 : t) ->
                fun ~chunk:(x421 : any) ->
                  fun ~encoding:(x422 : BufferEncoding.t_0) ->
                    fun
                      ?cb:(x423 :
                            (error:Error.t_0 or_null_or_undefined -> unit)
                              option)
                      ->
                      fun () ->
                        Ojs.bool_of_js
                          (let x429 = t_to_js x428 in
                           Ojs.call (Ojs.get_prop_ascii x429 "write") "apply"
                             [|x429;((let x424 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x424 "push"
                                           [|(any_to_js x421)|]);
                                      ignore
                                        (Ojs.call x424 "push"
                                           [|(BufferEncoding.t_0_to_js x422)|]);
                                      (match x423 with
                                       | Some x425 ->
                                           ignore
                                             (Ojs.call x424 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x426 : Ojs.t) ->
                                                        x425
                                                          ~error:(or_null_or_undefined_of_js
                                                                    Error.t_0_of_js
                                                                    x426)))|])
                                       | None -> ());
                                      x424))|])
            let (setDefaultEncoding : t -> encoding:BufferEncoding.t_0 -> t)
              =
              fun (x431 : t) ->
                fun ~encoding:(x430 : BufferEncoding.t_0) ->
                  t_of_js
                    (Ojs.call (t_to_js x431) "setDefaultEncoding"
                       [|(BufferEncoding.t_0_to_js x430)|])
            let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x435 : t) ->
                fun ?cb:(x432 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x436 = t_to_js x435 in
                       Ojs.call (Ojs.get_prop_ascii x436 "end") "apply"
                         [|x436;((let x433 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x432 with
                                   | Some x434 ->
                                       ignore
                                         (Ojs.call x433 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x434 ()))|])
                                   | None -> ());
                                  x433))|])
            let (end_' :
              t -> chunk:any -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x441 : t) ->
                fun ~chunk:(x437 : any) ->
                  fun ?cb:(x438 : (unit -> unit) option) ->
                    fun () ->
                      ignore
                        (let x442 = t_to_js x441 in
                         Ojs.call (Ojs.get_prop_ascii x442 "end") "apply"
                           [|x442;((let x439 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x439 "push"
                                         [|(any_to_js x437)|]);
                                    (match x438 with
                                     | Some x440 ->
                                         ignore
                                           (Ojs.call x439 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x440 ()))|])
                                     | None -> ());
                                    x439))|])
            let (end_'' :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t_0 ->
                    ?cb:(unit -> unit) -> unit -> unit)
              =
              fun (x448 : t) ->
                fun ~chunk:(x443 : any) ->
                  fun ~encoding:(x444 : BufferEncoding.t_0) ->
                    fun ?cb:(x445 : (unit -> unit) option) ->
                      fun () ->
                        ignore
                          (let x449 = t_to_js x448 in
                           Ojs.call (Ojs.get_prop_ascii x449 "end") "apply"
                             [|x449;((let x446 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x446 "push"
                                           [|(any_to_js x443)|]);
                                      ignore
                                        (Ojs.call x446 "push"
                                           [|(BufferEncoding.t_0_to_js x444)|]);
                                      (match x445 with
                                       | Some x447 ->
                                           ignore
                                             (Ojs.call x446 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun _ -> x447 ()))|])
                                       | None -> ());
                                      x446))|])
            let (cork : t -> unit) =
              fun (x450 : t) -> ignore (Ojs.call (t_to_js x450) "cork" [||])
            let (uncork : t -> unit) =
              fun (x451 : t) ->
                ignore (Ojs.call (t_to_js x451) "uncork" [||])
            let (destroy : t -> ?error:Error.t_0 -> unit -> unit) =
              fun (x455 : t) ->
                fun ?error:(x452 : Error.t_0 option) ->
                  fun () ->
                    ignore
                      (let x456 = t_to_js x455 in
                       Ojs.call (Ojs.get_prop_ascii x456 "destroy") "apply"
                         [|x456;((let x453 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x452 with
                                   | Some x454 ->
                                       ignore
                                         (Ojs.call x453 "push"
                                            [|(Error.t_0_to_js x454)|])
                                   | None -> ());
                                  x453))|])
            let (addListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x459 : t) ->
                fun ~event:(x457 : [ `close ]) ->
                  fun ~listener:(x458 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x459) "addListener"
                         [|((match x457 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x458 ()))|])
            let (addListener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x462 : t) ->
                fun ~event:(x460 : [ `drain ]) ->
                  fun ~listener:(x461 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x462) "addListener"
                         [|((match x460 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x461 ()))|])
            let (addListener'' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x466 : t) ->
                fun ~event:(x463 : [ `error ]) ->
                  fun ~listener:(x464 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x466) "addListener"
                         [|((match x463 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x465 : Ojs.t) ->
                                x464 ~err:(Error.t_0_of_js x465)))|])
            let (addListener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x469 : t) ->
                fun ~event:(x467 : [ `finish ]) ->
                  fun ~listener:(x468 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x469) "addListener"
                         [|((match x467 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x468 ()))|])
            let (addListener'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x473 : t) ->
                fun ~event:(x470 : [ `pipe ]) ->
                  fun ~listener:(x471 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x473) "addListener"
                         [|((match x470 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x472 :
                                                                    Ojs.t) ->
                                                                    x471
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x472)))|])
            let (addListener''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x477 : t) ->
                fun ~event:(x474 : [ `unpipe ]) ->
                  fun ~listener:(x475 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x477) "addListener"
                         [|((match x474 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x476 : Ojs.t) ->
                                x475
                                  ~src:(stream_internal_Readable_of_js x476)))|])
            let (addListener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x483 : t) ->
                fun ~event:(x478 : symbol or_string) ->
                  fun ~listener:(x480 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x483) "addListener"
                         [|(or_string_to_js symbol_to_js x478);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x481 :
                                                                    _) ->
                                                                    x480
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x481 0)))|])
            let (emit : t -> event:[ `close ] -> bool) =
              fun (x485 : t) ->
                fun ~event:(x484 : [ `close ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x485) "emit"
                       [|((match x484 with
                           | `close -> Ojs.string_to_js "close"))|])
            let (emit' : t -> event:[ `drain ] -> bool) =
              fun (x487 : t) ->
                fun ~event:(x486 : [ `drain ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x487) "emit"
                       [|((match x486 with
                           | `drain -> Ojs.string_to_js "drain"))|])
            let (emit'' : t -> event:[ `error ] -> err:Error.t_0 -> bool) =
              fun (x490 : t) ->
                fun ~event:(x488 : [ `error ]) ->
                  fun ~err:(x489 : Error.t_0) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x490) "emit"
                         [|((match x488 with
                             | `error -> Ojs.string_to_js "error"));(
                           Error.t_0_to_js x489)|])
            let (emit''' : t -> event:[ `finish ] -> bool) =
              fun (x492 : t) ->
                fun ~event:(x491 : [ `finish ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x492) "emit"
                       [|((match x491 with
                           | `finish -> Ojs.string_to_js "finish"))|])
            let (emit'''' :
              t -> event:[ `pipe ] -> src:stream_internal_Readable -> bool) =
              fun (x495 : t) ->
                fun ~event:(x493 : [ `pipe ]) ->
                  fun ~src:(x494 : stream_internal_Readable) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x495) "emit"
                         [|((match x493 with
                             | `pipe -> Ojs.string_to_js "pipe"));(stream_internal_Readable_to_js
                                                                    x494)|])
            let (emit''''' :
              t -> event:[ `unpipe ] -> src:stream_internal_Readable -> bool)
              =
              fun (x498 : t) ->
                fun ~event:(x496 : [ `unpipe ]) ->
                  fun ~src:(x497 : stream_internal_Readable) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x498) "emit"
                         [|((match x496 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           stream_internal_Readable_to_js x497)|])
            let (emit'''''' :
              t -> event:symbol or_string -> args:any list -> bool) =
              fun (x504 : t) ->
                fun ~event:(x499 : symbol or_string) ->
                  fun ~args:(x500 : any list) ->
                    Ojs.bool_of_js
                      (let x505 = t_to_js x504 in
                       Ojs.call (Ojs.get_prop_ascii x505 "emit") "apply"
                         [|x505;((let x501 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x501 "push"
                                       [|(or_string_to_js symbol_to_js x499)|]);
                                  List.iter
                                    (fun (x502 : any) ->
                                       ignore
                                         (Ojs.call x501 "push"
                                            [|(any_to_js x502)|])) x500;
                                  x501))|])
            let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t)
              =
              fun (x508 : t) ->
                fun ~event:(x506 : [ `close ]) ->
                  fun ~listener:(x507 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x508) "on"
                         [|((match x506 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x507 ()))|])
            let (on' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t)
              =
              fun (x511 : t) ->
                fun ~event:(x509 : [ `drain ]) ->
                  fun ~listener:(x510 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x511) "on"
                         [|((match x509 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x510 ()))|])
            let (on'' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x515 : t) ->
                fun ~event:(x512 : [ `error ]) ->
                  fun ~listener:(x513 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x515) "on"
                         [|((match x512 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x514 : Ojs.t) ->
                                x513 ~err:(Error.t_0_of_js x514)))|])
            let (on''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x518 : t) ->
                fun ~event:(x516 : [ `finish ]) ->
                  fun ~listener:(x517 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x518) "on"
                         [|((match x516 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x517 ()))|])
            let (on'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x522 : t) ->
                fun ~event:(x519 : [ `pipe ]) ->
                  fun ~listener:(x520 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x522) "on"
                         [|((match x519 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x521 :
                                                                    Ojs.t) ->
                                                                    x520
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x521)))|])
            let (on''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x526 : t) ->
                fun ~event:(x523 : [ `unpipe ]) ->
                  fun ~listener:(x524 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x526) "on"
                         [|((match x523 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x525 : Ojs.t) ->
                                x524
                                  ~src:(stream_internal_Readable_of_js x525)))|])
            let (on'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x532 : t) ->
                fun ~event:(x527 : symbol or_string) ->
                  fun ~listener:(x529 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x532) "on"
                         [|(or_string_to_js symbol_to_js x527);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x530 :
                                                                    _) ->
                                                                    x529
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x530 0)))|])
            let (once :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x535 : t) ->
                fun ~event:(x533 : [ `close ]) ->
                  fun ~listener:(x534 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x535) "once"
                         [|((match x533 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x534 ()))|])
            let (once' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x538 : t) ->
                fun ~event:(x536 : [ `drain ]) ->
                  fun ~listener:(x537 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x538) "once"
                         [|((match x536 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x537 ()))|])
            let (once'' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x542 : t) ->
                fun ~event:(x539 : [ `error ]) ->
                  fun ~listener:(x540 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x542) "once"
                         [|((match x539 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x541 : Ojs.t) ->
                                x540 ~err:(Error.t_0_of_js x541)))|])
            let (once''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x545 : t) ->
                fun ~event:(x543 : [ `finish ]) ->
                  fun ~listener:(x544 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x545) "once"
                         [|((match x543 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x544 ()))|])
            let (once'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x549 : t) ->
                fun ~event:(x546 : [ `pipe ]) ->
                  fun ~listener:(x547 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x549) "once"
                         [|((match x546 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x548 :
                                                                    Ojs.t) ->
                                                                    x547
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x548)))|])
            let (once''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x553 : t) ->
                fun ~event:(x550 : [ `unpipe ]) ->
                  fun ~listener:(x551 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x553) "once"
                         [|((match x550 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x552 : Ojs.t) ->
                                x551
                                  ~src:(stream_internal_Readable_of_js x552)))|])
            let (once'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x559 : t) ->
                fun ~event:(x554 : symbol or_string) ->
                  fun ~listener:(x556 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x559) "once"
                         [|(or_string_to_js symbol_to_js x554);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x557 :
                                                                    _) ->
                                                                    x556
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x557 0)))|])
            let (prependListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x562 : t) ->
                fun ~event:(x560 : [ `close ]) ->
                  fun ~listener:(x561 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x562) "prependListener"
                         [|((match x560 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x561 ()))|])
            let (prependListener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x565 : t) ->
                fun ~event:(x563 : [ `drain ]) ->
                  fun ~listener:(x564 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x565) "prependListener"
                         [|((match x563 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x564 ()))|])
            let (prependListener'' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x569 : t) ->
                fun ~event:(x566 : [ `error ]) ->
                  fun ~listener:(x567 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x569) "prependListener"
                         [|((match x566 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x568 : Ojs.t) ->
                                x567 ~err:(Error.t_0_of_js x568)))|])
            let (prependListener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x572 : t) ->
                fun ~event:(x570 : [ `finish ]) ->
                  fun ~listener:(x571 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x572) "prependListener"
                         [|((match x570 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x571 ()))|])
            let (prependListener'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x576 : t) ->
                fun ~event:(x573 : [ `pipe ]) ->
                  fun ~listener:(x574 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x576) "prependListener"
                         [|((match x573 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x575 :
                                                                    Ojs.t) ->
                                                                    x574
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x575)))|])
            let (prependListener''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x580 : t) ->
                fun ~event:(x577 : [ `unpipe ]) ->
                  fun ~listener:(x578 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x580) "prependListener"
                         [|((match x577 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x579 : Ojs.t) ->
                                x578
                                  ~src:(stream_internal_Readable_of_js x579)))|])
            let (prependListener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x586 : t) ->
                fun ~event:(x581 : symbol or_string) ->
                  fun ~listener:(x583 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x586) "prependListener"
                         [|(or_string_to_js symbol_to_js x581);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x584 :
                                                                    _) ->
                                                                    x583
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x584 0)))|])
            let (prependOnceListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x589 : t) ->
                fun ~event:(x587 : [ `close ]) ->
                  fun ~listener:(x588 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x589) "prependOnceListener"
                         [|((match x587 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x588 ()))|])
            let (prependOnceListener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x592 : t) ->
                fun ~event:(x590 : [ `drain ]) ->
                  fun ~listener:(x591 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x592) "prependOnceListener"
                         [|((match x590 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x591 ()))|])
            let (prependOnceListener'' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x596 : t) ->
                fun ~event:(x593 : [ `error ]) ->
                  fun ~listener:(x594 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x596) "prependOnceListener"
                         [|((match x593 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x595 : Ojs.t) ->
                                x594 ~err:(Error.t_0_of_js x595)))|])
            let (prependOnceListener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x599 : t) ->
                fun ~event:(x597 : [ `finish ]) ->
                  fun ~listener:(x598 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x599) "prependOnceListener"
                         [|((match x597 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x598 ()))|])
            let (prependOnceListener'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x603 : t) ->
                fun ~event:(x600 : [ `pipe ]) ->
                  fun ~listener:(x601 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x603) "prependOnceListener"
                         [|((match x600 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x602 :
                                                                    Ojs.t) ->
                                                                    x601
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x602)))|])
            let (prependOnceListener''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x607 : t) ->
                fun ~event:(x604 : [ `unpipe ]) ->
                  fun ~listener:(x605 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x607) "prependOnceListener"
                         [|((match x604 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x606 : Ojs.t) ->
                                x605
                                  ~src:(stream_internal_Readable_of_js x606)))|])
            let (prependOnceListener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x613 : t) ->
                fun ~event:(x608 : symbol or_string) ->
                  fun ~listener:(x610 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x613) "prependOnceListener"
                         [|(or_string_to_js symbol_to_js x608);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x611 :
                                                                    _) ->
                                                                    x610
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x611 0)))|])
            let (removeListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x616 : t) ->
                fun ~event:(x614 : [ `close ]) ->
                  fun ~listener:(x615 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x616) "removeListener"
                         [|((match x614 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x615 ()))|])
            let (removeListener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x619 : t) ->
                fun ~event:(x617 : [ `drain ]) ->
                  fun ~listener:(x618 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x619) "removeListener"
                         [|((match x617 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x618 ()))|])
            let (removeListener'' :
              t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t)
              =
              fun (x623 : t) ->
                fun ~event:(x620 : [ `error ]) ->
                  fun ~listener:(x621 : err:Error.t_0 -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x623) "removeListener"
                         [|((match x620 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x622 : Ojs.t) ->
                                x621 ~err:(Error.t_0_of_js x622)))|])
            let (removeListener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x626 : t) ->
                fun ~event:(x624 : [ `finish ]) ->
                  fun ~listener:(x625 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x626) "removeListener"
                         [|((match x624 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x625 ()))|])
            let (removeListener'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x630 : t) ->
                fun ~event:(x627 : [ `pipe ]) ->
                  fun ~listener:(x628 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x630) "removeListener"
                         [|((match x627 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x629 :
                                                                    Ojs.t) ->
                                                                    x628
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x629)))|])
            let (removeListener''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x634 : t) ->
                fun ~event:(x631 : [ `unpipe ]) ->
                  fun ~listener:(x632 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x634) "removeListener"
                         [|((match x631 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x633 : Ojs.t) ->
                                x632
                                  ~src:(stream_internal_Readable_of_js x633)))|])
            let (removeListener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x640 : t) ->
                fun ~event:(x635 : symbol or_string) ->
                  fun ~listener:(x637 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x640) "removeListener"
                         [|(or_string_to_js symbol_to_js x635);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x638 :
                                                                    _) ->
                                                                    x637
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x638 0)))|])
            let (cast : t -> stream_internal_Stream) =
              fun (x641 : t) -> stream_internal_Stream_of_js (t_to_js x641)
            let (cast' : t -> NodeJS.WritableStream.t_0) =
              fun (x642 : t) ->
                NodeJS.WritableStream.t_0_of_js (t_to_js x642)
          end
        module DuplexOptions =
          struct
            type t = stream_internal_DuplexOptions
            let rec t_of_js : Ojs.t -> t =
              fun (x644 : Ojs.t) -> stream_internal_DuplexOptions_of_js x644
            and t_to_js : t -> Ojs.t =
              fun (x643 : stream_internal_DuplexOptions) ->
                stream_internal_DuplexOptions_to_js x643
            let (get_allowHalfOpen : t -> bool) =
              fun (x645 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x645) "allowHalfOpen")
            let (set_allowHalfOpen : t -> bool -> unit) =
              fun (x646 : t) ->
                fun (x647 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x646) "allowHalfOpen"
                    (Ojs.bool_to_js x647)
            let (get_readableObjectMode : t -> bool) =
              fun (x648 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x648) "readableObjectMode")
            let (set_readableObjectMode : t -> bool -> unit) =
              fun (x649 : t) ->
                fun (x650 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x649) "readableObjectMode"
                    (Ojs.bool_to_js x650)
            let (get_writableObjectMode : t -> bool) =
              fun (x651 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x651) "writableObjectMode")
            let (set_writableObjectMode : t -> bool -> unit) =
              fun (x652 : t) ->
                fun (x653 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x652) "writableObjectMode"
                    (Ojs.bool_to_js x653)
            let (get_readableHighWaterMark : t -> float) =
              fun (x654 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x654) "readableHighWaterMark")
            let (set_readableHighWaterMark : t -> float -> unit) =
              fun (x655 : t) ->
                fun (x656 : float) ->
                  Ojs.set_prop_ascii (t_to_js x655) "readableHighWaterMark"
                    (Ojs.float_to_js x656)
            let (get_writableHighWaterMark : t -> float) =
              fun (x657 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x657) "writableHighWaterMark")
            let (set_writableHighWaterMark : t -> float -> unit) =
              fun (x658 : t) ->
                fun (x659 : float) ->
                  Ojs.set_prop_ascii (t_to_js x658) "writableHighWaterMark"
                    (Ojs.float_to_js x659)
            let (get_writableCorked : t -> float) =
              fun (x660 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x660) "writableCorked")
            let (set_writableCorked : t -> float -> unit) =
              fun (x661 : t) ->
                fun (x662 : float) ->
                  Ojs.set_prop_ascii (t_to_js x661) "writableCorked"
                    (Ojs.float_to_js x662)
            let (read :
              t -> this:stream_internal_Duplex -> size:float -> unit) =
              fun (x665 : t) ->
                fun ~this:(x663 : stream_internal_Duplex) ->
                  fun ~size:(x664 : float) ->
                    ignore
                      (Ojs.call (t_to_js x665) "read"
                         [|(stream_internal_Duplex_to_js x663);(Ojs.float_to_js
                                                                  x664)|])
            let (write :
              t ->
                this:stream_internal_Duplex ->
                  chunk:any ->
                    encoding:BufferEncoding.t_0 ->
                      callback:(?error:Error.t_0 or_null -> unit -> unit) ->
                        unit)
              =
              fun (x673 : t) ->
                fun ~this:(x666 : stream_internal_Duplex) ->
                  fun ~chunk:(x667 : any) ->
                    fun ~encoding:(x668 : BufferEncoding.t_0) ->
                      fun
                        ~callback:(x669 :
                                    ?error:Error.t_0 or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x673) "write"
                             [|(stream_internal_Duplex_to_js x666);(any_to_js
                                                                    x667);(
                               BufferEncoding.t_0_to_js x668);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x670 :
                                                                    Ojs.t) ->
                                                                    x669
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x671 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_0_of_js
                                                                    x671)
                                                                    x670) ()))|])
            let (writev :
              t ->
                this:stream_internal_Duplex ->
                  chunks:anonymous_interface_0 list ->
                    callback:(?error:Error.t_0 or_null -> unit -> unit) ->
                      unit)
              =
              fun (x681 : t) ->
                fun ~this:(x674 : stream_internal_Duplex) ->
                  fun ~chunks:(x675 : anonymous_interface_0 list) ->
                    fun
                      ~callback:(x677 :
                                  ?error:Error.t_0 or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x681) "writev"
                           [|(stream_internal_Duplex_to_js x674);(Ojs.list_to_js
                                                                    anonymous_interface_0_to_js
                                                                    x675);(
                             Ojs.fun_to_js 1
                               (fun (x678 : Ojs.t) ->
                                  x677
                                    ?error:(Ojs.option_of_js
                                              (fun (x679 : Ojs.t) ->
                                                 or_null_of_js
                                                   Error.t_0_of_js x679) x678)
                                    ()))|])
            let (final :
              t ->
                this:stream_internal_Duplex ->
                  callback:(?error:Error.t_0 or_null -> unit -> unit) -> unit)
              =
              fun (x687 : t) ->
                fun ~this:(x682 : stream_internal_Duplex) ->
                  fun
                    ~callback:(x683 :
                                ?error:Error.t_0 or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x687) "final"
                         [|(stream_internal_Duplex_to_js x682);(Ojs.fun_to_js
                                                                  1
                                                                  (fun
                                                                    (x684 :
                                                                    Ojs.t) ->
                                                                    x683
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x685 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_0_of_js
                                                                    x685)
                                                                    x684) ()))|])
            let (destroy :
              t ->
                this:stream_internal_Duplex ->
                  error:Error.t_0 or_null ->
                    callback:(error:Error.t_0 or_null -> unit) -> unit)
              =
              fun (x694 : t) ->
                fun ~this:(x688 : stream_internal_Duplex) ->
                  fun ~error:(x689 : Error.t_0 or_null) ->
                    fun ~callback:(x691 : error:Error.t_0 or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x694) "destroy"
                           [|(stream_internal_Duplex_to_js x688);(or_null_to_js
                                                                    Error.t_0_to_js
                                                                    x689);(
                             Ojs.fun_to_js 1
                               (fun (x692 : Ojs.t) ->
                                  x691
                                    ~error:(or_null_of_js Error.t_0_of_js
                                              x692)))|])
            let (cast : t -> stream_internal_ReadableOptions) =
              fun (x695 : t) ->
                stream_internal_ReadableOptions_of_js (t_to_js x695)
            let (cast' : t -> stream_internal_WritableOptions) =
              fun (x696 : t) ->
                stream_internal_WritableOptions_of_js (t_to_js x696)
          end
        module Duplex =
          struct
            type t = stream_internal_Duplex
            let rec t_of_js : Ojs.t -> t =
              fun (x698 : Ojs.t) -> stream_internal_Duplex_of_js x698
            and t_to_js : t -> Ojs.t =
              fun (x697 : stream_internal_Duplex) ->
                stream_internal_Duplex_to_js x697
            let (get_writable : t -> bool) =
              fun (x699 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x699) "writable")
            let (get_writableEnded : t -> bool) =
              fun (x700 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x700) "writableEnded")
            let (get_writableFinished : t -> bool) =
              fun (x701 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x701) "writableFinished")
            let (get_writableHighWaterMark : t -> float) =
              fun (x702 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x702) "writableHighWaterMark")
            let (get_writableLength : t -> float) =
              fun (x703 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x703) "writableLength")
            let (get_writableObjectMode : t -> bool) =
              fun (x704 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x704) "writableObjectMode")
            let (get_writableCorked : t -> float) =
              fun (x705 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x705) "writableCorked")
            let (create : ?opts:stream_internal_DuplexOptions -> unit -> t) =
              fun ?opts:(x706 : stream_internal_DuplexOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global "stream")
                             "internal") "Duplex")
                       (let x707 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x706 with
                         | Some x708 ->
                             ignore
                               (Ojs.call x707 "push"
                                  [|(stream_internal_DuplexOptions_to_js x708)|])
                         | None -> ());
                        x707))
            let (_write :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t_0 ->
                    callback:(?error:Error.t_0 or_null -> unit -> unit) ->
                      unit)
              =
              fun (x715 : t) ->
                fun ~chunk:(x709 : any) ->
                  fun ~encoding:(x710 : BufferEncoding.t_0) ->
                    fun
                      ~callback:(x711 :
                                  ?error:Error.t_0 or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x715) "_write"
                           [|(any_to_js x709);(BufferEncoding.t_0_to_js x710);(
                             Ojs.fun_to_js 1
                               (fun (x712 : Ojs.t) ->
                                  x711
                                    ?error:(Ojs.option_of_js
                                              (fun (x713 : Ojs.t) ->
                                                 or_null_of_js
                                                   Error.t_0_of_js x713) x712)
                                    ()))|])
            let (_writev :
              t ->
                chunks:anonymous_interface_0 list ->
                  callback:(?error:Error.t_0 or_null -> unit -> unit) -> unit)
              =
              fun (x722 : t) ->
                fun ~chunks:(x716 : anonymous_interface_0 list) ->
                  fun
                    ~callback:(x718 :
                                ?error:Error.t_0 or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x722) "_writev"
                         [|(Ojs.list_to_js anonymous_interface_0_to_js x716);(
                           Ojs.fun_to_js 1
                             (fun (x719 : Ojs.t) ->
                                x718
                                  ?error:(Ojs.option_of_js
                                            (fun (x720 : Ojs.t) ->
                                               or_null_of_js Error.t_0_of_js
                                                 x720) x719) ()))|])
            let (_destroy :
              t ->
                error:Error.t_0 or_null ->
                  callback:(error:Error.t_0 or_null -> unit) -> unit)
              =
              fun (x728 : t) ->
                fun ~error:(x723 : Error.t_0 or_null) ->
                  fun ~callback:(x725 : error:Error.t_0 or_null -> unit) ->
                    ignore
                      (Ojs.call (t_to_js x728) "_destroy"
                         [|(or_null_to_js Error.t_0_to_js x723);(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x726 :
                                                                    Ojs.t) ->
                                                                    x725
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    Error.t_0_of_js
                                                                    x726)))|])
            let (_final :
              t ->
                callback:(?error:Error.t_0 or_null -> unit -> unit) -> unit)
              =
              fun (x733 : t) ->
                fun
                  ~callback:(x729 : ?error:Error.t_0 or_null -> unit -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x733) "_final"
                       [|(Ojs.fun_to_js 1
                            (fun (x730 : Ojs.t) ->
                               x729
                                 ?error:(Ojs.option_of_js
                                           (fun (x731 : Ojs.t) ->
                                              or_null_of_js Error.t_0_of_js
                                                x731) x730) ()))|])
            let (write :
              t ->
                chunk:any ->
                  ?encoding:BufferEncoding.t_0 ->
                    ?cb:(error:Error.t_0 or_null_or_undefined -> unit) ->
                      unit -> bool)
              =
              fun (x742 : t) ->
                fun ~chunk:(x734 : any) ->
                  fun ?encoding:(x735 : BufferEncoding.t_0 option) ->
                    fun
                      ?cb:(x736 :
                            (error:Error.t_0 or_null_or_undefined -> unit)
                              option)
                      ->
                      fun () ->
                        Ojs.bool_of_js
                          (let x743 = t_to_js x742 in
                           Ojs.call (Ojs.get_prop_ascii x743 "write") "apply"
                             [|x743;((let x737 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x737 "push"
                                           [|(any_to_js x734)|]);
                                      (match x735 with
                                       | Some x741 ->
                                           ignore
                                             (Ojs.call x737 "push"
                                                [|(BufferEncoding.t_0_to_js
                                                     x741)|])
                                       | None -> ());
                                      (match x736 with
                                       | Some x738 ->
                                           ignore
                                             (Ojs.call x737 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x739 : Ojs.t) ->
                                                        x738
                                                          ~error:(or_null_or_undefined_of_js
                                                                    Error.t_0_of_js
                                                                    x739)))|])
                                       | None -> ());
                                      x737))|])
            let (write' :
              t ->
                chunk:any ->
                  ?cb:(error:Error.t_0 or_null_or_undefined -> unit) ->
                    unit -> bool)
              =
              fun (x750 : t) ->
                fun ~chunk:(x744 : any) ->
                  fun
                    ?cb:(x745 :
                          (error:Error.t_0 or_null_or_undefined -> unit)
                            option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x751 = t_to_js x750 in
                         Ojs.call (Ojs.get_prop_ascii x751 "write") "apply"
                           [|x751;((let x746 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x746 "push"
                                         [|(any_to_js x744)|]);
                                    (match x745 with
                                     | Some x747 ->
                                         ignore
                                           (Ojs.call x746 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x748 : Ojs.t) ->
                                                      x747
                                                        ~error:(or_null_or_undefined_of_js
                                                                  Error.t_0_of_js
                                                                  x748)))|])
                                     | None -> ());
                                    x746))|])
            let (setDefaultEncoding : t -> encoding:BufferEncoding.t_0 -> t)
              =
              fun (x753 : t) ->
                fun ~encoding:(x752 : BufferEncoding.t_0) ->
                  t_of_js
                    (Ojs.call (t_to_js x753) "setDefaultEncoding"
                       [|(BufferEncoding.t_0_to_js x752)|])
            let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x757 : t) ->
                fun ?cb:(x754 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x758 = t_to_js x757 in
                       Ojs.call (Ojs.get_prop_ascii x758 "end") "apply"
                         [|x758;((let x755 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x754 with
                                   | Some x756 ->
                                       ignore
                                         (Ojs.call x755 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x756 ()))|])
                                   | None -> ());
                                  x755))|])
            let (end_' :
              t -> chunk:any -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x763 : t) ->
                fun ~chunk:(x759 : any) ->
                  fun ?cb:(x760 : (unit -> unit) option) ->
                    fun () ->
                      ignore
                        (let x764 = t_to_js x763 in
                         Ojs.call (Ojs.get_prop_ascii x764 "end") "apply"
                           [|x764;((let x761 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x761 "push"
                                         [|(any_to_js x759)|]);
                                    (match x760 with
                                     | Some x762 ->
                                         ignore
                                           (Ojs.call x761 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x762 ()))|])
                                     | None -> ());
                                    x761))|])
            let (end_'' :
              t ->
                chunk:any ->
                  ?encoding:BufferEncoding.t_0 ->
                    ?cb:(unit -> unit) -> unit -> unit)
              =
              fun (x771 : t) ->
                fun ~chunk:(x765 : any) ->
                  fun ?encoding:(x766 : BufferEncoding.t_0 option) ->
                    fun ?cb:(x767 : (unit -> unit) option) ->
                      fun () ->
                        ignore
                          (let x772 = t_to_js x771 in
                           Ojs.call (Ojs.get_prop_ascii x772 "end") "apply"
                             [|x772;((let x768 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x768 "push"
                                           [|(any_to_js x765)|]);
                                      (match x766 with
                                       | Some x770 ->
                                           ignore
                                             (Ojs.call x768 "push"
                                                [|(BufferEncoding.t_0_to_js
                                                     x770)|])
                                       | None -> ());
                                      (match x767 with
                                       | Some x769 ->
                                           ignore
                                             (Ojs.call x768 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun _ -> x769 ()))|])
                                       | None -> ());
                                      x768))|])
            let (cork : t -> unit) =
              fun (x773 : t) -> ignore (Ojs.call (t_to_js x773) "cork" [||])
            let (uncork : t -> unit) =
              fun (x774 : t) ->
                ignore (Ojs.call (t_to_js x774) "uncork" [||])
            let (cast : t -> stream_internal_Readable) =
              fun (x775 : t) -> stream_internal_Readable_of_js (t_to_js x775)
            let (cast' : t -> stream_internal_Writable) =
              fun (x776 : t) -> stream_internal_Writable_of_js (t_to_js x776)
          end
        module TransformCallback =
          struct
            type t = stream_internal_TransformCallback
            let rec t_of_js : Ojs.t -> t =
              fun (x778 : Ojs.t) ->
                stream_internal_TransformCallback_of_js x778
            and t_to_js : t -> Ojs.t =
              fun (x777 : stream_internal_TransformCallback) ->
                stream_internal_TransformCallback_to_js x777
            let (apply :
              t -> ?error:Error.t_0 or_null -> ?data:any -> unit -> unit) =
              fun (x785 : t) ->
                fun ?error:(x779 : Error.t_0 or_null option) ->
                  fun ?data:(x780 : any option) ->
                    fun () ->
                      ignore
                        (Ojs.call (t_to_js x785) "apply"
                           [|Ojs.null;((let x781 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        (match x779 with
                                         | Some x783 ->
                                             ignore
                                               (Ojs.call x781 "push"
                                                  [|(or_null_to_js
                                                       Error.t_0_to_js x783)|])
                                         | None -> ());
                                        (match x780 with
                                         | Some x782 ->
                                             ignore
                                               (Ojs.call x781 "push"
                                                  [|(any_to_js x782)|])
                                         | None -> ());
                                        x781))|])
          end
        module TransformOptions =
          struct
            type t = stream_internal_TransformOptions
            let rec t_of_js : Ojs.t -> t =
              fun (x787 : Ojs.t) ->
                stream_internal_TransformOptions_of_js x787
            and t_to_js : t -> Ojs.t =
              fun (x786 : stream_internal_TransformOptions) ->
                stream_internal_TransformOptions_to_js x786
            let (read :
              t -> this:stream_internal_Transform -> size:float -> unit) =
              fun (x790 : t) ->
                fun ~this:(x788 : stream_internal_Transform) ->
                  fun ~size:(x789 : float) ->
                    ignore
                      (Ojs.call (t_to_js x790) "read"
                         [|(stream_internal_Transform_to_js x788);(Ojs.float_to_js
                                                                    x789)|])
            let (write :
              t ->
                this:stream_internal_Transform ->
                  chunk:any ->
                    encoding:BufferEncoding.t_0 ->
                      callback:(?error:Error.t_0 or_null -> unit -> unit) ->
                        unit)
              =
              fun (x798 : t) ->
                fun ~this:(x791 : stream_internal_Transform) ->
                  fun ~chunk:(x792 : any) ->
                    fun ~encoding:(x793 : BufferEncoding.t_0) ->
                      fun
                        ~callback:(x794 :
                                    ?error:Error.t_0 or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x798) "write"
                             [|(stream_internal_Transform_to_js x791);(
                               any_to_js x792);(BufferEncoding.t_0_to_js x793);(
                               Ojs.fun_to_js 1
                                 (fun (x795 : Ojs.t) ->
                                    x794
                                      ?error:(Ojs.option_of_js
                                                (fun (x796 : Ojs.t) ->
                                                   or_null_of_js
                                                     Error.t_0_of_js x796)
                                                x795) ()))|])
            let (writev :
              t ->
                this:stream_internal_Transform ->
                  chunks:anonymous_interface_0 list ->
                    callback:(?error:Error.t_0 or_null -> unit -> unit) ->
                      unit)
              =
              fun (x806 : t) ->
                fun ~this:(x799 : stream_internal_Transform) ->
                  fun ~chunks:(x800 : anonymous_interface_0 list) ->
                    fun
                      ~callback:(x802 :
                                  ?error:Error.t_0 or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x806) "writev"
                           [|(stream_internal_Transform_to_js x799);(
                             Ojs.list_to_js anonymous_interface_0_to_js x800);(
                             Ojs.fun_to_js 1
                               (fun (x803 : Ojs.t) ->
                                  x802
                                    ?error:(Ojs.option_of_js
                                              (fun (x804 : Ojs.t) ->
                                                 or_null_of_js
                                                   Error.t_0_of_js x804) x803)
                                    ()))|])
            let (final :
              t ->
                this:stream_internal_Transform ->
                  callback:(?error:Error.t_0 or_null -> unit -> unit) -> unit)
              =
              fun (x812 : t) ->
                fun ~this:(x807 : stream_internal_Transform) ->
                  fun
                    ~callback:(x808 :
                                ?error:Error.t_0 or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x812) "final"
                         [|(stream_internal_Transform_to_js x807);(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x809 :
                                                                    Ojs.t) ->
                                                                    x808
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x810 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_0_of_js
                                                                    x810)
                                                                    x809) ()))|])
            let (destroy :
              t ->
                this:stream_internal_Transform ->
                  error:Error.t_0 or_null ->
                    callback:(error:Error.t_0 or_null -> unit) -> unit)
              =
              fun (x819 : t) ->
                fun ~this:(x813 : stream_internal_Transform) ->
                  fun ~error:(x814 : Error.t_0 or_null) ->
                    fun ~callback:(x816 : error:Error.t_0 or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x819) "destroy"
                           [|(stream_internal_Transform_to_js x813);(
                             or_null_to_js Error.t_0_to_js x814);(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x817 :
                                                                    Ojs.t) ->
                                                                    x816
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    Error.t_0_of_js
                                                                    x817)))|])
            let (transform :
              t ->
                this:stream_internal_Transform ->
                  chunk:any ->
                    encoding:BufferEncoding.t_0 ->
                      callback:stream_internal_TransformCallback -> unit)
              =
              fun (x824 : t) ->
                fun ~this:(x820 : stream_internal_Transform) ->
                  fun ~chunk:(x821 : any) ->
                    fun ~encoding:(x822 : BufferEncoding.t_0) ->
                      fun
                        ~callback:(x823 : stream_internal_TransformCallback)
                        ->
                        ignore
                          (Ojs.call (t_to_js x824) "transform"
                             [|(stream_internal_Transform_to_js x820);(
                               any_to_js x821);(BufferEncoding.t_0_to_js x822);(
                               stream_internal_TransformCallback_to_js x823)|])
            let (flush :
              t ->
                this:stream_internal_Transform ->
                  callback:stream_internal_TransformCallback -> unit)
              =
              fun (x827 : t) ->
                fun ~this:(x825 : stream_internal_Transform) ->
                  fun ~callback:(x826 : stream_internal_TransformCallback) ->
                    ignore
                      (Ojs.call (t_to_js x827) "flush"
                         [|(stream_internal_Transform_to_js x825);(stream_internal_TransformCallback_to_js
                                                                    x826)|])
            let (cast : t -> stream_internal_DuplexOptions) =
              fun (x828 : t) ->
                stream_internal_DuplexOptions_of_js (t_to_js x828)
          end
        module Transform =
          struct
            type t = stream_internal_Transform
            let rec t_of_js : Ojs.t -> t =
              fun (x830 : Ojs.t) -> stream_internal_Transform_of_js x830
            and t_to_js : t -> Ojs.t =
              fun (x829 : stream_internal_Transform) ->
                stream_internal_Transform_to_js x829
            let (create :
              ?opts:stream_internal_TransformOptions -> unit -> t) =
              fun ?opts:(x831 : stream_internal_TransformOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global "stream")
                             "internal") "Transform")
                       (let x832 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x831 with
                         | Some x833 ->
                             ignore
                               (Ojs.call x832 "push"
                                  [|(stream_internal_TransformOptions_to_js
                                       x833)|])
                         | None -> ());
                        x832))
            let (_transform :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t_0 ->
                    callback:stream_internal_TransformCallback -> unit)
              =
              fun (x837 : t) ->
                fun ~chunk:(x834 : any) ->
                  fun ~encoding:(x835 : BufferEncoding.t_0) ->
                    fun ~callback:(x836 : stream_internal_TransformCallback)
                      ->
                      ignore
                        (Ojs.call (t_to_js x837) "_transform"
                           [|(any_to_js x834);(BufferEncoding.t_0_to_js x835);(
                             stream_internal_TransformCallback_to_js x836)|])
            let (_flush :
              t -> callback:stream_internal_TransformCallback -> unit) =
              fun (x839 : t) ->
                fun ~callback:(x838 : stream_internal_TransformCallback) ->
                  ignore
                    (Ojs.call (t_to_js x839) "_flush"
                       [|(stream_internal_TransformCallback_to_js x838)|])
            let (cast : t -> stream_internal_Duplex) =
              fun (x840 : t) -> stream_internal_Duplex_of_js (t_to_js x840)
          end
        module PassThrough =
          struct
            type t = stream_internal_PassThrough
            let rec t_of_js : Ojs.t -> t =
              fun (x842 : Ojs.t) -> stream_internal_PassThrough_of_js x842
            and t_to_js : t -> Ojs.t =
              fun (x841 : stream_internal_PassThrough) ->
                stream_internal_PassThrough_to_js x841
            let (cast : t -> stream_internal_Transform) =
              fun (x843 : t) ->
                stream_internal_Transform_of_js (t_to_js x843)
          end
        module FinishedOptions =
          struct
            type t = stream_internal_FinishedOptions
            let rec t_of_js : Ojs.t -> t =
              fun (x845 : Ojs.t) ->
                stream_internal_FinishedOptions_of_js x845
            and t_to_js : t -> Ojs.t =
              fun (x844 : stream_internal_FinishedOptions) ->
                stream_internal_FinishedOptions_to_js x844
            let (get_error : t -> bool) =
              fun (x846 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x846) "error")
            let (set_error : t -> bool -> unit) =
              fun (x847 : t) ->
                fun (x848 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x847) "error"
                    (Ojs.bool_to_js x848)
            let (get_readable : t -> bool) =
              fun (x849 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x849) "readable")
            let (set_readable : t -> bool -> unit) =
              fun (x850 : t) ->
                fun (x851 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x850) "readable"
                    (Ojs.bool_to_js x851)
            let (get_writable : t -> bool) =
              fun (x852 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x852) "writable")
            let (set_writable : t -> bool -> unit) =
              fun (x853 : t) ->
                fun (x854 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x853) "writable"
                    (Ojs.bool_to_js x854)
          end
        let (finished :
          stream:(NodeJS.ReadWriteStream.t_0, NodeJS.ReadableStream.t_0,
            NodeJS.WritableStream.t_0) union3 ->
            options:stream_internal_FinishedOptions ->
              callback:(?err:NodeJS.ErrnoException.t_0 or_null ->
                          unit -> unit)
                -> unit -> unit)
          =
          fun
            ~stream:(x855 :
                      (NodeJS.ReadWriteStream.t_0, NodeJS.ReadableStream.t_0,
                        NodeJS.WritableStream.t_0) union3)
            ->
            fun ~options:(x859 : stream_internal_FinishedOptions) ->
              fun
                ~callback:(x860 :
                            ?err:NodeJS.ErrnoException.t_0 or_null ->
                              unit -> unit)
                ->
                fun () ->
                  ignore
                    (Ojs.apply
                       (Ojs.call
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global "stream")
                             "internal") "finished"
                          [|(union3_to_js NodeJS.ReadWriteStream.t_0_to_js
                               NodeJS.ReadableStream.t_0_to_js
                               NodeJS.WritableStream.t_0_to_js x855);(
                            stream_internal_FinishedOptions_to_js x859);(
                            Ojs.fun_to_js 1
                              (fun (x861 : Ojs.t) ->
                                 x860
                                   ?err:(Ojs.option_of_js
                                           (fun (x862 : Ojs.t) ->
                                              or_null_of_js
                                                NodeJS.ErrnoException.t_0_of_js
                                                x862) x861) ()))|]) [||])
        let (finished :
          stream:(NodeJS.ReadWriteStream.t_0, NodeJS.ReadableStream.t_0,
            NodeJS.WritableStream.t_0) union3 ->
            callback:(?err:NodeJS.ErrnoException.t_0 or_null -> unit -> unit)
              -> unit -> unit)
          =
          fun
            ~stream:(x864 :
                      (NodeJS.ReadWriteStream.t_0, NodeJS.ReadableStream.t_0,
                        NodeJS.WritableStream.t_0) union3)
            ->
            fun
              ~callback:(x868 :
                          ?err:NodeJS.ErrnoException.t_0 or_null ->
                            unit -> unit)
              ->
              fun () ->
                ignore
                  (Ojs.apply
                     (Ojs.call
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global "stream")
                           "internal") "finished"
                        [|(union3_to_js NodeJS.ReadWriteStream.t_0_to_js
                             NodeJS.ReadableStream.t_0_to_js
                             NodeJS.WritableStream.t_0_to_js x864);(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x869 :
                                                                    Ojs.t) ->
                                                                    x868
                                                                    ?err:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x870 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    NodeJS.ErrnoException.t_0_of_js
                                                                    x870)
                                                                    x869) ()))|])
                     [||])
        module Finished =
          struct
            let (__promisify__ :
              stream:(NodeJS.ReadWriteStream.t_0, NodeJS.ReadableStream.t_0,
                NodeJS.WritableStream.t_0) union3 ->
                ?options:stream_internal_FinishedOptions ->
                  unit -> unit Promise.t)
              =
              fun
                ~stream:(x872 :
                          (NodeJS.ReadWriteStream.t_0,
                            NodeJS.ReadableStream.t_0,
                            NodeJS.WritableStream.t_0) union3)
                ->
                fun ?options:(x873 : stream_internal_FinishedOptions option)
                  ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x879 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global "stream")
                              "internal") "finished" in
                       Ojs.call (Ojs.get_prop_ascii x879 "__promisify__")
                         "apply"
                         [|x879;((let x874 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x874 "push"
                                       [|(union3_to_js
                                            NodeJS.ReadWriteStream.t_0_to_js
                                            NodeJS.ReadableStream.t_0_to_js
                                            NodeJS.WritableStream.t_0_to_js
                                            x872)|]);
                                  (match x873 with
                                   | Some x875 ->
                                       ignore
                                         (Ojs.call x874 "push"
                                            [|(stream_internal_FinishedOptions_to_js
                                                 x875)|])
                                   | None -> ());
                                  x874))|])
          end
        let (pipeline :
          stream1:NodeJS.ReadableStream.t_0 ->
            stream2:'T ->
              ?callback:(err:NodeJS.ErrnoException.t_0 or_null -> unit) ->
                unit -> 'T)
          =
          fun ~stream1:(x881 : NodeJS.ReadableStream.t_0) ->
            fun ~stream2:(x882 : 'T) ->
              fun
                ?callback:(x883 :
                            (err:NodeJS.ErrnoException.t_0 or_null -> unit)
                              option)
                ->
                fun () ->
                  Obj.magic
                    (let x888 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global "stream") "internal" in
                     Ojs.call (Ojs.get_prop_ascii x888 "pipeline") "apply"
                       [|x888;((let x884 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x884 "push"
                                     [|(NodeJS.ReadableStream.t_0_to_js x881)|]);
                                ignore
                                  (Ojs.call x884 "push" [|(Obj.magic x882)|]);
                                (match x883 with
                                 | Some x885 ->
                                     ignore
                                       (Ojs.call x884 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x886 : Ojs.t) ->
                                                  x885
                                                    ~err:(or_null_of_js
                                                            NodeJS.ErrnoException.t_0_of_js
                                                            x886)))|])
                                 | None -> ());
                                x884))|])
        let (pipeline :
          stream1:NodeJS.ReadableStream.t_0 ->
            stream2:NodeJS.ReadWriteStream.t_0 ->
              stream3:'T ->
                ?callback:(err:NodeJS.ErrnoException.t_0 or_null -> unit) ->
                  unit -> 'T)
          =
          fun ~stream1:(x889 : NodeJS.ReadableStream.t_0) ->
            fun ~stream2:(x890 : NodeJS.ReadWriteStream.t_0) ->
              fun ~stream3:(x891 : 'T) ->
                fun
                  ?callback:(x892 :
                              (err:NodeJS.ErrnoException.t_0 or_null -> unit)
                                option)
                  ->
                  fun () ->
                    Obj.magic
                      (let x897 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global "stream")
                           "internal" in
                       Ojs.call (Ojs.get_prop_ascii x897 "pipeline") "apply"
                         [|x897;((let x893 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x893 "push"
                                       [|(NodeJS.ReadableStream.t_0_to_js
                                            x889)|]);
                                  ignore
                                    (Ojs.call x893 "push"
                                       [|(NodeJS.ReadWriteStream.t_0_to_js
                                            x890)|]);
                                  ignore
                                    (Ojs.call x893 "push"
                                       [|(Obj.magic x891)|]);
                                  (match x892 with
                                   | Some x894 ->
                                       ignore
                                         (Ojs.call x893 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x895 : Ojs.t) ->
                                                    x894
                                                      ~err:(or_null_of_js
                                                              NodeJS.ErrnoException.t_0_of_js
                                                              x895)))|])
                                   | None -> ());
                                  x893))|])
        let (pipeline :
          stream1:NodeJS.ReadableStream.t_0 ->
            stream2:NodeJS.ReadWriteStream.t_0 ->
              stream3:NodeJS.ReadWriteStream.t_0 ->
                stream4:'T ->
                  ?callback:(err:NodeJS.ErrnoException.t_0 or_null -> unit)
                    -> unit -> 'T)
          =
          fun ~stream1:(x898 : NodeJS.ReadableStream.t_0) ->
            fun ~stream2:(x899 : NodeJS.ReadWriteStream.t_0) ->
              fun ~stream3:(x900 : NodeJS.ReadWriteStream.t_0) ->
                fun ~stream4:(x901 : 'T) ->
                  fun
                    ?callback:(x902 :
                                (err:NodeJS.ErrnoException.t_0 or_null ->
                                   unit)
                                  option)
                    ->
                    fun () ->
                      Obj.magic
                        (let x907 =
                           Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global "stream")
                             "internal" in
                         Ojs.call (Ojs.get_prop_ascii x907 "pipeline")
                           "apply"
                           [|x907;((let x903 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x903 "push"
                                         [|(NodeJS.ReadableStream.t_0_to_js
                                              x898)|]);
                                    ignore
                                      (Ojs.call x903 "push"
                                         [|(NodeJS.ReadWriteStream.t_0_to_js
                                              x899)|]);
                                    ignore
                                      (Ojs.call x903 "push"
                                         [|(NodeJS.ReadWriteStream.t_0_to_js
                                              x900)|]);
                                    ignore
                                      (Ojs.call x903 "push"
                                         [|(Obj.magic x901)|]);
                                    (match x902 with
                                     | Some x904 ->
                                         ignore
                                           (Ojs.call x903 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x905 : Ojs.t) ->
                                                      x904
                                                        ~err:(or_null_of_js
                                                                NodeJS.ErrnoException.t_0_of_js
                                                                x905)))|])
                                     | None -> ());
                                    x903))|])
        let (pipeline :
          stream1:NodeJS.ReadableStream.t_0 ->
            stream2:NodeJS.ReadWriteStream.t_0 ->
              stream3:NodeJS.ReadWriteStream.t_0 ->
                stream4:NodeJS.ReadWriteStream.t_0 ->
                  stream5:'T ->
                    ?callback:(err:NodeJS.ErrnoException.t_0 or_null -> unit)
                      -> unit -> 'T)
          =
          fun ~stream1:(x908 : NodeJS.ReadableStream.t_0) ->
            fun ~stream2:(x909 : NodeJS.ReadWriteStream.t_0) ->
              fun ~stream3:(x910 : NodeJS.ReadWriteStream.t_0) ->
                fun ~stream4:(x911 : NodeJS.ReadWriteStream.t_0) ->
                  fun ~stream5:(x912 : 'T) ->
                    fun
                      ?callback:(x913 :
                                  (err:NodeJS.ErrnoException.t_0 or_null ->
                                     unit)
                                    option)
                      ->
                      fun () ->
                        Obj.magic
                          (let x918 =
                             Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global "stream")
                               "internal" in
                           Ojs.call (Ojs.get_prop_ascii x918 "pipeline")
                             "apply"
                             [|x918;((let x914 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x914 "push"
                                           [|(NodeJS.ReadableStream.t_0_to_js
                                                x908)|]);
                                      ignore
                                        (Ojs.call x914 "push"
                                           [|(NodeJS.ReadWriteStream.t_0_to_js
                                                x909)|]);
                                      ignore
                                        (Ojs.call x914 "push"
                                           [|(NodeJS.ReadWriteStream.t_0_to_js
                                                x910)|]);
                                      ignore
                                        (Ojs.call x914 "push"
                                           [|(NodeJS.ReadWriteStream.t_0_to_js
                                                x911)|]);
                                      ignore
                                        (Ojs.call x914 "push"
                                           [|(Obj.magic x912)|]);
                                      (match x913 with
                                       | Some x915 ->
                                           ignore
                                             (Ojs.call x914 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x916 : Ojs.t) ->
                                                        x915
                                                          ~err:(or_null_of_js
                                                                  NodeJS.ErrnoException.t_0_of_js
                                                                  x916)))|])
                                       | None -> ());
                                      x914))|])
        let (pipeline :
          streams:(NodeJS.ReadWriteStream.t_0, NodeJS.ReadableStream.t_0,
            NodeJS.WritableStream.t_0) union3 list ->
            ?callback:(err:NodeJS.ErrnoException.t_0 or_null -> unit) ->
              unit -> NodeJS.WritableStream.t_0)
          =
          fun
            ~streams:(x919 :
                       (NodeJS.ReadWriteStream.t_0,
                         NodeJS.ReadableStream.t_0,
                         NodeJS.WritableStream.t_0) union3 list)
            ->
            fun
              ?callback:(x920 :
                          (err:NodeJS.ErrnoException.t_0 or_null -> unit)
                            option)
              ->
              fun () ->
                NodeJS.WritableStream.t_0_of_js
                  (let x929 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "stream") "internal" in
                   Ojs.call (Ojs.get_prop_ascii x929 "pipeline") "apply"
                     [|x929;((let x921 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x921 "push"
                                   [|(Ojs.list_to_js
                                        (fun
                                           (x925 :
                                             (NodeJS.ReadWriteStream.t_0,
                                               NodeJS.ReadableStream.t_0,
                                               NodeJS.WritableStream.t_0)
                                               union3)
                                           ->
                                           union3_to_js
                                             NodeJS.ReadWriteStream.t_0_to_js
                                             NodeJS.ReadableStream.t_0_to_js
                                             NodeJS.WritableStream.t_0_to_js
                                             x925) x919)|]);
                              (match x920 with
                               | Some x922 ->
                                   ignore
                                     (Ojs.call x921 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x923 : Ojs.t) ->
                                                x922
                                                  ~err:(or_null_of_js
                                                          NodeJS.ErrnoException.t_0_of_js
                                                          x923)))|])
                               | None -> ());
                              x921))|])
        let (pipeline :
          stream1:NodeJS.ReadableStream.t_0 ->
            stream2:(NodeJS.ReadWriteStream.t_0, NodeJS.WritableStream.t_0)
              union2 -> streams:any list -> NodeJS.WritableStream.t_0)
          =
          fun ~stream1:(x930 : NodeJS.ReadableStream.t_0) ->
            fun
              ~stream2:(x931 :
                         (NodeJS.ReadWriteStream.t_0,
                           NodeJS.WritableStream.t_0) union2)
              ->
              fun ~streams:(x932 : any list) ->
                NodeJS.WritableStream.t_0_of_js
                  (let x937 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "stream") "internal" in
                   Ojs.call (Ojs.get_prop_ascii x937 "pipeline") "apply"
                     [|x937;((let x933 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x933 "push"
                                   [|(NodeJS.ReadableStream.t_0_to_js x930)|]);
                              ignore
                                (Ojs.call x933 "push"
                                   [|(union2_to_js
                                        NodeJS.ReadWriteStream.t_0_to_js
                                        NodeJS.WritableStream.t_0_to_js x931)|]);
                              List.iter
                                (fun (x934 : any) ->
                                   ignore
                                     (Ojs.call x933 "push"
                                        [|(any_to_js x934)|])) x932;
                              x933))|])
        module Pipeline =
          struct
            let (__promisify__ :
              stream1:NodeJS.ReadableStream.t_0 ->
                stream2:NodeJS.WritableStream.t_0 -> unit Promise.t)
              =
              fun ~stream1:(x938 : NodeJS.ReadableStream.t_0) ->
                fun ~stream2:(x939 : NodeJS.WritableStream.t_0) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global "stream")
                             "internal") "pipeline") "__promisify__"
                       [|(NodeJS.ReadableStream.t_0_to_js x938);(NodeJS.WritableStream.t_0_to_js
                                                                   x939)|])
            let (__promisify__ :
              stream1:NodeJS.ReadableStream.t_0 ->
                stream2:NodeJS.ReadWriteStream.t_0 ->
                  stream3:NodeJS.WritableStream.t_0 -> unit Promise.t)
              =
              fun ~stream1:(x941 : NodeJS.ReadableStream.t_0) ->
                fun ~stream2:(x942 : NodeJS.ReadWriteStream.t_0) ->
                  fun ~stream3:(x943 : NodeJS.WritableStream.t_0) ->
                    Promise.t_of_js Ojs.unit_of_js
                      (Ojs.call
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global "stream")
                               "internal") "pipeline") "__promisify__"
                         [|(NodeJS.ReadableStream.t_0_to_js x941);(NodeJS.ReadWriteStream.t_0_to_js
                                                                    x942);(
                           NodeJS.WritableStream.t_0_to_js x943)|])
            let (__promisify__ :
              stream1:NodeJS.ReadableStream.t_0 ->
                stream2:NodeJS.ReadWriteStream.t_0 ->
                  stream3:NodeJS.ReadWriteStream.t_0 ->
                    stream4:NodeJS.WritableStream.t_0 -> unit Promise.t)
              =
              fun ~stream1:(x945 : NodeJS.ReadableStream.t_0) ->
                fun ~stream2:(x946 : NodeJS.ReadWriteStream.t_0) ->
                  fun ~stream3:(x947 : NodeJS.ReadWriteStream.t_0) ->
                    fun ~stream4:(x948 : NodeJS.WritableStream.t_0) ->
                      Promise.t_of_js Ojs.unit_of_js
                        (Ojs.call
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "stream")
                                 "internal") "pipeline") "__promisify__"
                           [|(NodeJS.ReadableStream.t_0_to_js x945);(
                             NodeJS.ReadWriteStream.t_0_to_js x946);(
                             NodeJS.ReadWriteStream.t_0_to_js x947);(
                             NodeJS.WritableStream.t_0_to_js x948)|])
            let (__promisify__ :
              stream1:NodeJS.ReadableStream.t_0 ->
                stream2:NodeJS.ReadWriteStream.t_0 ->
                  stream3:NodeJS.ReadWriteStream.t_0 ->
                    stream4:NodeJS.ReadWriteStream.t_0 ->
                      stream5:NodeJS.WritableStream.t_0 -> unit Promise.t)
              =
              fun ~stream1:(x950 : NodeJS.ReadableStream.t_0) ->
                fun ~stream2:(x951 : NodeJS.ReadWriteStream.t_0) ->
                  fun ~stream3:(x952 : NodeJS.ReadWriteStream.t_0) ->
                    fun ~stream4:(x953 : NodeJS.ReadWriteStream.t_0) ->
                      fun ~stream5:(x954 : NodeJS.WritableStream.t_0) ->
                        Promise.t_of_js Ojs.unit_of_js
                          (Ojs.call
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii
                                   (Ojs.get_prop_ascii Ojs.global "stream")
                                   "internal") "pipeline") "__promisify__"
                             [|(NodeJS.ReadableStream.t_0_to_js x950);(
                               NodeJS.ReadWriteStream.t_0_to_js x951);(
                               NodeJS.ReadWriteStream.t_0_to_js x952);(
                               NodeJS.ReadWriteStream.t_0_to_js x953);(
                               NodeJS.WritableStream.t_0_to_js x954)|])
            let (__promisify__ :
              streams:(NodeJS.ReadWriteStream.t_0, NodeJS.ReadableStream.t_0,
                NodeJS.WritableStream.t_0) union3 list -> unit Promise.t)
              =
              fun
                ~streams:(x956 :
                           (NodeJS.ReadWriteStream.t_0,
                             NodeJS.ReadableStream.t_0,
                             NodeJS.WritableStream.t_0) union3 list)
                ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global "stream")
                           "internal") "pipeline") "__promisify__"
                     [|(Ojs.list_to_js
                          (fun
                             (x957 :
                               (NodeJS.ReadWriteStream.t_0,
                                 NodeJS.ReadableStream.t_0,
                                 NodeJS.WritableStream.t_0) union3)
                             ->
                             union3_to_js NodeJS.ReadWriteStream.t_0_to_js
                               NodeJS.ReadableStream.t_0_to_js
                               NodeJS.WritableStream.t_0_to_js x957) x956)|])
            let (__promisify__ :
              stream1:NodeJS.ReadableStream.t_0 ->
                stream2:(NodeJS.ReadWriteStream.t_0,
                  NodeJS.WritableStream.t_0) union2 ->
                  streams:any list -> unit Promise.t)
              =
              fun ~stream1:(x962 : NodeJS.ReadableStream.t_0) ->
                fun
                  ~stream2:(x963 :
                             (NodeJS.ReadWriteStream.t_0,
                               NodeJS.WritableStream.t_0) union2)
                  ->
                  fun ~streams:(x964 : any list) ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x969 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global "stream")
                              "internal") "pipeline" in
                       Ojs.call (Ojs.get_prop_ascii x969 "__promisify__")
                         "apply"
                         [|x969;((let x965 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x965 "push"
                                       [|(NodeJS.ReadableStream.t_0_to_js
                                            x962)|]);
                                  ignore
                                    (Ojs.call x965 "push"
                                       [|(union2_to_js
                                            NodeJS.ReadWriteStream.t_0_to_js
                                            NodeJS.WritableStream.t_0_to_js
                                            x963)|]);
                                  List.iter
                                    (fun (x966 : any) ->
                                       ignore
                                         (Ojs.call x965 "push"
                                            [|(any_to_js x966)|])) x964;
                                  x965))|])
          end
        module Pipe =
          struct
            type t = stream_internal_Pipe
            let rec t_of_js : Ojs.t -> t =
              fun (x972 : Ojs.t) -> stream_internal_Pipe_of_js x972
            and t_to_js : t -> Ojs.t =
              fun (x971 : stream_internal_Pipe) ->
                stream_internal_Pipe_to_js x971
            let (close : t -> unit) =
              fun (x973 : t) -> ignore (Ojs.call (t_to_js x973) "close" [||])
            let (hasRef : t -> bool) =
              fun (x974 : t) ->
                Ojs.bool_of_js (Ojs.call (t_to_js x974) "hasRef" [||])
            let (ref : t -> unit) =
              fun (x975 : t) -> ignore (Ojs.call (t_to_js x975) "ref" [||])
            let (unref : t -> unit) =
              fun (x976 : t) -> ignore (Ojs.call (t_to_js x976) "unref" [||])
          end
      end
  end
