[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
        type anonymous_interface_3 = [ `anonymous_interface_3 ] intf
        let rec anonymous_interface_3_of_js : Ojs.t -> anonymous_interface_3
          = Obj.magic
        and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type _Buffer = [ `Buffer ] intf
        and _BufferEncoding =
          [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
          | `ucs2  | `utf_8  | `utf16le  | `utf8 ]
        and _ErrorConstructor = [ `ErrorConstructor ] intf
        and _ImportMeta = [ `ImportMeta ] intf
        and _NodeJS_ArrayBufferView = (DataView.t, _NodeJS_TypedArray) union2
        and _NodeJS_CallSite = [ `NodeJS_CallSite ] intf
        and 'T _NodeJS_Dict = [ `NodeJS_Dict of 'T ] intf
        and _NodeJS_ErrnoException = [ `NodeJS_ErrnoException ] intf
        and _NodeJS_Global = [ `NodeJS_Global ] intf
        and _NodeJS_Immediate =
          [ `NodeJS_Immediate  | `NodeJS_RefCounted ] intf
        and _NodeJS_InspectOptions = [ `NodeJS_InspectOptions ] intf
        and _NodeJS_Module = [ `NodeJS_Module ] intf
        and 'T _NodeJS_ReadOnlyDict = [ `NodeJS_ReadOnlyDict of 'T ] intf
        and _NodeJS_ReadWriteStream =
          [ `NodeJS_ReadWriteStream  | `NodeJS_ReadableStream 
          | `NodeJS_WritableStream ] intf
        and _NodeJS_ReadableStream = [ `NodeJS_ReadableStream ] intf
        and _NodeJS_RefCounted = [ `NodeJS_RefCounted ] intf
        and _NodeJS_Require = [ `NodeJS_Require ] intf
        and _NodeJS_RequireExtensions =
          [ `NodeJS_RequireExtensions 
          | `NodeJS_Dict of m:_NodeJS_Module -> filename:string -> any ] intf
        and _NodeJS_RequireResolve = [ `NodeJS_RequireResolve ] intf
        and _NodeJS_Timeout =
          [ `NodeJS_Timeout  | `NodeJS_RefCounted  | `NodeJS_Timer ] intf
        and _NodeJS_Timer = [ `NodeJS_Timer  | `NodeJS_RefCounted ] intf
        and _NodeJS_TypedArray =
          ((((Float64Array.t, Int16Array.t, Int32Array.t, Int8Array.t,
               Uint16Array.t, Uint32Array.t, Uint8Array.t,
               Uint8ClampedArray.t) union8,
              Float32Array.t) or_,
             BigUint64Array.t) or_,
            BigInt64Array.t) or_
        and _NodeJS_WritableStream = [ `NodeJS_WritableStream ] intf
        and _NodeModule = [ `NodeModule  | `NodeJS_Module ] intf
        and _NodeRequire = [ `NodeRequire  | `NodeJS_Require ] intf
        and _RequireResolve =
          [ `RequireResolve  | `NodeJS_RequireResolve ] intf
        and _String = [ `String ] intf
        and 'T _WithImplicitCoercion = ('T, anonymous_interface_3) union2
        let rec _Buffer_of_js : Ojs.t -> _Buffer = Obj.magic
        and _Buffer_to_js : _Buffer -> Ojs.t = Obj.magic
        and _BufferEncoding_of_js : Ojs.t -> _BufferEncoding =
          fun (x2 : Ojs.t) ->
            let x3 = x2 in
            match Ojs.string_of_js x3 with
            | "ascii" -> `ascii
            | "base64" -> `base64
            | "binary" -> `binary
            | "hex" -> `hex
            | "latin1" -> `latin1
            | "ucs-2" -> `ucs_2
            | "ucs2" -> `ucs2
            | "utf-8" -> `utf_8
            | "utf16le" -> `utf16le
            | "utf8" -> `utf8
            | _ -> assert false
        and _BufferEncoding_to_js : _BufferEncoding -> Ojs.t =
          fun
            (x1 :
              [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
              | `ucs2  | `utf_8  | `utf16le  | `utf8 ])
            ->
            match x1 with
            | `ascii -> Ojs.string_to_js "ascii"
            | `base64 -> Ojs.string_to_js "base64"
            | `binary -> Ojs.string_to_js "binary"
            | `hex -> Ojs.string_to_js "hex"
            | `latin1 -> Ojs.string_to_js "latin1"
            | `ucs_2 -> Ojs.string_to_js "ucs-2"
            | `ucs2 -> Ojs.string_to_js "ucs2"
            | `utf_8 -> Ojs.string_to_js "utf-8"
            | `utf16le -> Ojs.string_to_js "utf16le"
            | `utf8 -> Ojs.string_to_js "utf8"
        and _ErrorConstructor_of_js : Ojs.t -> _ErrorConstructor = Obj.magic
        and _ErrorConstructor_to_js : _ErrorConstructor -> Ojs.t = Obj.magic
        and _ImportMeta_of_js : Ojs.t -> _ImportMeta = Obj.magic
        and _ImportMeta_to_js : _ImportMeta -> Ojs.t = Obj.magic
        and _NodeJS_ArrayBufferView_of_js : Ojs.t -> _NodeJS_ArrayBufferView
          =
          fun (x7 : Ojs.t) ->
            union2_of_js DataView.t_of_js _NodeJS_TypedArray_of_js x7
        and _NodeJS_ArrayBufferView_to_js : _NodeJS_ArrayBufferView -> Ojs.t
          =
          fun (x4 : (DataView.t, _NodeJS_TypedArray) union2) ->
            union2_to_js DataView.t_to_js _NodeJS_TypedArray_to_js x4
        and _NodeJS_CallSite_of_js : Ojs.t -> _NodeJS_CallSite = Obj.magic
        and _NodeJS_CallSite_to_js : _NodeJS_CallSite -> Ojs.t = Obj.magic
        and _NodeJS_Dict_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _NodeJS_Dict =
          fun _T -> Obj.magic
        and _NodeJS_Dict_to_js :
          'T . ('T -> Ojs.t) -> 'T _NodeJS_Dict -> Ojs.t =
          fun _T -> Obj.magic
        and _NodeJS_ErrnoException_of_js : Ojs.t -> _NodeJS_ErrnoException =
          Obj.magic
        and _NodeJS_ErrnoException_to_js : _NodeJS_ErrnoException -> Ojs.t =
          Obj.magic
        and _NodeJS_Global_of_js : Ojs.t -> _NodeJS_Global = Obj.magic
        and _NodeJS_Global_to_js : _NodeJS_Global -> Ojs.t = Obj.magic
        and _NodeJS_Immediate_of_js : Ojs.t -> _NodeJS_Immediate = Obj.magic
        and _NodeJS_Immediate_to_js : _NodeJS_Immediate -> Ojs.t = Obj.magic
        and _NodeJS_InspectOptions_of_js : Ojs.t -> _NodeJS_InspectOptions =
          Obj.magic
        and _NodeJS_InspectOptions_to_js : _NodeJS_InspectOptions -> Ojs.t =
          Obj.magic
        and _NodeJS_Module_of_js : Ojs.t -> _NodeJS_Module = Obj.magic
        and _NodeJS_Module_to_js : _NodeJS_Module -> Ojs.t = Obj.magic
        and _NodeJS_ReadOnlyDict_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _NodeJS_ReadOnlyDict =
          fun _T -> Obj.magic
        and _NodeJS_ReadOnlyDict_to_js :
          'T . ('T -> Ojs.t) -> 'T _NodeJS_ReadOnlyDict -> Ojs.t =
          fun _T -> Obj.magic
        and _NodeJS_ReadWriteStream_of_js : Ojs.t -> _NodeJS_ReadWriteStream
          = Obj.magic
        and _NodeJS_ReadWriteStream_to_js : _NodeJS_ReadWriteStream -> Ojs.t
          = Obj.magic
        and _NodeJS_ReadableStream_of_js : Ojs.t -> _NodeJS_ReadableStream =
          Obj.magic
        and _NodeJS_ReadableStream_to_js : _NodeJS_ReadableStream -> Ojs.t =
          Obj.magic
        and _NodeJS_RefCounted_of_js : Ojs.t -> _NodeJS_RefCounted =
          Obj.magic
        and _NodeJS_RefCounted_to_js : _NodeJS_RefCounted -> Ojs.t =
          Obj.magic
        and _NodeJS_Require_of_js : Ojs.t -> _NodeJS_Require = Obj.magic
        and _NodeJS_Require_to_js : _NodeJS_Require -> Ojs.t = Obj.magic
        and _NodeJS_RequireExtensions_of_js :
          Ojs.t -> _NodeJS_RequireExtensions = Obj.magic
        and _NodeJS_RequireExtensions_to_js :
          _NodeJS_RequireExtensions -> Ojs.t = Obj.magic
        and _NodeJS_RequireResolve_of_js : Ojs.t -> _NodeJS_RequireResolve =
          Obj.magic
        and _NodeJS_RequireResolve_to_js : _NodeJS_RequireResolve -> Ojs.t =
          Obj.magic
        and _NodeJS_Timeout_of_js : Ojs.t -> _NodeJS_Timeout = Obj.magic
        and _NodeJS_Timeout_to_js : _NodeJS_Timeout -> Ojs.t = Obj.magic
        and _NodeJS_Timer_of_js : Ojs.t -> _NodeJS_Timer = Obj.magic
        and _NodeJS_Timer_to_js : _NodeJS_Timer -> Ojs.t = Obj.magic
        and _NodeJS_TypedArray_of_js : Ojs.t -> _NodeJS_TypedArray =
          fun (x25 : Ojs.t) ->
            or__of_js
              (fun (x26 : Ojs.t) ->
                 or__of_js
                   (fun (x27 : Ojs.t) ->
                      or__of_js
                        (fun (x28 : Ojs.t) ->
                           union8_of_js Float64Array.t_of_js
                             Int16Array.t_of_js Int32Array.t_of_js
                             Int8Array.t_of_js Uint16Array.t_of_js
                             Uint32Array.t_of_js Uint8Array.t_of_js
                             Uint8ClampedArray.t_of_js x28)
                        Float32Array.t_of_js x27) BigUint64Array.t_of_js x26)
              BigInt64Array.t_of_js x25
        and _NodeJS_TypedArray_to_js : _NodeJS_TypedArray -> Ojs.t =
          fun
            (x10 :
              ((((Float64Array.t, Int16Array.t, Int32Array.t, Int8Array.t,
                   Uint16Array.t, Uint32Array.t, Uint8Array.t,
                   Uint8ClampedArray.t) union8,
                  Float32Array.t) or_,
                 BigUint64Array.t) or_,
                BigInt64Array.t) or_)
            ->
            or__to_js
              (fun
                 (x11 :
                   (((Float64Array.t, Int16Array.t, Int32Array.t,
                       Int8Array.t, Uint16Array.t, Uint32Array.t,
                       Uint8Array.t, Uint8ClampedArray.t) union8,
                      Float32Array.t) or_,
                     BigUint64Array.t) or_)
                 ->
                 or__to_js
                   (fun
                      (x12 :
                        ((Float64Array.t, Int16Array.t, Int32Array.t,
                           Int8Array.t, Uint16Array.t, Uint32Array.t,
                           Uint8Array.t, Uint8ClampedArray.t) union8,
                          Float32Array.t) or_)
                      ->
                      or__to_js
                        (fun
                           (x13 :
                             (Float64Array.t, Int16Array.t, Int32Array.t,
                               Int8Array.t, Uint16Array.t, Uint32Array.t,
                               Uint8Array.t, Uint8ClampedArray.t) union8)
                           ->
                           union8_to_js Float64Array.t_to_js
                             Int16Array.t_to_js Int32Array.t_to_js
                             Int8Array.t_to_js Uint16Array.t_to_js
                             Uint32Array.t_to_js Uint8Array.t_to_js
                             Uint8ClampedArray.t_to_js x13)
                        Float32Array.t_to_js x12) BigUint64Array.t_to_js x11)
              BigInt64Array.t_to_js x10
        and _NodeJS_WritableStream_of_js : Ojs.t -> _NodeJS_WritableStream =
          Obj.magic
        and _NodeJS_WritableStream_to_js : _NodeJS_WritableStream -> Ojs.t =
          Obj.magic
        and _NodeModule_of_js : Ojs.t -> _NodeModule = Obj.magic
        and _NodeModule_to_js : _NodeModule -> Ojs.t = Obj.magic
        and _NodeRequire_of_js : Ojs.t -> _NodeRequire = Obj.magic
        and _NodeRequire_to_js : _NodeRequire -> Ojs.t = Obj.magic
        and _RequireResolve_of_js : Ojs.t -> _RequireResolve = Obj.magic
        and _RequireResolve_to_js : _RequireResolve -> Ojs.t = Obj.magic
        and _String_of_js : Ojs.t -> _String = Obj.magic
        and _String_to_js : _String -> Ojs.t = Obj.magic
        and _WithImplicitCoercion_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _WithImplicitCoercion = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x43 : Ojs.t) ->
              union2_of_js __T_of_js anonymous_interface_3_of_js x43
        and _WithImplicitCoercion_to_js :
          'T . ('T -> Ojs.t) -> 'T _WithImplicitCoercion -> Ojs.t = fun (type
          __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x40 : (__T, anonymous_interface_3) union2) ->
              union2_to_js __T_to_js anonymous_interface_3_to_js x40
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x47 : Ojs.t) -> anonymous_interface_0_of_js x47
    and t_to_js : t -> Ojs.t =
      fun (x46 : anonymous_interface_0) -> anonymous_interface_0_to_js x46
    let (get_end : t -> bool) =
      fun (x48 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x48) "end")
    let (set_end : t -> bool -> unit) =
      fun (x49 : t) ->
        fun (x50 : bool) ->
          Ojs.set_prop_ascii (t_to_js x49) "end" (Ojs.bool_to_js x50)
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x52 : Ojs.t) -> anonymous_interface_1_of_js x52
    and t_to_js : t -> Ojs.t =
      fun (x51 : anonymous_interface_1) -> anonymous_interface_1_to_js x51
    let (get_paths : t -> string list) =
      fun (x53 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x53) "paths")
    let (set_paths : t -> string list -> unit) =
      fun (x55 : t) ->
        fun (x56 : string list) ->
          Ojs.set_prop_ascii (t_to_js x55) "paths"
            (Ojs.list_to_js Ojs.string_to_js x56)
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x59 : Ojs.t) -> anonymous_interface_2_of_js x59
    and t_to_js : t -> Ojs.t =
      fun (x58 : anonymous_interface_2) -> anonymous_interface_2_to_js x58
    let (get_type : t -> [ `Buffer ]) =
      fun (x60 : t) ->
        let x61 = Ojs.get_prop_ascii (t_to_js x60) "type" in
        match Ojs.string_of_js x61 with
        | "Buffer" -> `Buffer
        | _ -> assert false
    let (set_type : t -> [ `Buffer ] -> unit) =
      fun (x62 : t) ->
        fun (x63 : [ `Buffer ]) ->
          Ojs.set_prop_ascii (t_to_js x62) "type"
            (match x63 with | `Buffer -> Ojs.string_to_js "Buffer")
    let (get_data : t -> float list) =
      fun (x64 : t) ->
        Ojs.list_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x64) "data")
    let (set_data : t -> float list -> unit) =
      fun (x66 : t) ->
        fun (x67 : float list) ->
          Ojs.set_prop_ascii (t_to_js x66) "data"
            (Ojs.list_to_js Ojs.float_to_js x67)
  end
module AnonymousInterface3 =
  struct
    type t = anonymous_interface_3
    let rec t_of_js : Ojs.t -> t =
      fun (x70 : Ojs.t) -> anonymous_interface_3_of_js x70
    and t_to_js : t -> Ojs.t =
      fun (x69 : anonymous_interface_3) -> anonymous_interface_3_to_js x69
    let (valueOf : t -> 'T) =
      fun (x71 : t) -> Obj.magic (Ojs.call (t_to_js x71) "valueOf" [||])
  end
module ErrorConstructor =
  struct
    type t = _ErrorConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x73 : Ojs.t) -> _ErrorConstructor_of_js x73
    and t_to_js : t -> Ojs.t =
      fun (x72 : _ErrorConstructor) -> _ErrorConstructor_to_js x72
    let (captureStackTrace :
      t ->
        targetObject:untyped_object ->
          ?constructorOpt:untyped_function -> unit -> unit)
      =
      fun (x78 : t) ->
        fun ~targetObject:(x74 : untyped_object) ->
          fun ?constructorOpt:(x75 : untyped_function option) ->
            fun () ->
              ignore
                (let x79 = t_to_js x78 in
                 Ojs.call (Ojs.get_prop_ascii x79 "captureStackTrace")
                   "apply"
                   [|x79;((let x76 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x76 "push"
                                [|(untyped_object_to_js x74)|]);
                           (match x75 with
                            | Some x77 ->
                                ignore
                                  (Ojs.call x76 "push"
                                     [|(untyped_function_to_js x77)|])
                            | None -> ());
                           x76))|])
    let (prepareStackTrace :
      t -> err:Error.t -> stackTraces:_NodeJS_CallSite list -> any) =
      fun (x83 : t) ->
        fun ~err:(x80 : Error.t) ->
          fun ~stackTraces:(x81 : _NodeJS_CallSite list) ->
            any_of_js
              (Ojs.call (t_to_js x83) "prepareStackTrace"
                 [|(Error.t_to_js x80);(Ojs.list_to_js _NodeJS_CallSite_to_js
                                          x81)|])
    let (get_stackTraceLimit : t -> float) =
      fun (x84 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x84) "stackTraceLimit")
    let (set_stackTraceLimit : t -> float -> unit) =
      fun (x85 : t) ->
        fun (x86 : float) ->
          Ojs.set_prop_ascii (t_to_js x85) "stackTraceLimit"
            (Ojs.float_to_js x86)
  end
module String =
  struct
    type t = _String
    let rec t_of_js : Ojs.t -> t = fun (x88 : Ojs.t) -> _String_of_js x88
    and t_to_js : t -> Ojs.t = fun (x87 : _String) -> _String_to_js x87
    let (trimLeft : t -> string) =
      fun (x89 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x89) "trimLeft" [||])
    let (trimRight : t -> string) =
      fun (x90 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x90) "trimRight" [||])
    let (trimStart : t -> string) =
      fun (x91 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x91) "trimStart" [||])
    let (trimEnd : t -> string) =
      fun (x92 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x92) "trimEnd" [||])
    let (to_ml : t -> string) =
      fun (x93 : t) -> Ojs.string_of_js (t_to_js x93)
    let (of_ml : string -> t) =
      fun (x94 : string) -> t_of_js (Ojs.string_to_js x94)
  end
module ImportMeta =
  struct
    type t = _ImportMeta
    let rec t_of_js : Ojs.t -> t = fun (x96 : Ojs.t) -> _ImportMeta_of_js x96
    and t_to_js : t -> Ojs.t =
      fun (x95 : _ImportMeta) -> _ImportMeta_to_js x95
    let (get_url : t -> string) =
      fun (x97 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x97) "url")
    let (set_url : t -> string -> unit) =
      fun (x98 : t) ->
        fun (x99 : string) ->
          Ojs.set_prop_ascii (t_to_js x98) "url" (Ojs.string_to_js x99)
  end
module NodeRequire =
  struct
    type t = _NodeRequire
    let rec t_of_js : Ojs.t -> t =
      fun (x101 : Ojs.t) -> _NodeRequire_of_js x101
    and t_to_js : t -> Ojs.t =
      fun (x100 : _NodeRequire) -> _NodeRequire_to_js x100
    let (cast : t -> _NodeJS_Require) =
      fun (x102 : t) -> _NodeJS_Require_of_js (t_to_js x102)
  end
module RequireResolve =
  struct
    type t = _RequireResolve
    let rec t_of_js : Ojs.t -> t =
      fun (x104 : Ojs.t) -> _RequireResolve_of_js x104
    and t_to_js : t -> Ojs.t =
      fun (x103 : _RequireResolve) -> _RequireResolve_to_js x103
    let (cast : t -> _NodeJS_RequireResolve) =
      fun (x105 : t) -> _NodeJS_RequireResolve_of_js (t_to_js x105)
  end
module NodeModule =
  struct
    type t = _NodeModule
    let rec t_of_js : Ojs.t -> t =
      fun (x107 : Ojs.t) -> _NodeModule_of_js x107
    and t_to_js : t -> Ojs.t =
      fun (x106 : _NodeModule) -> _NodeModule_to_js x106
    let (cast : t -> _NodeJS_Module) =
      fun (x108 : t) -> _NodeJS_Module_of_js (t_to_js x108)
  end
let (process : NodeJS.Process.t) =
  NodeJS.Process.t_of_js (Ojs.get_prop_ascii Ojs.global "process")
let (console : Console.t) =
  Console.t_of_js (Ojs.get_prop_ascii Ojs.global "console")
let (__filename : string) =
  Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "__filename")
let (__dirname : string) =
  Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "__dirname")
let (setTimeout :
  callback:(args:any list -> unit) ->
    ?ms:float -> args:any list -> _NodeJS_Timeout)
  =
  fun ~callback:(x109 : args:any list -> unit) ->
    fun ?ms:(x110 : float option) ->
      fun ~args:(x111 : any list) ->
        _NodeJS_Timeout_of_js
          (let x117 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x117 "setTimeout") "apply"
             [|x117;((let x112 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x112 "push"
                           [|(Ojs.fun_to_js_args
                                (fun (x115 : _) ->
                                   x109
                                     ~args:(Ojs.list_of_js_from any_of_js
                                              x115 0)))|]);
                      (match x110 with
                       | Some x114 ->
                           ignore
                             (Ojs.call x112 "push" [|(Ojs.float_to_js x114)|])
                       | None -> ());
                      List.iter
                        (fun (x113 : any) ->
                           ignore (Ojs.call x112 "push" [|(any_to_js x113)|]))
                        x111;
                      x112))|])
module SetTimeout =
  struct
    let (__promisify__ : ms:float -> unit Promise.t) =
      fun ~ms:(x118 : float) ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setTimeout")
             "__promisify__" [|(Ojs.float_to_js x118)|])
    let (__promisify__ : ms:float -> value:'T -> 'T Promise.t) =
      fun ~ms:(x120 : float) ->
        fun ~value:(x121 : 'T) ->
          Promise.t_of_js Obj.magic
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "setTimeout")
               "__promisify__" [|(Ojs.float_to_js x120);(Obj.magic x121)|])
  end
let (clearTimeout : timeoutId:_NodeJS_Timeout -> unit) =
  fun ~timeoutId:(x123 : _NodeJS_Timeout) ->
    ignore
      (Ojs.call Ojs.global "clearTimeout" [|(_NodeJS_Timeout_to_js x123)|])
let (setInterval :
  callback:(args:any list -> unit) ->
    ?ms:float -> args:any list -> _NodeJS_Timeout)
  =
  fun ~callback:(x124 : args:any list -> unit) ->
    fun ?ms:(x125 : float option) ->
      fun ~args:(x126 : any list) ->
        _NodeJS_Timeout_of_js
          (let x132 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x132 "setInterval") "apply"
             [|x132;((let x127 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x127 "push"
                           [|(Ojs.fun_to_js_args
                                (fun (x130 : _) ->
                                   x124
                                     ~args:(Ojs.list_of_js_from any_of_js
                                              x130 0)))|]);
                      (match x125 with
                       | Some x129 ->
                           ignore
                             (Ojs.call x127 "push" [|(Ojs.float_to_js x129)|])
                       | None -> ());
                      List.iter
                        (fun (x128 : any) ->
                           ignore (Ojs.call x127 "push" [|(any_to_js x128)|]))
                        x126;
                      x127))|])
let (clearInterval : intervalId:_NodeJS_Timeout -> unit) =
  fun ~intervalId:(x133 : _NodeJS_Timeout) ->
    ignore
      (Ojs.call Ojs.global "clearInterval" [|(_NodeJS_Timeout_to_js x133)|])
let (setImmediate :
  callback:(args:any list -> unit) -> args:any list -> _NodeJS_Immediate) =
  fun ~callback:(x134 : args:any list -> unit) ->
    fun ~args:(x135 : any list) ->
      _NodeJS_Immediate_of_js
        (let x140 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x140 "setImmediate") "apply"
           [|x140;((let x136 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x136 "push"
                         [|(Ojs.fun_to_js_args
                              (fun (x138 : _) ->
                                 x134
                                   ~args:(Ojs.list_of_js_from any_of_js x138
                                            0)))|]);
                    List.iter
                      (fun (x137 : any) ->
                         ignore (Ojs.call x136 "push" [|(any_to_js x137)|]))
                      x135;
                    x136))|])
module SetImmediate =
  struct
    let (__promisify__ : unit -> unit Promise.t) =
      fun () ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setImmediate")
             "__promisify__" [||])
    let (__promisify__ : value:'T -> 'T Promise.t) =
      fun ~value:(x142 : 'T) ->
        Promise.t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setImmediate")
             "__promisify__" [|(Obj.magic x142)|])
  end
let (clearImmediate : immediateId:_NodeJS_Immediate -> unit) =
  fun ~immediateId:(x144 : _NodeJS_Immediate) ->
    ignore
      (Ojs.call Ojs.global "clearImmediate"
         [|(_NodeJS_Immediate_to_js x144)|])
let (queueMicrotask : callback:(unit -> unit) -> unit) =
  fun ~callback:(x145 : unit -> unit) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask"
         [|(Ojs.fun_to_js 1 (fun _ -> x145 ()))|])
let (require : _NodeRequire) =
  _NodeRequire_of_js (Ojs.get_prop_ascii Ojs.global "require")
let (module_ : _NodeModule) =
  _NodeModule_of_js (Ojs.get_prop_ascii Ojs.global "module")
let (exports : any) = any_of_js (Ojs.get_prop_ascii Ojs.global "exports")
module BufferEncoding =
  struct
    type t = _BufferEncoding
    let rec t_of_js : Ojs.t -> t =
      fun (x147 : Ojs.t) -> _BufferEncoding_of_js x147
    and t_to_js : t -> Ojs.t =
      fun (x146 : _BufferEncoding) -> _BufferEncoding_to_js x146
  end
module WithImplicitCoercion =
  struct
    type 'T t = 'T _WithImplicitCoercion
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x150 : Ojs.t) -> _WithImplicitCoercion_of_js __T_of_js x150
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x148 : __T _WithImplicitCoercion) ->
          _WithImplicitCoercion_to_js __T_to_js x148
  end
module Buffer =
  struct
    type t = _Buffer
    let rec t_of_js : Ojs.t -> t = fun (x153 : Ojs.t) -> _Buffer_of_js x153
    and t_to_js : t -> Ojs.t = fun (x152 : _Buffer) -> _Buffer_to_js x152
    let (create : str:string -> ?encoding:_BufferEncoding -> unit -> t) =
      fun ~str:(x154 : string) ->
        fun ?encoding:(x155 : _BufferEncoding option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Buffer")
                 (let x156 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x156 "push" [|(Ojs.string_to_js x154)|]);
                  (match x155 with
                   | Some x157 ->
                       ignore
                         (Ojs.call x156 "push"
                            [|(_BufferEncoding_to_js x157)|])
                   | None -> ());
                  x156))
    let (create' : size:float -> t) =
      fun ~size:(x158 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Ojs.float_to_js x158)|])
    let (create'' : array:Uint8Array.t -> t) =
      fun ~array:(x159 : Uint8Array.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Uint8Array.t_to_js x159)|])
    let (create''' :
      arrayBuffer:(ArrayBuffer.t, SharedArrayBuffer.t) union2 -> t) =
      fun ~arrayBuffer:(x160 : (ArrayBuffer.t, SharedArrayBuffer.t) union2)
        ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(union2_to_js ArrayBuffer.t_to_js SharedArrayBuffer.t_to_js
                  x160)|])
    let (create'''' : array:any list -> t) =
      fun ~array:(x163 : any list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Ojs.list_to_js any_to_js x163)|])
    let (create''''' : buffer:t -> t) =
      fun ~buffer:(x165 : t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(t_to_js x165)|])
    let (from :
      arrayBuffer:(ArrayBuffer.t, SharedArrayBuffer.t) union2
        _WithImplicitCoercion ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun
        ~arrayBuffer:(x166 :
                       (ArrayBuffer.t, SharedArrayBuffer.t) union2
                         _WithImplicitCoercion)
        ->
        fun ?byteOffset:(x167 : float option) ->
          fun ?length:(x168 : float option) ->
            fun () ->
              t_of_js
                (let x175 = Ojs.get_prop_ascii Ojs.global "Buffer" in
                 Ojs.call (Ojs.get_prop_ascii x175 "from") "apply"
                   [|x175;((let x169 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x169 "push"
                                 [|(_WithImplicitCoercion_to_js
                                      (fun
                                         (x172 :
                                           (ArrayBuffer.t,
                                             SharedArrayBuffer.t) union2)
                                         ->
                                         union2_to_js ArrayBuffer.t_to_js
                                           SharedArrayBuffer.t_to_js x172)
                                      x166)|]);
                            (match x167 with
                             | Some x171 ->
                                 ignore
                                   (Ojs.call x169 "push"
                                      [|(Ojs.float_to_js x171)|])
                             | None -> ());
                            (match x168 with
                             | Some x170 ->
                                 ignore
                                   (Ojs.call x169 "push"
                                      [|(Ojs.float_to_js x170)|])
                             | None -> ());
                            x169))|])
    let (from' : data:(Uint8Array.t, float list) union2 -> t) =
      fun ~data:(x176 : (Uint8Array.t, float list) union2) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "from"
             [|(union2_to_js Uint8Array.t_to_js
                  (fun (x178 : float list) ->
                     Ojs.list_to_js Ojs.float_to_js x178) x176)|])
    let (from'' :
      data:(Uint8Array.t, float list) union2 or_string _WithImplicitCoercion
        -> t)
      =
      fun
        ~data:(x180 :
                (Uint8Array.t, float list) union2 or_string
                  _WithImplicitCoercion)
        ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "from"
             [|(_WithImplicitCoercion_to_js
                  (fun (x181 : (Uint8Array.t, float list) union2 or_string)
                     ->
                     or_string_to_js
                       (fun (x182 : (Uint8Array.t, float list) union2) ->
                          union2_to_js Uint8Array.t_to_js
                            (fun (x184 : float list) ->
                               Ojs.list_to_js Ojs.float_to_js x184) x182)
                       x181) x180)|])
    let (of_ : items:float list -> t) =
      fun ~items:(x186 : float list) ->
        t_of_js
          (let x189 = Ojs.get_prop_ascii Ojs.global "Buffer" in
           Ojs.call (Ojs.get_prop_ascii x189 "of") "apply"
             [|x189;((let x187 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      List.iter
                        (fun (x188 : float) ->
                           ignore
                             (Ojs.call x187 "push" [|(Ojs.float_to_js x188)|]))
                        x186;
                      x187))|])
    let (isBuffer : obj:any -> bool) =
      fun ~obj:(x190 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "isBuffer"
             [|(any_to_js x190)|])
    let (isEncoding : encoding:string -> bool) =
      fun ~encoding:(x191 : string) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "isEncoding"
             [|(Ojs.string_to_js x191)|])
    let (byteLength :
      string:(ArrayBuffer.t, _NodeJS_ArrayBufferView, SharedArrayBuffer.t)
        union3 or_string -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun
        ~string:(x192 :
                  (ArrayBuffer.t, _NodeJS_ArrayBufferView,
                    SharedArrayBuffer.t) union3 or_string)
        ->
        fun ?encoding:(x193 : _BufferEncoding option) ->
          fun () ->
            Ojs.float_of_js
              (let x200 = Ojs.get_prop_ascii Ojs.global "Buffer" in
               Ojs.call (Ojs.get_prop_ascii x200 "byteLength") "apply"
                 [|x200;((let x194 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x194 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x196 :
                                         (ArrayBuffer.t,
                                           _NodeJS_ArrayBufferView,
                                           SharedArrayBuffer.t) union3)
                                       ->
                                       union3_to_js ArrayBuffer.t_to_js
                                         _NodeJS_ArrayBufferView_to_js
                                         SharedArrayBuffer.t_to_js x196) x192)|]);
                          (match x193 with
                           | Some x195 ->
                               ignore
                                 (Ojs.call x194 "push"
                                    [|(_BufferEncoding_to_js x195)|])
                           | None -> ());
                          x194))|])
    let (concat : list:Uint8Array.t list -> ?totalLength:float -> unit -> t)
      =
      fun ~list:(x201 : Uint8Array.t list) ->
        fun ?totalLength:(x202 : float option) ->
          fun () ->
            t_of_js
              (let x206 = Ojs.get_prop_ascii Ojs.global "Buffer" in
               Ojs.call (Ojs.get_prop_ascii x206 "concat") "apply"
                 [|x206;((let x203 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x203 "push"
                               [|(Ojs.list_to_js Uint8Array.t_to_js x201)|]);
                          (match x202 with
                           | Some x204 ->
                               ignore
                                 (Ojs.call x203 "push"
                                    [|(Ojs.float_to_js x204)|])
                           | None -> ());
                          x203))|])
    let (compare : buf1:Uint8Array.t -> buf2:Uint8Array.t -> float) =
      fun ~buf1:(x207 : Uint8Array.t) ->
        fun ~buf2:(x208 : Uint8Array.t) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "compare"
               [|(Uint8Array.t_to_js x207);(Uint8Array.t_to_js x208)|])
    let (alloc :
      size:float ->
        ?fill:t or_string or_number -> ?encoding:_BufferEncoding -> unit -> t)
      =
      fun ~size:(x209 : float) ->
        fun ?fill:(x210 : t or_string or_number option) ->
          fun ?encoding:(x211 : _BufferEncoding option) ->
            fun () ->
              t_of_js
                (let x217 = Ojs.get_prop_ascii Ojs.global "Buffer" in
                 Ojs.call (Ojs.get_prop_ascii x217 "alloc") "apply"
                   [|x217;((let x212 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x212 "push"
                                 [|(Ojs.float_to_js x209)|]);
                            (match x210 with
                             | Some x214 ->
                                 ignore
                                   (Ojs.call x212 "push"
                                      [|(or_number_to_js
                                           (fun (x215 : t or_string) ->
                                              or_string_to_js t_to_js x215)
                                           x214)|])
                             | None -> ());
                            (match x211 with
                             | Some x213 ->
                                 ignore
                                   (Ojs.call x212 "push"
                                      [|(_BufferEncoding_to_js x213)|])
                             | None -> ());
                            x212))|])
    let (allocUnsafe : size:float -> t) =
      fun ~size:(x218 : float) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "allocUnsafe"
             [|(Ojs.float_to_js x218)|])
    let (allocUnsafeSlow : size:float -> t) =
      fun ~size:(x219 : float) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer")
             "allocUnsafeSlow" [|(Ojs.float_to_js x219)|])
    let (get_poolSize : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Buffer")
             "poolSize")
    let (set_poolSize : float -> unit) =
      fun (x220 : float) ->
        Ojs.set_prop_ascii (Ojs.get_prop_ascii Ojs.global "Buffer")
          "poolSize" (Ojs.float_to_js x220)
    let (write :
      t -> string:string -> ?encoding:_BufferEncoding -> unit -> float) =
      fun (x225 : t) ->
        fun ~string:(x221 : string) ->
          fun ?encoding:(x222 : _BufferEncoding option) ->
            fun () ->
              Ojs.float_of_js
                (let x226 = t_to_js x225 in
                 Ojs.call (Ojs.get_prop_ascii x226 "write") "apply"
                   [|x226;((let x223 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x223 "push"
                                 [|(Ojs.string_to_js x221)|]);
                            (match x222 with
                             | Some x224 ->
                                 ignore
                                   (Ojs.call x223 "push"
                                      [|(_BufferEncoding_to_js x224)|])
                             | None -> ());
                            x223))|])
    let (write' :
      t ->
        string:string ->
          offset:float -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun (x232 : t) ->
        fun ~string:(x227 : string) ->
          fun ~offset:(x228 : float) ->
            fun ?encoding:(x229 : _BufferEncoding option) ->
              fun () ->
                Ojs.float_of_js
                  (let x233 = t_to_js x232 in
                   Ojs.call (Ojs.get_prop_ascii x233 "write") "apply"
                     [|x233;((let x230 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x230 "push"
                                   [|(Ojs.string_to_js x227)|]);
                              ignore
                                (Ojs.call x230 "push"
                                   [|(Ojs.float_to_js x228)|]);
                              (match x229 with
                               | Some x231 ->
                                   ignore
                                     (Ojs.call x230 "push"
                                        [|(_BufferEncoding_to_js x231)|])
                               | None -> ());
                              x230))|])
    let (write'' :
      t ->
        string:string ->
          offset:float ->
            length:float -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun (x240 : t) ->
        fun ~string:(x234 : string) ->
          fun ~offset:(x235 : float) ->
            fun ~length:(x236 : float) ->
              fun ?encoding:(x237 : _BufferEncoding option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x241 = t_to_js x240 in
                     Ojs.call (Ojs.get_prop_ascii x241 "write") "apply"
                       [|x241;((let x238 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x238 "push"
                                     [|(Ojs.string_to_js x234)|]);
                                ignore
                                  (Ojs.call x238 "push"
                                     [|(Ojs.float_to_js x235)|]);
                                ignore
                                  (Ojs.call x238 "push"
                                     [|(Ojs.float_to_js x236)|]);
                                (match x237 with
                                 | Some x239 ->
                                     ignore
                                       (Ojs.call x238 "push"
                                          [|(_BufferEncoding_to_js x239)|])
                                 | None -> ());
                                x238))|])
    let (toString :
      t ->
        ?encoding:_BufferEncoding ->
          ?start:float -> ?end_:float -> unit -> string)
      =
      fun (x249 : t) ->
        fun ?encoding:(x242 : _BufferEncoding option) ->
          fun ?start:(x243 : float option) ->
            fun ?end_:(x244 : float option) ->
              fun () ->
                Ojs.string_of_js
                  (let x250 = t_to_js x249 in
                   Ojs.call (Ojs.get_prop_ascii x250 "toString") "apply"
                     [|x250;((let x245 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x242 with
                               | Some x248 ->
                                   ignore
                                     (Ojs.call x245 "push"
                                        [|(_BufferEncoding_to_js x248)|])
                               | None -> ());
                              (match x243 with
                               | Some x247 ->
                                   ignore
                                     (Ojs.call x245 "push"
                                        [|(Ojs.float_to_js x247)|])
                               | None -> ());
                              (match x244 with
                               | Some x246 ->
                                   ignore
                                     (Ojs.call x245 "push"
                                        [|(Ojs.float_to_js x246)|])
                               | None -> ());
                              x245))|])
    let (toJSON : t -> anonymous_interface_2) =
      fun (x251 : t) ->
        anonymous_interface_2_of_js (Ojs.call (t_to_js x251) "toJSON" [||])
    let (equals : t -> otherBuffer:Uint8Array.t -> bool) =
      fun (x253 : t) ->
        fun ~otherBuffer:(x252 : Uint8Array.t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x253) "equals" [|(Uint8Array.t_to_js x252)|])
    let (compare' :
      t ->
        otherBuffer:Uint8Array.t ->
          ?targetStart:float ->
            ?targetEnd:float ->
              ?sourceStart:float -> ?sourceEnd:float -> unit -> float)
      =
      fun (x264 : t) ->
        fun ~otherBuffer:(x254 : Uint8Array.t) ->
          fun ?targetStart:(x255 : float option) ->
            fun ?targetEnd:(x256 : float option) ->
              fun ?sourceStart:(x257 : float option) ->
                fun ?sourceEnd:(x258 : float option) ->
                  fun () ->
                    Ojs.float_of_js
                      (let x265 = t_to_js x264 in
                       Ojs.call (Ojs.get_prop_ascii x265 "compare") "apply"
                         [|x265;((let x259 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x259 "push"
                                       [|(Uint8Array.t_to_js x254)|]);
                                  (match x255 with
                                   | Some x263 ->
                                       ignore
                                         (Ojs.call x259 "push"
                                            [|(Ojs.float_to_js x263)|])
                                   | None -> ());
                                  (match x256 with
                                   | Some x262 ->
                                       ignore
                                         (Ojs.call x259 "push"
                                            [|(Ojs.float_to_js x262)|])
                                   | None -> ());
                                  (match x257 with
                                   | Some x261 ->
                                       ignore
                                         (Ojs.call x259 "push"
                                            [|(Ojs.float_to_js x261)|])
                                   | None -> ());
                                  (match x258 with
                                   | Some x260 ->
                                       ignore
                                         (Ojs.call x259 "push"
                                            [|(Ojs.float_to_js x260)|])
                                   | None -> ());
                                  x259))|])
    let (copy :
      t ->
        targetBuffer:Uint8Array.t ->
          ?targetStart:float ->
            ?sourceStart:float -> ?sourceEnd:float -> unit -> float)
      =
      fun (x274 : t) ->
        fun ~targetBuffer:(x266 : Uint8Array.t) ->
          fun ?targetStart:(x267 : float option) ->
            fun ?sourceStart:(x268 : float option) ->
              fun ?sourceEnd:(x269 : float option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x275 = t_to_js x274 in
                     Ojs.call (Ojs.get_prop_ascii x275 "copy") "apply"
                       [|x275;((let x270 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x270 "push"
                                     [|(Uint8Array.t_to_js x266)|]);
                                (match x267 with
                                 | Some x273 ->
                                     ignore
                                       (Ojs.call x270 "push"
                                          [|(Ojs.float_to_js x273)|])
                                 | None -> ());
                                (match x268 with
                                 | Some x272 ->
                                     ignore
                                       (Ojs.call x270 "push"
                                          [|(Ojs.float_to_js x272)|])
                                 | None -> ());
                                (match x269 with
                                 | Some x271 ->
                                     ignore
                                       (Ojs.call x270 "push"
                                          [|(Ojs.float_to_js x271)|])
                                 | None -> ());
                                x270))|])
    let (slice : t -> ?begin_:float -> ?end_:float -> unit -> t) =
      fun (x281 : t) ->
        fun ?begin_:(x276 : float option) ->
          fun ?end_:(x277 : float option) ->
            fun () ->
              t_of_js
                (let x282 = t_to_js x281 in
                 Ojs.call (Ojs.get_prop_ascii x282 "slice") "apply"
                   [|x282;((let x278 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x276 with
                             | Some x280 ->
                                 ignore
                                   (Ojs.call x278 "push"
                                      [|(Ojs.float_to_js x280)|])
                             | None -> ());
                            (match x277 with
                             | Some x279 ->
                                 ignore
                                   (Ojs.call x278 "push"
                                      [|(Ojs.float_to_js x279)|])
                             | None -> ());
                            x278))|])
    let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
      fun (x288 : t) ->
        fun ?begin_:(x283 : float option) ->
          fun ?end_:(x284 : float option) ->
            fun () ->
              t_of_js
                (let x289 = t_to_js x288 in
                 Ojs.call (Ojs.get_prop_ascii x289 "subarray") "apply"
                   [|x289;((let x285 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x283 with
                             | Some x287 ->
                                 ignore
                                   (Ojs.call x285 "push"
                                      [|(Ojs.float_to_js x287)|])
                             | None -> ());
                            (match x284 with
                             | Some x286 ->
                                 ignore
                                   (Ojs.call x285 "push"
                                      [|(Ojs.float_to_js x286)|])
                             | None -> ());
                            x285))|])
    let (writeBigInt64BE :
      t -> value:bigint -> ?offset:float -> unit -> float) =
      fun (x294 : t) ->
        fun ~value:(x290 : bigint) ->
          fun ?offset:(x291 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x295 = t_to_js x294 in
                 Ojs.call (Ojs.get_prop_ascii x295 "writeBigInt64BE") "apply"
                   [|x295;((let x292 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x292 "push" [|(bigint_to_js x290)|]);
                            (match x291 with
                             | Some x293 ->
                                 ignore
                                   (Ojs.call x292 "push"
                                      [|(Ojs.float_to_js x293)|])
                             | None -> ());
                            x292))|])
    let (writeBigInt64LE :
      t -> value:bigint -> ?offset:float -> unit -> float) =
      fun (x300 : t) ->
        fun ~value:(x296 : bigint) ->
          fun ?offset:(x297 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x301 = t_to_js x300 in
                 Ojs.call (Ojs.get_prop_ascii x301 "writeBigInt64LE") "apply"
                   [|x301;((let x298 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x298 "push" [|(bigint_to_js x296)|]);
                            (match x297 with
                             | Some x299 ->
                                 ignore
                                   (Ojs.call x298 "push"
                                      [|(Ojs.float_to_js x299)|])
                             | None -> ());
                            x298))|])
    let (writeBigUInt64BE :
      t -> value:bigint -> ?offset:float -> unit -> float) =
      fun (x306 : t) ->
        fun ~value:(x302 : bigint) ->
          fun ?offset:(x303 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x307 = t_to_js x306 in
                 Ojs.call (Ojs.get_prop_ascii x307 "writeBigUInt64BE")
                   "apply"
                   [|x307;((let x304 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x304 "push" [|(bigint_to_js x302)|]);
                            (match x303 with
                             | Some x305 ->
                                 ignore
                                   (Ojs.call x304 "push"
                                      [|(Ojs.float_to_js x305)|])
                             | None -> ());
                            x304))|])
    let (writeBigUInt64LE :
      t -> value:bigint -> ?offset:float -> unit -> float) =
      fun (x312 : t) ->
        fun ~value:(x308 : bigint) ->
          fun ?offset:(x309 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x313 = t_to_js x312 in
                 Ojs.call (Ojs.get_prop_ascii x313 "writeBigUInt64LE")
                   "apply"
                   [|x313;((let x310 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x310 "push" [|(bigint_to_js x308)|]);
                            (match x309 with
                             | Some x311 ->
                                 ignore
                                   (Ojs.call x310 "push"
                                      [|(Ojs.float_to_js x311)|])
                             | None -> ());
                            x310))|])
    let (writeUIntLE :
      t -> value:float -> offset:float -> byteLength:float -> float) =
      fun (x317 : t) ->
        fun ~value:(x314 : float) ->
          fun ~offset:(x315 : float) ->
            fun ~byteLength:(x316 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x317) "writeUIntLE"
                   [|(Ojs.float_to_js x314);(Ojs.float_to_js x315);(Ojs.float_to_js
                                                                    x316)|])
    let (writeUIntBE :
      t -> value:float -> offset:float -> byteLength:float -> float) =
      fun (x321 : t) ->
        fun ~value:(x318 : float) ->
          fun ~offset:(x319 : float) ->
            fun ~byteLength:(x320 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x321) "writeUIntBE"
                   [|(Ojs.float_to_js x318);(Ojs.float_to_js x319);(Ojs.float_to_js
                                                                    x320)|])
    let (writeIntLE :
      t -> value:float -> offset:float -> byteLength:float -> float) =
      fun (x325 : t) ->
        fun ~value:(x322 : float) ->
          fun ~offset:(x323 : float) ->
            fun ~byteLength:(x324 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x325) "writeIntLE"
                   [|(Ojs.float_to_js x322);(Ojs.float_to_js x323);(Ojs.float_to_js
                                                                    x324)|])
    let (writeIntBE :
      t -> value:float -> offset:float -> byteLength:float -> float) =
      fun (x329 : t) ->
        fun ~value:(x326 : float) ->
          fun ~offset:(x327 : float) ->
            fun ~byteLength:(x328 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x329) "writeIntBE"
                   [|(Ojs.float_to_js x326);(Ojs.float_to_js x327);(Ojs.float_to_js
                                                                    x328)|])
    let (readBigUInt64BE : t -> ?offset:float -> unit -> bigint) =
      fun (x333 : t) ->
        fun ?offset:(x330 : float option) ->
          fun () ->
            bigint_of_js
              (let x334 = t_to_js x333 in
               Ojs.call (Ojs.get_prop_ascii x334 "readBigUInt64BE") "apply"
                 [|x334;((let x331 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x330 with
                           | Some x332 ->
                               ignore
                                 (Ojs.call x331 "push"
                                    [|(Ojs.float_to_js x332)|])
                           | None -> ());
                          x331))|])
    let (readBigUInt64LE : t -> ?offset:float -> unit -> bigint) =
      fun (x338 : t) ->
        fun ?offset:(x335 : float option) ->
          fun () ->
            bigint_of_js
              (let x339 = t_to_js x338 in
               Ojs.call (Ojs.get_prop_ascii x339 "readBigUInt64LE") "apply"
                 [|x339;((let x336 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x335 with
                           | Some x337 ->
                               ignore
                                 (Ojs.call x336 "push"
                                    [|(Ojs.float_to_js x337)|])
                           | None -> ());
                          x336))|])
    let (readBigInt64BE : t -> ?offset:float -> unit -> bigint) =
      fun (x343 : t) ->
        fun ?offset:(x340 : float option) ->
          fun () ->
            bigint_of_js
              (let x344 = t_to_js x343 in
               Ojs.call (Ojs.get_prop_ascii x344 "readBigInt64BE") "apply"
                 [|x344;((let x341 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x340 with
                           | Some x342 ->
                               ignore
                                 (Ojs.call x341 "push"
                                    [|(Ojs.float_to_js x342)|])
                           | None -> ());
                          x341))|])
    let (readBigInt64LE : t -> ?offset:float -> unit -> bigint) =
      fun (x348 : t) ->
        fun ?offset:(x345 : float option) ->
          fun () ->
            bigint_of_js
              (let x349 = t_to_js x348 in
               Ojs.call (Ojs.get_prop_ascii x349 "readBigInt64LE") "apply"
                 [|x349;((let x346 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x345 with
                           | Some x347 ->
                               ignore
                                 (Ojs.call x346 "push"
                                    [|(Ojs.float_to_js x347)|])
                           | None -> ());
                          x346))|])
    let (readUIntLE : t -> offset:float -> byteLength:float -> float) =
      fun (x352 : t) ->
        fun ~offset:(x350 : float) ->
          fun ~byteLength:(x351 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x352) "readUIntLE"
                 [|(Ojs.float_to_js x350);(Ojs.float_to_js x351)|])
    let (readUIntBE : t -> offset:float -> byteLength:float -> float) =
      fun (x355 : t) ->
        fun ~offset:(x353 : float) ->
          fun ~byteLength:(x354 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x355) "readUIntBE"
                 [|(Ojs.float_to_js x353);(Ojs.float_to_js x354)|])
    let (readIntLE : t -> offset:float -> byteLength:float -> float) =
      fun (x358 : t) ->
        fun ~offset:(x356 : float) ->
          fun ~byteLength:(x357 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x358) "readIntLE"
                 [|(Ojs.float_to_js x356);(Ojs.float_to_js x357)|])
    let (readIntBE : t -> offset:float -> byteLength:float -> float) =
      fun (x361 : t) ->
        fun ~offset:(x359 : float) ->
          fun ~byteLength:(x360 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x361) "readIntBE"
                 [|(Ojs.float_to_js x359);(Ojs.float_to_js x360)|])
    let (readUInt8 : t -> ?offset:float -> unit -> float) =
      fun (x365 : t) ->
        fun ?offset:(x362 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x366 = t_to_js x365 in
               Ojs.call (Ojs.get_prop_ascii x366 "readUInt8") "apply"
                 [|x366;((let x363 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x362 with
                           | Some x364 ->
                               ignore
                                 (Ojs.call x363 "push"
                                    [|(Ojs.float_to_js x364)|])
                           | None -> ());
                          x363))|])
    let (readUInt16LE : t -> ?offset:float -> unit -> float) =
      fun (x370 : t) ->
        fun ?offset:(x367 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x371 = t_to_js x370 in
               Ojs.call (Ojs.get_prop_ascii x371 "readUInt16LE") "apply"
                 [|x371;((let x368 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x367 with
                           | Some x369 ->
                               ignore
                                 (Ojs.call x368 "push"
                                    [|(Ojs.float_to_js x369)|])
                           | None -> ());
                          x368))|])
    let (readUInt16BE : t -> ?offset:float -> unit -> float) =
      fun (x375 : t) ->
        fun ?offset:(x372 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x376 = t_to_js x375 in
               Ojs.call (Ojs.get_prop_ascii x376 "readUInt16BE") "apply"
                 [|x376;((let x373 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x372 with
                           | Some x374 ->
                               ignore
                                 (Ojs.call x373 "push"
                                    [|(Ojs.float_to_js x374)|])
                           | None -> ());
                          x373))|])
    let (readUInt32LE : t -> ?offset:float -> unit -> float) =
      fun (x380 : t) ->
        fun ?offset:(x377 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x381 = t_to_js x380 in
               Ojs.call (Ojs.get_prop_ascii x381 "readUInt32LE") "apply"
                 [|x381;((let x378 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x377 with
                           | Some x379 ->
                               ignore
                                 (Ojs.call x378 "push"
                                    [|(Ojs.float_to_js x379)|])
                           | None -> ());
                          x378))|])
    let (readUInt32BE : t -> ?offset:float -> unit -> float) =
      fun (x385 : t) ->
        fun ?offset:(x382 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x386 = t_to_js x385 in
               Ojs.call (Ojs.get_prop_ascii x386 "readUInt32BE") "apply"
                 [|x386;((let x383 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x382 with
                           | Some x384 ->
                               ignore
                                 (Ojs.call x383 "push"
                                    [|(Ojs.float_to_js x384)|])
                           | None -> ());
                          x383))|])
    let (readInt8 : t -> ?offset:float -> unit -> float) =
      fun (x390 : t) ->
        fun ?offset:(x387 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x391 = t_to_js x390 in
               Ojs.call (Ojs.get_prop_ascii x391 "readInt8") "apply"
                 [|x391;((let x388 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x387 with
                           | Some x389 ->
                               ignore
                                 (Ojs.call x388 "push"
                                    [|(Ojs.float_to_js x389)|])
                           | None -> ());
                          x388))|])
    let (readInt16LE : t -> ?offset:float -> unit -> float) =
      fun (x395 : t) ->
        fun ?offset:(x392 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x396 = t_to_js x395 in
               Ojs.call (Ojs.get_prop_ascii x396 "readInt16LE") "apply"
                 [|x396;((let x393 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x392 with
                           | Some x394 ->
                               ignore
                                 (Ojs.call x393 "push"
                                    [|(Ojs.float_to_js x394)|])
                           | None -> ());
                          x393))|])
    let (readInt16BE : t -> ?offset:float -> unit -> float) =
      fun (x400 : t) ->
        fun ?offset:(x397 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x401 = t_to_js x400 in
               Ojs.call (Ojs.get_prop_ascii x401 "readInt16BE") "apply"
                 [|x401;((let x398 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x397 with
                           | Some x399 ->
                               ignore
                                 (Ojs.call x398 "push"
                                    [|(Ojs.float_to_js x399)|])
                           | None -> ());
                          x398))|])
    let (readInt32LE : t -> ?offset:float -> unit -> float) =
      fun (x405 : t) ->
        fun ?offset:(x402 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x406 = t_to_js x405 in
               Ojs.call (Ojs.get_prop_ascii x406 "readInt32LE") "apply"
                 [|x406;((let x403 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x402 with
                           | Some x404 ->
                               ignore
                                 (Ojs.call x403 "push"
                                    [|(Ojs.float_to_js x404)|])
                           | None -> ());
                          x403))|])
    let (readInt32BE : t -> ?offset:float -> unit -> float) =
      fun (x410 : t) ->
        fun ?offset:(x407 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x411 = t_to_js x410 in
               Ojs.call (Ojs.get_prop_ascii x411 "readInt32BE") "apply"
                 [|x411;((let x408 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x407 with
                           | Some x409 ->
                               ignore
                                 (Ojs.call x408 "push"
                                    [|(Ojs.float_to_js x409)|])
                           | None -> ());
                          x408))|])
    let (readFloatLE : t -> ?offset:float -> unit -> float) =
      fun (x415 : t) ->
        fun ?offset:(x412 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x416 = t_to_js x415 in
               Ojs.call (Ojs.get_prop_ascii x416 "readFloatLE") "apply"
                 [|x416;((let x413 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x412 with
                           | Some x414 ->
                               ignore
                                 (Ojs.call x413 "push"
                                    [|(Ojs.float_to_js x414)|])
                           | None -> ());
                          x413))|])
    let (readFloatBE : t -> ?offset:float -> unit -> float) =
      fun (x420 : t) ->
        fun ?offset:(x417 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x421 = t_to_js x420 in
               Ojs.call (Ojs.get_prop_ascii x421 "readFloatBE") "apply"
                 [|x421;((let x418 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x417 with
                           | Some x419 ->
                               ignore
                                 (Ojs.call x418 "push"
                                    [|(Ojs.float_to_js x419)|])
                           | None -> ());
                          x418))|])
    let (readDoubleLE : t -> ?offset:float -> unit -> float) =
      fun (x425 : t) ->
        fun ?offset:(x422 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x426 = t_to_js x425 in
               Ojs.call (Ojs.get_prop_ascii x426 "readDoubleLE") "apply"
                 [|x426;((let x423 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x422 with
                           | Some x424 ->
                               ignore
                                 (Ojs.call x423 "push"
                                    [|(Ojs.float_to_js x424)|])
                           | None -> ());
                          x423))|])
    let (readDoubleBE : t -> ?offset:float -> unit -> float) =
      fun (x430 : t) ->
        fun ?offset:(x427 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x431 = t_to_js x430 in
               Ojs.call (Ojs.get_prop_ascii x431 "readDoubleBE") "apply"
                 [|x431;((let x428 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x427 with
                           | Some x429 ->
                               ignore
                                 (Ojs.call x428 "push"
                                    [|(Ojs.float_to_js x429)|])
                           | None -> ());
                          x428))|])
    let (reverse : t -> t) =
      fun (x432 : t) -> t_of_js (Ojs.call (t_to_js x432) "reverse" [||])
    let (swap16 : t -> t) =
      fun (x433 : t) -> t_of_js (Ojs.call (t_to_js x433) "swap16" [||])
    let (swap32 : t -> t) =
      fun (x434 : t) -> t_of_js (Ojs.call (t_to_js x434) "swap32" [||])
    let (swap64 : t -> t) =
      fun (x435 : t) -> t_of_js (Ojs.call (t_to_js x435) "swap64" [||])
    let (writeUInt8 : t -> value:float -> ?offset:float -> unit -> float) =
      fun (x440 : t) ->
        fun ~value:(x436 : float) ->
          fun ?offset:(x437 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x441 = t_to_js x440 in
                 Ojs.call (Ojs.get_prop_ascii x441 "writeUInt8") "apply"
                   [|x441;((let x438 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x438 "push"
                                 [|(Ojs.float_to_js x436)|]);
                            (match x437 with
                             | Some x439 ->
                                 ignore
                                   (Ojs.call x438 "push"
                                      [|(Ojs.float_to_js x439)|])
                             | None -> ());
                            x438))|])
    let (writeUInt16LE : t -> value:float -> ?offset:float -> unit -> float)
      =
      fun (x446 : t) ->
        fun ~value:(x442 : float) ->
          fun ?offset:(x443 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x447 = t_to_js x446 in
                 Ojs.call (Ojs.get_prop_ascii x447 "writeUInt16LE") "apply"
                   [|x447;((let x444 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x444 "push"
                                 [|(Ojs.float_to_js x442)|]);
                            (match x443 with
                             | Some x445 ->
                                 ignore
                                   (Ojs.call x444 "push"
                                      [|(Ojs.float_to_js x445)|])
                             | None -> ());
                            x444))|])
    let (writeUInt16BE : t -> value:float -> ?offset:float -> unit -> float)
      =
      fun (x452 : t) ->
        fun ~value:(x448 : float) ->
          fun ?offset:(x449 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x453 = t_to_js x452 in
                 Ojs.call (Ojs.get_prop_ascii x453 "writeUInt16BE") "apply"
                   [|x453;((let x450 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x450 "push"
                                 [|(Ojs.float_to_js x448)|]);
                            (match x449 with
                             | Some x451 ->
                                 ignore
                                   (Ojs.call x450 "push"
                                      [|(Ojs.float_to_js x451)|])
                             | None -> ());
                            x450))|])
    let (writeUInt32LE : t -> value:float -> ?offset:float -> unit -> float)
      =
      fun (x458 : t) ->
        fun ~value:(x454 : float) ->
          fun ?offset:(x455 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x459 = t_to_js x458 in
                 Ojs.call (Ojs.get_prop_ascii x459 "writeUInt32LE") "apply"
                   [|x459;((let x456 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x456 "push"
                                 [|(Ojs.float_to_js x454)|]);
                            (match x455 with
                             | Some x457 ->
                                 ignore
                                   (Ojs.call x456 "push"
                                      [|(Ojs.float_to_js x457)|])
                             | None -> ());
                            x456))|])
    let (writeUInt32BE : t -> value:float -> ?offset:float -> unit -> float)
      =
      fun (x464 : t) ->
        fun ~value:(x460 : float) ->
          fun ?offset:(x461 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x465 = t_to_js x464 in
                 Ojs.call (Ojs.get_prop_ascii x465 "writeUInt32BE") "apply"
                   [|x465;((let x462 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x462 "push"
                                 [|(Ojs.float_to_js x460)|]);
                            (match x461 with
                             | Some x463 ->
                                 ignore
                                   (Ojs.call x462 "push"
                                      [|(Ojs.float_to_js x463)|])
                             | None -> ());
                            x462))|])
    let (writeInt8 : t -> value:float -> ?offset:float -> unit -> float) =
      fun (x470 : t) ->
        fun ~value:(x466 : float) ->
          fun ?offset:(x467 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x471 = t_to_js x470 in
                 Ojs.call (Ojs.get_prop_ascii x471 "writeInt8") "apply"
                   [|x471;((let x468 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x468 "push"
                                 [|(Ojs.float_to_js x466)|]);
                            (match x467 with
                             | Some x469 ->
                                 ignore
                                   (Ojs.call x468 "push"
                                      [|(Ojs.float_to_js x469)|])
                             | None -> ());
                            x468))|])
    let (writeInt16LE : t -> value:float -> ?offset:float -> unit -> float) =
      fun (x476 : t) ->
        fun ~value:(x472 : float) ->
          fun ?offset:(x473 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x477 = t_to_js x476 in
                 Ojs.call (Ojs.get_prop_ascii x477 "writeInt16LE") "apply"
                   [|x477;((let x474 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x474 "push"
                                 [|(Ojs.float_to_js x472)|]);
                            (match x473 with
                             | Some x475 ->
                                 ignore
                                   (Ojs.call x474 "push"
                                      [|(Ojs.float_to_js x475)|])
                             | None -> ());
                            x474))|])
    let (writeInt16BE : t -> value:float -> ?offset:float -> unit -> float) =
      fun (x482 : t) ->
        fun ~value:(x478 : float) ->
          fun ?offset:(x479 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x483 = t_to_js x482 in
                 Ojs.call (Ojs.get_prop_ascii x483 "writeInt16BE") "apply"
                   [|x483;((let x480 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x480 "push"
                                 [|(Ojs.float_to_js x478)|]);
                            (match x479 with
                             | Some x481 ->
                                 ignore
                                   (Ojs.call x480 "push"
                                      [|(Ojs.float_to_js x481)|])
                             | None -> ());
                            x480))|])
    let (writeInt32LE : t -> value:float -> ?offset:float -> unit -> float) =
      fun (x488 : t) ->
        fun ~value:(x484 : float) ->
          fun ?offset:(x485 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x489 = t_to_js x488 in
                 Ojs.call (Ojs.get_prop_ascii x489 "writeInt32LE") "apply"
                   [|x489;((let x486 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x486 "push"
                                 [|(Ojs.float_to_js x484)|]);
                            (match x485 with
                             | Some x487 ->
                                 ignore
                                   (Ojs.call x486 "push"
                                      [|(Ojs.float_to_js x487)|])
                             | None -> ());
                            x486))|])
    let (writeInt32BE : t -> value:float -> ?offset:float -> unit -> float) =
      fun (x494 : t) ->
        fun ~value:(x490 : float) ->
          fun ?offset:(x491 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x495 = t_to_js x494 in
                 Ojs.call (Ojs.get_prop_ascii x495 "writeInt32BE") "apply"
                   [|x495;((let x492 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x492 "push"
                                 [|(Ojs.float_to_js x490)|]);
                            (match x491 with
                             | Some x493 ->
                                 ignore
                                   (Ojs.call x492 "push"
                                      [|(Ojs.float_to_js x493)|])
                             | None -> ());
                            x492))|])
    let (writeFloatLE : t -> value:float -> ?offset:float -> unit -> float) =
      fun (x500 : t) ->
        fun ~value:(x496 : float) ->
          fun ?offset:(x497 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x501 = t_to_js x500 in
                 Ojs.call (Ojs.get_prop_ascii x501 "writeFloatLE") "apply"
                   [|x501;((let x498 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x498 "push"
                                 [|(Ojs.float_to_js x496)|]);
                            (match x497 with
                             | Some x499 ->
                                 ignore
                                   (Ojs.call x498 "push"
                                      [|(Ojs.float_to_js x499)|])
                             | None -> ());
                            x498))|])
    let (writeFloatBE : t -> value:float -> ?offset:float -> unit -> float) =
      fun (x506 : t) ->
        fun ~value:(x502 : float) ->
          fun ?offset:(x503 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x507 = t_to_js x506 in
                 Ojs.call (Ojs.get_prop_ascii x507 "writeFloatBE") "apply"
                   [|x507;((let x504 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x504 "push"
                                 [|(Ojs.float_to_js x502)|]);
                            (match x503 with
                             | Some x505 ->
                                 ignore
                                   (Ojs.call x504 "push"
                                      [|(Ojs.float_to_js x505)|])
                             | None -> ());
                            x504))|])
    let (writeDoubleLE : t -> value:float -> ?offset:float -> unit -> float)
      =
      fun (x512 : t) ->
        fun ~value:(x508 : float) ->
          fun ?offset:(x509 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x513 = t_to_js x512 in
                 Ojs.call (Ojs.get_prop_ascii x513 "writeDoubleLE") "apply"
                   [|x513;((let x510 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x510 "push"
                                 [|(Ojs.float_to_js x508)|]);
                            (match x509 with
                             | Some x511 ->
                                 ignore
                                   (Ojs.call x510 "push"
                                      [|(Ojs.float_to_js x511)|])
                             | None -> ());
                            x510))|])
    let (writeDoubleBE : t -> value:float -> ?offset:float -> unit -> float)
      =
      fun (x518 : t) ->
        fun ~value:(x514 : float) ->
          fun ?offset:(x515 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x519 = t_to_js x518 in
                 Ojs.call (Ojs.get_prop_ascii x519 "writeDoubleBE") "apply"
                   [|x519;((let x516 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x516 "push"
                                 [|(Ojs.float_to_js x514)|]);
                            (match x515 with
                             | Some x517 ->
                                 ignore
                                   (Ojs.call x516 "push"
                                      [|(Ojs.float_to_js x517)|])
                             | None -> ());
                            x516))|])
    let (fill :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?offset:float ->
            ?end_:float -> ?encoding:_BufferEncoding -> unit -> t)
      =
      fun (x530 : t) ->
        fun ~value:(x520 : Uint8Array.t or_string or_number) ->
          fun ?offset:(x521 : float option) ->
            fun ?end_:(x522 : float option) ->
              fun ?encoding:(x523 : _BufferEncoding option) ->
                fun () ->
                  t_of_js
                    (let x531 = t_to_js x530 in
                     Ojs.call (Ojs.get_prop_ascii x531 "fill") "apply"
                       [|x531;((let x524 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x524 "push"
                                     [|(or_number_to_js
                                          (fun
                                             (x528 : Uint8Array.t or_string)
                                             ->
                                             or_string_to_js
                                               Uint8Array.t_to_js x528) x520)|]);
                                (match x521 with
                                 | Some x527 ->
                                     ignore
                                       (Ojs.call x524 "push"
                                          [|(Ojs.float_to_js x527)|])
                                 | None -> ());
                                (match x522 with
                                 | Some x526 ->
                                     ignore
                                       (Ojs.call x524 "push"
                                          [|(Ojs.float_to_js x526)|])
                                 | None -> ());
                                (match x523 with
                                 | Some x525 ->
                                     ignore
                                       (Ojs.call x524 "push"
                                          [|(_BufferEncoding_to_js x525)|])
                                 | None -> ());
                                x524))|])
    let (indexOf :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?byteOffset:float -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun (x540 : t) ->
        fun ~value:(x532 : Uint8Array.t or_string or_number) ->
          fun ?byteOffset:(x533 : float option) ->
            fun ?encoding:(x534 : _BufferEncoding option) ->
              fun () ->
                Ojs.float_of_js
                  (let x541 = t_to_js x540 in
                   Ojs.call (Ojs.get_prop_ascii x541 "indexOf") "apply"
                     [|x541;((let x535 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x535 "push"
                                   [|(or_number_to_js
                                        (fun (x538 : Uint8Array.t or_string)
                                           ->
                                           or_string_to_js Uint8Array.t_to_js
                                             x538) x532)|]);
                              (match x533 with
                               | Some x537 ->
                                   ignore
                                     (Ojs.call x535 "push"
                                        [|(Ojs.float_to_js x537)|])
                               | None -> ());
                              (match x534 with
                               | Some x536 ->
                                   ignore
                                     (Ojs.call x535 "push"
                                        [|(_BufferEncoding_to_js x536)|])
                               | None -> ());
                              x535))|])
    let (lastIndexOf :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?byteOffset:float -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun (x550 : t) ->
        fun ~value:(x542 : Uint8Array.t or_string or_number) ->
          fun ?byteOffset:(x543 : float option) ->
            fun ?encoding:(x544 : _BufferEncoding option) ->
              fun () ->
                Ojs.float_of_js
                  (let x551 = t_to_js x550 in
                   Ojs.call (Ojs.get_prop_ascii x551 "lastIndexOf") "apply"
                     [|x551;((let x545 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x545 "push"
                                   [|(or_number_to_js
                                        (fun (x548 : Uint8Array.t or_string)
                                           ->
                                           or_string_to_js Uint8Array.t_to_js
                                             x548) x542)|]);
                              (match x543 with
                               | Some x547 ->
                                   ignore
                                     (Ojs.call x545 "push"
                                        [|(Ojs.float_to_js x547)|])
                               | None -> ());
                              (match x544 with
                               | Some x546 ->
                                   ignore
                                     (Ojs.call x545 "push"
                                        [|(_BufferEncoding_to_js x546)|])
                               | None -> ());
                              x545))|])
    let (entries : t -> (float * float) IterableIterator.t) =
      fun (x552 : t) ->
        IterableIterator.t_of_js
          (fun (x553 : Ojs.t) ->
             let x554 = x553 in
             ((Ojs.float_of_js (Ojs.array_get x554 0)),
               (Ojs.float_of_js (Ojs.array_get x554 1))))
          (Ojs.call (t_to_js x552) "entries" [||])
    let (includes :
      t ->
        value:t or_string or_number ->
          ?byteOffset:float -> ?encoding:_BufferEncoding -> unit -> bool)
      =
      fun (x563 : t) ->
        fun ~value:(x555 : t or_string or_number) ->
          fun ?byteOffset:(x556 : float option) ->
            fun ?encoding:(x557 : _BufferEncoding option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x564 = t_to_js x563 in
                   Ojs.call (Ojs.get_prop_ascii x564 "includes") "apply"
                     [|x564;((let x558 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x558 "push"
                                   [|(or_number_to_js
                                        (fun (x561 : t or_string) ->
                                           or_string_to_js t_to_js x561) x555)|]);
                              (match x556 with
                               | Some x560 ->
                                   ignore
                                     (Ojs.call x558 "push"
                                        [|(Ojs.float_to_js x560)|])
                               | None -> ());
                              (match x557 with
                               | Some x559 ->
                                   ignore
                                     (Ojs.call x558 "push"
                                        [|(_BufferEncoding_to_js x559)|])
                               | None -> ());
                              x558))|])
    let (keys : t -> float IterableIterator.t) =
      fun (x565 : t) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x565) "keys" [||])
    let (values : t -> float IterableIterator.t) =
      fun (x567 : t) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x567) "values" [||])
    let (cast : t -> Uint8Array.t) =
      fun (x569 : t) -> Uint8Array.t_of_js (t_to_js x569)
  end
module NodeJS =
  struct
    module InspectOptions =
      struct
        type t = _NodeJS_InspectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x571 : Ojs.t) -> _NodeJS_InspectOptions_of_js x571
        and t_to_js : t -> Ojs.t =
          fun (x570 : _NodeJS_InspectOptions) ->
            _NodeJS_InspectOptions_to_js x570
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x573 : Ojs.t) -> t_of_js x573
        and t_to_js : t -> Ojs.t = fun (x572 : t) -> t_to_js x572
        let (get_getters : t -> [ `get  | `set ] or_boolean) =
          fun (x574 : t) ->
            or_boolean_of_js
              (fun (x575 : Ojs.t) ->
                 let x576 = x575 in
                 match Ojs.string_of_js x576 with
                 | "get" -> `get
                 | "set" -> `set
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x574) "getters")
        let (set_getters : t -> [ `get  | `set ] or_boolean -> unit) =
          fun (x577 : t) ->
            fun (x578 : [ `get  | `set ] or_boolean) ->
              Ojs.set_prop_ascii (t_to_js x577) "getters"
                (or_boolean_to_js
                   (fun (x579 : [ `get  | `set ]) ->
                      match x579 with
                      | `get -> Ojs.string_to_js "get"
                      | `set -> Ojs.string_to_js "set") x578)
        let (get_showHidden : t -> bool) =
          fun (x580 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x580) "showHidden")
        let (set_showHidden : t -> bool -> unit) =
          fun (x581 : t) ->
            fun (x582 : bool) ->
              Ojs.set_prop_ascii (t_to_js x581) "showHidden"
                (Ojs.bool_to_js x582)
        let (get_depth : t -> float or_null) =
          fun (x583 : t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x583) "depth")
        let (set_depth : t -> float or_null -> unit) =
          fun (x585 : t) ->
            fun (x586 : float or_null) ->
              Ojs.set_prop_ascii (t_to_js x585) "depth"
                (or_null_to_js Ojs.float_to_js x586)
        let (get_colors : t -> bool) =
          fun (x588 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x588) "colors")
        let (set_colors : t -> bool -> unit) =
          fun (x589 : t) ->
            fun (x590 : bool) ->
              Ojs.set_prop_ascii (t_to_js x589) "colors"
                (Ojs.bool_to_js x590)
        let (get_customInspect : t -> bool) =
          fun (x591 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x591) "customInspect")
        let (set_customInspect : t -> bool -> unit) =
          fun (x592 : t) ->
            fun (x593 : bool) ->
              Ojs.set_prop_ascii (t_to_js x592) "customInspect"
                (Ojs.bool_to_js x593)
        let (get_showProxy : t -> bool) =
          fun (x594 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x594) "showProxy")
        let (set_showProxy : t -> bool -> unit) =
          fun (x595 : t) ->
            fun (x596 : bool) ->
              Ojs.set_prop_ascii (t_to_js x595) "showProxy"
                (Ojs.bool_to_js x596)
        let (get_maxArrayLength : t -> float or_null) =
          fun (x597 : t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x597) "maxArrayLength")
        let (set_maxArrayLength : t -> float or_null -> unit) =
          fun (x599 : t) ->
            fun (x600 : float or_null) ->
              Ojs.set_prop_ascii (t_to_js x599) "maxArrayLength"
                (or_null_to_js Ojs.float_to_js x600)
        let (get_maxStringLength : t -> float or_null) =
          fun (x602 : t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x602) "maxStringLength")
        let (set_maxStringLength : t -> float or_null -> unit) =
          fun (x604 : t) ->
            fun (x605 : float or_null) ->
              Ojs.set_prop_ascii (t_to_js x604) "maxStringLength"
                (or_null_to_js Ojs.float_to_js x605)
        let (get_breakLength : t -> float) =
          fun (x607 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x607) "breakLength")
        let (set_breakLength : t -> float -> unit) =
          fun (x608 : t) ->
            fun (x609 : float) ->
              Ojs.set_prop_ascii (t_to_js x608) "breakLength"
                (Ojs.float_to_js x609)
        let (get_compact : t -> bool or_number) =
          fun (x610 : t) ->
            or_number_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x610) "compact")
        let (set_compact : t -> bool or_number -> unit) =
          fun (x612 : t) ->
            fun (x613 : bool or_number) ->
              Ojs.set_prop_ascii (t_to_js x612) "compact"
                (or_number_to_js Ojs.bool_to_js x613)
        let (get_sorted : t -> (a:string -> b:string -> float) or_boolean) =
          fun (x615 : t) ->
            or_boolean_of_js
              (fun (x616 : Ojs.t) ->
                 fun ~a:(x617 : string) ->
                   fun ~b:(x618 : string) ->
                     Ojs.float_of_js
                       (Ojs.apply x616
                          [|(Ojs.string_to_js x617);(Ojs.string_to_js x618)|]))
              (Ojs.get_prop_ascii (t_to_js x615) "sorted")
        let (set_sorted :
          t -> (a:string -> b:string -> float) or_boolean -> unit) =
          fun (x619 : t) ->
            fun (x620 : (a:string -> b:string -> float) or_boolean) ->
              Ojs.set_prop_ascii (t_to_js x619) "sorted"
                (or_boolean_to_js
                   (fun (x621 : a:string -> b:string -> float) ->
                      Ojs.fun_to_js 2
                        (fun (x622 : Ojs.t) ->
                           fun (x623 : Ojs.t) ->
                             Ojs.float_to_js
                               (x621 ~a:(Ojs.string_of_js x622)
                                  ~b:(Ojs.string_of_js x623)))) x620)
      end
    module CallSite =
      struct
        type t = _NodeJS_CallSite
        let rec t_of_js : Ojs.t -> t =
          fun (x625 : Ojs.t) -> _NodeJS_CallSite_of_js x625
        and t_to_js : t -> Ojs.t =
          fun (x624 : _NodeJS_CallSite) -> _NodeJS_CallSite_to_js x624
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x627 : Ojs.t) -> t_of_js x627
        and t_to_js : t -> Ojs.t = fun (x626 : t) -> t_to_js x626
        let (getThis : t -> any) =
          fun (x628 : t) ->
            any_of_js (Ojs.call (t_to_js x628) "getThis" [||])
        let (getTypeName : t -> string or_null) =
          fun (x629 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x629) "getTypeName" [||])
        let (getFunction : t -> untyped_function or_undefined) =
          fun (x631 : t) ->
            or_undefined_of_js untyped_function_of_js
              (Ojs.call (t_to_js x631) "getFunction" [||])
        let (getFunctionName : t -> string or_null) =
          fun (x633 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x633) "getFunctionName" [||])
        let (getMethodName : t -> string or_null) =
          fun (x635 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x635) "getMethodName" [||])
        let (getFileName : t -> string or_null) =
          fun (x637 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x637) "getFileName" [||])
        let (getLineNumber : t -> float or_null) =
          fun (x639 : t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.call (t_to_js x639) "getLineNumber" [||])
        let (getColumnNumber : t -> float or_null) =
          fun (x641 : t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.call (t_to_js x641) "getColumnNumber" [||])
        let (getEvalOrigin : t -> string or_undefined) =
          fun (x643 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x643) "getEvalOrigin" [||])
        let (isToplevel : t -> bool) =
          fun (x645 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x645) "isToplevel" [||])
        let (isEval : t -> bool) =
          fun (x646 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x646) "isEval" [||])
        let (isNative : t -> bool) =
          fun (x647 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x647) "isNative" [||])
        let (isConstructor : t -> bool) =
          fun (x648 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x648) "isConstructor" [||])
      end
    module ErrnoException =
      struct
        type t = _NodeJS_ErrnoException
        let rec t_of_js : Ojs.t -> t =
          fun (x650 : Ojs.t) -> _NodeJS_ErrnoException_of_js x650
        and t_to_js : t -> Ojs.t =
          fun (x649 : _NodeJS_ErrnoException) ->
            _NodeJS_ErrnoException_to_js x649
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x652 : Ojs.t) -> t_of_js x652
        and t_to_js : t -> Ojs.t = fun (x651 : t) -> t_to_js x651
        let (get_errno : t -> float) =
          fun (x653 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x653) "errno")
        let (set_errno : t -> float -> unit) =
          fun (x654 : t) ->
            fun (x655 : float) ->
              Ojs.set_prop_ascii (t_to_js x654) "errno"
                (Ojs.float_to_js x655)
        let (get_code : t -> string) =
          fun (x656 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x656) "code")
        let (set_code : t -> string -> unit) =
          fun (x657 : t) ->
            fun (x658 : string) ->
              Ojs.set_prop_ascii (t_to_js x657) "code"
                (Ojs.string_to_js x658)
        let (get_path : t -> string) =
          fun (x659 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x659) "path")
        let (set_path : t -> string -> unit) =
          fun (x660 : t) ->
            fun (x661 : string) ->
              Ojs.set_prop_ascii (t_to_js x660) "path"
                (Ojs.string_to_js x661)
        let (get_syscall : t -> string) =
          fun (x662 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x662) "syscall")
        let (set_syscall : t -> string -> unit) =
          fun (x663 : t) ->
            fun (x664 : string) ->
              Ojs.set_prop_ascii (t_to_js x663) "syscall"
                (Ojs.string_to_js x664)
        let (get_stack : t -> string) =
          fun (x665 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x665) "stack")
        let (set_stack : t -> string -> unit) =
          fun (x666 : t) ->
            fun (x667 : string) ->
              Ojs.set_prop_ascii (t_to_js x666) "stack"
                (Ojs.string_to_js x667)
        let (cast : t -> Error.t) =
          fun (x668 : t) -> Error.t_of_js (t_to_js x668)
      end
    module ReadableStream =
      struct
        type t = _NodeJS_ReadableStream
        let rec t_of_js : Ojs.t -> t =
          fun (x670 : Ojs.t) -> _NodeJS_ReadableStream_of_js x670
        and t_to_js : t -> Ojs.t =
          fun (x669 : _NodeJS_ReadableStream) ->
            _NodeJS_ReadableStream_to_js x669
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x672 : Ojs.t) -> t_of_js x672
        and t_to_js : t -> Ojs.t = fun (x671 : t) -> t_to_js x671
        let (get_readable : t -> bool) =
          fun (x673 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x673) "readable")
        let (set_readable : t -> bool -> unit) =
          fun (x674 : t) ->
            fun (x675 : bool) ->
              Ojs.set_prop_ascii (t_to_js x674) "readable"
                (Ojs.bool_to_js x675)
        let (read : t -> ?size:float -> unit -> _Buffer or_string) =
          fun (x679 : t) ->
            fun ?size:(x676 : float option) ->
              fun () ->
                or_string_of_js _Buffer_of_js
                  (let x680 = t_to_js x679 in
                   Ojs.call (Ojs.get_prop_ascii x680 "read") "apply"
                     [|x680;((let x677 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x676 with
                               | Some x678 ->
                                   ignore
                                     (Ojs.call x677 "push"
                                        [|(Ojs.float_to_js x678)|])
                               | None -> ());
                              x677))|])
        let (setEncoding : t -> encoding:_BufferEncoding -> t) =
          fun (x683 : t) ->
            fun ~encoding:(x682 : _BufferEncoding) ->
              t_of_js
                (Ojs.call (t_to_js x683) "setEncoding"
                   [|(_BufferEncoding_to_js x682)|])
        let (pause : t -> t) =
          fun (x684 : t) -> t_of_js (Ojs.call (t_to_js x684) "pause" [||])
        let (resume : t -> t) =
          fun (x685 : t) -> t_of_js (Ojs.call (t_to_js x685) "resume" [||])
        let (isPaused : t -> bool) =
          fun (x686 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x686) "isPaused" [||])
        let (pipe :
          t -> destination:'T -> ?options:anonymous_interface_0 -> unit -> 'T)
          =
          fun (x691 : t) ->
            fun ~destination:(x687 : 'T) ->
              fun ?options:(x688 : anonymous_interface_0 option) ->
                fun () ->
                  Obj.magic
                    (let x692 = t_to_js x691 in
                     Ojs.call (Ojs.get_prop_ascii x692 "pipe") "apply"
                       [|x692;((let x689 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x689 "push" [|(Obj.magic x687)|]);
                                (match x688 with
                                 | Some x690 ->
                                     ignore
                                       (Ojs.call x689 "push"
                                          [|(anonymous_interface_0_to_js x690)|])
                                 | None -> ());
                                x689))|])
        let (unpipe : t -> ?destination:_NodeJS_WritableStream -> unit -> t)
          =
          fun (x696 : t) ->
            fun ?destination:(x693 : _NodeJS_WritableStream option) ->
              fun () ->
                t_of_js
                  (let x697 = t_to_js x696 in
                   Ojs.call (Ojs.get_prop_ascii x697 "unpipe") "apply"
                     [|x697;((let x694 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x693 with
                               | Some x695 ->
                                   ignore
                                     (Ojs.call x694 "push"
                                        [|(_NodeJS_WritableStream_to_js x695)|])
                               | None -> ());
                              x694))|])
        let (unshift :
          t ->
            chunk:Uint8Array.t or_string ->
              ?encoding:_BufferEncoding -> unit -> unit)
          =
          fun (x703 : t) ->
            fun ~chunk:(x698 : Uint8Array.t or_string) ->
              fun ?encoding:(x699 : _BufferEncoding option) ->
                fun () ->
                  ignore
                    (let x704 = t_to_js x703 in
                     Ojs.call (Ojs.get_prop_ascii x704 "unshift") "apply"
                       [|x704;((let x700 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x700 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x698)|]);
                                (match x699 with
                                 | Some x701 ->
                                     ignore
                                       (Ojs.call x700 "push"
                                          [|(_BufferEncoding_to_js x701)|])
                                 | None -> ());
                                x700))|])
        let (wrap : t -> oldStream:t -> t) =
          fun (x706 : t) ->
            fun ~oldStream:(x705 : t) ->
              t_of_js (Ojs.call (t_to_js x706) "wrap" [|(t_to_js x705)|])
        let (cast : t -> EventEmitter.t) =
          fun (x707 : t) -> EventEmitter.t_of_js (t_to_js x707)
      end
    module WritableStream =
      struct
        type t = _NodeJS_WritableStream
        let rec t_of_js : Ojs.t -> t =
          fun (x709 : Ojs.t) -> _NodeJS_WritableStream_of_js x709
        and t_to_js : t -> Ojs.t =
          fun (x708 : _NodeJS_WritableStream) ->
            _NodeJS_WritableStream_to_js x708
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x711 : Ojs.t) -> t_of_js x711
        and t_to_js : t -> Ojs.t = fun (x710 : t) -> t_to_js x710
        let (get_writable : t -> bool) =
          fun (x712 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x712) "writable")
        let (set_writable : t -> bool -> unit) =
          fun (x713 : t) ->
            fun (x714 : bool) ->
              Ojs.set_prop_ascii (t_to_js x713) "writable"
                (Ojs.bool_to_js x714)
        let (write :
          t ->
            buffer:Uint8Array.t or_string ->
              ?cb:(?err:Error.t or_null -> unit -> unit) -> unit -> bool)
          =
          fun (x723 : t) ->
            fun ~buffer:(x715 : Uint8Array.t or_string) ->
              fun ?cb:(x716 : (?err:Error.t or_null -> unit -> unit) option)
                ->
                fun () ->
                  Ojs.bool_of_js
                    (let x724 = t_to_js x723 in
                     Ojs.call (Ojs.get_prop_ascii x724 "write") "apply"
                       [|x724;((let x717 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x717 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x715)|]);
                                (match x716 with
                                 | Some x718 ->
                                     ignore
                                       (Ojs.call x717 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x719 : Ojs.t) ->
                                                  x718
                                                    ?err:(Ojs.option_of_js
                                                            (fun
                                                               (x720 : Ojs.t)
                                                               ->
                                                               or_null_of_js
                                                                 Error.t_of_js
                                                                 x720) x719)
                                                    ()))|])
                                 | None -> ());
                                x717))|])
        let (write' :
          t ->
            str:string ->
              ?encoding:_BufferEncoding ->
                ?cb:(?err:Error.t or_null -> unit -> unit) -> unit -> bool)
          =
          fun (x734 : t) ->
            fun ~str:(x725 : string) ->
              fun ?encoding:(x726 : _BufferEncoding option) ->
                fun
                  ?cb:(x727 : (?err:Error.t or_null -> unit -> unit) option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x735 = t_to_js x734 in
                       Ojs.call (Ojs.get_prop_ascii x735 "write") "apply"
                         [|x735;((let x728 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x728 "push"
                                       [|(Ojs.string_to_js x725)|]);
                                  (match x726 with
                                   | Some x733 ->
                                       ignore
                                         (Ojs.call x728 "push"
                                            [|(_BufferEncoding_to_js x733)|])
                                   | None -> ());
                                  (match x727 with
                                   | Some x729 ->
                                       ignore
                                         (Ojs.call x728 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x730 : Ojs.t) ->
                                                    x729
                                                      ?err:(Ojs.option_of_js
                                                              (fun
                                                                 (x731 :
                                                                   Ojs.t)
                                                                 ->
                                                                 or_null_of_js
                                                                   Error.t_of_js
                                                                   x731) x730)
                                                      ()))|])
                                   | None -> ());
                                  x728))|])
        let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
          fun (x739 : t) ->
            fun ?cb:(x736 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x740 = t_to_js x739 in
                   Ojs.call (Ojs.get_prop_ascii x740 "end") "apply"
                     [|x740;((let x737 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x736 with
                               | Some x738 ->
                                   ignore
                                     (Ojs.call x737 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x738 ()))|])
                               | None -> ());
                              x737))|])
        let (end_' :
          t ->
            data:Uint8Array.t or_string -> ?cb:(unit -> unit) -> unit -> unit)
          =
          fun (x746 : t) ->
            fun ~data:(x741 : Uint8Array.t or_string) ->
              fun ?cb:(x742 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x747 = t_to_js x746 in
                     Ojs.call (Ojs.get_prop_ascii x747 "end") "apply"
                       [|x747;((let x743 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x743 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x741)|]);
                                (match x742 with
                                 | Some x744 ->
                                     ignore
                                       (Ojs.call x743 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x744 ()))|])
                                 | None -> ());
                                x743))|])
        let (end_'' :
          t ->
            str:string ->
              ?encoding:_BufferEncoding -> ?cb:(unit -> unit) -> unit -> unit)
          =
          fun (x754 : t) ->
            fun ~str:(x748 : string) ->
              fun ?encoding:(x749 : _BufferEncoding option) ->
                fun ?cb:(x750 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x755 = t_to_js x754 in
                       Ojs.call (Ojs.get_prop_ascii x755 "end") "apply"
                         [|x755;((let x751 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x751 "push"
                                       [|(Ojs.string_to_js x748)|]);
                                  (match x749 with
                                   | Some x753 ->
                                       ignore
                                         (Ojs.call x751 "push"
                                            [|(_BufferEncoding_to_js x753)|])
                                   | None -> ());
                                  (match x750 with
                                   | Some x752 ->
                                       ignore
                                         (Ojs.call x751 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x752 ()))|])
                                   | None -> ());
                                  x751))|])
        let (cast : t -> EventEmitter.t) =
          fun (x756 : t) -> EventEmitter.t_of_js (t_to_js x756)
      end
    module ReadWriteStream =
      struct
        type t = _NodeJS_ReadWriteStream
        let rec t_of_js : Ojs.t -> t =
          fun (x758 : Ojs.t) -> _NodeJS_ReadWriteStream_of_js x758
        and t_to_js : t -> Ojs.t =
          fun (x757 : _NodeJS_ReadWriteStream) ->
            _NodeJS_ReadWriteStream_to_js x757
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x760 : Ojs.t) -> t_of_js x760
        and t_to_js : t -> Ojs.t = fun (x759 : t) -> t_to_js x759
        let (cast : t -> _NodeJS_ReadableStream) =
          fun (x761 : t) -> _NodeJS_ReadableStream_of_js (t_to_js x761)
        let (cast' : t -> _NodeJS_WritableStream) =
          fun (x762 : t) -> _NodeJS_WritableStream_of_js (t_to_js x762)
      end
    module Global =
      struct
        type t = _NodeJS_Global
        let rec t_of_js : Ojs.t -> t =
          fun (x764 : Ojs.t) -> _NodeJS_Global_of_js x764
        and t_to_js : t -> Ojs.t =
          fun (x763 : _NodeJS_Global) -> _NodeJS_Global_to_js x763
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x766 : Ojs.t) -> t_of_js x766
        and t_to_js : t -> Ojs.t = fun (x765 : t) -> t_to_js x765
        let (get_Array : t -> any) =
          fun (x767 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x767) "Array")
        let (set_Array : t -> any -> unit) =
          fun (x768 : t) ->
            fun (x769 : any) ->
              Ojs.set_prop_ascii (t_to_js x768) "Array" (any_to_js x769)
        let (get_ArrayBuffer : t -> any) =
          fun (x770 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x770) "ArrayBuffer")
        let (set_ArrayBuffer : t -> any -> unit) =
          fun (x771 : t) ->
            fun (x772 : any) ->
              Ojs.set_prop_ascii (t_to_js x771) "ArrayBuffer"
                (any_to_js x772)
        let (get_Boolean : t -> any) =
          fun (x773 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x773) "Boolean")
        let (set_Boolean : t -> any -> unit) =
          fun (x774 : t) ->
            fun (x775 : any) ->
              Ojs.set_prop_ascii (t_to_js x774) "Boolean" (any_to_js x775)
        let (get_Buffer : t -> any) =
          fun (x776 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x776) "Buffer")
        let (set_Buffer : t -> any -> unit) =
          fun (x777 : t) ->
            fun (x778 : any) ->
              Ojs.set_prop_ascii (t_to_js x777) "Buffer" (any_to_js x778)
        let (get_DataView : t -> any) =
          fun (x779 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x779) "DataView")
        let (set_DataView : t -> any -> unit) =
          fun (x780 : t) ->
            fun (x781 : any) ->
              Ojs.set_prop_ascii (t_to_js x780) "DataView" (any_to_js x781)
        let (get_Date : t -> any) =
          fun (x782 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x782) "Date")
        let (set_Date : t -> any -> unit) =
          fun (x783 : t) ->
            fun (x784 : any) ->
              Ojs.set_prop_ascii (t_to_js x783) "Date" (any_to_js x784)
        let (get_Error : t -> any) =
          fun (x785 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x785) "Error")
        let (set_Error : t -> any -> unit) =
          fun (x786 : t) ->
            fun (x787 : any) ->
              Ojs.set_prop_ascii (t_to_js x786) "Error" (any_to_js x787)
        let (get_EvalError : t -> any) =
          fun (x788 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x788) "EvalError")
        let (set_EvalError : t -> any -> unit) =
          fun (x789 : t) ->
            fun (x790 : any) ->
              Ojs.set_prop_ascii (t_to_js x789) "EvalError" (any_to_js x790)
        let (get_Float32Array : t -> any) =
          fun (x791 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x791) "Float32Array")
        let (set_Float32Array : t -> any -> unit) =
          fun (x792 : t) ->
            fun (x793 : any) ->
              Ojs.set_prop_ascii (t_to_js x792) "Float32Array"
                (any_to_js x793)
        let (get_Float64Array : t -> any) =
          fun (x794 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x794) "Float64Array")
        let (set_Float64Array : t -> any -> unit) =
          fun (x795 : t) ->
            fun (x796 : any) ->
              Ojs.set_prop_ascii (t_to_js x795) "Float64Array"
                (any_to_js x796)
        let (get_Function : t -> any) =
          fun (x797 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x797) "Function")
        let (set_Function : t -> any -> unit) =
          fun (x798 : t) ->
            fun (x799 : any) ->
              Ojs.set_prop_ascii (t_to_js x798) "Function" (any_to_js x799)
        let (get_Infinity : t -> any) =
          fun (x800 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x800) "Infinity")
        let (set_Infinity : t -> any -> unit) =
          fun (x801 : t) ->
            fun (x802 : any) ->
              Ojs.set_prop_ascii (t_to_js x801) "Infinity" (any_to_js x802)
        let (get_Int16Array : t -> any) =
          fun (x803 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x803) "Int16Array")
        let (set_Int16Array : t -> any -> unit) =
          fun (x804 : t) ->
            fun (x805 : any) ->
              Ojs.set_prop_ascii (t_to_js x804) "Int16Array" (any_to_js x805)
        let (get_Int32Array : t -> any) =
          fun (x806 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x806) "Int32Array")
        let (set_Int32Array : t -> any -> unit) =
          fun (x807 : t) ->
            fun (x808 : any) ->
              Ojs.set_prop_ascii (t_to_js x807) "Int32Array" (any_to_js x808)
        let (get_Int8Array : t -> any) =
          fun (x809 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x809) "Int8Array")
        let (set_Int8Array : t -> any -> unit) =
          fun (x810 : t) ->
            fun (x811 : any) ->
              Ojs.set_prop_ascii (t_to_js x810) "Int8Array" (any_to_js x811)
        let (get_Intl : t -> any) =
          fun (x812 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x812) "Intl")
        let (set_Intl : t -> any -> unit) =
          fun (x813 : t) ->
            fun (x814 : any) ->
              Ojs.set_prop_ascii (t_to_js x813) "Intl" (any_to_js x814)
        let (get_JSON : t -> any) =
          fun (x815 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x815) "JSON")
        let (set_JSON : t -> any -> unit) =
          fun (x816 : t) ->
            fun (x817 : any) ->
              Ojs.set_prop_ascii (t_to_js x816) "JSON" (any_to_js x817)
        let (get_Map : t -> MapConstructor.t) =
          fun (x818 : t) ->
            MapConstructor.t_of_js (Ojs.get_prop_ascii (t_to_js x818) "Map")
        let (set_Map : t -> MapConstructor.t -> unit) =
          fun (x819 : t) ->
            fun (x820 : MapConstructor.t) ->
              Ojs.set_prop_ascii (t_to_js x819) "Map"
                (MapConstructor.t_to_js x820)
        let (get_Math : t -> any) =
          fun (x821 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x821) "Math")
        let (set_Math : t -> any -> unit) =
          fun (x822 : t) ->
            fun (x823 : any) ->
              Ojs.set_prop_ascii (t_to_js x822) "Math" (any_to_js x823)
        let (get_NaN : t -> any) =
          fun (x824 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x824) "NaN")
        let (set_NaN : t -> any -> unit) =
          fun (x825 : t) ->
            fun (x826 : any) ->
              Ojs.set_prop_ascii (t_to_js x825) "NaN" (any_to_js x826)
        let (get_Number : t -> any) =
          fun (x827 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x827) "Number")
        let (set_Number : t -> any -> unit) =
          fun (x828 : t) ->
            fun (x829 : any) ->
              Ojs.set_prop_ascii (t_to_js x828) "Number" (any_to_js x829)
        let (get_Object : t -> any) =
          fun (x830 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x830) "Object")
        let (set_Object : t -> any -> unit) =
          fun (x831 : t) ->
            fun (x832 : any) ->
              Ojs.set_prop_ascii (t_to_js x831) "Object" (any_to_js x832)
        let (get_Promise : t -> any) =
          fun (x833 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x833) "Promise")
        let (set_Promise : t -> any -> unit) =
          fun (x834 : t) ->
            fun (x835 : any) ->
              Ojs.set_prop_ascii (t_to_js x834) "Promise" (any_to_js x835)
        let (get_RangeError : t -> any) =
          fun (x836 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x836) "RangeError")
        let (set_RangeError : t -> any -> unit) =
          fun (x837 : t) ->
            fun (x838 : any) ->
              Ojs.set_prop_ascii (t_to_js x837) "RangeError" (any_to_js x838)
        let (get_ReferenceError : t -> any) =
          fun (x839 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x839) "ReferenceError")
        let (set_ReferenceError : t -> any -> unit) =
          fun (x840 : t) ->
            fun (x841 : any) ->
              Ojs.set_prop_ascii (t_to_js x840) "ReferenceError"
                (any_to_js x841)
        let (get_RegExp : t -> any) =
          fun (x842 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x842) "RegExp")
        let (set_RegExp : t -> any -> unit) =
          fun (x843 : t) ->
            fun (x844 : any) ->
              Ojs.set_prop_ascii (t_to_js x843) "RegExp" (any_to_js x844)
        let (get_Set : t -> SetConstructor.t) =
          fun (x845 : t) ->
            SetConstructor.t_of_js (Ojs.get_prop_ascii (t_to_js x845) "Set")
        let (set_Set : t -> SetConstructor.t -> unit) =
          fun (x846 : t) ->
            fun (x847 : SetConstructor.t) ->
              Ojs.set_prop_ascii (t_to_js x846) "Set"
                (SetConstructor.t_to_js x847)
        let (get_String : t -> any) =
          fun (x848 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x848) "String")
        let (set_String : t -> any -> unit) =
          fun (x849 : t) ->
            fun (x850 : any) ->
              Ojs.set_prop_ascii (t_to_js x849) "String" (any_to_js x850)
        let (get_Symbol : t -> untyped_function) =
          fun (x851 : t) ->
            untyped_function_of_js
              (Ojs.get_prop_ascii (t_to_js x851) "Symbol")
        let (set_Symbol : t -> untyped_function -> unit) =
          fun (x852 : t) ->
            fun (x853 : untyped_function) ->
              Ojs.set_prop_ascii (t_to_js x852) "Symbol"
                (untyped_function_to_js x853)
        let (get_SyntaxError : t -> any) =
          fun (x854 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x854) "SyntaxError")
        let (set_SyntaxError : t -> any -> unit) =
          fun (x855 : t) ->
            fun (x856 : any) ->
              Ojs.set_prop_ascii (t_to_js x855) "SyntaxError"
                (any_to_js x856)
        let (get_TypeError : t -> any) =
          fun (x857 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x857) "TypeError")
        let (set_TypeError : t -> any -> unit) =
          fun (x858 : t) ->
            fun (x859 : any) ->
              Ojs.set_prop_ascii (t_to_js x858) "TypeError" (any_to_js x859)
        let (get_URIError : t -> any) =
          fun (x860 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x860) "URIError")
        let (set_URIError : t -> any -> unit) =
          fun (x861 : t) ->
            fun (x862 : any) ->
              Ojs.set_prop_ascii (t_to_js x861) "URIError" (any_to_js x862)
        let (get_Uint16Array : t -> any) =
          fun (x863 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x863) "Uint16Array")
        let (set_Uint16Array : t -> any -> unit) =
          fun (x864 : t) ->
            fun (x865 : any) ->
              Ojs.set_prop_ascii (t_to_js x864) "Uint16Array"
                (any_to_js x865)
        let (get_Uint32Array : t -> any) =
          fun (x866 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x866) "Uint32Array")
        let (set_Uint32Array : t -> any -> unit) =
          fun (x867 : t) ->
            fun (x868 : any) ->
              Ojs.set_prop_ascii (t_to_js x867) "Uint32Array"
                (any_to_js x868)
        let (get_Uint8Array : t -> any) =
          fun (x869 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x869) "Uint8Array")
        let (set_Uint8Array : t -> any -> unit) =
          fun (x870 : t) ->
            fun (x871 : any) ->
              Ojs.set_prop_ascii (t_to_js x870) "Uint8Array" (any_to_js x871)
        let (get_Uint8ClampedArray : t -> any) =
          fun (x872 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x872) "Uint8ClampedArray")
        let (set_Uint8ClampedArray : t -> any -> unit) =
          fun (x873 : t) ->
            fun (x874 : any) ->
              Ojs.set_prop_ascii (t_to_js x873) "Uint8ClampedArray"
                (any_to_js x874)
        let (get_WeakMap : t -> WeakMapConstructor.t) =
          fun (x875 : t) ->
            WeakMapConstructor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x875) "WeakMap")
        let (set_WeakMap : t -> WeakMapConstructor.t -> unit) =
          fun (x876 : t) ->
            fun (x877 : WeakMapConstructor.t) ->
              Ojs.set_prop_ascii (t_to_js x876) "WeakMap"
                (WeakMapConstructor.t_to_js x877)
        let (get_WeakSet : t -> WeakSetConstructor.t) =
          fun (x878 : t) ->
            WeakSetConstructor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x878) "WeakSet")
        let (set_WeakSet : t -> WeakSetConstructor.t -> unit) =
          fun (x879 : t) ->
            fun (x880 : WeakSetConstructor.t) ->
              Ojs.set_prop_ascii (t_to_js x879) "WeakSet"
                (WeakSetConstructor.t_to_js x880)
        let (clearImmediate : t -> immediateId:_NodeJS_Immediate -> unit) =
          fun (x882 : t) ->
            fun ~immediateId:(x881 : _NodeJS_Immediate) ->
              ignore
                (Ojs.call (t_to_js x882) "clearImmediate"
                   [|(_NodeJS_Immediate_to_js x881)|])
        let (clearInterval : t -> intervalId:_NodeJS_Timeout -> unit) =
          fun (x884 : t) ->
            fun ~intervalId:(x883 : _NodeJS_Timeout) ->
              ignore
                (Ojs.call (t_to_js x884) "clearInterval"
                   [|(_NodeJS_Timeout_to_js x883)|])
        let (clearTimeout : t -> timeoutId:_NodeJS_Timeout -> unit) =
          fun (x886 : t) ->
            fun ~timeoutId:(x885 : _NodeJS_Timeout) ->
              ignore
                (Ojs.call (t_to_js x886) "clearTimeout"
                   [|(_NodeJS_Timeout_to_js x885)|])
        let (get_decodeURI : t -> any) =
          fun (x887 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x887) "decodeURI")
        let (set_decodeURI : t -> any -> unit) =
          fun (x888 : t) ->
            fun (x889 : any) ->
              Ojs.set_prop_ascii (t_to_js x888) "decodeURI" (any_to_js x889)
        let (get_decodeURIComponent : t -> any) =
          fun (x890 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x890) "decodeURIComponent")
        let (set_decodeURIComponent : t -> any -> unit) =
          fun (x891 : t) ->
            fun (x892 : any) ->
              Ojs.set_prop_ascii (t_to_js x891) "decodeURIComponent"
                (any_to_js x892)
        let (get_encodeURI : t -> any) =
          fun (x893 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x893) "encodeURI")
        let (set_encodeURI : t -> any -> unit) =
          fun (x894 : t) ->
            fun (x895 : any) ->
              Ojs.set_prop_ascii (t_to_js x894) "encodeURI" (any_to_js x895)
        let (get_encodeURIComponent : t -> any) =
          fun (x896 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x896) "encodeURIComponent")
        let (set_encodeURIComponent : t -> any -> unit) =
          fun (x897 : t) ->
            fun (x898 : any) ->
              Ojs.set_prop_ascii (t_to_js x897) "encodeURIComponent"
                (any_to_js x898)
        let (escape : t -> str:string -> string) =
          fun (x900 : t) ->
            fun ~str:(x899 : string) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x900) "escape" [|(Ojs.string_to_js x899)|])
        let (get_eval : t -> any) =
          fun (x901 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x901) "eval")
        let (set_eval : t -> any -> unit) =
          fun (x902 : t) ->
            fun (x903 : any) ->
              Ojs.set_prop_ascii (t_to_js x902) "eval" (any_to_js x903)
        let (get_global : t -> t) =
          fun (x904 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x904) "global")
        let (set_global : t -> t -> unit) =
          fun (x905 : t) ->
            fun (x906 : t) ->
              Ojs.set_prop_ascii (t_to_js x905) "global" (t_to_js x906)
        let (get_isFinite : t -> any) =
          fun (x907 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x907) "isFinite")
        let (set_isFinite : t -> any -> unit) =
          fun (x908 : t) ->
            fun (x909 : any) ->
              Ojs.set_prop_ascii (t_to_js x908) "isFinite" (any_to_js x909)
        let (get_isNaN : t -> any) =
          fun (x910 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x910) "isNaN")
        let (set_isNaN : t -> any -> unit) =
          fun (x911 : t) ->
            fun (x912 : any) ->
              Ojs.set_prop_ascii (t_to_js x911) "isNaN" (any_to_js x912)
        let (get_parseFloat : t -> any) =
          fun (x913 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x913) "parseFloat")
        let (set_parseFloat : t -> any -> unit) =
          fun (x914 : t) ->
            fun (x915 : any) ->
              Ojs.set_prop_ascii (t_to_js x914) "parseFloat" (any_to_js x915)
        let (get_parseInt : t -> any) =
          fun (x916 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x916) "parseInt")
        let (set_parseInt : t -> any -> unit) =
          fun (x917 : t) ->
            fun (x918 : any) ->
              Ojs.set_prop_ascii (t_to_js x917) "parseInt" (any_to_js x918)
        let (setImmediate :
          t ->
            callback:(args:any list -> unit) ->
              args:any list -> _NodeJS_Immediate)
          =
          fun (x925 : t) ->
            fun ~callback:(x919 : args:any list -> unit) ->
              fun ~args:(x920 : any list) ->
                _NodeJS_Immediate_of_js
                  (let x926 = t_to_js x925 in
                   Ojs.call (Ojs.get_prop_ascii x926 "setImmediate") "apply"
                     [|x926;((let x921 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x921 "push"
                                   [|(Ojs.fun_to_js_args
                                        (fun (x923 : _) ->
                                           x919
                                             ~args:(Ojs.list_of_js_from
                                                      any_of_js x923 0)))|]);
                              List.iter
                                (fun (x922 : any) ->
                                   ignore
                                     (Ojs.call x921 "push"
                                        [|(any_to_js x922)|])) x920;
                              x921))|])
        let (setInterval :
          t ->
            callback:(args:any list -> unit) ->
              ?ms:float -> args:any list -> _NodeJS_Timeout)
          =
          fun (x935 : t) ->
            fun ~callback:(x927 : args:any list -> unit) ->
              fun ?ms:(x928 : float option) ->
                fun ~args:(x929 : any list) ->
                  _NodeJS_Timeout_of_js
                    (let x936 = t_to_js x935 in
                     Ojs.call (Ojs.get_prop_ascii x936 "setInterval") "apply"
                       [|x936;((let x930 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x930 "push"
                                     [|(Ojs.fun_to_js_args
                                          (fun (x933 : _) ->
                                             x927
                                               ~args:(Ojs.list_of_js_from
                                                        any_of_js x933 0)))|]);
                                (match x928 with
                                 | Some x932 ->
                                     ignore
                                       (Ojs.call x930 "push"
                                          [|(Ojs.float_to_js x932)|])
                                 | None -> ());
                                List.iter
                                  (fun (x931 : any) ->
                                     ignore
                                       (Ojs.call x930 "push"
                                          [|(any_to_js x931)|])) x929;
                                x930))|])
        let (setTimeout :
          t ->
            callback:(args:any list -> unit) ->
              ?ms:float -> args:any list -> _NodeJS_Timeout)
          =
          fun (x945 : t) ->
            fun ~callback:(x937 : args:any list -> unit) ->
              fun ?ms:(x938 : float option) ->
                fun ~args:(x939 : any list) ->
                  _NodeJS_Timeout_of_js
                    (let x946 = t_to_js x945 in
                     Ojs.call (Ojs.get_prop_ascii x946 "setTimeout") "apply"
                       [|x946;((let x940 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x940 "push"
                                     [|(Ojs.fun_to_js_args
                                          (fun (x943 : _) ->
                                             x937
                                               ~args:(Ojs.list_of_js_from
                                                        any_of_js x943 0)))|]);
                                (match x938 with
                                 | Some x942 ->
                                     ignore
                                       (Ojs.call x940 "push"
                                          [|(Ojs.float_to_js x942)|])
                                 | None -> ());
                                List.iter
                                  (fun (x941 : any) ->
                                     ignore
                                       (Ojs.call x940 "push"
                                          [|(any_to_js x941)|])) x939;
                                x940))|])
        let (queueMicrotask : t -> callback:(unit -> unit) -> unit) =
          fun (x948 : t) ->
            fun ~callback:(x947 : unit -> unit) ->
              ignore
                (Ojs.call (t_to_js x948) "queueMicrotask"
                   [|(Ojs.fun_to_js 1 (fun _ -> x947 ()))|])
        let (get_undefined : t -> any) =
          fun (x949 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x949) "undefined")
        let (set_undefined : t -> any -> unit) =
          fun (x950 : t) ->
            fun (x951 : any) ->
              Ojs.set_prop_ascii (t_to_js x950) "undefined" (any_to_js x951)
        let (unescape : t -> str:string -> string) =
          fun (x953 : t) ->
            fun ~str:(x952 : string) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x953) "unescape"
                   [|(Ojs.string_to_js x952)|])
        let (gc : t -> unit) =
          fun (x954 : t) -> ignore (Ojs.call (t_to_js x954) "gc" [||])
        let (get_v8debug : t -> any) =
          fun (x955 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x955) "v8debug")
        let (set_v8debug : t -> any -> unit) =
          fun (x956 : t) ->
            fun (x957 : any) ->
              Ojs.set_prop_ascii (t_to_js x956) "v8debug" (any_to_js x957)
      end
    module RefCounted =
      struct
        type t = _NodeJS_RefCounted
        let rec t_of_js : Ojs.t -> t =
          fun (x959 : Ojs.t) -> _NodeJS_RefCounted_of_js x959
        and t_to_js : t -> Ojs.t =
          fun (x958 : _NodeJS_RefCounted) -> _NodeJS_RefCounted_to_js x958
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x961 : Ojs.t) -> t_of_js x961
        and t_to_js : t -> Ojs.t = fun (x960 : t) -> t_to_js x960
        let (ref : t -> t) =
          fun (x962 : t) -> t_of_js (Ojs.call (t_to_js x962) "ref" [||])
        let (unref : t -> t) =
          fun (x963 : t) -> t_of_js (Ojs.call (t_to_js x963) "unref" [||])
      end
    module Timer =
      struct
        type t = _NodeJS_Timer
        let rec t_of_js : Ojs.t -> t =
          fun (x965 : Ojs.t) -> _NodeJS_Timer_of_js x965
        and t_to_js : t -> Ojs.t =
          fun (x964 : _NodeJS_Timer) -> _NodeJS_Timer_to_js x964
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x967 : Ojs.t) -> t_of_js x967
        and t_to_js : t -> Ojs.t = fun (x966 : t) -> t_to_js x966
        let (hasRef : t -> bool) =
          fun (x968 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x968) "hasRef" [||])
        let (refresh : t -> t) =
          fun (x969 : t) -> t_of_js (Ojs.call (t_to_js x969) "refresh" [||])
        let (cast : t -> _NodeJS_RefCounted) =
          fun (x970 : t) -> _NodeJS_RefCounted_of_js (t_to_js x970)
      end
    module Immediate =
      struct
        type t = _NodeJS_Immediate
        let rec t_of_js : Ojs.t -> t =
          fun (x972 : Ojs.t) -> _NodeJS_Immediate_of_js x972
        and t_to_js : t -> Ojs.t =
          fun (x971 : _NodeJS_Immediate) -> _NodeJS_Immediate_to_js x971
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x974 : Ojs.t) -> t_of_js x974
        and t_to_js : t -> Ojs.t = fun (x973 : t) -> t_to_js x973
        let (hasRef : t -> bool) =
          fun (x975 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x975) "hasRef" [||])
        let (get__onImmediate : t -> untyped_function) =
          fun (x976 : t) ->
            untyped_function_of_js
              (Ojs.get_prop_ascii (t_to_js x976) "_onImmediate")
        let (set__onImmediate : t -> untyped_function -> unit) =
          fun (x977 : t) ->
            fun (x978 : untyped_function) ->
              Ojs.set_prop_ascii (t_to_js x977) "_onImmediate"
                (untyped_function_to_js x978)
        let (cast : t -> _NodeJS_RefCounted) =
          fun (x979 : t) -> _NodeJS_RefCounted_of_js (t_to_js x979)
      end
    module Timeout =
      struct
        type t = _NodeJS_Timeout
        let rec t_of_js : Ojs.t -> t =
          fun (x981 : Ojs.t) -> _NodeJS_Timeout_of_js x981
        and t_to_js : t -> Ojs.t =
          fun (x980 : _NodeJS_Timeout) -> _NodeJS_Timeout_to_js x980
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x983 : Ojs.t) -> t_of_js x983
        and t_to_js : t -> Ojs.t = fun (x982 : t) -> t_to_js x982
        let (hasRef : t -> bool) =
          fun (x984 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x984) "hasRef" [||])
        let (refresh : t -> t) =
          fun (x985 : t) -> t_of_js (Ojs.call (t_to_js x985) "refresh" [||])
        let (cast : t -> _NodeJS_Timer) =
          fun (x986 : t) -> _NodeJS_Timer_of_js (t_to_js x986)
      end
    module TypedArray =
      struct
        type t = _NodeJS_TypedArray
        let rec t_of_js : Ojs.t -> t =
          fun (x988 : Ojs.t) -> _NodeJS_TypedArray_of_js x988
        and t_to_js : t -> Ojs.t =
          fun (x987 : _NodeJS_TypedArray) -> _NodeJS_TypedArray_to_js x987
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x990 : Ojs.t) -> t_of_js x990
        and t_to_js : t -> Ojs.t = fun (x989 : t) -> t_to_js x989
      end
    module ArrayBufferView =
      struct
        type t = _NodeJS_ArrayBufferView
        let rec t_of_js : Ojs.t -> t =
          fun (x992 : Ojs.t) -> _NodeJS_ArrayBufferView_of_js x992
        and t_to_js : t -> Ojs.t =
          fun (x991 : _NodeJS_ArrayBufferView) ->
            _NodeJS_ArrayBufferView_to_js x991
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x994 : Ojs.t) -> t_of_js x994
        and t_to_js : t -> Ojs.t = fun (x993 : t) -> t_to_js x993
      end
    module Require =
      struct
        type t = _NodeJS_Require
        let rec t_of_js : Ojs.t -> t =
          fun (x996 : Ojs.t) -> _NodeJS_Require_of_js x996
        and t_to_js : t -> Ojs.t =
          fun (x995 : _NodeJS_Require) -> _NodeJS_Require_to_js x995
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x998 : Ojs.t) -> t_of_js x998
        and t_to_js : t -> Ojs.t = fun (x997 : t) -> t_to_js x997
        let (apply : t -> id:string -> any) =
          fun (x1000 : t) ->
            fun ~id:(x999 : string) ->
              any_of_js
                (Ojs.apply (t_to_js x1000) [|(Ojs.string_to_js x999)|])
        let (get_resolve : t -> _NodeJS_RequireResolve) =
          fun (x1001 : t) ->
            _NodeJS_RequireResolve_of_js
              (Ojs.get_prop_ascii (t_to_js x1001) "resolve")
        let (set_resolve : t -> _NodeJS_RequireResolve -> unit) =
          fun (x1002 : t) ->
            fun (x1003 : _NodeJS_RequireResolve) ->
              Ojs.set_prop_ascii (t_to_js x1002) "resolve"
                (_NodeJS_RequireResolve_to_js x1003)
        let (get_cache : t -> _NodeModule _NodeJS_Dict) =
          fun (x1004 : t) ->
            _NodeJS_Dict_of_js _NodeModule_of_js
              (Ojs.get_prop_ascii (t_to_js x1004) "cache")
        let (set_cache : t -> _NodeModule _NodeJS_Dict -> unit) =
          fun (x1006 : t) ->
            fun (x1007 : _NodeModule _NodeJS_Dict) ->
              Ojs.set_prop_ascii (t_to_js x1006) "cache"
                (_NodeJS_Dict_to_js _NodeModule_to_js x1007)
        let (get_extensions : t -> _NodeJS_RequireExtensions) =
          fun (x1009 : t) ->
            _NodeJS_RequireExtensions_of_js
              (Ojs.get_prop_ascii (t_to_js x1009) "extensions")
        let (set_extensions : t -> _NodeJS_RequireExtensions -> unit) =
          fun (x1010 : t) ->
            fun (x1011 : _NodeJS_RequireExtensions) ->
              Ojs.set_prop_ascii (t_to_js x1010) "extensions"
                (_NodeJS_RequireExtensions_to_js x1011)
        let (get_main : t -> _NodeJS_Module or_undefined) =
          fun (x1012 : t) ->
            or_undefined_of_js _NodeJS_Module_of_js
              (Ojs.get_prop_ascii (t_to_js x1012) "main")
        let (set_main : t -> _NodeJS_Module or_undefined -> unit) =
          fun (x1014 : t) ->
            fun (x1015 : _NodeJS_Module or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1014) "main"
                (or_undefined_to_js _NodeJS_Module_to_js x1015)
      end
    module RequireResolve =
      struct
        type t = _NodeJS_RequireResolve
        let rec t_of_js : Ojs.t -> t =
          fun (x1018 : Ojs.t) -> _NodeJS_RequireResolve_of_js x1018
        and t_to_js : t -> Ojs.t =
          fun (x1017 : _NodeJS_RequireResolve) ->
            _NodeJS_RequireResolve_to_js x1017
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x1020 : Ojs.t) -> t_of_js x1020
        and t_to_js : t -> Ojs.t = fun (x1019 : t) -> t_to_js x1019
        let (apply :
          t -> id:string -> ?options:anonymous_interface_1 -> unit -> string)
          =
          fun (x1025 : t) ->
            fun ~id:(x1021 : string) ->
              fun ?options:(x1022 : anonymous_interface_1 option) ->
                fun () ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x1025) "apply"
                       [|Ojs.null;((let x1023 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1023 "push"
                                         [|(Ojs.string_to_js x1021)|]);
                                    (match x1022 with
                                     | Some x1024 ->
                                         ignore
                                           (Ojs.call x1023 "push"
                                              [|(anonymous_interface_1_to_js
                                                   x1024)|])
                                     | None -> ());
                                    x1023))|])
        let (paths : t -> request:string -> string list or_null) =
          fun (x1027 : t) ->
            fun ~request:(x1026 : string) ->
              or_null_of_js
                (fun (x1028 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x1028)
                (Ojs.call (t_to_js x1027) "paths"
                   [|(Ojs.string_to_js x1026)|])
      end
    module RequireExtensions =
      struct
        type t = _NodeJS_RequireExtensions
        let rec t_of_js : Ojs.t -> t =
          fun (x1031 : Ojs.t) -> _NodeJS_RequireExtensions_of_js x1031
        and t_to_js : t -> Ojs.t =
          fun (x1030 : _NodeJS_RequireExtensions) ->
            _NodeJS_RequireExtensions_to_js x1030
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x1033 : Ojs.t) -> t_of_js x1033
        and t_to_js : t -> Ojs.t = fun (x1032 : t) -> t_to_js x1032
        let (_js : t -> m:_NodeJS_Module -> filename:string -> any) =
          fun (x1036 : t) ->
            fun ~m:(x1034 : _NodeJS_Module) ->
              fun ~filename:(x1035 : string) ->
                any_of_js
                  (Ojs.call (t_to_js x1036) ".js"
                     [|(_NodeJS_Module_to_js x1034);(Ojs.string_to_js x1035)|])
        let (_json : t -> m:_NodeJS_Module -> filename:string -> any) =
          fun (x1039 : t) ->
            fun ~m:(x1037 : _NodeJS_Module) ->
              fun ~filename:(x1038 : string) ->
                any_of_js
                  (Ojs.call (t_to_js x1039) ".json"
                     [|(_NodeJS_Module_to_js x1037);(Ojs.string_to_js x1038)|])
        let (_node : t -> m:_NodeJS_Module -> filename:string -> any) =
          fun (x1042 : t) ->
            fun ~m:(x1040 : _NodeJS_Module) ->
              fun ~filename:(x1041 : string) ->
                any_of_js
                  (Ojs.call (t_to_js x1042) ".node"
                     [|(_NodeJS_Module_to_js x1040);(Ojs.string_to_js x1041)|])
        let (cast :
          t -> (m:_NodeJS_Module -> filename:string -> any) _NodeJS_Dict) =
          fun (x1043 : t) ->
            _NodeJS_Dict_of_js
              (fun (x1044 : Ojs.t) ->
                 fun ~m:(x1045 : _NodeJS_Module) ->
                   fun ~filename:(x1046 : string) ->
                     any_of_js
                       (Ojs.apply x1044
                          [|(_NodeJS_Module_to_js x1045);(Ojs.string_to_js
                                                            x1046)|]))
              (t_to_js x1043)
      end
    module Module =
      struct
        type t = _NodeJS_Module
        let rec t_of_js : Ojs.t -> t =
          fun (x1048 : Ojs.t) -> _NodeJS_Module_of_js x1048
        and t_to_js : t -> Ojs.t =
          fun (x1047 : _NodeJS_Module) -> _NodeJS_Module_to_js x1047
        type t = t
        let rec t_of_js : Ojs.t -> t = fun (x1050 : Ojs.t) -> t_of_js x1050
        and t_to_js : t -> Ojs.t = fun (x1049 : t) -> t_to_js x1049
        let (get_exports : t -> any) =
          fun (x1051 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x1051) "exports")
        let (set_exports : t -> any -> unit) =
          fun (x1052 : t) ->
            fun (x1053 : any) ->
              Ojs.set_prop_ascii (t_to_js x1052) "exports" (any_to_js x1053)
        let (get_require : t -> _NodeJS_Require) =
          fun (x1054 : t) ->
            _NodeJS_Require_of_js
              (Ojs.get_prop_ascii (t_to_js x1054) "require")
        let (set_require : t -> _NodeJS_Require -> unit) =
          fun (x1055 : t) ->
            fun (x1056 : _NodeJS_Require) ->
              Ojs.set_prop_ascii (t_to_js x1055) "require"
                (_NodeJS_Require_to_js x1056)
        let (get_id : t -> string) =
          fun (x1057 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1057) "id")
        let (set_id : t -> string -> unit) =
          fun (x1058 : t) ->
            fun (x1059 : string) ->
              Ojs.set_prop_ascii (t_to_js x1058) "id"
                (Ojs.string_to_js x1059)
        let (get_filename : t -> string) =
          fun (x1060 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1060) "filename")
        let (set_filename : t -> string -> unit) =
          fun (x1061 : t) ->
            fun (x1062 : string) ->
              Ojs.set_prop_ascii (t_to_js x1061) "filename"
                (Ojs.string_to_js x1062)
        let (get_loaded : t -> bool) =
          fun (x1063 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1063) "loaded")
        let (set_loaded : t -> bool -> unit) =
          fun (x1064 : t) ->
            fun (x1065 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1064) "loaded"
                (Ojs.bool_to_js x1065)
        let (get_parent : t -> t or_null_or_undefined) =
          fun (x1066 : t) ->
            or_null_or_undefined_of_js t_of_js
              (Ojs.get_prop_ascii (t_to_js x1066) "parent")
        let (set_parent : t -> t or_null_or_undefined -> unit) =
          fun (x1068 : t) ->
            fun (x1069 : t or_null_or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1068) "parent"
                (or_null_or_undefined_to_js t_to_js x1069)
        let (get_children : t -> t list) =
          fun (x1071 : t) ->
            Ojs.list_of_js t_of_js
              (Ojs.get_prop_ascii (t_to_js x1071) "children")
        let (set_children : t -> t list -> unit) =
          fun (x1073 : t) ->
            fun (x1074 : t list) ->
              Ojs.set_prop_ascii (t_to_js x1073) "children"
                (Ojs.list_to_js t_to_js x1074)
        let (get_path : t -> string) =
          fun (x1076 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1076) "path")
        let (set_path : t -> string -> unit) =
          fun (x1077 : t) ->
            fun (x1078 : string) ->
              Ojs.set_prop_ascii (t_to_js x1077) "path"
                (Ojs.string_to_js x1078)
        let (get_paths : t -> string list) =
          fun (x1079 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1079) "paths")
        let (set_paths : t -> string list -> unit) =
          fun (x1081 : t) ->
            fun (x1082 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1081) "paths"
                (Ojs.list_to_js Ojs.string_to_js x1082)
      end
    module Dict =
      struct
        type 'T t = 'T _NodeJS_Dict
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x1086 : Ojs.t) -> _NodeJS_Dict_of_js __T_of_js x1086
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x1084 : __T _NodeJS_Dict) ->
              _NodeJS_Dict_to_js __T_to_js x1084
        let (get : 'T t -> string -> 'T or_undefined) =
          fun (x1088 : 'T t) ->
            fun (x1090 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.get_prop (t_to_js Obj.magic x1088)
                   (Ojs.string_to_js x1090))
        let (set : 'T t -> string -> 'T or_undefined -> unit) =
          fun (x1092 : 'T t) ->
            fun (x1094 : string) ->
              fun (x1095 : 'T or_undefined) ->
                Ojs.set_prop (t_to_js Obj.magic x1092)
                  (Ojs.string_to_js x1094)
                  (or_undefined_to_js Obj.magic x1095)
      end
    module ReadOnlyDict =
      struct
        type 'T t = 'T _NodeJS_ReadOnlyDict
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x1099 : Ojs.t) -> _NodeJS_ReadOnlyDict_of_js __T_of_js x1099
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x1097 : __T _NodeJS_ReadOnlyDict) ->
              _NodeJS_ReadOnlyDict_to_js __T_to_js x1097
        let (get : 'T t -> string -> 'T or_undefined) =
          fun (x1101 : 'T t) ->
            fun (x1103 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.get_prop (t_to_js Obj.magic x1101)
                   (Ojs.string_to_js x1103))
      end
  end
