[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type 'T _Array = [ `Array of 'T ] intf
        and _ArrayConstructor = [ `ArrayConstructor ] intf
        and _DateConstructor = [ `DateConstructor ] intf
        and _Function = untyped_function
        and _Math = [ `Math ] intf
        and _NumberConstructor = [ `NumberConstructor ] intf
        and _ObjectConstructor = [ `ObjectConstructor ] intf
        and 'T _ReadonlyArray = [ `ReadonlyArray of 'T ] intf
        and _RegExp = regexp
        and _RegExpConstructor = [ `RegExpConstructor ] intf
        and _String = [ `String ] intf
        and _StringConstructor = [ `StringConstructor ] intf
        let rec _Array_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _Array =
          fun _T -> Obj.magic
        and _Array_to_js : 'T . ('T -> Ojs.t) -> 'T _Array -> Ojs.t =
          fun _T -> Obj.magic
        and _ArrayConstructor_of_js : Ojs.t -> _ArrayConstructor = Obj.magic
        and _ArrayConstructor_to_js : _ArrayConstructor -> Ojs.t = Obj.magic
        and _DateConstructor_of_js : Ojs.t -> _DateConstructor = Obj.magic
        and _DateConstructor_to_js : _DateConstructor -> Ojs.t = Obj.magic
        and _Function_of_js : Ojs.t -> _Function =
          fun (x2 : Ojs.t) -> untyped_function_of_js x2
        and _Function_to_js : _Function -> Ojs.t =
          fun (x1 : untyped_function) -> untyped_function_to_js x1
        and _Math_of_js : Ojs.t -> _Math = Obj.magic
        and _Math_to_js : _Math -> Ojs.t = Obj.magic
        and _NumberConstructor_of_js : Ojs.t -> _NumberConstructor =
          Obj.magic
        and _NumberConstructor_to_js : _NumberConstructor -> Ojs.t =
          Obj.magic
        and _ObjectConstructor_of_js : Ojs.t -> _ObjectConstructor =
          Obj.magic
        and _ObjectConstructor_to_js : _ObjectConstructor -> Ojs.t =
          Obj.magic
        and _ReadonlyArray_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _ReadonlyArray =
          fun _T -> Obj.magic
        and _ReadonlyArray_to_js :
          'T . ('T -> Ojs.t) -> 'T _ReadonlyArray -> Ojs.t =
          fun _T -> Obj.magic
        and _RegExp_of_js : Ojs.t -> _RegExp =
          fun (x4 : Ojs.t) -> regexp_of_js x4
        and _RegExp_to_js : _RegExp -> Ojs.t =
          fun (x3 : regexp) -> regexp_to_js x3
        and _RegExpConstructor_of_js : Ojs.t -> _RegExpConstructor =
          Obj.magic
        and _RegExpConstructor_to_js : _RegExpConstructor -> Ojs.t =
          Obj.magic
        and _String_of_js : Ojs.t -> _String = Obj.magic
        and _String_to_js : _String -> Ojs.t = Obj.magic
        and _StringConstructor_of_js : Ojs.t -> _StringConstructor =
          Obj.magic
        and _StringConstructor_to_js : _StringConstructor -> Ojs.t =
          Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module Array =
  struct
    include struct include Array end
    let (find :
      'T t ->
        predicate:(this:unit ->
                     value:'T -> index:float -> obj:'T list -> bool)
          -> ?thisArg:any -> unit -> 'S or_undefined)
      =
      fun (x14 : 'T t) ->
        fun
          ~predicate:(x5 :
                       this:unit ->
                         value:'T -> index:float -> obj:'T list -> bool)
          ->
          fun ?thisArg:(x6 : any option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x16 = t_to_js Obj.magic x14 in
                 Ojs.call (Ojs.get_prop_ascii x16 "find") "apply"
                   [|x16;((let x7 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x7 "push"
                                [|(Ojs.fun_to_js 4
                                     (fun (x9 : Ojs.t) ->
                                        fun (x10 : Ojs.t) ->
                                          fun (x11 : Ojs.t) ->
                                            fun (x12 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x5 ~this:(Ojs.unit_of_js x9)
                                                   ~value:(Obj.magic x10)
                                                   ~index:(Ojs.float_of_js
                                                             x11)
                                                   ~obj:(Ojs.list_of_js
                                                           Obj.magic x12))))|]);
                           (match x6 with
                            | Some x8 ->
                                ignore
                                  (Ojs.call x7 "push" [|(any_to_js x8)|])
                            | None -> ());
                           x7))|])
    let (find' :
      'T t ->
        predicate:(value:'T -> index:float -> obj:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T or_undefined)
      =
      fun (x26 : 'T t) ->
        fun
          ~predicate:(x18 :
                       value:'T -> index:float -> obj:'T list -> unknown)
          ->
          fun ?thisArg:(x19 : any option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x28 = t_to_js Obj.magic x26 in
                 Ojs.call (Ojs.get_prop_ascii x28 "find") "apply"
                   [|x28;((let x20 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x20 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x22 : Ojs.t) ->
                                        fun (x23 : Ojs.t) ->
                                          fun (x24 : Ojs.t) ->
                                            unknown_to_js
                                              (x18 ~value:(Obj.magic x22)
                                                 ~index:(Ojs.float_of_js x23)
                                                 ~obj:(Ojs.list_of_js
                                                         Obj.magic x24))))|]);
                           (match x19 with
                            | Some x21 ->
                                ignore
                                  (Ojs.call x20 "push" [|(any_to_js x21)|])
                            | None -> ());
                           x20))|])
    let (findIndex :
      'T t ->
        predicate:(value:'T -> index:float -> obj:'T list -> unknown) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x38 : 'T t) ->
        fun
          ~predicate:(x30 :
                       value:'T -> index:float -> obj:'T list -> unknown)
          ->
          fun ?thisArg:(x31 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x40 = t_to_js Obj.magic x38 in
                 Ojs.call (Ojs.get_prop_ascii x40 "findIndex") "apply"
                   [|x40;((let x32 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x32 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x34 : Ojs.t) ->
                                        fun (x35 : Ojs.t) ->
                                          fun (x36 : Ojs.t) ->
                                            unknown_to_js
                                              (x30 ~value:(Obj.magic x34)
                                                 ~index:(Ojs.float_of_js x35)
                                                 ~obj:(Ojs.list_of_js
                                                         Obj.magic x36))))|]);
                           (match x31 with
                            | Some x33 ->
                                ignore
                                  (Ojs.call x32 "push" [|(any_to_js x33)|])
                            | None -> ());
                           x32))|])
    let (fill :
      'T t -> value:'T -> ?start:float -> ?end_:float -> unit -> 'T t) =
      fun (x47 : 'T t) ->
        fun ~value:(x41 : 'T) ->
          fun ?start:(x42 : float option) ->
            fun ?end_:(x43 : float option) ->
              fun () ->
                t_of_js Obj.magic
                  (let x49 = t_to_js Obj.magic x47 in
                   Ojs.call (Ojs.get_prop_ascii x49 "fill") "apply"
                     [|x49;((let x44 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x44 "push" [|(Obj.magic x41)|]);
                             (match x42 with
                              | Some x46 ->
                                  ignore
                                    (Ojs.call x44 "push"
                                       [|(Ojs.float_to_js x46)|])
                              | None -> ());
                             (match x43 with
                              | Some x45 ->
                                  ignore
                                    (Ojs.call x44 "push"
                                       [|(Ojs.float_to_js x45)|])
                              | None -> ());
                             x44))|])
    let (copyWithin :
      'T t -> target:float -> start:float -> ?end_:float -> unit -> 'T t) =
      fun (x56 : 'T t) ->
        fun ~target:(x51 : float) ->
          fun ~start:(x52 : float) ->
            fun ?end_:(x53 : float option) ->
              fun () ->
                t_of_js Obj.magic
                  (let x58 = t_to_js Obj.magic x56 in
                   Ojs.call (Ojs.get_prop_ascii x58 "copyWithin") "apply"
                     [|x58;((let x54 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x54 "push" [|(Ojs.float_to_js x51)|]);
                             ignore
                               (Ojs.call x54 "push" [|(Ojs.float_to_js x52)|]);
                             (match x53 with
                              | Some x55 ->
                                  ignore
                                    (Ojs.call x54 "push"
                                       [|(Ojs.float_to_js x55)|])
                              | None -> ());
                             x54))|])
    let (to_ml : 'T t -> 'T list) =
      fun (x60 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x60)
    let (of_ml : 'T list -> 'T t) =
      fun (x63 : 'T list) -> t_of_js Obj.magic (Ojs.list_to_js Obj.magic x63)
  end
module ArrayConstructor =
  struct
    include struct include ArrayConstructor end
    let (from : t -> array:'T Array.t -> 'T list) =
      fun (x68 : t) ->
        fun ~array:(x66 : 'T Array.t) ->
          Ojs.list_of_js Obj.magic
            (Ojs.call (t_to_js x68) "from" [|(Array.t_to_js Obj.magic x66)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:float -> 'U) -> ?thisArg:any -> unit -> 'U list)
      =
      fun (x78 : t) ->
        fun ~array:(x70 : 'T Array.t) ->
          fun ~mapfn:(x71 : v:'T -> k:float -> 'U) ->
            fun ?thisArg:(x72 : any option) ->
              fun () ->
                Ojs.list_of_js Obj.magic
                  (let x79 = t_to_js x78 in
                   Ojs.call (Ojs.get_prop_ascii x79 "from") "apply"
                     [|x79;((let x73 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x73 "push"
                                  [|(Array.t_to_js Obj.magic x70)|]);
                             ignore
                               (Ojs.call x73 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x75 : Ojs.t) ->
                                          fun (x76 : Ojs.t) ->
                                            Obj.magic
                                              (x71 ~v:(Obj.magic x75)
                                                 ~k:(Ojs.float_of_js x76))))|]);
                             (match x72 with
                              | Some x74 ->
                                  ignore
                                    (Ojs.call x73 "push" [|(any_to_js x74)|])
                              | None -> ());
                             x73))|])
    let (of_ : t -> items:'T list -> 'T list) =
      fun (x84 : t) ->
        fun ~items:(x81 : 'T list) ->
          Ojs.list_of_js Obj.magic
            (let x85 = t_to_js x84 in
             Ojs.call (Ojs.get_prop_ascii x85 "of") "apply"
               [|x85;((let x82 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x83 : 'T) ->
                            ignore (Ojs.call x82 "push" [|(Obj.magic x83)|]))
                         x81;
                       x82))|])
  end
module DateConstructor =
  struct
    include struct include DateConstructor end
    let (create : t -> value:Date.t or_string or_number -> Date.t) =
      fun (x90 : t) ->
        fun ~value:(x87 : Date.t or_string or_number) ->
          Date.t_of_js
            (Ojs.new_obj (t_to_js x90)
               [|(or_number_to_js
                    (fun (x88 : Date.t or_string) ->
                       or_string_to_js Date.t_to_js x88) x87)|])
  end
module Function =
  struct
    include struct include Function end
    let (get_name : t -> string) =
      fun (x91 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x91) "name")
  end
module Math =
  struct
    include struct include Math end
    let (clz32 : t -> x:float -> float) =
      fun (x93 : t) ->
        fun ~x:(x92 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x93) "clz32" [|(Ojs.float_to_js x92)|])
    let (imul : t -> x:float -> y:float -> float) =
      fun (x96 : t) ->
        fun ~x:(x94 : float) ->
          fun ~y:(x95 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x96) "imul"
                 [|(Ojs.float_to_js x94);(Ojs.float_to_js x95)|])
    let (sign : t -> x:float -> float) =
      fun (x98 : t) ->
        fun ~x:(x97 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x98) "sign" [|(Ojs.float_to_js x97)|])
    let (log10 : t -> x:float -> float) =
      fun (x100 : t) ->
        fun ~x:(x99 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x100) "log10" [|(Ojs.float_to_js x99)|])
    let (log2 : t -> x:float -> float) =
      fun (x102 : t) ->
        fun ~x:(x101 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x102) "log2" [|(Ojs.float_to_js x101)|])
    let (log1p : t -> x:float -> float) =
      fun (x104 : t) ->
        fun ~x:(x103 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x104) "log1p" [|(Ojs.float_to_js x103)|])
    let (expm1 : t -> x:float -> float) =
      fun (x106 : t) ->
        fun ~x:(x105 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x106) "expm1" [|(Ojs.float_to_js x105)|])
    let (cosh : t -> x:float -> float) =
      fun (x108 : t) ->
        fun ~x:(x107 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x108) "cosh" [|(Ojs.float_to_js x107)|])
    let (sinh : t -> x:float -> float) =
      fun (x110 : t) ->
        fun ~x:(x109 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x110) "sinh" [|(Ojs.float_to_js x109)|])
    let (tanh : t -> x:float -> float) =
      fun (x112 : t) ->
        fun ~x:(x111 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x112) "tanh" [|(Ojs.float_to_js x111)|])
    let (acosh : t -> x:float -> float) =
      fun (x114 : t) ->
        fun ~x:(x113 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x114) "acosh" [|(Ojs.float_to_js x113)|])
    let (asinh : t -> x:float -> float) =
      fun (x116 : t) ->
        fun ~x:(x115 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x116) "asinh" [|(Ojs.float_to_js x115)|])
    let (atanh : t -> x:float -> float) =
      fun (x118 : t) ->
        fun ~x:(x117 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x118) "atanh" [|(Ojs.float_to_js x117)|])
    let (hypot : t -> values:float list -> float) =
      fun (x122 : t) ->
        fun ~values:(x119 : float list) ->
          Ojs.float_of_js
            (let x123 = t_to_js x122 in
             Ojs.call (Ojs.get_prop_ascii x123 "hypot") "apply"
               [|x123;((let x120 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x121 : float) ->
                             ignore
                               (Ojs.call x120 "push"
                                  [|(Ojs.float_to_js x121)|])) x119;
                        x120))|])
    let (trunc : t -> x:float -> float) =
      fun (x125 : t) ->
        fun ~x:(x124 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x125) "trunc" [|(Ojs.float_to_js x124)|])
    let (fround : t -> x:float -> float) =
      fun (x127 : t) ->
        fun ~x:(x126 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x127) "fround" [|(Ojs.float_to_js x126)|])
    let (cbrt : t -> x:float -> float) =
      fun (x129 : t) ->
        fun ~x:(x128 : float) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x129) "cbrt" [|(Ojs.float_to_js x128)|])
  end
module NumberConstructor =
  struct
    include struct include NumberConstructor end
    let (get_EPSILON : t -> float) =
      fun (x130 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x130) "EPSILON")
    let (isFinite : t -> number:unknown -> bool) =
      fun (x132 : t) ->
        fun ~number:(x131 : unknown) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x132) "isFinite" [|(unknown_to_js x131)|])
    let (isInteger : t -> number:unknown -> bool) =
      fun (x134 : t) ->
        fun ~number:(x133 : unknown) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x134) "isInteger" [|(unknown_to_js x133)|])
    let (isNaN : t -> number:unknown -> bool) =
      fun (x136 : t) ->
        fun ~number:(x135 : unknown) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x136) "isNaN" [|(unknown_to_js x135)|])
    let (isSafeInteger : t -> number:unknown -> bool) =
      fun (x138 : t) ->
        fun ~number:(x137 : unknown) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x138) "isSafeInteger" [|(unknown_to_js x137)|])
    let (get_MAX_SAFE_INTEGER : t -> float) =
      fun (x139 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x139) "MAX_SAFE_INTEGER")
    let (get_MIN_SAFE_INTEGER : t -> float) =
      fun (x140 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x140) "MIN_SAFE_INTEGER")
    let (parseFloat : t -> string:string -> float) =
      fun (x142 : t) ->
        fun ~string:(x141 : string) ->
          Ojs.float_of_js
            (Ojs.call (t_to_js x142) "parseFloat" [|(Ojs.string_to_js x141)|])
    let (parseInt : t -> string:string -> ?radix:float -> unit -> float) =
      fun (x147 : t) ->
        fun ~string:(x143 : string) ->
          fun ?radix:(x144 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x148 = t_to_js x147 in
                 Ojs.call (Ojs.get_prop_ascii x148 "parseInt") "apply"
                   [|x148;((let x145 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x145 "push"
                                 [|(Ojs.string_to_js x143)|]);
                            (match x144 with
                             | Some x146 ->
                                 ignore
                                   (Ojs.call x145 "push"
                                      [|(Ojs.float_to_js x146)|])
                             | None -> ());
                            x145))|])
  end
module ObjectConstructor =
  struct
    include struct include ObjectConstructor end
    let (assign : t -> target:'T -> source:'U -> ('T, 'U) intersection2) =
      fun (x151 : t) ->
        fun ~target:(x149 : 'T) ->
          fun ~source:(x150 : 'U) ->
            intersection2_of_js Obj.magic Obj.magic
              (Ojs.call (t_to_js x151) "assign"
                 [|(Obj.magic x149);(Obj.magic x150)|])
    let (assign' :
      t ->
        target:'T -> source1:'U -> source2:'V -> ('T, 'U, 'V) intersection3)
      =
      fun (x157 : t) ->
        fun ~target:(x154 : 'T) ->
          fun ~source1:(x155 : 'U) ->
            fun ~source2:(x156 : 'V) ->
              intersection3_of_js Obj.magic Obj.magic Obj.magic
                (Ojs.call (t_to_js x157) "assign"
                   [|(Obj.magic x154);(Obj.magic x155);(Obj.magic x156)|])
    let (assign'' :
      t ->
        target:'T ->
          source1:'U ->
            source2:'V -> source3:'W -> ('T, 'U, 'V, 'W) intersection4)
      =
      fun (x165 : t) ->
        fun ~target:(x161 : 'T) ->
          fun ~source1:(x162 : 'U) ->
            fun ~source2:(x163 : 'V) ->
              fun ~source3:(x164 : 'W) ->
                intersection4_of_js Obj.magic Obj.magic Obj.magic Obj.magic
                  (Ojs.call (t_to_js x165) "assign"
                     [|(Obj.magic x161);(Obj.magic x162);(Obj.magic x163);(
                       Obj.magic x164)|])
    let (assign''' : t -> target:untyped_object -> sources:any list -> any) =
      fun (x174 : t) ->
        fun ~target:(x170 : untyped_object) ->
          fun ~sources:(x171 : any list) ->
            any_of_js
              (let x175 = t_to_js x174 in
               Ojs.call (Ojs.get_prop_ascii x175 "assign") "apply"
                 [|x175;((let x172 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x172 "push"
                               [|(untyped_object_to_js x170)|]);
                          List.iter
                            (fun (x173 : any) ->
                               ignore
                                 (Ojs.call x172 "push" [|(any_to_js x173)|]))
                            x171;
                          x172))|])
    let (getOwnPropertySymbols : t -> o:any -> symbol list) =
      fun (x177 : t) ->
        fun ~o:(x176 : any) ->
          Ojs.list_of_js symbol_of_js
            (Ojs.call (t_to_js x177) "getOwnPropertySymbols"
               [|(any_to_js x176)|])
    let (keys : t -> o:any -> string list) =
      fun (x180 : t) ->
        fun ~o:(x179 : any) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (t_to_js x180) "keys" [|(any_to_js x179)|])
    let (is : t -> value1:any -> value2:any -> bool) =
      fun (x184 : t) ->
        fun ~value1:(x182 : any) ->
          fun ~value2:(x183 : any) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js x184) "is"
                 [|(any_to_js x182);(any_to_js x183)|])
    let (setPrototypeOf : t -> o:any -> proto:untyped_object or_null -> any)
      =
      fun (x188 : t) ->
        fun ~o:(x185 : any) ->
          fun ~proto:(x186 : untyped_object or_null) ->
            any_of_js
              (Ojs.call (t_to_js x188) "setPrototypeOf"
                 [|(any_to_js x185);(or_null_to_js untyped_object_to_js x186)|])
  end
module ReadonlyArray =
  struct
    include struct include ReadonlyArray end
    let (find :
      'T t ->
        predicate:(this:unit ->
                     value:'T -> index:float -> obj:'T list -> bool)
          -> ?thisArg:any -> unit -> 'S or_undefined)
      =
      fun (x198 : 'T t) ->
        fun
          ~predicate:(x189 :
                       this:unit ->
                         value:'T -> index:float -> obj:'T list -> bool)
          ->
          fun ?thisArg:(x190 : any option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x200 = t_to_js Obj.magic x198 in
                 Ojs.call (Ojs.get_prop_ascii x200 "find") "apply"
                   [|x200;((let x191 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x191 "push"
                                 [|(Ojs.fun_to_js 4
                                      (fun (x193 : Ojs.t) ->
                                         fun (x194 : Ojs.t) ->
                                           fun (x195 : Ojs.t) ->
                                             fun (x196 : Ojs.t) ->
                                               Ojs.bool_to_js
                                                 (x189
                                                    ~this:(Ojs.unit_of_js
                                                             x193)
                                                    ~value:(Obj.magic x194)
                                                    ~index:(Ojs.float_of_js
                                                              x195)
                                                    ~obj:(Ojs.list_of_js
                                                            Obj.magic x196))))|]);
                            (match x190 with
                             | Some x192 ->
                                 ignore
                                   (Ojs.call x191 "push" [|(any_to_js x192)|])
                             | None -> ());
                            x191))|])
    let (find' :
      'T t ->
        predicate:(value:'T -> index:float -> obj:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T or_undefined)
      =
      fun (x210 : 'T t) ->
        fun
          ~predicate:(x202 :
                       value:'T -> index:float -> obj:'T list -> unknown)
          ->
          fun ?thisArg:(x203 : any option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x212 = t_to_js Obj.magic x210 in
                 Ojs.call (Ojs.get_prop_ascii x212 "find") "apply"
                   [|x212;((let x204 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x204 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x206 : Ojs.t) ->
                                         fun (x207 : Ojs.t) ->
                                           fun (x208 : Ojs.t) ->
                                             unknown_to_js
                                               (x202 ~value:(Obj.magic x206)
                                                  ~index:(Ojs.float_of_js
                                                            x207)
                                                  ~obj:(Ojs.list_of_js
                                                          Obj.magic x208))))|]);
                            (match x203 with
                             | Some x205 ->
                                 ignore
                                   (Ojs.call x204 "push" [|(any_to_js x205)|])
                             | None -> ());
                            x204))|])
    let (findIndex :
      'T t ->
        predicate:(value:'T -> index:float -> obj:'T list -> unknown) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x222 : 'T t) ->
        fun
          ~predicate:(x214 :
                       value:'T -> index:float -> obj:'T list -> unknown)
          ->
          fun ?thisArg:(x215 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x224 = t_to_js Obj.magic x222 in
                 Ojs.call (Ojs.get_prop_ascii x224 "findIndex") "apply"
                   [|x224;((let x216 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x216 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x218 : Ojs.t) ->
                                         fun (x219 : Ojs.t) ->
                                           fun (x220 : Ojs.t) ->
                                             unknown_to_js
                                               (x214 ~value:(Obj.magic x218)
                                                  ~index:(Ojs.float_of_js
                                                            x219)
                                                  ~obj:(Ojs.list_of_js
                                                          Obj.magic x220))))|]);
                            (match x215 with
                             | Some x217 ->
                                 ignore
                                   (Ojs.call x216 "push" [|(any_to_js x217)|])
                             | None -> ());
                            x216))|])
    let (to_ml : 'T t -> 'T list) =
      fun (x225 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x225)
    let (of_ml : 'T list -> 'T t) =
      fun (x228 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x228)
  end
module RegExp =
  struct
    include struct include RegExp end
    let (get_flags : t -> string) =
      fun (x231 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x231) "flags")
    let (get_sticky : t -> bool) =
      fun (x232 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x232) "sticky")
    let (get_unicode : t -> bool) =
      fun (x233 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x233) "unicode")
  end
module RegExpConstructor =
  struct
    include struct include RegExpConstructor end
    let (create :
      t -> pattern:_RegExp or_string -> ?flags:string -> unit -> _RegExp) =
      fun (x239 : t) ->
        fun ~pattern:(x234 : _RegExp or_string) ->
          fun ?flags:(x235 : string option) ->
            fun () ->
              _RegExp_of_js
                (Ojs.new_obj_arr (t_to_js x239)
                   (let x236 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x236 "push"
                         [|(or_string_to_js _RegExp_to_js x234)|]);
                    (match x235 with
                     | Some x237 ->
                         ignore
                           (Ojs.call x236 "push" [|(Ojs.string_to_js x237)|])
                     | None -> ());
                    x236))
    let (apply :
      t -> pattern:_RegExp or_string -> ?flags:string -> unit -> _RegExp) =
      fun (x245 : t) ->
        fun ~pattern:(x240 : _RegExp or_string) ->
          fun ?flags:(x241 : string option) ->
            fun () ->
              _RegExp_of_js
                (Ojs.call (t_to_js x245) "apply"
                   [|Ojs.null;((let x242 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x242 "push"
                                     [|(or_string_to_js _RegExp_to_js x240)|]);
                                (match x241 with
                                 | Some x243 ->
                                     ignore
                                       (Ojs.call x242 "push"
                                          [|(Ojs.string_to_js x243)|])
                                 | None -> ());
                                x242))|])
  end
module String =
  struct
    include struct include String end
    let (codePointAt : t -> pos:float -> float or_undefined) =
      fun (x247 : t) ->
        fun ~pos:(x246 : float) ->
          or_undefined_of_js Ojs.float_of_js
            (Ojs.call (t_to_js x247) "codePointAt" [|(Ojs.float_to_js x246)|])
    let (includes :
      t -> searchString:string -> ?position:float -> unit -> bool) =
      fun (x253 : t) ->
        fun ~searchString:(x249 : string) ->
          fun ?position:(x250 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x254 = t_to_js x253 in
                 Ojs.call (Ojs.get_prop_ascii x254 "includes") "apply"
                   [|x254;((let x251 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x251 "push"
                                 [|(Ojs.string_to_js x249)|]);
                            (match x250 with
                             | Some x252 ->
                                 ignore
                                   (Ojs.call x251 "push"
                                      [|(Ojs.float_to_js x252)|])
                             | None -> ());
                            x251))|])
    let (endsWith :
      t -> searchString:string -> ?endPosition:float -> unit -> bool) =
      fun (x259 : t) ->
        fun ~searchString:(x255 : string) ->
          fun ?endPosition:(x256 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x260 = t_to_js x259 in
                 Ojs.call (Ojs.get_prop_ascii x260 "endsWith") "apply"
                   [|x260;((let x257 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x257 "push"
                                 [|(Ojs.string_to_js x255)|]);
                            (match x256 with
                             | Some x258 ->
                                 ignore
                                   (Ojs.call x257 "push"
                                      [|(Ojs.float_to_js x258)|])
                             | None -> ());
                            x257))|])
    let (normalize : t -> form:[ `NFC  | `NFD  | `NFKC  | `NFKD ] -> string)
      =
      fun (x262 : t) ->
        fun ~form:(x261 : [ `NFC  | `NFD  | `NFKC  | `NFKD ]) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x262) "normalize"
               [|((match x261 with
                   | `NFC -> Ojs.string_to_js "NFC"
                   | `NFD -> Ojs.string_to_js "NFD"
                   | `NFKC -> Ojs.string_to_js "NFKC"
                   | `NFKD -> Ojs.string_to_js "NFKD"))|])
    let (normalize' : t -> ?form:string -> unit -> string) =
      fun (x266 : t) ->
        fun ?form:(x263 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x267 = t_to_js x266 in
               Ojs.call (Ojs.get_prop_ascii x267 "normalize") "apply"
                 [|x267;((let x264 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x263 with
                           | Some x265 ->
                               ignore
                                 (Ojs.call x264 "push"
                                    [|(Ojs.string_to_js x265)|])
                           | None -> ());
                          x264))|])
    let (repeat : t -> count:float -> string) =
      fun (x269 : t) ->
        fun ~count:(x268 : float) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x269) "repeat" [|(Ojs.float_to_js x268)|])
    let (startsWith :
      t -> searchString:string -> ?position:float -> unit -> bool) =
      fun (x274 : t) ->
        fun ~searchString:(x270 : string) ->
          fun ?position:(x271 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x275 = t_to_js x274 in
                 Ojs.call (Ojs.get_prop_ascii x275 "startsWith") "apply"
                   [|x275;((let x272 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x272 "push"
                                 [|(Ojs.string_to_js x270)|]);
                            (match x271 with
                             | Some x273 ->
                                 ignore
                                   (Ojs.call x272 "push"
                                      [|(Ojs.float_to_js x273)|])
                             | None -> ());
                            x272))|])
    let (anchor : t -> name:string -> string) =
      fun (x277 : t) ->
        fun ~name:(x276 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x277) "anchor" [|(Ojs.string_to_js x276)|])
    let (big : t -> string) =
      fun (x278 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x278) "big" [||])
    let (blink : t -> string) =
      fun (x279 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x279) "blink" [||])
    let (bold : t -> string) =
      fun (x280 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x280) "bold" [||])
    let (fixed : t -> string) =
      fun (x281 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x281) "fixed" [||])
    let (fontcolor : t -> color:string -> string) =
      fun (x283 : t) ->
        fun ~color:(x282 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x283) "fontcolor" [|(Ojs.string_to_js x282)|])
    let (fontsize : t -> size:float -> string) =
      fun (x285 : t) ->
        fun ~size:(x284 : float) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x285) "fontsize" [|(Ojs.float_to_js x284)|])
    let (fontsize' : t -> size:string -> string) =
      fun (x287 : t) ->
        fun ~size:(x286 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x287) "fontsize" [|(Ojs.string_to_js x286)|])
    let (italics : t -> string) =
      fun (x288 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x288) "italics" [||])
    let (link : t -> url:string -> string) =
      fun (x290 : t) ->
        fun ~url:(x289 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x290) "link" [|(Ojs.string_to_js x289)|])
    let (small : t -> string) =
      fun (x291 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x291) "small" [||])
    let (strike : t -> string) =
      fun (x292 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x292) "strike" [||])
    let (sub : t -> string) =
      fun (x293 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x293) "sub" [||])
    let (sup : t -> string) =
      fun (x294 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x294) "sup" [||])
    let (to_ml : t -> string) =
      fun (x295 : t) -> Ojs.string_of_js (t_to_js x295)
    let (of_ml : string -> t) =
      fun (x296 : string) -> t_of_js (Ojs.string_to_js x296)
  end
module StringConstructor =
  struct
    include struct include StringConstructor end
    let (fromCodePoint : t -> codePoints:float list -> string) =
      fun (x300 : t) ->
        fun ~codePoints:(x297 : float list) ->
          Ojs.string_of_js
            (let x301 = t_to_js x300 in
             Ojs.call (Ojs.get_prop_ascii x301 "fromCodePoint") "apply"
               [|x301;((let x298 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x299 : float) ->
                             ignore
                               (Ojs.call x298 "push"
                                  [|(Ojs.float_to_js x299)|])) x297;
                        x298))|])
    let (raw :
      t ->
        template:TemplateStringsArray.t -> substitutions:any list -> string)
      =
      fun (x306 : t) ->
        fun ~template:(x302 : TemplateStringsArray.t) ->
          fun ~substitutions:(x303 : any list) ->
            Ojs.string_of_js
              (let x307 = t_to_js x306 in
               Ojs.call (Ojs.get_prop_ascii x307 "raw") "apply"
                 [|x307;((let x304 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x304 "push"
                               [|(TemplateStringsArray.t_to_js x302)|]);
                          List.iter
                            (fun (x305 : any) ->
                               ignore
                                 (Ojs.call x304 "push" [|(any_to_js x305)|]))
                            x303;
                          x304))|])
  end
