[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_baselib
module type Missing  =
  sig
    module RegExpMatchArray :
    sig type t_0 val t_0_to_js : t_0 -> Ojs.t val t_0_of_js : Ojs.t -> t_0
    end
  end
module Make(M:Missing) =
  struct
    open M
    module Internal =
      struct
        module AnonymousInterfaces =
          struct
            type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
            let rec anonymous_interface_0_of_js :
              Ojs.t -> anonymous_interface_0 = Obj.magic
            and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t
              = Obj.magic
            type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
            let rec anonymous_interface_1_of_js :
              Ojs.t -> anonymous_interface_1 = Obj.magic
            and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t
              = Obj.magic
            type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
            let rec anonymous_interface_2_of_js :
              Ojs.t -> anonymous_interface_2 = Obj.magic
            and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t
              = Obj.magic
            type anonymous_interface_3 = [ `anonymous_interface_3 ] intf
            let rec anonymous_interface_3_of_js :
              Ojs.t -> anonymous_interface_3 = Obj.magic
            and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t
              = Obj.magic
            type anonymous_interface_4 = [ `anonymous_interface_4 ] intf
            let rec anonymous_interface_4_of_js :
              Ojs.t -> anonymous_interface_4 = Obj.magic
            and anonymous_interface_4_to_js : anonymous_interface_4 -> Ojs.t
              = Obj.magic
            type anonymous_interface_5 = [ `anonymous_interface_5 ] intf
            let rec anonymous_interface_5_of_js :
              Ojs.t -> anonymous_interface_5 = Obj.magic
            and anonymous_interface_5_to_js : anonymous_interface_5 -> Ojs.t
              = Obj.magic
          end
        module Types =
          struct
            open AnonymousInterfaces
            type 'T _Array = [ `Array of 'T ] intf
            and _ArrayBuffer = [ `ArrayBuffer ] intf
            and _ArrayBufferConstructor = [ `ArrayBufferConstructor ] intf
            and _ArrayConstructor = [ `ArrayConstructor ] intf
            and _DataView = [ `DataView ] intf
            and _Date = [ `Date ] intf
            and _Float32Array = [ `Float32Array ] intf
            and _Float64Array = [ `Float64Array ] intf
            and _Function = untyped_function
            and _GeneratorFunction = [ `GeneratorFunction ] intf
            and _Int16Array = [ `Int16Array ] intf
            and _Int32Array = [ `Int32Array ] intf
            and _Int8Array = [ `Int8Array ] intf
            and _JSON = [ `JSON ] intf
            and ('K, 'V) _Map = [ `Map of ('K * 'V) ] intf
            and _MapConstructor = [ `MapConstructor ] intf
            and _Math = [ `Math ] intf
            and 'T _Promise = [ `Promise of 'T ] intf
            and _PromiseConstructor = [ `PromiseConstructor ] intf
            and _RegExp = regexp
            and _RegExpConstructor = [ `RegExpConstructor ] intf
            and 'T _Set = [ `Set of 'T ] intf
            and _SetConstructor = [ `SetConstructor ] intf
            and _String = [ `String ] intf
            and _Symbol = symbol
            and _SymbolConstructor = [ `SymbolConstructor ] intf
            and _Uint16Array = [ `Uint16Array ] intf
            and _Uint32Array = [ `Uint32Array ] intf
            and _Uint8Array = [ `Uint8Array ] intf
            and _Uint8ClampedArray = [ `Uint8ClampedArray ] intf
            and ('K, 'V) _WeakMap = [ `WeakMap of ('K * 'V) ] intf
            and 'T _WeakSet = [ `WeakSet of 'T ] intf
            let rec _Array_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _Array =
              fun _T -> Obj.magic
            and _Array_to_js : 'T . ('T -> Ojs.t) -> 'T _Array -> Ojs.t =
              fun _T -> Obj.magic
            and _ArrayBuffer_of_js : Ojs.t -> _ArrayBuffer = Obj.magic
            and _ArrayBuffer_to_js : _ArrayBuffer -> Ojs.t = Obj.magic
            and _ArrayBufferConstructor_of_js :
              Ojs.t -> _ArrayBufferConstructor = Obj.magic
            and _ArrayBufferConstructor_to_js :
              _ArrayBufferConstructor -> Ojs.t = Obj.magic
            and _ArrayConstructor_of_js : Ojs.t -> _ArrayConstructor =
              Obj.magic
            and _ArrayConstructor_to_js : _ArrayConstructor -> Ojs.t =
              Obj.magic
            and _DataView_of_js : Ojs.t -> _DataView = Obj.magic
            and _DataView_to_js : _DataView -> Ojs.t = Obj.magic
            and _Date_of_js : Ojs.t -> _Date = Obj.magic
            and _Date_to_js : _Date -> Ojs.t = Obj.magic
            and _Float32Array_of_js : Ojs.t -> _Float32Array = Obj.magic
            and _Float32Array_to_js : _Float32Array -> Ojs.t = Obj.magic
            and _Float64Array_of_js : Ojs.t -> _Float64Array = Obj.magic
            and _Float64Array_to_js : _Float64Array -> Ojs.t = Obj.magic
            and _Function_of_js : Ojs.t -> _Function =
              fun (x2 : Ojs.t) -> untyped_function_of_js x2
            and _Function_to_js : _Function -> Ojs.t =
              fun (x1 : untyped_function) -> untyped_function_to_js x1
            and _GeneratorFunction_of_js : Ojs.t -> _GeneratorFunction =
              Obj.magic
            and _GeneratorFunction_to_js : _GeneratorFunction -> Ojs.t =
              Obj.magic
            and _Int16Array_of_js : Ojs.t -> _Int16Array = Obj.magic
            and _Int16Array_to_js : _Int16Array -> Ojs.t = Obj.magic
            and _Int32Array_of_js : Ojs.t -> _Int32Array = Obj.magic
            and _Int32Array_to_js : _Int32Array -> Ojs.t = Obj.magic
            and _Int8Array_of_js : Ojs.t -> _Int8Array = Obj.magic
            and _Int8Array_to_js : _Int8Array -> Ojs.t = Obj.magic
            and _JSON_of_js : Ojs.t -> _JSON = Obj.magic
            and _JSON_to_js : _JSON -> Ojs.t = Obj.magic
            and _Map_of_js :
              'K 'V .
                (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) _Map
              = fun _K -> fun _V -> Obj.magic
            and _Map_to_js :
              'K 'V .
                ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) _Map -> Ojs.t
              = fun _K -> fun _V -> Obj.magic
            and _MapConstructor_of_js : Ojs.t -> _MapConstructor = Obj.magic
            and _MapConstructor_to_js : _MapConstructor -> Ojs.t = Obj.magic
            and _Math_of_js : Ojs.t -> _Math = Obj.magic
            and _Math_to_js : _Math -> Ojs.t = Obj.magic
            and _Promise_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _Promise =
              fun _T -> Obj.magic
            and _Promise_to_js : 'T . ('T -> Ojs.t) -> 'T _Promise -> Ojs.t =
              fun _T -> Obj.magic
            and _PromiseConstructor_of_js : Ojs.t -> _PromiseConstructor =
              Obj.magic
            and _PromiseConstructor_to_js : _PromiseConstructor -> Ojs.t =
              Obj.magic
            and _RegExp_of_js : Ojs.t -> _RegExp =
              fun (x4 : Ojs.t) -> regexp_of_js x4
            and _RegExp_to_js : _RegExp -> Ojs.t =
              fun (x3 : regexp) -> regexp_to_js x3
            and _RegExpConstructor_of_js : Ojs.t -> _RegExpConstructor =
              Obj.magic
            and _RegExpConstructor_to_js : _RegExpConstructor -> Ojs.t =
              Obj.magic
            and _Set_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _Set =
              fun _T -> Obj.magic
            and _Set_to_js : 'T . ('T -> Ojs.t) -> 'T _Set -> Ojs.t =
              fun _T -> Obj.magic
            and _SetConstructor_of_js : Ojs.t -> _SetConstructor = Obj.magic
            and _SetConstructor_to_js : _SetConstructor -> Ojs.t = Obj.magic
            and _String_of_js : Ojs.t -> _String = Obj.magic
            and _String_to_js : _String -> Ojs.t = Obj.magic
            and _Symbol_of_js : Ojs.t -> _Symbol =
              fun (x6 : Ojs.t) -> symbol_of_js x6
            and _Symbol_to_js : _Symbol -> Ojs.t =
              fun (x5 : symbol) -> symbol_to_js x5
            and _SymbolConstructor_of_js : Ojs.t -> _SymbolConstructor =
              Obj.magic
            and _SymbolConstructor_to_js : _SymbolConstructor -> Ojs.t =
              Obj.magic
            and _Uint16Array_of_js : Ojs.t -> _Uint16Array = Obj.magic
            and _Uint16Array_to_js : _Uint16Array -> Ojs.t = Obj.magic
            and _Uint32Array_of_js : Ojs.t -> _Uint32Array = Obj.magic
            and _Uint32Array_to_js : _Uint32Array -> Ojs.t = Obj.magic
            and _Uint8Array_of_js : Ojs.t -> _Uint8Array = Obj.magic
            and _Uint8Array_to_js : _Uint8Array -> Ojs.t = Obj.magic
            and _Uint8ClampedArray_of_js : Ojs.t -> _Uint8ClampedArray =
              Obj.magic
            and _Uint8ClampedArray_to_js : _Uint8ClampedArray -> Ojs.t =
              Obj.magic
            and _WeakMap_of_js :
              'K 'V .
                (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) _WeakMap
              = fun _K -> fun _V -> Obj.magic
            and _WeakMap_to_js :
              'K 'V .
                ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) _WeakMap -> Ojs.t
              = fun _K -> fun _V -> Obj.magic
            and _WeakSet_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _WeakSet =
              fun _T -> Obj.magic
            and _WeakSet_to_js : 'T . ('T -> Ojs.t) -> 'T _WeakSet -> Ojs.t =
              fun _T -> Obj.magic
          end
      end
    open Internal
    open AnonymousInterfaces
    open Types
    module AnonymousInterface0 =
      struct
        type t = anonymous_interface_0
        let rec t_of_js : Ojs.t -> t =
          fun (x8 : Ojs.t) -> anonymous_interface_0_of_js x8
        and t_to_js : t -> Ojs.t =
          fun (x7 : anonymous_interface_0) -> anonymous_interface_0_to_js x7
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x10 : Ojs.t) -> t_of_js x10
        and t_0_to_js : t_0 -> Ojs.t = fun (x9 : t) -> t_to_js x9
        let (get_copyWithin : t -> bool) =
          fun (x11 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x11) "copyWithin")
        let (set_copyWithin : t -> bool -> unit) =
          fun (x12 : t) ->
            fun (x13 : bool) ->
              Ojs.set_prop_ascii (t_to_js x12) "copyWithin"
                (Ojs.bool_to_js x13)
        let (get_entries : t -> bool) =
          fun (x14 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x14) "entries")
        let (set_entries : t -> bool -> unit) =
          fun (x15 : t) ->
            fun (x16 : bool) ->
              Ojs.set_prop_ascii (t_to_js x15) "entries" (Ojs.bool_to_js x16)
        let (get_fill : t -> bool) =
          fun (x17 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x17) "fill")
        let (set_fill : t -> bool -> unit) =
          fun (x18 : t) ->
            fun (x19 : bool) ->
              Ojs.set_prop_ascii (t_to_js x18) "fill" (Ojs.bool_to_js x19)
        let (get_find : t -> bool) =
          fun (x20 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x20) "find")
        let (set_find : t -> bool -> unit) =
          fun (x21 : t) ->
            fun (x22 : bool) ->
              Ojs.set_prop_ascii (t_to_js x21) "find" (Ojs.bool_to_js x22)
        let (get_findIndex : t -> bool) =
          fun (x23 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x23) "findIndex")
        let (set_findIndex : t -> bool -> unit) =
          fun (x24 : t) ->
            fun (x25 : bool) ->
              Ojs.set_prop_ascii (t_to_js x24) "findIndex"
                (Ojs.bool_to_js x25)
        let (get_keys : t -> bool) =
          fun (x26 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x26) "keys")
        let (set_keys : t -> bool -> unit) =
          fun (x27 : t) ->
            fun (x28 : bool) ->
              Ojs.set_prop_ascii (t_to_js x27) "keys" (Ojs.bool_to_js x28)
        let (get_values : t -> bool) =
          fun (x29 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x29) "values")
        let (set_values : t -> bool -> unit) =
          fun (x30 : t) ->
            fun (x31 : bool) ->
              Ojs.set_prop_ascii (t_to_js x30) "values" (Ojs.bool_to_js x31)
      end
    module AnonymousInterface1 =
      struct
        type t = anonymous_interface_1
        let rec t_of_js : Ojs.t -> t =
          fun (x33 : Ojs.t) -> anonymous_interface_1_of_js x33
        and t_to_js : t -> Ojs.t =
          fun (x32 : anonymous_interface_1) ->
            anonymous_interface_1_to_js x32
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x35 : Ojs.t) -> t_of_js x35
        and t_0_to_js : t_0 -> Ojs.t = fun (x34 : t) -> t_to_js x34
        let (_Symbol_match_ :
          t -> string:string -> RegExpMatchArray.t_0 or_null) =
          fun (x37 : t) ->
            fun ~string:(x36 : string) ->
              or_null_of_js RegExpMatchArray.t_0_of_js
                (Ojs.call (t_to_js x37) "[Symbol.match]"
                   [|(Ojs.string_to_js x36)|])
      end
    module AnonymousInterface2 =
      struct
        type t = anonymous_interface_2
        let rec t_of_js : Ojs.t -> t =
          fun (x40 : Ojs.t) -> anonymous_interface_2_of_js x40
        and t_to_js : t -> Ojs.t =
          fun (x39 : anonymous_interface_2) ->
            anonymous_interface_2_to_js x39
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x42 : Ojs.t) -> t_of_js x42
        and t_0_to_js : t_0 -> Ojs.t = fun (x41 : t) -> t_to_js x41
        let (_Symbol_replace_ :
          t -> string:string -> replaceValue:string -> string) =
          fun (x45 : t) ->
            fun ~string:(x43 : string) ->
              fun ~replaceValue:(x44 : string) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x45) "[Symbol.replace]"
                     [|(Ojs.string_to_js x43);(Ojs.string_to_js x44)|])
      end
    module AnonymousInterface3 =
      struct
        type t = anonymous_interface_3
        let rec t_of_js : Ojs.t -> t =
          fun (x47 : Ojs.t) -> anonymous_interface_3_of_js x47
        and t_to_js : t -> Ojs.t =
          fun (x46 : anonymous_interface_3) ->
            anonymous_interface_3_to_js x46
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x49 : Ojs.t) -> t_of_js x49
        and t_0_to_js : t_0 -> Ojs.t = fun (x48 : t) -> t_to_js x48
        let (_Symbol_replace_ :
          t ->
            string:string ->
              replacer:(substring:string -> args:any list -> string) ->
                string)
          =
          fun (x54 : t) ->
            fun ~string:(x50 : string) ->
              fun
                ~replacer:(x51 : substring:string -> args:any list -> string)
                ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x54) "[Symbol.replace]"
                     [|(Ojs.string_to_js x50);(Ojs.fun_to_js_args
                                                 (fun (x52 : _) ->
                                                    Ojs.string_to_js
                                                      (x51
                                                         ~substring:(
                                                         Ojs.string_of_js
                                                           (Ojs.array_get x52
                                                              0))
                                                         ~args:(Ojs.list_of_js_from
                                                                  any_of_js
                                                                  x52 1))))|])
      end
    module AnonymousInterface4 =
      struct
        type t = anonymous_interface_4
        let rec t_of_js : Ojs.t -> t =
          fun (x56 : Ojs.t) -> anonymous_interface_4_of_js x56
        and t_to_js : t -> Ojs.t =
          fun (x55 : anonymous_interface_4) ->
            anonymous_interface_4_to_js x55
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x58 : Ojs.t) -> t_of_js x58
        and t_0_to_js : t_0 -> Ojs.t = fun (x57 : t) -> t_to_js x57
        let (_Symbol_search_ : t -> string:string -> float) =
          fun (x60 : t) ->
            fun ~string:(x59 : string) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x60) "[Symbol.search]"
                   [|(Ojs.string_to_js x59)|])
      end
    module AnonymousInterface5 =
      struct
        type t = anonymous_interface_5
        let rec t_of_js : Ojs.t -> t =
          fun (x62 : Ojs.t) -> anonymous_interface_5_of_js x62
        and t_to_js : t -> Ojs.t =
          fun (x61 : anonymous_interface_5) ->
            anonymous_interface_5_to_js x61
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x64 : Ojs.t) -> t_of_js x64
        and t_0_to_js : t_0 -> Ojs.t = fun (x63 : t) -> t_to_js x63
        let (_Symbol_split_ :
          t -> string:string -> ?limit:float -> unit -> string list) =
          fun (x69 : t) ->
            fun ~string:(x65 : string) ->
              fun ?limit:(x66 : float option) ->
                fun () ->
                  Ojs.list_of_js Ojs.string_of_js
                    (let x70 = t_to_js x69 in
                     Ojs.call (Ojs.get_prop_ascii x70 "[Symbol.split]")
                       "apply"
                       [|x70;((let x67 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x67 "push"
                                    [|(Ojs.string_to_js x65)|]);
                               (match x66 with
                                | Some x68 ->
                                    ignore
                                      (Ojs.call x67 "push"
                                         [|(Ojs.float_to_js x68)|])
                                | None -> ());
                               x67))|])
      end
    module SymbolConstructor =
      struct
        type t = _SymbolConstructor
        let rec t_of_js : Ojs.t -> t =
          fun (x73 : Ojs.t) -> _SymbolConstructor_of_js x73
        and t_to_js : t -> Ojs.t =
          fun (x72 : _SymbolConstructor) -> _SymbolConstructor_to_js x72
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x75 : Ojs.t) -> t_of_js x75
        and t_0_to_js : t_0 -> Ojs.t = fun (x74 : t) -> t_to_js x74
        let (get_hasInstance : t -> symbol) =
          fun (x76 : t) ->
            symbol_of_js (Ojs.get_prop_ascii (t_to_js x76) "hasInstance")
        let (get_isConcatSpreadable : t -> symbol) =
          fun (x77 : t) ->
            symbol_of_js
              (Ojs.get_prop_ascii (t_to_js x77) "isConcatSpreadable")
        let (get_match : t -> symbol) =
          fun (x78 : t) ->
            symbol_of_js (Ojs.get_prop_ascii (t_to_js x78) "match")
        let (get_replace : t -> symbol) =
          fun (x79 : t) ->
            symbol_of_js (Ojs.get_prop_ascii (t_to_js x79) "replace")
        let (get_search : t -> symbol) =
          fun (x80 : t) ->
            symbol_of_js (Ojs.get_prop_ascii (t_to_js x80) "search")
        let (get_species : t -> symbol) =
          fun (x81 : t) ->
            symbol_of_js (Ojs.get_prop_ascii (t_to_js x81) "species")
        let (get_split : t -> symbol) =
          fun (x82 : t) ->
            symbol_of_js (Ojs.get_prop_ascii (t_to_js x82) "split")
        let (get_toPrimitive : t -> symbol) =
          fun (x83 : t) ->
            symbol_of_js (Ojs.get_prop_ascii (t_to_js x83) "toPrimitive")
        let (get_toStringTag : t -> symbol) =
          fun (x84 : t) ->
            symbol_of_js (Ojs.get_prop_ascii (t_to_js x84) "toStringTag")
        let (get_unscopables : t -> symbol) =
          fun (x85 : t) ->
            symbol_of_js (Ojs.get_prop_ascii (t_to_js x85) "unscopables")
      end
    module Symbol =
      struct
        type t = _Symbol
        let rec t_of_js : Ojs.t -> t = fun (x87 : Ojs.t) -> _Symbol_of_js x87
        and t_to_js : t -> Ojs.t = fun (x86 : _Symbol) -> _Symbol_to_js x86
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x89 : Ojs.t) -> t_of_js x89
        and t_0_to_js : t_0 -> Ojs.t = fun (x88 : t) -> t_to_js x88
        let (_Symbol_toPrimitive_ : t -> hint:string -> symbol) =
          fun (x91 : t) ->
            fun ~hint:(x90 : string) ->
              symbol_of_js
                (Ojs.call (t_to_js x91) "[Symbol.toPrimitive]"
                   [|(Ojs.string_to_js x90)|])
        let (get__Symbol_toStringTag_ : t -> string) =
          fun (x92 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x92) "[Symbol.toStringTag]")
      end
    module Array =
      struct
        type 'T t = 'T _Array
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x95 : Ojs.t) -> _Array_of_js __T_of_js x95
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x93 : __T _Array) -> _Array_to_js __T_to_js x93
        type 'T t_1 = 'T t
        let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x99 : Ojs.t) -> t_of_js __T_of_js x99
        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type
          __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x97 : __T t) -> t_to_js __T_to_js x97
        let (_Symbol_unscopables_ : 'T t -> anonymous_interface_0) =
          fun (x101 : 'T t) ->
            anonymous_interface_0_of_js
              (Ojs.call (t_to_js Obj.magic x101) "[Symbol.unscopables]" [||])
        let (to_ml : 'T t -> 'T list) =
          fun (x103 : 'T t) ->
            Ojs.list_of_js Obj.magic (t_to_js Obj.magic x103)
        let (of_ml : 'T list -> 'T t) =
          fun (x106 : 'T list) ->
            t_of_js Obj.magic (Ojs.list_to_js Obj.magic x106)
      end
    module Date =
      struct
        type t = _Date
        let rec t_of_js : Ojs.t -> t = fun (x110 : Ojs.t) -> _Date_of_js x110
        and t_to_js : t -> Ojs.t = fun (x109 : _Date) -> _Date_to_js x109
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x112 : Ojs.t) -> t_of_js x112
        and t_0_to_js : t_0 -> Ojs.t = fun (x111 : t) -> t_to_js x111
        let (_Symbol_toPrimitive_ : t -> hint:[ `L_s9_default ] -> string) =
          fun (x114 : t) ->
            fun ~hint:(x113 : [ `L_s9_default ]) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x114) "[Symbol.toPrimitive]"
                   [|((match x113 with
                       | `L_s9_default -> Ojs.string_to_js "LS9Default"))|])
        let (_Symbol_toPrimitive_' : t -> hint:[ `L_s11_string ] -> string) =
          fun (x116 : t) ->
            fun ~hint:(x115 : [ `L_s11_string ]) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x116) "[Symbol.toPrimitive]"
                   [|((match x115 with
                       | `L_s11_string -> Ojs.string_to_js "LS11String"))|])
        let (_Symbol_toPrimitive_'' : t -> hint:[ `L_s10_number ] -> float) =
          fun (x118 : t) ->
            fun ~hint:(x117 : [ `L_s10_number ]) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x118) "[Symbol.toPrimitive]"
                   [|((match x117 with
                       | `L_s10_number -> Ojs.string_to_js "LS10Number"))|])
        let (_Symbol_toPrimitive_''' : t -> hint:string -> string or_number)
          =
          fun (x120 : t) ->
            fun ~hint:(x119 : string) ->
              or_number_of_js Ojs.string_of_js
                (Ojs.call (t_to_js x120) "[Symbol.toPrimitive]"
                   [|(Ojs.string_to_js x119)|])
      end
    module Map =
      struct
        type ('K, 'V) t = ('K, 'V) _Map
        let rec t_of_js :
          'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t = fun
          (type __K) -> fun (type __V) ->
          fun (__K_of_js : Ojs.t -> __K) ->
            fun (__V_of_js : Ojs.t -> __V) ->
              fun (x125 : Ojs.t) -> _Map_of_js __K_of_js __V_of_js x125
        and t_to_js :
          'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t = fun
          (type __K) -> fun (type __V) ->
          fun (__K_to_js : __K -> Ojs.t) ->
            fun (__V_to_js : __V -> Ojs.t) ->
              fun (x122 : (__K, __V) _Map) ->
                _Map_to_js __K_to_js __V_to_js x122
        type ('K, 'V) t_2 = ('K, 'V) t
        let rec t_2_of_js :
          'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t_2 =
          fun (type __K) -> fun (type __V) ->
          fun (__K_of_js : Ojs.t -> __K) ->
            fun (__V_of_js : Ojs.t -> __V) ->
              fun (x131 : Ojs.t) -> t_of_js __K_of_js __V_of_js x131
        and t_2_to_js :
          'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t_2 -> Ojs.t =
          fun (type __K) -> fun (type __V) ->
          fun (__K_to_js : __K -> Ojs.t) ->
            fun (__V_to_js : __V -> Ojs.t) ->
              fun (x128 : (__K, __V) t) -> t_to_js __K_to_js __V_to_js x128
        let (get__Symbol_toStringTag_ : ('K, 'V) t -> string) =
          fun (x134 : ('K, 'V) t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x134)
                 "[Symbol.toStringTag]")
      end
    module WeakMap =
      struct
        type ('K, 'V) t = ('K, 'V) _WeakMap
        let rec t_of_js :
          'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t = fun
          (type __K) -> fun (type __V) ->
          fun (__K_of_js : Ojs.t -> __K) ->
            fun (__V_of_js : Ojs.t -> __V) ->
              fun (x140 : Ojs.t) -> _WeakMap_of_js __K_of_js __V_of_js x140
        and t_to_js :
          'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t = fun
          (type __K) -> fun (type __V) ->
          fun (__K_to_js : __K -> Ojs.t) ->
            fun (__V_to_js : __V -> Ojs.t) ->
              fun (x137 : (__K, __V) _WeakMap) ->
                _WeakMap_to_js __K_to_js __V_to_js x137
        type ('K, 'V) t_2 = ('K, 'V) t
        let rec t_2_of_js :
          'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t_2 =
          fun (type __K) -> fun (type __V) ->
          fun (__K_of_js : Ojs.t -> __K) ->
            fun (__V_of_js : Ojs.t -> __V) ->
              fun (x146 : Ojs.t) -> t_of_js __K_of_js __V_of_js x146
        and t_2_to_js :
          'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t_2 -> Ojs.t =
          fun (type __K) -> fun (type __V) ->
          fun (__K_to_js : __K -> Ojs.t) ->
            fun (__V_to_js : __V -> Ojs.t) ->
              fun (x143 : (__K, __V) t) -> t_to_js __K_to_js __V_to_js x143
        let (get__Symbol_toStringTag_ : ('K, 'V) t -> string) =
          fun (x149 : ('K, 'V) t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x149)
                 "[Symbol.toStringTag]")
      end
    module Set =
      struct
        type 'T t = 'T _Set
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x154 : Ojs.t) -> _Set_of_js __T_of_js x154
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x152 : __T _Set) -> _Set_to_js __T_to_js x152
        type 'T t_1 = 'T t
        let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x158 : Ojs.t) -> t_of_js __T_of_js x158
        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type
          __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x156 : __T t) -> t_to_js __T_to_js x156
        let (get__Symbol_toStringTag_ : 'T t -> string) =
          fun (x160 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x160)
                 "[Symbol.toStringTag]")
      end
    module WeakSet =
      struct
        type 'T t = 'T _WeakSet
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x164 : Ojs.t) -> _WeakSet_of_js __T_of_js x164
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x162 : __T _WeakSet) -> _WeakSet_to_js __T_to_js x162
        type 'T t_1 = 'T t
        let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x168 : Ojs.t) -> t_of_js __T_of_js x168
        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type
          __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x166 : __T t) -> t_to_js __T_to_js x166
        let (get__Symbol_toStringTag_ : 'T t -> string) =
          fun (x170 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x170)
                 "[Symbol.toStringTag]")
      end
    module JSON =
      struct
        type t = _JSON
        let rec t_of_js : Ojs.t -> t = fun (x173 : Ojs.t) -> _JSON_of_js x173
        and t_to_js : t -> Ojs.t = fun (x172 : _JSON) -> _JSON_to_js x172
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x175 : Ojs.t) -> t_of_js x175
        and t_0_to_js : t_0 -> Ojs.t = fun (x174 : t) -> t_to_js x174
        let (get__Symbol_toStringTag_ : t -> string) =
          fun (x176 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x176) "[Symbol.toStringTag]")
      end
    module Function =
      struct
        type t = _Function
        let rec t_of_js : Ojs.t -> t =
          fun (x178 : Ojs.t) -> _Function_of_js x178
        and t_to_js : t -> Ojs.t =
          fun (x177 : _Function) -> _Function_to_js x177
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x180 : Ojs.t) -> t_of_js x180
        and t_0_to_js : t_0 -> Ojs.t = fun (x179 : t) -> t_to_js x179
        let (_Symbol_hasInstance_ : t -> value:any -> bool) =
          fun (x182 : t) ->
            fun ~value:(x181 : any) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x182) "[Symbol.hasInstance]"
                   [|(any_to_js x181)|])
      end
    module GeneratorFunction =
      struct
        type t = _GeneratorFunction
        let rec t_of_js : Ojs.t -> t =
          fun (x184 : Ojs.t) -> _GeneratorFunction_of_js x184
        and t_to_js : t -> Ojs.t =
          fun (x183 : _GeneratorFunction) -> _GeneratorFunction_to_js x183
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x186 : Ojs.t) -> t_of_js x186
        and t_0_to_js : t_0 -> Ojs.t = fun (x185 : t) -> t_to_js x185
        let (get__Symbol_toStringTag_ : t -> string) =
          fun (x187 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x187) "[Symbol.toStringTag]")
      end
    module Math =
      struct
        type t = _Math
        let rec t_of_js : Ojs.t -> t = fun (x189 : Ojs.t) -> _Math_of_js x189
        and t_to_js : t -> Ojs.t = fun (x188 : _Math) -> _Math_to_js x188
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x191 : Ojs.t) -> t_of_js x191
        and t_0_to_js : t_0 -> Ojs.t = fun (x190 : t) -> t_to_js x190
        let (get__Symbol_toStringTag_ : t -> string) =
          fun (x192 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x192) "[Symbol.toStringTag]")
      end
    module Promise =
      struct
        type 'T t = 'T _Promise
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x195 : Ojs.t) -> _Promise_of_js __T_of_js x195
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x193 : __T _Promise) -> _Promise_to_js __T_to_js x193
        type 'T t_1 = 'T t
        let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x199 : Ojs.t) -> t_of_js __T_of_js x199
        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type
          __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x197 : __T t) -> t_to_js __T_to_js x197
        let (get__Symbol_toStringTag_ : 'T t -> string) =
          fun (x201 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x201)
                 "[Symbol.toStringTag]")
      end
    module PromiseConstructor =
      struct
        type t = _PromiseConstructor
        let rec t_of_js : Ojs.t -> t =
          fun (x204 : Ojs.t) -> _PromiseConstructor_of_js x204
        and t_to_js : t -> Ojs.t =
          fun (x203 : _PromiseConstructor) -> _PromiseConstructor_to_js x203
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x206 : Ojs.t) -> t_of_js x206
        and t_0_to_js : t_0 -> Ojs.t = fun (x205 : t) -> t_to_js x205
        let (get__Symbol_species_ : t -> t) =
          fun (x207 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x207) "[Symbol.species]")
      end
    module RegExp =
      struct
        type t = _RegExp
        let rec t_of_js : Ojs.t -> t =
          fun (x209 : Ojs.t) -> _RegExp_of_js x209
        and t_to_js : t -> Ojs.t = fun (x208 : _RegExp) -> _RegExp_to_js x208
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x211 : Ojs.t) -> t_of_js x211
        and t_0_to_js : t_0 -> Ojs.t = fun (x210 : t) -> t_to_js x210
        let (_Symbol_match_ :
          t -> string:string -> RegExpMatchArray.t_0 or_null) =
          fun (x213 : t) ->
            fun ~string:(x212 : string) ->
              or_null_of_js RegExpMatchArray.t_0_of_js
                (Ojs.call (t_to_js x213) "[Symbol.match]"
                   [|(Ojs.string_to_js x212)|])
        let (_Symbol_replace_ :
          t -> string:string -> replaceValue:string -> string) =
          fun (x217 : t) ->
            fun ~string:(x215 : string) ->
              fun ~replaceValue:(x216 : string) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x217) "[Symbol.replace]"
                     [|(Ojs.string_to_js x215);(Ojs.string_to_js x216)|])
        let (_Symbol_replace_' :
          t ->
            string:string ->
              replacer:(substring:string -> args:any list -> string) ->
                string)
          =
          fun (x222 : t) ->
            fun ~string:(x218 : string) ->
              fun
                ~replacer:(x219 :
                            substring:string -> args:any list -> string)
                ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x222) "[Symbol.replace]"
                     [|(Ojs.string_to_js x218);(Ojs.fun_to_js_args
                                                  (fun (x220 : _) ->
                                                     Ojs.string_to_js
                                                       (x219
                                                          ~substring:(
                                                          Ojs.string_of_js
                                                            (Ojs.array_get
                                                               x220 0))
                                                          ~args:(Ojs.list_of_js_from
                                                                   any_of_js
                                                                   x220 1))))|])
        let (_Symbol_search_ : t -> string:string -> float) =
          fun (x224 : t) ->
            fun ~string:(x223 : string) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x224) "[Symbol.search]"
                   [|(Ojs.string_to_js x223)|])
        let (_Symbol_split_ :
          t -> string:string -> ?limit:float -> unit -> string list) =
          fun (x229 : t) ->
            fun ~string:(x225 : string) ->
              fun ?limit:(x226 : float option) ->
                fun () ->
                  Ojs.list_of_js Ojs.string_of_js
                    (let x230 = t_to_js x229 in
                     Ojs.call (Ojs.get_prop_ascii x230 "[Symbol.split]")
                       "apply"
                       [|x230;((let x227 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x227 "push"
                                     [|(Ojs.string_to_js x225)|]);
                                (match x226 with
                                 | Some x228 ->
                                     ignore
                                       (Ojs.call x227 "push"
                                          [|(Ojs.float_to_js x228)|])
                                 | None -> ());
                                x227))|])
      end
    module RegExpConstructor =
      struct
        type t = _RegExpConstructor
        let rec t_of_js : Ojs.t -> t =
          fun (x233 : Ojs.t) -> _RegExpConstructor_of_js x233
        and t_to_js : t -> Ojs.t =
          fun (x232 : _RegExpConstructor) -> _RegExpConstructor_to_js x232
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x235 : Ojs.t) -> t_of_js x235
        and t_0_to_js : t_0 -> Ojs.t = fun (x234 : t) -> t_to_js x234
        let (get__Symbol_species_ : t -> t) =
          fun (x236 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x236) "[Symbol.species]")
      end
    module String =
      struct
        type t = _String
        let rec t_of_js : Ojs.t -> t =
          fun (x238 : Ojs.t) -> _String_of_js x238
        and t_to_js : t -> Ojs.t = fun (x237 : _String) -> _String_to_js x237
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x240 : Ojs.t) -> t_of_js x240
        and t_0_to_js : t_0 -> Ojs.t = fun (x239 : t) -> t_to_js x239
        let (match_ :
          t -> matcher:anonymous_interface_1 -> RegExpMatchArray.t_0 or_null)
          =
          fun (x242 : t) ->
            fun ~matcher:(x241 : anonymous_interface_1) ->
              or_null_of_js RegExpMatchArray.t_0_of_js
                (Ojs.call (t_to_js x242) "match"
                   [|(anonymous_interface_1_to_js x241)|])
        let (replace :
          t ->
            searchValue:anonymous_interface_2 ->
              replaceValue:string -> string)
          =
          fun (x246 : t) ->
            fun ~searchValue:(x244 : anonymous_interface_2) ->
              fun ~replaceValue:(x245 : string) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x246) "replace"
                     [|(anonymous_interface_2_to_js x244);(Ojs.string_to_js
                                                             x245)|])
        let (replace' :
          t ->
            searchValue:anonymous_interface_3 ->
              replacer:(substring:string -> args:any list -> string) ->
                string)
          =
          fun (x251 : t) ->
            fun ~searchValue:(x247 : anonymous_interface_3) ->
              fun
                ~replacer:(x248 :
                            substring:string -> args:any list -> string)
                ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x251) "replace"
                     [|(anonymous_interface_3_to_js x247);(Ojs.fun_to_js_args
                                                             (fun (x249 : _)
                                                                ->
                                                                Ojs.string_to_js
                                                                  (x248
                                                                    ~substring:(
                                                                    Ojs.string_of_js
                                                                    (Ojs.array_get
                                                                    x249 0))
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x249 1))))|])
        let (search : t -> searcher:anonymous_interface_4 -> float) =
          fun (x253 : t) ->
            fun ~searcher:(x252 : anonymous_interface_4) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x253) "search"
                   [|(anonymous_interface_4_to_js x252)|])
        let (split :
          t ->
            splitter:anonymous_interface_5 ->
              ?limit:float -> unit -> string list)
          =
          fun (x258 : t) ->
            fun ~splitter:(x254 : anonymous_interface_5) ->
              fun ?limit:(x255 : float option) ->
                fun () ->
                  Ojs.list_of_js Ojs.string_of_js
                    (let x259 = t_to_js x258 in
                     Ojs.call (Ojs.get_prop_ascii x259 "split") "apply"
                       [|x259;((let x256 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x256 "push"
                                     [|(anonymous_interface_5_to_js x254)|]);
                                (match x255 with
                                 | Some x257 ->
                                     ignore
                                       (Ojs.call x256 "push"
                                          [|(Ojs.float_to_js x257)|])
                                 | None -> ());
                                x256))|])
        let (to_ml : t -> string) =
          fun (x261 : t) -> Ojs.string_of_js (t_to_js x261)
        let (of_ml : string -> t) =
          fun (x262 : string) -> t_of_js (Ojs.string_to_js x262)
      end
    module ArrayBuffer =
      struct
        type t = _ArrayBuffer
        let rec t_of_js : Ojs.t -> t =
          fun (x264 : Ojs.t) -> _ArrayBuffer_of_js x264
        and t_to_js : t -> Ojs.t =
          fun (x263 : _ArrayBuffer) -> _ArrayBuffer_to_js x263
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x266 : Ojs.t) -> t_of_js x266
        and t_0_to_js : t_0 -> Ojs.t = fun (x265 : t) -> t_to_js x265
        let (get__Symbol_toStringTag_ : t -> string) =
          fun (x267 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x267) "[Symbol.toStringTag]")
      end
    module DataView =
      struct
        type t = _DataView
        let rec t_of_js : Ojs.t -> t =
          fun (x269 : Ojs.t) -> _DataView_of_js x269
        and t_to_js : t -> Ojs.t =
          fun (x268 : _DataView) -> _DataView_to_js x268
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x271 : Ojs.t) -> t_of_js x271
        and t_0_to_js : t_0 -> Ojs.t = fun (x270 : t) -> t_to_js x270
        let (get__Symbol_toStringTag_ : t -> string) =
          fun (x272 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x272) "[Symbol.toStringTag]")
      end
    module Int8Array =
      struct
        type t = _Int8Array
        let rec t_of_js : Ojs.t -> t =
          fun (x274 : Ojs.t) -> _Int8Array_of_js x274
        and t_to_js : t -> Ojs.t =
          fun (x273 : _Int8Array) -> _Int8Array_to_js x273
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x276 : Ojs.t) -> t_of_js x276
        and t_0_to_js : t_0 -> Ojs.t = fun (x275 : t) -> t_to_js x275
        let (get__Symbol_toStringTag_ : t -> [ `L_s4_Int8Array ]) =
          fun (x277 : t) ->
            let x278 =
              Ojs.get_prop_ascii (t_to_js x277) "[Symbol.toStringTag]" in
            match Ojs.string_of_js x278 with
            | "Int8Array" -> `L_s4_Int8Array
            | _ -> assert false
      end
    module Uint8Array =
      struct
        type t = _Uint8Array
        let rec t_of_js : Ojs.t -> t =
          fun (x280 : Ojs.t) -> _Uint8Array_of_js x280
        and t_to_js : t -> Ojs.t =
          fun (x279 : _Uint8Array) -> _Uint8Array_to_js x279
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x282 : Ojs.t) -> t_of_js x282
        and t_0_to_js : t_0 -> Ojs.t = fun (x281 : t) -> t_to_js x281
        let (get__Symbol_toStringTag_ : t -> [ `L_s7_Uint8Array ]) =
          fun (x283 : t) ->
            let x284 =
              Ojs.get_prop_ascii (t_to_js x283) "[Symbol.toStringTag]" in
            match Ojs.string_of_js x284 with
            | "Uint8Array" -> `L_s7_Uint8Array
            | _ -> assert false
      end
    module Uint8ClampedArray =
      struct
        type t = _Uint8ClampedArray
        let rec t_of_js : Ojs.t -> t =
          fun (x286 : Ojs.t) -> _Uint8ClampedArray_of_js x286
        and t_to_js : t -> Ojs.t =
          fun (x285 : _Uint8ClampedArray) -> _Uint8ClampedArray_to_js x285
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x288 : Ojs.t) -> t_of_js x288
        and t_0_to_js : t_0 -> Ojs.t = fun (x287 : t) -> t_to_js x287
        let (get__Symbol_toStringTag_ : t -> [ `L_s8_Uint8ClampedArray ]) =
          fun (x289 : t) ->
            let x290 =
              Ojs.get_prop_ascii (t_to_js x289) "[Symbol.toStringTag]" in
            match Ojs.string_of_js x290 with
            | "Uint8ClampedArray" -> `L_s8_Uint8ClampedArray
            | _ -> assert false
      end
    module Int16Array =
      struct
        type t = _Int16Array
        let rec t_of_js : Ojs.t -> t =
          fun (x292 : Ojs.t) -> _Int16Array_of_js x292
        and t_to_js : t -> Ojs.t =
          fun (x291 : _Int16Array) -> _Int16Array_to_js x291
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x294 : Ojs.t) -> t_of_js x294
        and t_0_to_js : t_0 -> Ojs.t = fun (x293 : t) -> t_to_js x293
        let (get__Symbol_toStringTag_ : t -> [ `L_s2_Int16Array ]) =
          fun (x295 : t) ->
            let x296 =
              Ojs.get_prop_ascii (t_to_js x295) "[Symbol.toStringTag]" in
            match Ojs.string_of_js x296 with
            | "Int16Array" -> `L_s2_Int16Array
            | _ -> assert false
      end
    module Uint16Array =
      struct
        type t = _Uint16Array
        let rec t_of_js : Ojs.t -> t =
          fun (x298 : Ojs.t) -> _Uint16Array_of_js x298
        and t_to_js : t -> Ojs.t =
          fun (x297 : _Uint16Array) -> _Uint16Array_to_js x297
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x300 : Ojs.t) -> t_of_js x300
        and t_0_to_js : t_0 -> Ojs.t = fun (x299 : t) -> t_to_js x299
        let (get__Symbol_toStringTag_ : t -> [ `L_s5_Uint16Array ]) =
          fun (x301 : t) ->
            let x302 =
              Ojs.get_prop_ascii (t_to_js x301) "[Symbol.toStringTag]" in
            match Ojs.string_of_js x302 with
            | "Uint16Array" -> `L_s5_Uint16Array
            | _ -> assert false
      end
    module Int32Array =
      struct
        type t = _Int32Array
        let rec t_of_js : Ojs.t -> t =
          fun (x304 : Ojs.t) -> _Int32Array_of_js x304
        and t_to_js : t -> Ojs.t =
          fun (x303 : _Int32Array) -> _Int32Array_to_js x303
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x306 : Ojs.t) -> t_of_js x306
        and t_0_to_js : t_0 -> Ojs.t = fun (x305 : t) -> t_to_js x305
        let (get__Symbol_toStringTag_ : t -> [ `L_s3_Int32Array ]) =
          fun (x307 : t) ->
            let x308 =
              Ojs.get_prop_ascii (t_to_js x307) "[Symbol.toStringTag]" in
            match Ojs.string_of_js x308 with
            | "Int32Array" -> `L_s3_Int32Array
            | _ -> assert false
      end
    module Uint32Array =
      struct
        type t = _Uint32Array
        let rec t_of_js : Ojs.t -> t =
          fun (x310 : Ojs.t) -> _Uint32Array_of_js x310
        and t_to_js : t -> Ojs.t =
          fun (x309 : _Uint32Array) -> _Uint32Array_to_js x309
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x312 : Ojs.t) -> t_of_js x312
        and t_0_to_js : t_0 -> Ojs.t = fun (x311 : t) -> t_to_js x311
        let (get__Symbol_toStringTag_ : t -> [ `L_s6_Uint32Array ]) =
          fun (x313 : t) ->
            let x314 =
              Ojs.get_prop_ascii (t_to_js x313) "[Symbol.toStringTag]" in
            match Ojs.string_of_js x314 with
            | "Uint32Array" -> `L_s6_Uint32Array
            | _ -> assert false
      end
    module Float32Array =
      struct
        type t = _Float32Array
        let rec t_of_js : Ojs.t -> t =
          fun (x316 : Ojs.t) -> _Float32Array_of_js x316
        and t_to_js : t -> Ojs.t =
          fun (x315 : _Float32Array) -> _Float32Array_to_js x315
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x318 : Ojs.t) -> t_of_js x318
        and t_0_to_js : t_0 -> Ojs.t = fun (x317 : t) -> t_to_js x317
        let (get__Symbol_toStringTag_ : t -> [ `L_s0_Float32Array ]) =
          fun (x319 : t) ->
            let x320 =
              Ojs.get_prop_ascii (t_to_js x319) "[Symbol.toStringTag]" in
            match Ojs.string_of_js x320 with
            | "Float32Array" -> `L_s0_Float32Array
            | _ -> assert false
      end
    module Float64Array =
      struct
        type t = _Float64Array
        let rec t_of_js : Ojs.t -> t =
          fun (x322 : Ojs.t) -> _Float64Array_of_js x322
        and t_to_js : t -> Ojs.t =
          fun (x321 : _Float64Array) -> _Float64Array_to_js x321
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x324 : Ojs.t) -> t_of_js x324
        and t_0_to_js : t_0 -> Ojs.t = fun (x323 : t) -> t_to_js x323
        let (get__Symbol_toStringTag_ : t -> [ `L_s1_Float64Array ]) =
          fun (x325 : t) ->
            let x326 =
              Ojs.get_prop_ascii (t_to_js x325) "[Symbol.toStringTag]" in
            match Ojs.string_of_js x326 with
            | "Float64Array" -> `L_s1_Float64Array
            | _ -> assert false
      end
    module ArrayConstructor =
      struct
        type t = _ArrayConstructor
        let rec t_of_js : Ojs.t -> t =
          fun (x328 : Ojs.t) -> _ArrayConstructor_of_js x328
        and t_to_js : t -> Ojs.t =
          fun (x327 : _ArrayConstructor) -> _ArrayConstructor_to_js x327
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x330 : Ojs.t) -> t_of_js x330
        and t_0_to_js : t_0 -> Ojs.t = fun (x329 : t) -> t_to_js x329
        let (get__Symbol_species_ : t -> t) =
          fun (x331 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x331) "[Symbol.species]")
      end
    module MapConstructor =
      struct
        type t = _MapConstructor
        let rec t_of_js : Ojs.t -> t =
          fun (x333 : Ojs.t) -> _MapConstructor_of_js x333
        and t_to_js : t -> Ojs.t =
          fun (x332 : _MapConstructor) -> _MapConstructor_to_js x332
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x335 : Ojs.t) -> t_of_js x335
        and t_0_to_js : t_0 -> Ojs.t = fun (x334 : t) -> t_to_js x334
        let (get__Symbol_species_ : t -> t) =
          fun (x336 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x336) "[Symbol.species]")
      end
    module SetConstructor =
      struct
        type t = _SetConstructor
        let rec t_of_js : Ojs.t -> t =
          fun (x338 : Ojs.t) -> _SetConstructor_of_js x338
        and t_to_js : t -> Ojs.t =
          fun (x337 : _SetConstructor) -> _SetConstructor_to_js x337
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x340 : Ojs.t) -> t_of_js x340
        and t_0_to_js : t_0 -> Ojs.t = fun (x339 : t) -> t_to_js x339
        let (get__Symbol_species_ : t -> t) =
          fun (x341 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x341) "[Symbol.species]")
      end
    module ArrayBufferConstructor =
      struct
        type t = _ArrayBufferConstructor
        let rec t_of_js : Ojs.t -> t =
          fun (x343 : Ojs.t) -> _ArrayBufferConstructor_of_js x343
        and t_to_js : t -> Ojs.t =
          fun (x342 : _ArrayBufferConstructor) ->
            _ArrayBufferConstructor_to_js x342
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 = fun (x345 : Ojs.t) -> t_of_js x345
        and t_0_to_js : t_0 -> Ojs.t = fun (x344 : t) -> t_to_js x344
        let (get__Symbol_species_ : t -> t) =
          fun (x346 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x346) "[Symbol.species]")
      end
  end
