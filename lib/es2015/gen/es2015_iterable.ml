[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
open Es2015_symbol
open Es2015_collection
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type 'T _Array = [ `Array of 'T ] intf
        and _ArrayConstructor = [ `ArrayConstructor ] intf
        and _Float32Array = [ `Float32Array ] intf
        and _Float32ArrayConstructor = [ `Float32ArrayConstructor ] intf
        and _Float64Array = [ `Float64Array ] intf
        and _Float64ArrayConstructor = [ `Float64ArrayConstructor ] intf
        and _IArguments = [ `IArguments ] intf
        and _Int16Array = [ `Int16Array ] intf
        and _Int16ArrayConstructor = [ `Int16ArrayConstructor ] intf
        and _Int32Array = [ `Int32Array ] intf
        and _Int32ArrayConstructor = [ `Int32ArrayConstructor ] intf
        and _Int8Array = [ `Int8Array ] intf
        and _Int8ArrayConstructor = [ `Int8ArrayConstructor ] intf
        and 'T _Iterable = [ `Iterable of 'T ] intf
        and 'T _IterableIterator =
          [ `IterableIterator of 'T  | `Iterator of 'T ] intf
        and ('T, 'TReturn, 'TNext) _Iterator =
          [ `Iterator of ('T * 'TReturn * 'TNext) ] intf
        and ('T, 'TReturn) _IteratorResult =
          [ `U_b_false of 'T _IteratorYieldResult 
          | `U_b_true of 'TReturn _IteratorReturnResult ]
        and 'TReturn _IteratorReturnResult =
          [ `IteratorReturnResult of 'TReturn ] intf
        and 'TYield _IteratorYieldResult =
          [ `IteratorYieldResult of 'TYield ] intf
        and ('K, 'V) _Map = [ `Map of ('K * 'V) ] intf
        and _MapConstructor = [ `MapConstructor ] intf
        and 'T _Promise = [ `Promise of 'T ] intf
        and _PromiseConstructor = [ `PromiseConstructor ] intf
        and 'T _ReadonlyArray = [ `ReadonlyArray of 'T ] intf
        and ('K, 'V) _ReadonlyMap = [ `ReadonlyMap of ('K * 'V) ] intf
        and 'T _ReadonlySet = [ `ReadonlySet of 'T ] intf
        and 'T _Set = [ `Set of 'T ] intf
        and _SetConstructor = [ `SetConstructor ] intf
        and _String = [ `String ] intf
        and _SymbolConstructor = [ `SymbolConstructor ] intf
        and _Uint16Array = [ `Uint16Array ] intf
        and _Uint16ArrayConstructor = [ `Uint16ArrayConstructor ] intf
        and _Uint32Array = [ `Uint32Array ] intf
        and _Uint32ArrayConstructor = [ `Uint32ArrayConstructor ] intf
        and _Uint8Array = [ `Uint8Array ] intf
        and _Uint8ArrayConstructor = [ `Uint8ArrayConstructor ] intf
        and _Uint8ClampedArray = [ `Uint8ClampedArray ] intf
        and _Uint8ClampedArrayConstructor =
          [ `Uint8ClampedArrayConstructor ] intf
        and ('K, 'V) _WeakMap = [ `WeakMap of ('K * 'V) ] intf
        and _WeakMapConstructor = [ `WeakMapConstructor ] intf
        and 'T _WeakSet = [ `WeakSet of 'T ] intf
        and _WeakSetConstructor = [ `WeakSetConstructor ] intf
        let rec _Array_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _Array =
          fun _T -> Obj.magic
        and _Array_to_js : 'T . ('T -> Ojs.t) -> 'T _Array -> Ojs.t =
          fun _T -> Obj.magic
        and _ArrayConstructor_of_js : Ojs.t -> _ArrayConstructor = Obj.magic
        and _ArrayConstructor_to_js : _ArrayConstructor -> Ojs.t = Obj.magic
        and _Float32Array_of_js : Ojs.t -> _Float32Array = Obj.magic
        and _Float32Array_to_js : _Float32Array -> Ojs.t = Obj.magic
        and _Float32ArrayConstructor_of_js :
          Ojs.t -> _Float32ArrayConstructor = Obj.magic
        and _Float32ArrayConstructor_to_js :
          _Float32ArrayConstructor -> Ojs.t = Obj.magic
        and _Float64Array_of_js : Ojs.t -> _Float64Array = Obj.magic
        and _Float64Array_to_js : _Float64Array -> Ojs.t = Obj.magic
        and _Float64ArrayConstructor_of_js :
          Ojs.t -> _Float64ArrayConstructor = Obj.magic
        and _Float64ArrayConstructor_to_js :
          _Float64ArrayConstructor -> Ojs.t = Obj.magic
        and _IArguments_of_js : Ojs.t -> _IArguments = Obj.magic
        and _IArguments_to_js : _IArguments -> Ojs.t = Obj.magic
        and _Int16Array_of_js : Ojs.t -> _Int16Array = Obj.magic
        and _Int16Array_to_js : _Int16Array -> Ojs.t = Obj.magic
        and _Int16ArrayConstructor_of_js : Ojs.t -> _Int16ArrayConstructor =
          Obj.magic
        and _Int16ArrayConstructor_to_js : _Int16ArrayConstructor -> Ojs.t =
          Obj.magic
        and _Int32Array_of_js : Ojs.t -> _Int32Array = Obj.magic
        and _Int32Array_to_js : _Int32Array -> Ojs.t = Obj.magic
        and _Int32ArrayConstructor_of_js : Ojs.t -> _Int32ArrayConstructor =
          Obj.magic
        and _Int32ArrayConstructor_to_js : _Int32ArrayConstructor -> Ojs.t =
          Obj.magic
        and _Int8Array_of_js : Ojs.t -> _Int8Array = Obj.magic
        and _Int8Array_to_js : _Int8Array -> Ojs.t = Obj.magic
        and _Int8ArrayConstructor_of_js : Ojs.t -> _Int8ArrayConstructor =
          Obj.magic
        and _Int8ArrayConstructor_to_js : _Int8ArrayConstructor -> Ojs.t =
          Obj.magic
        and _Iterable_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _Iterable =
          fun _T -> Obj.magic
        and _Iterable_to_js : 'T . ('T -> Ojs.t) -> 'T _Iterable -> Ojs.t =
          fun _T -> Obj.magic
        and _IterableIterator_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _IterableIterator =
          fun _T -> Obj.magic
        and _IterableIterator_to_js :
          'T . ('T -> Ojs.t) -> 'T _IterableIterator -> Ojs.t =
          fun _T -> Obj.magic
        and _Iterator_of_js :
          'T 'TReturn 'TNext .
            (Ojs.t -> 'T) ->
              (Ojs.t -> 'TReturn) ->
                (Ojs.t -> 'TNext) ->
                  Ojs.t -> ('T, 'TReturn, 'TNext) _Iterator
          = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
        and _Iterator_to_js :
          'T 'TReturn 'TNext .
            ('T -> Ojs.t) ->
              ('TReturn -> Ojs.t) ->
                ('TNext -> Ojs.t) ->
                  ('T, 'TReturn, 'TNext) _Iterator -> Ojs.t
          = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
        and _IteratorResult_of_js :
          'T 'TReturn .
            (Ojs.t -> 'T) ->
              (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) _IteratorResult
          = fun (type __T) -> fun (type __TReturn) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
              fun (x6 : Ojs.t) ->
                let x7 = x6 in
                match Ojs.bool_of_js (Ojs.get_prop_ascii x7 "done") with
                | false ->
                    `U_b_false (_IteratorYieldResult_of_js __T_of_js x7)
                | true ->
                    `U_b_true
                      (_IteratorReturnResult_of_js __TReturn_of_js x7)
        and _IteratorResult_to_js :
          'T 'TReturn .
            ('T -> Ojs.t) ->
              ('TReturn -> Ojs.t) -> ('T, 'TReturn) _IteratorResult -> Ojs.t
          = fun (type __T) -> fun (type __TReturn) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
              fun
                (x1 :
                  [ `U_b_false of __T _IteratorYieldResult 
                  | `U_b_true of __TReturn _IteratorReturnResult ])
                ->
                match x1 with
                | `U_b_false x2 -> _IteratorYieldResult_to_js __T_to_js x2
                | `U_b_true x4 ->
                    _IteratorReturnResult_to_js __TReturn_to_js x4
        and _IteratorReturnResult_of_js :
          'TReturn .
            (Ojs.t -> 'TReturn) -> Ojs.t -> 'TReturn _IteratorReturnResult
          = fun _TReturn -> Obj.magic
        and _IteratorReturnResult_to_js :
          'TReturn .
            ('TReturn -> Ojs.t) -> 'TReturn _IteratorReturnResult -> Ojs.t
          = fun _TReturn -> Obj.magic
        and _IteratorYieldResult_of_js :
          'TYield .
            (Ojs.t -> 'TYield) -> Ojs.t -> 'TYield _IteratorYieldResult
          = fun _TYield -> Obj.magic
        and _IteratorYieldResult_to_js :
          'TYield .
            ('TYield -> Ojs.t) -> 'TYield _IteratorYieldResult -> Ojs.t
          = fun _TYield -> Obj.magic
        and _Map_of_js :
          'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) _Map =
          fun _K -> fun _V -> Obj.magic
        and _Map_to_js :
          'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) _Map -> Ojs.t =
          fun _K -> fun _V -> Obj.magic
        and _MapConstructor_of_js : Ojs.t -> _MapConstructor = Obj.magic
        and _MapConstructor_to_js : _MapConstructor -> Ojs.t = Obj.magic
        and _Promise_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _Promise =
          fun _T -> Obj.magic
        and _Promise_to_js : 'T . ('T -> Ojs.t) -> 'T _Promise -> Ojs.t =
          fun _T -> Obj.magic
        and _PromiseConstructor_of_js : Ojs.t -> _PromiseConstructor =
          Obj.magic
        and _PromiseConstructor_to_js : _PromiseConstructor -> Ojs.t =
          Obj.magic
        and _ReadonlyArray_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _ReadonlyArray =
          fun _T -> Obj.magic
        and _ReadonlyArray_to_js :
          'T . ('T -> Ojs.t) -> 'T _ReadonlyArray -> Ojs.t =
          fun _T -> Obj.magic
        and _ReadonlyMap_of_js :
          'K 'V .
            (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) _ReadonlyMap
          = fun _K -> fun _V -> Obj.magic
        and _ReadonlyMap_to_js :
          'K 'V .
            ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) _ReadonlyMap -> Ojs.t
          = fun _K -> fun _V -> Obj.magic
        and _ReadonlySet_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _ReadonlySet =
          fun _T -> Obj.magic
        and _ReadonlySet_to_js :
          'T . ('T -> Ojs.t) -> 'T _ReadonlySet -> Ojs.t =
          fun _T -> Obj.magic
        and _Set_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _Set =
          fun _T -> Obj.magic
        and _Set_to_js : 'T . ('T -> Ojs.t) -> 'T _Set -> Ojs.t =
          fun _T -> Obj.magic
        and _SetConstructor_of_js : Ojs.t -> _SetConstructor = Obj.magic
        and _SetConstructor_to_js : _SetConstructor -> Ojs.t = Obj.magic
        and _String_of_js : Ojs.t -> _String = Obj.magic
        and _String_to_js : _String -> Ojs.t = Obj.magic
        and _SymbolConstructor_of_js : Ojs.t -> _SymbolConstructor =
          Obj.magic
        and _SymbolConstructor_to_js : _SymbolConstructor -> Ojs.t =
          Obj.magic
        and _Uint16Array_of_js : Ojs.t -> _Uint16Array = Obj.magic
        and _Uint16Array_to_js : _Uint16Array -> Ojs.t = Obj.magic
        and _Uint16ArrayConstructor_of_js : Ojs.t -> _Uint16ArrayConstructor
          = Obj.magic
        and _Uint16ArrayConstructor_to_js : _Uint16ArrayConstructor -> Ojs.t
          = Obj.magic
        and _Uint32Array_of_js : Ojs.t -> _Uint32Array = Obj.magic
        and _Uint32Array_to_js : _Uint32Array -> Ojs.t = Obj.magic
        and _Uint32ArrayConstructor_of_js : Ojs.t -> _Uint32ArrayConstructor
          = Obj.magic
        and _Uint32ArrayConstructor_to_js : _Uint32ArrayConstructor -> Ojs.t
          = Obj.magic
        and _Uint8Array_of_js : Ojs.t -> _Uint8Array = Obj.magic
        and _Uint8Array_to_js : _Uint8Array -> Ojs.t = Obj.magic
        and _Uint8ArrayConstructor_of_js : Ojs.t -> _Uint8ArrayConstructor =
          Obj.magic
        and _Uint8ArrayConstructor_to_js : _Uint8ArrayConstructor -> Ojs.t =
          Obj.magic
        and _Uint8ClampedArray_of_js : Ojs.t -> _Uint8ClampedArray =
          Obj.magic
        and _Uint8ClampedArray_to_js : _Uint8ClampedArray -> Ojs.t =
          Obj.magic
        and _Uint8ClampedArrayConstructor_of_js :
          Ojs.t -> _Uint8ClampedArrayConstructor = Obj.magic
        and _Uint8ClampedArrayConstructor_to_js :
          _Uint8ClampedArrayConstructor -> Ojs.t = Obj.magic
        and _WeakMap_of_js :
          'K 'V .
            (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) _WeakMap
          = fun _K -> fun _V -> Obj.magic
        and _WeakMap_to_js :
          'K 'V .
            ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) _WeakMap -> Ojs.t
          = fun _K -> fun _V -> Obj.magic
        and _WeakMapConstructor_of_js : Ojs.t -> _WeakMapConstructor =
          Obj.magic
        and _WeakMapConstructor_to_js : _WeakMapConstructor -> Ojs.t =
          Obj.magic
        and _WeakSet_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _WeakSet =
          fun _T -> Obj.magic
        and _WeakSet_to_js : 'T . ('T -> Ojs.t) -> 'T _WeakSet -> Ojs.t =
          fun _T -> Obj.magic
        and _WeakSetConstructor_of_js : Ojs.t -> _WeakSetConstructor =
          Obj.magic
        and _WeakSetConstructor_to_js : _WeakSetConstructor -> Ojs.t =
          Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module SymbolConstructor =
  struct
    include struct include SymbolConstructor end
    let (get_iterator : t -> symbol) =
      fun (x10 : t) ->
        symbol_of_js (Ojs.get_prop_ascii (t_to_js x10) "iterator")
  end
module IteratorYieldResult =
  struct
    type 'TYield t = 'TYield _IteratorYieldResult
    let rec t_of_js : 'TYield . (Ojs.t -> 'TYield) -> Ojs.t -> 'TYield t =
      fun (type __TYield) ->
      fun (__TYield_of_js : Ojs.t -> __TYield) ->
        fun (x13 : Ojs.t) -> _IteratorYieldResult_of_js __TYield_of_js x13
    and t_to_js : 'TYield . ('TYield -> Ojs.t) -> 'TYield t -> Ojs.t = fun
      (type __TYield) ->
      fun (__TYield_to_js : __TYield -> Ojs.t) ->
        fun (x11 : __TYield _IteratorYieldResult) ->
          _IteratorYieldResult_to_js __TYield_to_js x11
    let (get_done : 'TYield t -> [ `L_b_false ]) =
      fun (x15 : 'TYield t) ->
        let x17 = Ojs.get_prop_ascii (t_to_js Obj.magic x15) "done" in
        match Ojs.bool_of_js x17 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : 'TYield t -> [ `L_b_false ] -> unit) =
      fun (x18 : 'TYield t) ->
        fun (x19 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x18) "done"
            (match x19 with | `L_b_false -> Ojs.string_to_js "LBFalse")
    let (get_value : 'TYield t -> 'TYield) =
      fun (x21 : 'TYield t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x21) "value")
    let (set_value : 'TYield t -> 'TYield -> unit) =
      fun (x23 : 'TYield t) ->
        fun (x24 : 'TYield) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x23) "value" (Obj.magic x24)
  end
module IteratorReturnResult =
  struct
    type 'TReturn t = 'TReturn _IteratorReturnResult
    let rec t_of_js : 'TReturn . (Ojs.t -> 'TReturn) -> Ojs.t -> 'TReturn t =
      fun (type __TReturn) ->
      fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
        fun (x28 : Ojs.t) -> _IteratorReturnResult_of_js __TReturn_of_js x28
    and t_to_js : 'TReturn . ('TReturn -> Ojs.t) -> 'TReturn t -> Ojs.t = fun
      (type __TReturn) ->
      fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
        fun (x26 : __TReturn _IteratorReturnResult) ->
          _IteratorReturnResult_to_js __TReturn_to_js x26
    let (get_done : 'TReturn t -> [ `L_b_true ]) =
      fun (x30 : 'TReturn t) ->
        let x32 = Ojs.get_prop_ascii (t_to_js Obj.magic x30) "done" in
        match Ojs.bool_of_js x32 with | true -> `L_b_true | _ -> assert false
    let (set_done : 'TReturn t -> [ `L_b_true ] -> unit) =
      fun (x33 : 'TReturn t) ->
        fun (x34 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x33) "done"
            (match x34 with | `L_b_true -> Ojs.string_to_js "LBTrue")
    let (get_value : 'TReturn t -> 'TReturn) =
      fun (x36 : 'TReturn t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x36) "value")
    let (set_value : 'TReturn t -> 'TReturn -> unit) =
      fun (x38 : 'TReturn t) ->
        fun (x39 : 'TReturn) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x38) "value" (Obj.magic x39)
  end
module IteratorResult =
  struct
    type ('T, 'TReturn) t = ('T, 'TReturn) _IteratorResult
    let rec t_of_js :
      'T 'TReturn .
        (Ojs.t -> 'T) -> (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x44 : Ojs.t) ->
            _IteratorResult_of_js __T_of_js __TReturn_of_js x44
    and t_to_js :
      'T 'TReturn .
        ('T -> Ojs.t) -> ('TReturn -> Ojs.t) -> ('T, 'TReturn) t -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (x41 : (__T, __TReturn) _IteratorResult) ->
            _IteratorResult_to_js __T_to_js __TReturn_to_js x41
  end
module Iterator =
  struct
    type ('T, 'TReturn, 'TNext) t = ('T, 'TReturn, 'TNext) _Iterator
    let rec t_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (__TNext_of_js : Ojs.t -> __TNext) ->
            fun (x51 : Ojs.t) ->
              _Iterator_of_js __T_of_js __TReturn_of_js __TNext_of_js x51
    and t_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (__TNext_to_js : __TNext -> Ojs.t) ->
            fun (x47 : (__T, __TReturn, __TNext) _Iterator) ->
              _Iterator_to_js __T_to_js __TReturn_to_js __TNext_to_js x47
    let (next :
      ('T, 'TReturn, 'TNext) t ->
        args:any list -> ('T, 'TReturn) _IteratorResult)
      =
      fun (x58 : ('T, 'TReturn, 'TNext) t) ->
        fun ~args:(x55 : any list) ->
          _IteratorResult_of_js Obj.magic Obj.magic
            (let x62 = t_to_js Obj.magic Obj.magic Obj.magic x58 in
             Ojs.call (Ojs.get_prop_ascii x62 "next") "apply"
               [|x62;((let x56 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x57 : any) ->
                            ignore (Ojs.call x56 "push" [|(any_to_js x57)|]))
                         x55;
                       x56))|])
    let (return :
      ('T, 'TReturn, 'TNext) t ->
        ?value:'TReturn -> unit -> ('T, 'TReturn) _IteratorResult)
      =
      fun (x68 : ('T, 'TReturn, 'TNext) t) ->
        fun ?value:(x65 : 'TReturn option) ->
          fun () ->
            _IteratorResult_of_js Obj.magic Obj.magic
              (let x72 = t_to_js Obj.magic Obj.magic Obj.magic x68 in
               Ojs.call (Ojs.get_prop_ascii x72 "return") "apply"
                 [|x72;((let x66 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x65 with
                          | Some x67 ->
                              ignore
                                (Ojs.call x66 "push" [|(Obj.magic x67)|])
                          | None -> ());
                         x66))|])
    let (throw :
      ('T, 'TReturn, 'TNext) t ->
        ?e:any -> unit -> ('T, 'TReturn) _IteratorResult)
      =
      fun (x78 : ('T, 'TReturn, 'TNext) t) ->
        fun ?e:(x75 : any option) ->
          fun () ->
            _IteratorResult_of_js Obj.magic Obj.magic
              (let x82 = t_to_js Obj.magic Obj.magic Obj.magic x78 in
               Ojs.call (Ojs.get_prop_ascii x82 "throw") "apply"
                 [|x82;((let x76 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x75 with
                          | Some x77 ->
                              ignore
                                (Ojs.call x76 "push" [|(any_to_js x77)|])
                          | None -> ());
                         x76))|])
  end
module Iterable =
  struct
    type 'T t = 'T _Iterable
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x87 : Ojs.t) -> _Iterable_of_js __T_of_js x87
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x85 : __T _Iterable) -> _Iterable_to_js __T_to_js x85
  end
module IterableIterator =
  struct
    type 'T t = 'T _IterableIterator
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x91 : Ojs.t) -> _IterableIterator_of_js __T_of_js x91
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x89 : __T _IterableIterator) ->
          _IterableIterator_to_js __T_to_js x89
    let (cast : 'T t -> ('T, any, never or_undefined) _Iterator) =
      fun (x93 : 'T t) ->
        _Iterator_of_js Obj.magic any_of_js
          (fun (x97 : Ojs.t) -> or_undefined_of_js never_of_js x97)
          (t_to_js Obj.magic x93)
  end
module Array =
  struct
    include struct include Array end
    let (entries : 'T t -> (float * 'T) _IterableIterator) =
      fun (x99 : 'T t) ->
        _IterableIterator_of_js
          (fun (x101 : Ojs.t) ->
             let x102 = x101 in
             ((Ojs.float_of_js (Ojs.array_get x102 0)),
               (Obj.magic (Ojs.array_get x102 1))))
          (Ojs.call (t_to_js Obj.magic x99) "entries" [||])
    let (keys : 'T t -> float _IterableIterator) =
      fun (x103 : 'T t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js Obj.magic x103) "keys" [||])
    let (values : 'T t -> 'T _IterableIterator) =
      fun (x106 : 'T t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x106) "values" [||])
    let (to_ml : 'T t -> 'T list) =
      fun (x109 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x109)
    let (of_ml : 'T list -> 'T t) =
      fun (x112 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x112)
    let (from_iterable :
      iterable:('T Array.t, 'T _Iterable) union2 -> 'T list) =
      fun ~iterable:(x115 : ('T Array.t, 'T _Iterable) union2) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "from"
             [|(union2_to_js
                  (fun (x116 : 'T Array.t) -> Array.t_to_js Obj.magic x116)
                  (fun (x118 : 'T _Iterable) ->
                     _Iterable_to_js Obj.magic x118) x115)|])
    let (from_iterable' :
      iterable:('T Array.t, 'T _Iterable) union2 ->
        mapfn:(v:'T -> k:float -> 'U) -> ?thisArg:any -> unit -> 'U list)
      =
      fun ~iterable:(x121 : ('T Array.t, 'T _Iterable) union2) ->
        fun ~mapfn:(x122 : v:'T -> k:float -> 'U) ->
          fun ?thisArg:(x123 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x132 = Ojs.get_prop_ascii Ojs.global "Array" in
                 Ojs.call (Ojs.get_prop_ascii x132 "from") "apply"
                   [|x132;((let x124 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x124 "push"
                                 [|(union2_to_js
                                      (fun (x128 : 'T Array.t) ->
                                         Array.t_to_js Obj.magic x128)
                                      (fun (x130 : 'T _Iterable) ->
                                         _Iterable_to_js Obj.magic x130) x121)|]);
                            ignore
                              (Ojs.call x124 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x126 : Ojs.t) ->
                                         fun (x127 : Ojs.t) ->
                                           Obj.magic
                                             (x122 ~v:(Obj.magic x126)
                                                ~k:(Ojs.float_of_js x127))))|]);
                            (match x123 with
                             | Some x125 ->
                                 ignore
                                   (Ojs.call x124 "push" [|(any_to_js x125)|])
                             | None -> ());
                            x124))|])
  end
module ArrayConstructor =
  struct
    include struct include ArrayConstructor end
    let (from_iterable :
      t -> iterable:('T Array.t, 'T _Iterable) union2 -> 'T list) =
      fun (x139 : t) ->
        fun ~iterable:(x134 : ('T Array.t, 'T _Iterable) union2) ->
          Ojs.list_of_js Obj.magic
            (Ojs.call (t_to_js x139) "from"
               [|(union2_to_js
                    (fun (x135 : 'T Array.t) -> Array.t_to_js Obj.magic x135)
                    (fun (x137 : 'T _Iterable) ->
                       _Iterable_to_js Obj.magic x137) x134)|])
    let (from_iterable' :
      t ->
        iterable:('T Array.t, 'T _Iterable) union2 ->
          mapfn:(v:'T -> k:float -> 'U) -> ?thisArg:any -> unit -> 'U list)
      =
      fun (x152 : t) ->
        fun ~iterable:(x141 : ('T Array.t, 'T _Iterable) union2) ->
          fun ~mapfn:(x142 : v:'T -> k:float -> 'U) ->
            fun ?thisArg:(x143 : any option) ->
              fun () ->
                Ojs.list_of_js Obj.magic
                  (let x153 = t_to_js x152 in
                   Ojs.call (Ojs.get_prop_ascii x153 "from") "apply"
                     [|x153;((let x144 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x144 "push"
                                   [|(union2_to_js
                                        (fun (x148 : 'T Array.t) ->
                                           Array.t_to_js Obj.magic x148)
                                        (fun (x150 : 'T _Iterable) ->
                                           _Iterable_to_js Obj.magic x150)
                                        x141)|]);
                              ignore
                                (Ojs.call x144 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x146 : Ojs.t) ->
                                           fun (x147 : Ojs.t) ->
                                             Obj.magic
                                               (x142 ~v:(Obj.magic x146)
                                                  ~k:(Ojs.float_of_js x147))))|]);
                              (match x143 with
                               | Some x145 ->
                                   ignore
                                     (Ojs.call x144 "push"
                                        [|(any_to_js x145)|])
                               | None -> ());
                              x144))|])
  end
module ReadonlyArray =
  struct
    include struct include ReadonlyArray end
    let (entries : 'T t -> (float * 'T) _IterableIterator) =
      fun (x155 : 'T t) ->
        _IterableIterator_of_js
          (fun (x157 : Ojs.t) ->
             let x158 = x157 in
             ((Ojs.float_of_js (Ojs.array_get x158 0)),
               (Obj.magic (Ojs.array_get x158 1))))
          (Ojs.call (t_to_js Obj.magic x155) "entries" [||])
    let (keys : 'T t -> float _IterableIterator) =
      fun (x159 : 'T t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js Obj.magic x159) "keys" [||])
    let (values : 'T t -> 'T _IterableIterator) =
      fun (x162 : 'T t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x162) "values" [||])
    let (to_ml : 'T t -> 'T list) =
      fun (x165 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x165)
    let (of_ml : 'T list -> 'T t) =
      fun (x168 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x168)
  end
module IArguments = struct include struct include IArguments end end
module Map =
  struct
    include struct include Map end
    let (entries : ('K, 'V) t -> ('K * 'V) _IterableIterator) =
      fun (x171 : ('K, 'V) t) ->
        _IterableIterator_of_js
          (fun (x174 : Ojs.t) ->
             let x175 = x174 in
             ((Obj.magic (Ojs.array_get x175 0)),
               (Obj.magic (Ojs.array_get x175 1))))
          (Ojs.call (t_to_js Obj.magic Obj.magic x171) "entries" [||])
    let (keys : ('K, 'V) t -> 'K _IterableIterator) =
      fun (x176 : ('K, 'V) t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x176) "keys" [||])
    let (values : ('K, 'V) t -> 'V _IterableIterator) =
      fun (x180 : ('K, 'V) t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x180) "values" [||])
    let (create_iterable : iterable:('K * 'V) _Iterable -> ('K, 'V) t) =
      fun ~iterable:(x184 : ('K * 'V) _Iterable) ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Map")
             [|(_Iterable_to_js
                  (fun (x185 : ('K * 'V)) ->
                     let (x186, x187) = x185 in
                     let x188 = Ojs.array_make 2 in
                     Ojs.array_set x188 0 (Obj.magic x186);
                     Ojs.array_set x188 1 (Obj.magic x187);
                     x188) x184)|])
  end
module ReadonlyMap =
  struct
    include struct include ReadonlyMap end
    let (entries : ('K, 'V) t -> ('K * 'V) _IterableIterator) =
      fun (x191 : ('K, 'V) t) ->
        _IterableIterator_of_js
          (fun (x194 : Ojs.t) ->
             let x195 = x194 in
             ((Obj.magic (Ojs.array_get x195 0)),
               (Obj.magic (Ojs.array_get x195 1))))
          (Ojs.call (t_to_js Obj.magic Obj.magic x191) "entries" [||])
    let (keys : ('K, 'V) t -> 'K _IterableIterator) =
      fun (x196 : ('K, 'V) t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x196) "keys" [||])
    let (values : ('K, 'V) t -> 'V _IterableIterator) =
      fun (x200 : ('K, 'V) t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x200) "values" [||])
  end
module MapConstructor =
  struct
    include struct include MapConstructor end
    let (create_iterable :
      t -> iterable:('K * 'V) _Iterable -> ('K, 'V) Map.t) =
      fun (x209 : t) ->
        fun ~iterable:(x204 : ('K * 'V) _Iterable) ->
          Map.t_of_js Obj.magic Obj.magic
            (Ojs.new_obj (t_to_js x209)
               [|(_Iterable_to_js
                    (fun (x205 : ('K * 'V)) ->
                       let (x206, x207) = x205 in
                       let x208 = Ojs.array_make 2 in
                       Ojs.array_set x208 0 (Obj.magic x206);
                       Ojs.array_set x208 1 (Obj.magic x207);
                       x208) x204)|])
  end
module WeakMap =
  struct
    include struct include WeakMap end
    let (create_iterable : iterable:('K * 'V) _Iterable -> ('K, 'V) t) =
      fun ~iterable:(x212 : ('K * 'V) _Iterable) ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WeakMap")
             [|(_Iterable_to_js
                  (fun (x213 : ('K * 'V)) ->
                     let (x214, x215) = x213 in
                     let x216 = Ojs.array_make 2 in
                     Ojs.array_set x216 0 (Obj.magic x214);
                     Ojs.array_set x216 1 (Obj.magic x215);
                     x216) x212)|])
  end
module WeakMapConstructor =
  struct
    include struct include WeakMapConstructor end
    let (create_iterable :
      t -> iterable:('K * 'V) _Iterable -> ('K, 'V) WeakMap.t) =
      fun (x224 : t) ->
        fun ~iterable:(x219 : ('K * 'V) _Iterable) ->
          WeakMap.t_of_js Obj.magic Obj.magic
            (Ojs.new_obj (t_to_js x224)
               [|(_Iterable_to_js
                    (fun (x220 : ('K * 'V)) ->
                       let (x221, x222) = x220 in
                       let x223 = Ojs.array_make 2 in
                       Ojs.array_set x223 0 (Obj.magic x221);
                       Ojs.array_set x223 1 (Obj.magic x222);
                       x223) x219)|])
  end
module Set =
  struct
    include struct include Set end
    let (entries : 'T t -> ('T * 'T) _IterableIterator) =
      fun (x227 : 'T t) ->
        _IterableIterator_of_js
          (fun (x229 : Ojs.t) ->
             let x230 = x229 in
             ((Obj.magic (Ojs.array_get x230 0)),
               (Obj.magic (Ojs.array_get x230 1))))
          (Ojs.call (t_to_js Obj.magic x227) "entries" [||])
    let (keys : 'T t -> 'T _IterableIterator) =
      fun (x231 : 'T t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x231) "keys" [||])
    let (values : 'T t -> 'T _IterableIterator) =
      fun (x234 : 'T t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x234) "values" [||])
    let (create_iterable : ?iterable:'T _Iterable or_null -> unit -> 'T t) =
      fun ?iterable:(x237 : 'T _Iterable or_null option) ->
        fun () ->
          t_of_js Obj.magic
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Set")
               (let x238 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x237 with
                 | Some x239 ->
                     ignore
                       (Ojs.call x238 "push"
                          [|(or_null_to_js
                               (fun (x240 : 'T _Iterable) ->
                                  _Iterable_to_js Obj.magic x240) x239)|])
                 | None -> ());
                x238))
  end
module ReadonlySet =
  struct
    include struct include ReadonlySet end
    let (entries : 'T t -> ('T * 'T) _IterableIterator) =
      fun (x243 : 'T t) ->
        _IterableIterator_of_js
          (fun (x245 : Ojs.t) ->
             let x246 = x245 in
             ((Obj.magic (Ojs.array_get x246 0)),
               (Obj.magic (Ojs.array_get x246 1))))
          (Ojs.call (t_to_js Obj.magic x243) "entries" [||])
    let (keys : 'T t -> 'T _IterableIterator) =
      fun (x247 : 'T t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x247) "keys" [||])
    let (values : 'T t -> 'T _IterableIterator) =
      fun (x250 : 'T t) ->
        _IterableIterator_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x250) "values" [||])
  end
module SetConstructor =
  struct
    include struct include SetConstructor end
    let (create_iterable :
      t -> ?iterable:'T _Iterable or_null -> unit -> 'T Set.t) =
      fun (x258 : t) ->
        fun ?iterable:(x253 : 'T _Iterable or_null option) ->
          fun () ->
            Set.t_of_js Obj.magic
              (Ojs.new_obj_arr (t_to_js x258)
                 (let x254 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x253 with
                   | Some x255 ->
                       ignore
                         (Ojs.call x254 "push"
                            [|(or_null_to_js
                                 (fun (x256 : 'T _Iterable) ->
                                    _Iterable_to_js Obj.magic x256) x255)|])
                   | None -> ());
                  x254))
  end
module WeakSet =
  struct
    include struct include WeakSet end
    let (create_iterable : iterable:'T _Iterable -> 'T t) =
      fun ~iterable:(x260 : 'T _Iterable) ->
        t_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WeakSet")
             [|(_Iterable_to_js Obj.magic x260)|])
  end
module WeakSetConstructor =
  struct
    include struct include WeakSetConstructor end
    let (create_iterable : t -> iterable:'T _Iterable -> 'T WeakSet.t) =
      fun (x265 : t) ->
        fun ~iterable:(x263 : 'T _Iterable) ->
          WeakSet.t_of_js Obj.magic
            (Ojs.new_obj (t_to_js x265) [|(_Iterable_to_js Obj.magic x263)|])
  end
module Promise =
  struct
    include struct include Promise end
    let (all_iterable : 'T Promise.t _Iterable -> 'T list t) =
      fun (x267 : 'T Promise.t _Iterable) ->
        t_of_js (fun (x270 : Ojs.t) -> Ojs.list_of_js Obj.magic x270)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "all"
             [|(_Iterable_to_js
                  (fun (x268 : 'T Promise.t) ->
                     Promise.t_to_js Obj.magic x268) x267)|])
    let (race_iterable : 'T Promise.t _Iterable -> 'T t) =
      fun (x272 : 'T Promise.t _Iterable) ->
        t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "race"
             [|(_Iterable_to_js
                  (fun (x273 : 'T Promise.t) ->
                     Promise.t_to_js Obj.magic x273) x272)|])
  end
module PromiseConstructor =
  struct
    type t = _PromiseConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x277 : Ojs.t) -> _PromiseConstructor_of_js x277
    and t_to_js : t -> Ojs.t =
      fun (x276 : _PromiseConstructor) -> _PromiseConstructor_to_js x276
    let (all_iterable : t -> 'T Promise.t _Iterable -> 'T list Promise.t) =
      fun (x281 : t) ->
        fun (x278 : 'T Promise.t _Iterable) ->
          Promise.t_of_js
            (fun (x282 : Ojs.t) -> Ojs.list_of_js Obj.magic x282)
            (Ojs.call (t_to_js x281) "all"
               [|(_Iterable_to_js
                    (fun (x279 : 'T Promise.t) ->
                       Promise.t_to_js Obj.magic x279) x278)|])
    let (race_iterable : t -> 'T Promise.t _Iterable -> 'T Promise.t) =
      fun (x287 : t) ->
        fun (x284 : 'T Promise.t _Iterable) ->
          Promise.t_of_js Obj.magic
            (Ojs.call (t_to_js x287) "race"
               [|(_Iterable_to_js
                    (fun (x285 : 'T Promise.t) ->
                       Promise.t_to_js Obj.magic x285) x284)|])
  end
module String =
  struct
    include struct include String end
    let (to_ml : t -> string) =
      fun (x289 : t) -> Ojs.string_of_js (t_to_js x289)
    let (of_ml : string -> t) =
      fun (x290 : string) -> t_of_js (Ojs.string_to_js x290)
  end
module Int8Array =
  struct
    include struct include Int8Array end
    let (entries : t -> (float * float) _IterableIterator) =
      fun (x291 : t) ->
        _IterableIterator_of_js
          (fun (x292 : Ojs.t) ->
             let x293 = x292 in
             ((Ojs.float_of_js (Ojs.array_get x293 0)),
               (Ojs.float_of_js (Ojs.array_get x293 1))))
          (Ojs.call (t_to_js x291) "entries" [||])
    let (keys : t -> float _IterableIterator) =
      fun (x294 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x294) "keys" [||])
    let (values : t -> float _IterableIterator) =
      fun (x296 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x296) "values" [||])
    let (create_iterable : float _Iterable -> t) =
      fun (x298 : float _Iterable) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array")
             [|(_Iterable_to_js Ojs.float_to_js x298)|])
    let (from_iterable :
      array:float _Iterable ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x300 : float _Iterable) ->
        fun ?mapfn:(x301 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x302 : any option) ->
            fun () ->
              t_of_js
                (let x309 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
                 Ojs.call (Ojs.get_prop_ascii x309 "from") "apply"
                   [|x309;((let x303 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x303 "push"
                                 [|(_Iterable_to_js Ojs.float_to_js x300)|]);
                            (match x301 with
                             | Some x305 ->
                                 ignore
                                   (Ojs.call x303 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x306 : Ojs.t) ->
                                              fun (x307 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x305
                                                     ~v:(Ojs.float_of_js x306)
                                                     ~k:(Ojs.float_of_js x307))))|])
                             | None -> ());
                            (match x302 with
                             | Some x304 ->
                                 ignore
                                   (Ojs.call x303 "push" [|(any_to_js x304)|])
                             | None -> ());
                            x303))|])
  end
module Int8ArrayConstructor =
  struct
    include struct include Int8ArrayConstructor end
    let (create_iterable : t -> float _Iterable -> Int8Array.t) =
      fun (x312 : t) ->
        fun (x310 : float _Iterable) ->
          Int8Array.t_of_js
            (Ojs.new_obj (t_to_js x312)
               [|(_Iterable_to_js Ojs.float_to_js x310)|])
    let (from_iterable :
      t ->
        array:float _Iterable ->
          ?mapfn:(v:float -> k:float -> float) ->
            ?thisArg:any -> unit -> Int8Array.t)
      =
      fun (x322 : t) ->
        fun ~array:(x313 : float _Iterable) ->
          fun ?mapfn:(x314 : (v:float -> k:float -> float) option) ->
            fun ?thisArg:(x315 : any option) ->
              fun () ->
                Int8Array.t_of_js
                  (let x323 = t_to_js x322 in
                   Ojs.call (Ojs.get_prop_ascii x323 "from") "apply"
                     [|x323;((let x316 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x316 "push"
                                   [|(_Iterable_to_js Ojs.float_to_js x313)|]);
                              (match x314 with
                               | Some x318 ->
                                   ignore
                                     (Ojs.call x316 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x319 : Ojs.t) ->
                                                fun (x320 : Ojs.t) ->
                                                  Ojs.float_to_js
                                                    (x318
                                                       ~v:(Ojs.float_of_js
                                                             x319)
                                                       ~k:(Ojs.float_of_js
                                                             x320))))|])
                               | None -> ());
                              (match x315 with
                               | Some x317 ->
                                   ignore
                                     (Ojs.call x316 "push"
                                        [|(any_to_js x317)|])
                               | None -> ());
                              x316))|])
  end
module Uint8Array =
  struct
    include struct include Uint8Array end
    let (entries : t -> (float * float) _IterableIterator) =
      fun (x324 : t) ->
        _IterableIterator_of_js
          (fun (x325 : Ojs.t) ->
             let x326 = x325 in
             ((Ojs.float_of_js (Ojs.array_get x326 0)),
               (Ojs.float_of_js (Ojs.array_get x326 1))))
          (Ojs.call (t_to_js x324) "entries" [||])
    let (keys : t -> float _IterableIterator) =
      fun (x327 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x327) "keys" [||])
    let (values : t -> float _IterableIterator) =
      fun (x329 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x329) "values" [||])
    let (create_iterable : float _Iterable -> t) =
      fun (x331 : float _Iterable) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             [|(_Iterable_to_js Ojs.float_to_js x331)|])
    let (from_iterable :
      array:float _Iterable ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x333 : float _Iterable) ->
        fun ?mapfn:(x334 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x335 : any option) ->
            fun () ->
              t_of_js
                (let x342 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
                 Ojs.call (Ojs.get_prop_ascii x342 "from") "apply"
                   [|x342;((let x336 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x336 "push"
                                 [|(_Iterable_to_js Ojs.float_to_js x333)|]);
                            (match x334 with
                             | Some x338 ->
                                 ignore
                                   (Ojs.call x336 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x339 : Ojs.t) ->
                                              fun (x340 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x338
                                                     ~v:(Ojs.float_of_js x339)
                                                     ~k:(Ojs.float_of_js x340))))|])
                             | None -> ());
                            (match x335 with
                             | Some x337 ->
                                 ignore
                                   (Ojs.call x336 "push" [|(any_to_js x337)|])
                             | None -> ());
                            x336))|])
  end
module Uint8ArrayConstructor =
  struct
    include struct include Uint8ArrayConstructor end
    let (create_iterable : t -> float _Iterable -> Uint8Array.t) =
      fun (x345 : t) ->
        fun (x343 : float _Iterable) ->
          Uint8Array.t_of_js
            (Ojs.new_obj (t_to_js x345)
               [|(_Iterable_to_js Ojs.float_to_js x343)|])
    let (from_iterable :
      t ->
        array:float _Iterable ->
          ?mapfn:(v:float -> k:float -> float) ->
            ?thisArg:any -> unit -> Uint8Array.t)
      =
      fun (x355 : t) ->
        fun ~array:(x346 : float _Iterable) ->
          fun ?mapfn:(x347 : (v:float -> k:float -> float) option) ->
            fun ?thisArg:(x348 : any option) ->
              fun () ->
                Uint8Array.t_of_js
                  (let x356 = t_to_js x355 in
                   Ojs.call (Ojs.get_prop_ascii x356 "from") "apply"
                     [|x356;((let x349 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x349 "push"
                                   [|(_Iterable_to_js Ojs.float_to_js x346)|]);
                              (match x347 with
                               | Some x351 ->
                                   ignore
                                     (Ojs.call x349 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x352 : Ojs.t) ->
                                                fun (x353 : Ojs.t) ->
                                                  Ojs.float_to_js
                                                    (x351
                                                       ~v:(Ojs.float_of_js
                                                             x352)
                                                       ~k:(Ojs.float_of_js
                                                             x353))))|])
                               | None -> ());
                              (match x348 with
                               | Some x350 ->
                                   ignore
                                     (Ojs.call x349 "push"
                                        [|(any_to_js x350)|])
                               | None -> ());
                              x349))|])
  end
module Uint8ClampedArray =
  struct
    include struct include Uint8ClampedArray end
    let (entries : t -> (float * float) _IterableIterator) =
      fun (x357 : t) ->
        _IterableIterator_of_js
          (fun (x358 : Ojs.t) ->
             let x359 = x358 in
             ((Ojs.float_of_js (Ojs.array_get x359 0)),
               (Ojs.float_of_js (Ojs.array_get x359 1))))
          (Ojs.call (t_to_js x357) "entries" [||])
    let (keys : t -> float _IterableIterator) =
      fun (x360 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x360) "keys" [||])
    let (values : t -> float _IterableIterator) =
      fun (x362 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x362) "values" [||])
    let (create_iterable : float _Iterable -> t) =
      fun (x364 : float _Iterable) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [|(_Iterable_to_js Ojs.float_to_js x364)|])
    let (from_iterable :
      array:float _Iterable ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x366 : float _Iterable) ->
        fun ?mapfn:(x367 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x368 : any option) ->
            fun () ->
              t_of_js
                (let x375 = Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
                 Ojs.call (Ojs.get_prop_ascii x375 "from") "apply"
                   [|x375;((let x369 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x369 "push"
                                 [|(_Iterable_to_js Ojs.float_to_js x366)|]);
                            (match x367 with
                             | Some x371 ->
                                 ignore
                                   (Ojs.call x369 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x372 : Ojs.t) ->
                                              fun (x373 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x371
                                                     ~v:(Ojs.float_of_js x372)
                                                     ~k:(Ojs.float_of_js x373))))|])
                             | None -> ());
                            (match x368 with
                             | Some x370 ->
                                 ignore
                                   (Ojs.call x369 "push" [|(any_to_js x370)|])
                             | None -> ());
                            x369))|])
  end
module Uint8ClampedArrayConstructor =
  struct
    include struct include Uint8ClampedArrayConstructor end
    let (create_iterable : t -> float _Iterable -> Uint8ClampedArray.t) =
      fun (x378 : t) ->
        fun (x376 : float _Iterable) ->
          Uint8ClampedArray.t_of_js
            (Ojs.new_obj (t_to_js x378)
               [|(_Iterable_to_js Ojs.float_to_js x376)|])
    let (from_iterable :
      t ->
        array:float _Iterable ->
          ?mapfn:(v:float -> k:float -> float) ->
            ?thisArg:any -> unit -> Uint8ClampedArray.t)
      =
      fun (x388 : t) ->
        fun ~array:(x379 : float _Iterable) ->
          fun ?mapfn:(x380 : (v:float -> k:float -> float) option) ->
            fun ?thisArg:(x381 : any option) ->
              fun () ->
                Uint8ClampedArray.t_of_js
                  (let x389 = t_to_js x388 in
                   Ojs.call (Ojs.get_prop_ascii x389 "from") "apply"
                     [|x389;((let x382 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x382 "push"
                                   [|(_Iterable_to_js Ojs.float_to_js x379)|]);
                              (match x380 with
                               | Some x384 ->
                                   ignore
                                     (Ojs.call x382 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x385 : Ojs.t) ->
                                                fun (x386 : Ojs.t) ->
                                                  Ojs.float_to_js
                                                    (x384
                                                       ~v:(Ojs.float_of_js
                                                             x385)
                                                       ~k:(Ojs.float_of_js
                                                             x386))))|])
                               | None -> ());
                              (match x381 with
                               | Some x383 ->
                                   ignore
                                     (Ojs.call x382 "push"
                                        [|(any_to_js x383)|])
                               | None -> ());
                              x382))|])
  end
module Int16Array =
  struct
    include struct include Int16Array end
    let (entries : t -> (float * float) _IterableIterator) =
      fun (x390 : t) ->
        _IterableIterator_of_js
          (fun (x391 : Ojs.t) ->
             let x392 = x391 in
             ((Ojs.float_of_js (Ojs.array_get x392 0)),
               (Ojs.float_of_js (Ojs.array_get x392 1))))
          (Ojs.call (t_to_js x390) "entries" [||])
    let (keys : t -> float _IterableIterator) =
      fun (x393 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x393) "keys" [||])
    let (values : t -> float _IterableIterator) =
      fun (x395 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x395) "values" [||])
    let (create_iterable : float _Iterable -> t) =
      fun (x397 : float _Iterable) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array")
             [|(_Iterable_to_js Ojs.float_to_js x397)|])
    let (from_iterable :
      array:float _Iterable ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x399 : float _Iterable) ->
        fun ?mapfn:(x400 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x401 : any option) ->
            fun () ->
              t_of_js
                (let x408 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
                 Ojs.call (Ojs.get_prop_ascii x408 "from") "apply"
                   [|x408;((let x402 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x402 "push"
                                 [|(_Iterable_to_js Ojs.float_to_js x399)|]);
                            (match x400 with
                             | Some x404 ->
                                 ignore
                                   (Ojs.call x402 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x405 : Ojs.t) ->
                                              fun (x406 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x404
                                                     ~v:(Ojs.float_of_js x405)
                                                     ~k:(Ojs.float_of_js x406))))|])
                             | None -> ());
                            (match x401 with
                             | Some x403 ->
                                 ignore
                                   (Ojs.call x402 "push" [|(any_to_js x403)|])
                             | None -> ());
                            x402))|])
  end
module Int16ArrayConstructor =
  struct
    include struct include Int16ArrayConstructor end
    let (create_iterable : t -> float _Iterable -> Int16Array.t) =
      fun (x411 : t) ->
        fun (x409 : float _Iterable) ->
          Int16Array.t_of_js
            (Ojs.new_obj (t_to_js x411)
               [|(_Iterable_to_js Ojs.float_to_js x409)|])
    let (from_iterable :
      t ->
        array:float _Iterable ->
          ?mapfn:(v:float -> k:float -> float) ->
            ?thisArg:any -> unit -> Int16Array.t)
      =
      fun (x421 : t) ->
        fun ~array:(x412 : float _Iterable) ->
          fun ?mapfn:(x413 : (v:float -> k:float -> float) option) ->
            fun ?thisArg:(x414 : any option) ->
              fun () ->
                Int16Array.t_of_js
                  (let x422 = t_to_js x421 in
                   Ojs.call (Ojs.get_prop_ascii x422 "from") "apply"
                     [|x422;((let x415 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x415 "push"
                                   [|(_Iterable_to_js Ojs.float_to_js x412)|]);
                              (match x413 with
                               | Some x417 ->
                                   ignore
                                     (Ojs.call x415 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x418 : Ojs.t) ->
                                                fun (x419 : Ojs.t) ->
                                                  Ojs.float_to_js
                                                    (x417
                                                       ~v:(Ojs.float_of_js
                                                             x418)
                                                       ~k:(Ojs.float_of_js
                                                             x419))))|])
                               | None -> ());
                              (match x414 with
                               | Some x416 ->
                                   ignore
                                     (Ojs.call x415 "push"
                                        [|(any_to_js x416)|])
                               | None -> ());
                              x415))|])
  end
module Uint16Array =
  struct
    include struct include Uint16Array end
    let (entries : t -> (float * float) _IterableIterator) =
      fun (x423 : t) ->
        _IterableIterator_of_js
          (fun (x424 : Ojs.t) ->
             let x425 = x424 in
             ((Ojs.float_of_js (Ojs.array_get x425 0)),
               (Ojs.float_of_js (Ojs.array_get x425 1))))
          (Ojs.call (t_to_js x423) "entries" [||])
    let (keys : t -> float _IterableIterator) =
      fun (x426 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x426) "keys" [||])
    let (values : t -> float _IterableIterator) =
      fun (x428 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x428) "values" [||])
    let (create_iterable : float _Iterable -> t) =
      fun (x430 : float _Iterable) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             [|(_Iterable_to_js Ojs.float_to_js x430)|])
    let (from_iterable :
      array:float _Iterable ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x432 : float _Iterable) ->
        fun ?mapfn:(x433 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x434 : any option) ->
            fun () ->
              t_of_js
                (let x441 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
                 Ojs.call (Ojs.get_prop_ascii x441 "from") "apply"
                   [|x441;((let x435 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x435 "push"
                                 [|(_Iterable_to_js Ojs.float_to_js x432)|]);
                            (match x433 with
                             | Some x437 ->
                                 ignore
                                   (Ojs.call x435 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x438 : Ojs.t) ->
                                              fun (x439 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x437
                                                     ~v:(Ojs.float_of_js x438)
                                                     ~k:(Ojs.float_of_js x439))))|])
                             | None -> ());
                            (match x434 with
                             | Some x436 ->
                                 ignore
                                   (Ojs.call x435 "push" [|(any_to_js x436)|])
                             | None -> ());
                            x435))|])
  end
module Uint16ArrayConstructor =
  struct
    include struct include Uint16ArrayConstructor end
    let (create_iterable : t -> float _Iterable -> Uint16Array.t) =
      fun (x444 : t) ->
        fun (x442 : float _Iterable) ->
          Uint16Array.t_of_js
            (Ojs.new_obj (t_to_js x444)
               [|(_Iterable_to_js Ojs.float_to_js x442)|])
    let (from_iterable :
      t ->
        array:float _Iterable ->
          ?mapfn:(v:float -> k:float -> float) ->
            ?thisArg:any -> unit -> Uint16Array.t)
      =
      fun (x454 : t) ->
        fun ~array:(x445 : float _Iterable) ->
          fun ?mapfn:(x446 : (v:float -> k:float -> float) option) ->
            fun ?thisArg:(x447 : any option) ->
              fun () ->
                Uint16Array.t_of_js
                  (let x455 = t_to_js x454 in
                   Ojs.call (Ojs.get_prop_ascii x455 "from") "apply"
                     [|x455;((let x448 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x448 "push"
                                   [|(_Iterable_to_js Ojs.float_to_js x445)|]);
                              (match x446 with
                               | Some x450 ->
                                   ignore
                                     (Ojs.call x448 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x451 : Ojs.t) ->
                                                fun (x452 : Ojs.t) ->
                                                  Ojs.float_to_js
                                                    (x450
                                                       ~v:(Ojs.float_of_js
                                                             x451)
                                                       ~k:(Ojs.float_of_js
                                                             x452))))|])
                               | None -> ());
                              (match x447 with
                               | Some x449 ->
                                   ignore
                                     (Ojs.call x448 "push"
                                        [|(any_to_js x449)|])
                               | None -> ());
                              x448))|])
  end
module Int32Array =
  struct
    include struct include Int32Array end
    let (entries : t -> (float * float) _IterableIterator) =
      fun (x456 : t) ->
        _IterableIterator_of_js
          (fun (x457 : Ojs.t) ->
             let x458 = x457 in
             ((Ojs.float_of_js (Ojs.array_get x458 0)),
               (Ojs.float_of_js (Ojs.array_get x458 1))))
          (Ojs.call (t_to_js x456) "entries" [||])
    let (keys : t -> float _IterableIterator) =
      fun (x459 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x459) "keys" [||])
    let (values : t -> float _IterableIterator) =
      fun (x461 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x461) "values" [||])
    let (create_iterable : float _Iterable -> t) =
      fun (x463 : float _Iterable) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array")
             [|(_Iterable_to_js Ojs.float_to_js x463)|])
    let (from_iterable :
      array:float _Iterable ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x465 : float _Iterable) ->
        fun ?mapfn:(x466 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x467 : any option) ->
            fun () ->
              t_of_js
                (let x474 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
                 Ojs.call (Ojs.get_prop_ascii x474 "from") "apply"
                   [|x474;((let x468 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x468 "push"
                                 [|(_Iterable_to_js Ojs.float_to_js x465)|]);
                            (match x466 with
                             | Some x470 ->
                                 ignore
                                   (Ojs.call x468 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x471 : Ojs.t) ->
                                              fun (x472 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x470
                                                     ~v:(Ojs.float_of_js x471)
                                                     ~k:(Ojs.float_of_js x472))))|])
                             | None -> ());
                            (match x467 with
                             | Some x469 ->
                                 ignore
                                   (Ojs.call x468 "push" [|(any_to_js x469)|])
                             | None -> ());
                            x468))|])
  end
module Int32ArrayConstructor =
  struct
    include struct include Int32ArrayConstructor end
    let (create_iterable : t -> float _Iterable -> Int32Array.t) =
      fun (x477 : t) ->
        fun (x475 : float _Iterable) ->
          Int32Array.t_of_js
            (Ojs.new_obj (t_to_js x477)
               [|(_Iterable_to_js Ojs.float_to_js x475)|])
    let (from_iterable :
      t ->
        array:float _Iterable ->
          ?mapfn:(v:float -> k:float -> float) ->
            ?thisArg:any -> unit -> Int32Array.t)
      =
      fun (x487 : t) ->
        fun ~array:(x478 : float _Iterable) ->
          fun ?mapfn:(x479 : (v:float -> k:float -> float) option) ->
            fun ?thisArg:(x480 : any option) ->
              fun () ->
                Int32Array.t_of_js
                  (let x488 = t_to_js x487 in
                   Ojs.call (Ojs.get_prop_ascii x488 "from") "apply"
                     [|x488;((let x481 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x481 "push"
                                   [|(_Iterable_to_js Ojs.float_to_js x478)|]);
                              (match x479 with
                               | Some x483 ->
                                   ignore
                                     (Ojs.call x481 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x484 : Ojs.t) ->
                                                fun (x485 : Ojs.t) ->
                                                  Ojs.float_to_js
                                                    (x483
                                                       ~v:(Ojs.float_of_js
                                                             x484)
                                                       ~k:(Ojs.float_of_js
                                                             x485))))|])
                               | None -> ());
                              (match x480 with
                               | Some x482 ->
                                   ignore
                                     (Ojs.call x481 "push"
                                        [|(any_to_js x482)|])
                               | None -> ());
                              x481))|])
  end
module Uint32Array =
  struct
    include struct include Uint32Array end
    let (entries : t -> (float * float) _IterableIterator) =
      fun (x489 : t) ->
        _IterableIterator_of_js
          (fun (x490 : Ojs.t) ->
             let x491 = x490 in
             ((Ojs.float_of_js (Ojs.array_get x491 0)),
               (Ojs.float_of_js (Ojs.array_get x491 1))))
          (Ojs.call (t_to_js x489) "entries" [||])
    let (keys : t -> float _IterableIterator) =
      fun (x492 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x492) "keys" [||])
    let (values : t -> float _IterableIterator) =
      fun (x494 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x494) "values" [||])
    let (create_iterable : float _Iterable -> t) =
      fun (x496 : float _Iterable) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             [|(_Iterable_to_js Ojs.float_to_js x496)|])
    let (from_iterable :
      array:float _Iterable ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x498 : float _Iterable) ->
        fun ?mapfn:(x499 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x500 : any option) ->
            fun () ->
              t_of_js
                (let x507 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
                 Ojs.call (Ojs.get_prop_ascii x507 "from") "apply"
                   [|x507;((let x501 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x501 "push"
                                 [|(_Iterable_to_js Ojs.float_to_js x498)|]);
                            (match x499 with
                             | Some x503 ->
                                 ignore
                                   (Ojs.call x501 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x504 : Ojs.t) ->
                                              fun (x505 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x503
                                                     ~v:(Ojs.float_of_js x504)
                                                     ~k:(Ojs.float_of_js x505))))|])
                             | None -> ());
                            (match x500 with
                             | Some x502 ->
                                 ignore
                                   (Ojs.call x501 "push" [|(any_to_js x502)|])
                             | None -> ());
                            x501))|])
  end
module Uint32ArrayConstructor =
  struct
    include struct include Uint32ArrayConstructor end
    let (create_iterable : t -> float _Iterable -> Uint32Array.t) =
      fun (x510 : t) ->
        fun (x508 : float _Iterable) ->
          Uint32Array.t_of_js
            (Ojs.new_obj (t_to_js x510)
               [|(_Iterable_to_js Ojs.float_to_js x508)|])
    let (from_iterable :
      t ->
        array:float _Iterable ->
          ?mapfn:(v:float -> k:float -> float) ->
            ?thisArg:any -> unit -> Uint32Array.t)
      =
      fun (x520 : t) ->
        fun ~array:(x511 : float _Iterable) ->
          fun ?mapfn:(x512 : (v:float -> k:float -> float) option) ->
            fun ?thisArg:(x513 : any option) ->
              fun () ->
                Uint32Array.t_of_js
                  (let x521 = t_to_js x520 in
                   Ojs.call (Ojs.get_prop_ascii x521 "from") "apply"
                     [|x521;((let x514 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x514 "push"
                                   [|(_Iterable_to_js Ojs.float_to_js x511)|]);
                              (match x512 with
                               | Some x516 ->
                                   ignore
                                     (Ojs.call x514 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x517 : Ojs.t) ->
                                                fun (x518 : Ojs.t) ->
                                                  Ojs.float_to_js
                                                    (x516
                                                       ~v:(Ojs.float_of_js
                                                             x517)
                                                       ~k:(Ojs.float_of_js
                                                             x518))))|])
                               | None -> ());
                              (match x513 with
                               | Some x515 ->
                                   ignore
                                     (Ojs.call x514 "push"
                                        [|(any_to_js x515)|])
                               | None -> ());
                              x514))|])
  end
module Float32Array =
  struct
    include struct include Float32Array end
    let (entries : t -> (float * float) _IterableIterator) =
      fun (x522 : t) ->
        _IterableIterator_of_js
          (fun (x523 : Ojs.t) ->
             let x524 = x523 in
             ((Ojs.float_of_js (Ojs.array_get x524 0)),
               (Ojs.float_of_js (Ojs.array_get x524 1))))
          (Ojs.call (t_to_js x522) "entries" [||])
    let (keys : t -> float _IterableIterator) =
      fun (x525 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x525) "keys" [||])
    let (values : t -> float _IterableIterator) =
      fun (x527 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x527) "values" [||])
    let (create_iterable : float _Iterable -> t) =
      fun (x529 : float _Iterable) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array")
             [|(_Iterable_to_js Ojs.float_to_js x529)|])
    let (from_iterable :
      array:float _Iterable ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x531 : float _Iterable) ->
        fun ?mapfn:(x532 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x533 : any option) ->
            fun () ->
              t_of_js
                (let x540 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
                 Ojs.call (Ojs.get_prop_ascii x540 "from") "apply"
                   [|x540;((let x534 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x534 "push"
                                 [|(_Iterable_to_js Ojs.float_to_js x531)|]);
                            (match x532 with
                             | Some x536 ->
                                 ignore
                                   (Ojs.call x534 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x537 : Ojs.t) ->
                                              fun (x538 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x536
                                                     ~v:(Ojs.float_of_js x537)
                                                     ~k:(Ojs.float_of_js x538))))|])
                             | None -> ());
                            (match x533 with
                             | Some x535 ->
                                 ignore
                                   (Ojs.call x534 "push" [|(any_to_js x535)|])
                             | None -> ());
                            x534))|])
  end
module Float32ArrayConstructor =
  struct
    include struct include Float32ArrayConstructor end
    let (create_iterable : t -> float _Iterable -> Float32Array.t) =
      fun (x543 : t) ->
        fun (x541 : float _Iterable) ->
          Float32Array.t_of_js
            (Ojs.new_obj (t_to_js x543)
               [|(_Iterable_to_js Ojs.float_to_js x541)|])
    let (from_iterable :
      t ->
        array:float _Iterable ->
          ?mapfn:(v:float -> k:float -> float) ->
            ?thisArg:any -> unit -> Float32Array.t)
      =
      fun (x553 : t) ->
        fun ~array:(x544 : float _Iterable) ->
          fun ?mapfn:(x545 : (v:float -> k:float -> float) option) ->
            fun ?thisArg:(x546 : any option) ->
              fun () ->
                Float32Array.t_of_js
                  (let x554 = t_to_js x553 in
                   Ojs.call (Ojs.get_prop_ascii x554 "from") "apply"
                     [|x554;((let x547 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x547 "push"
                                   [|(_Iterable_to_js Ojs.float_to_js x544)|]);
                              (match x545 with
                               | Some x549 ->
                                   ignore
                                     (Ojs.call x547 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x550 : Ojs.t) ->
                                                fun (x551 : Ojs.t) ->
                                                  Ojs.float_to_js
                                                    (x549
                                                       ~v:(Ojs.float_of_js
                                                             x550)
                                                       ~k:(Ojs.float_of_js
                                                             x551))))|])
                               | None -> ());
                              (match x546 with
                               | Some x548 ->
                                   ignore
                                     (Ojs.call x547 "push"
                                        [|(any_to_js x548)|])
                               | None -> ());
                              x547))|])
  end
module Float64Array =
  struct
    include struct include Float64Array end
    let (entries : t -> (float * float) _IterableIterator) =
      fun (x555 : t) ->
        _IterableIterator_of_js
          (fun (x556 : Ojs.t) ->
             let x557 = x556 in
             ((Ojs.float_of_js (Ojs.array_get x557 0)),
               (Ojs.float_of_js (Ojs.array_get x557 1))))
          (Ojs.call (t_to_js x555) "entries" [||])
    let (keys : t -> float _IterableIterator) =
      fun (x558 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x558) "keys" [||])
    let (values : t -> float _IterableIterator) =
      fun (x560 : t) ->
        _IterableIterator_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x560) "values" [||])
    let (create_iterable : float _Iterable -> t) =
      fun (x562 : float _Iterable) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array")
             [|(_Iterable_to_js Ojs.float_to_js x562)|])
    let (from_iterable :
      array:float _Iterable ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x564 : float _Iterable) ->
        fun ?mapfn:(x565 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x566 : any option) ->
            fun () ->
              t_of_js
                (let x573 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
                 Ojs.call (Ojs.get_prop_ascii x573 "from") "apply"
                   [|x573;((let x567 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x567 "push"
                                 [|(_Iterable_to_js Ojs.float_to_js x564)|]);
                            (match x565 with
                             | Some x569 ->
                                 ignore
                                   (Ojs.call x567 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x570 : Ojs.t) ->
                                              fun (x571 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x569
                                                     ~v:(Ojs.float_of_js x570)
                                                     ~k:(Ojs.float_of_js x571))))|])
                             | None -> ());
                            (match x566 with
                             | Some x568 ->
                                 ignore
                                   (Ojs.call x567 "push" [|(any_to_js x568)|])
                             | None -> ());
                            x567))|])
  end
module Float64ArrayConstructor =
  struct
    include struct include Float64ArrayConstructor end
    let (create_iterable : t -> float _Iterable -> Float64Array.t) =
      fun (x576 : t) ->
        fun (x574 : float _Iterable) ->
          Float64Array.t_of_js
            (Ojs.new_obj (t_to_js x576)
               [|(_Iterable_to_js Ojs.float_to_js x574)|])
    let (from_iterable :
      t ->
        array:float _Iterable ->
          ?mapfn:(v:float -> k:float -> float) ->
            ?thisArg:any -> unit -> Float64Array.t)
      =
      fun (x586 : t) ->
        fun ~array:(x577 : float _Iterable) ->
          fun ?mapfn:(x578 : (v:float -> k:float -> float) option) ->
            fun ?thisArg:(x579 : any option) ->
              fun () ->
                Float64Array.t_of_js
                  (let x587 = t_to_js x586 in
                   Ojs.call (Ojs.get_prop_ascii x587 "from") "apply"
                     [|x587;((let x580 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x580 "push"
                                   [|(_Iterable_to_js Ojs.float_to_js x577)|]);
                              (match x578 with
                               | Some x582 ->
                                   ignore
                                     (Ojs.call x580 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x583 : Ojs.t) ->
                                                fun (x584 : Ojs.t) ->
                                                  Ojs.float_to_js
                                                    (x582
                                                       ~v:(Ojs.float_of_js
                                                             x583)
                                                       ~k:(Ojs.float_of_js
                                                             x584))))|])
                               | None -> ());
                              (match x579 with
                               | Some x581 ->
                                   ignore
                                     (Ojs.call x580 "push"
                                        [|(any_to_js x581)|])
                               | None -> ());
                              x580))|])
  end
