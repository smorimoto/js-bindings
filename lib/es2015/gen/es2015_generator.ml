[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
open Es2015_iterable
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type ('T, 'TReturn, 'TNext) _Generator =
          [ `Generator of ('T * 'TReturn * 'TNext) ] intf
        and _GeneratorFunction = [ `GeneratorFunction ] intf
        and _GeneratorFunctionConstructor =
          [ `GeneratorFunctionConstructor ] intf
        let rec _Generator_of_js :
          'T 'TReturn 'TNext .
            (Ojs.t -> 'T) ->
              (Ojs.t -> 'TReturn) ->
                (Ojs.t -> 'TNext) ->
                  Ojs.t -> ('T, 'TReturn, 'TNext) _Generator
          = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
        and _Generator_to_js :
          'T 'TReturn 'TNext .
            ('T -> Ojs.t) ->
              ('TReturn -> Ojs.t) ->
                ('TNext -> Ojs.t) ->
                  ('T, 'TReturn, 'TNext) _Generator -> Ojs.t
          = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
        and _GeneratorFunction_of_js : Ojs.t -> _GeneratorFunction =
          Obj.magic
        and _GeneratorFunction_to_js : _GeneratorFunction -> Ojs.t =
          Obj.magic
        and _GeneratorFunctionConstructor_of_js :
          Ojs.t -> _GeneratorFunctionConstructor = Obj.magic
        and _GeneratorFunctionConstructor_to_js :
          _GeneratorFunctionConstructor -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module Generator =
  struct
    type ('T, 'TReturn, 'TNext) t = ('T, 'TReturn, 'TNext) _Generator
    let rec t_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (__TNext_of_js : Ojs.t -> __TNext) ->
            fun (x5 : Ojs.t) ->
              _Generator_of_js __T_of_js __TReturn_of_js __TNext_of_js x5
    and t_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (__TNext_to_js : __TNext -> Ojs.t) ->
            fun (x1 : (__T, __TReturn, __TNext) _Generator) ->
              _Generator_to_js __T_to_js __TReturn_to_js __TNext_to_js x1
    type ('T, 'TReturn) t_2 = ('T, 'TReturn, unknown) t
    let rec t_2_of_js :
      'T 'TReturn .
        (Ojs.t -> 'T) -> (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) t_2
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x13 : Ojs.t) ->
            t_of_js __T_of_js __TReturn_of_js unknown_of_js x13
    and t_2_to_js :
      'T 'TReturn .
        ('T -> Ojs.t) -> ('TReturn -> Ojs.t) -> ('T, 'TReturn) t_2 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (x9 : (__T, __TReturn, unknown) t) ->
            t_to_js __T_to_js __TReturn_to_js unknown_to_js x9
    type 'T t_1 = ('T, any, unknown) t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x21 : Ojs.t) -> t_of_js __T_of_js any_of_js unknown_of_js x21
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x17 : (__T, any, unknown) t) ->
          t_to_js __T_to_js any_to_js unknown_to_js x17
    type t_0 = (unknown, any, unknown) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x29 : Ojs.t) -> t_of_js unknown_of_js any_of_js unknown_of_js x29
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x25 : (unknown, any, unknown) t) ->
        t_to_js unknown_to_js any_to_js unknown_to_js x25
    let (next :
      ('T, 'TReturn, 'TNext) t ->
        args:any list -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x36 : ('T, 'TReturn, 'TNext) t) ->
        fun ~args:(x33 : any list) ->
          IteratorResult.t_of_js Obj.magic Obj.magic
            (let x40 = t_to_js Obj.magic Obj.magic Obj.magic x36 in
             Ojs.call (Ojs.get_prop_ascii x40 "next") "apply"
               [|x40;((let x34 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x35 : any) ->
                            ignore (Ojs.call x34 "push" [|(any_to_js x35)|]))
                         x33;
                       x34))|])
    let (return :
      ('T, 'TReturn, 'TNext) t ->
        value:'TReturn -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x44 : ('T, 'TReturn, 'TNext) t) ->
        fun ~value:(x43 : 'TReturn) ->
          IteratorResult.t_of_js Obj.magic Obj.magic
            (Ojs.call (t_to_js Obj.magic Obj.magic Obj.magic x44) "return"
               [|(Obj.magic x43)|])
    let (throw :
      ('T, 'TReturn, 'TNext) t -> e:any -> ('T, 'TReturn) IteratorResult.t) =
      fun (x51 : ('T, 'TReturn, 'TNext) t) ->
        fun ~e:(x50 : any) ->
          IteratorResult.t_of_js Obj.magic Obj.magic
            (Ojs.call (t_to_js Obj.magic Obj.magic Obj.magic x51) "throw"
               [|(any_to_js x50)|])
    let (cast :
      ('T, 'TReturn, 'TNext) t -> ('T, 'TReturn, 'TNext) Iterator.t) =
      fun (x57 : ('T, 'TReturn, 'TNext) t) ->
        Iterator.t_of_js Obj.magic Obj.magic Obj.magic
          (t_to_js Obj.magic Obj.magic Obj.magic x57)
  end
module GeneratorFunction =
  struct
    type t = _GeneratorFunction
    let rec t_of_js : Ojs.t -> t =
      fun (x65 : Ojs.t) -> _GeneratorFunction_of_js x65
    and t_to_js : t -> Ojs.t =
      fun (x64 : _GeneratorFunction) -> _GeneratorFunction_to_js x64
    let (create : t -> args:any list -> (unknown, any, unknown) _Generator) =
      fun (x69 : t) ->
        fun ~args:(x66 : any list) ->
          _Generator_of_js unknown_of_js any_of_js unknown_of_js
            (Ojs.new_obj_arr (t_to_js x69)
               (let x67 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x68 : any) ->
                     ignore (Ojs.call x67 "push" [|(any_to_js x68)|])) x66;
                x67))
    let (apply : t -> args:any list -> (unknown, any, unknown) _Generator) =
      fun (x76 : t) ->
        fun ~args:(x73 : any list) ->
          _Generator_of_js unknown_of_js any_of_js unknown_of_js
            (Ojs.call (t_to_js x76) "apply"
               [|Ojs.null;((let x74 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x75 : any) ->
                                 ignore
                                   (Ojs.call x74 "push" [|(any_to_js x75)|]))
                              x73;
                            x74))|])
    let (get_length : t -> float) =
      fun (x80 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x80) "length")
    let (get_name : t -> string) =
      fun (x81 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x81) "name")
    let (get_prototype : t -> (unknown, any, unknown) _Generator) =
      fun (x82 : t) ->
        _Generator_of_js unknown_of_js any_of_js unknown_of_js
          (Ojs.get_prop_ascii (t_to_js x82) "prototype")
    let (create : string list -> _GeneratorFunction) =
      fun (x86 : string list) ->
        _GeneratorFunction_of_js
          (Ojs.new_obj_arr
             (Ojs.get_prop_ascii Ojs.global "GeneratorFunction")
             (let x87 =
                Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
              List.iter
                (fun (x88 : string) ->
                   ignore (Ojs.call x87 "push" [|(Ojs.string_to_js x88)|]))
                x86;
              x87))
    let (get_length : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "GeneratorFunction")
             "length" [||])
    let (get_name : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "GeneratorFunction")
             "name" [||])
  end
module GeneratorFunctionConstructor =
  struct
    type t = _GeneratorFunctionConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x90 : Ojs.t) -> _GeneratorFunctionConstructor_of_js x90
    and t_to_js : t -> Ojs.t =
      fun (x89 : _GeneratorFunctionConstructor) ->
        _GeneratorFunctionConstructor_to_js x89
    let (create : t -> string list -> _GeneratorFunction) =
      fun (x94 : t) ->
        fun (x91 : string list) ->
          _GeneratorFunction_of_js
            (Ojs.new_obj_arr (t_to_js x94)
               (let x92 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x93 : string) ->
                     ignore (Ojs.call x92 "push" [|(Ojs.string_to_js x93)|]))
                  x91;
                x92))
    let (apply : t -> string list -> _GeneratorFunction) =
      fun (x98 : t) ->
        fun (x95 : string list) ->
          _GeneratorFunction_of_js
            (Ojs.call (t_to_js x98) "apply"
               [|Ojs.null;((let x96 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x97 : string) ->
                                 ignore
                                   (Ojs.call x96 "push"
                                      [|(Ojs.string_to_js x97)|])) x95;
                            x96))|])
    let (get_length : t -> float) =
      fun (x99 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x99) "length")
    let (get_name : t -> string) =
      fun (x100 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x100) "name")
    let (get_prototype : t -> _GeneratorFunction) =
      fun (x101 : t) ->
        _GeneratorFunction_of_js
          (Ojs.get_prop_ascii (t_to_js x101) "prototype")
  end
