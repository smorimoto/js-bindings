[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_baselib
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type _SymbolConstructor = [ `SymbolConstructor ] intf
        and _Symbol = symbol
        let rec _SymbolConstructor_of_js : Ojs.t -> _SymbolConstructor =
          Obj.magic
        and _SymbolConstructor_to_js : _SymbolConstructor -> Ojs.t =
          Obj.magic
        and _Symbol_of_js : Ojs.t -> _Symbol =
          fun (x2 : Ojs.t) -> symbol_of_js x2
        and _Symbol_to_js : _Symbol -> Ojs.t =
          fun (x1 : symbol) -> symbol_to_js x1
      end
  end
open Internal
open AnonymousInterfaces
open Types
module Symbol =
  struct
    type t = _Symbol
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> _Symbol_of_js x4
    and t_to_js : t -> Ojs.t = fun (x3 : _Symbol) -> _Symbol_to_js x3
    let (for_ : key:string -> symbol) =
      fun ~key:(x5 : string) ->
        symbol_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Symbol") "for"
             [|(Ojs.string_to_js x5)|])
    let (keyFor : sym:symbol -> string or_undefined) =
      fun ~sym:(x6 : symbol) ->
        or_undefined_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Symbol") "keyFor"
             [|(symbol_to_js x6)|])
  end
module SymbolConstructor =
  struct
    type t = _SymbolConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x9 : Ojs.t) -> _SymbolConstructor_of_js x9
    and t_to_js : t -> Ojs.t =
      fun (x8 : _SymbolConstructor) -> _SymbolConstructor_to_js x8
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11 : Ojs.t) -> t_of_js x11
    and t_0_to_js : t_0 -> Ojs.t = fun (x10 : t) -> t_to_js x10
    let (get_prototype : t -> _Symbol) =
      fun (x12 : t) ->
        _Symbol_of_js (Ojs.get_prop_ascii (t_to_js x12) "prototype")
    let (apply : t -> ?description:string or_number -> unit -> symbol) =
      fun (x17 : t) ->
        fun ?description:(x13 : string or_number option) ->
          fun () ->
            symbol_of_js
              (Ojs.call (t_to_js x17) "apply"
                 [|Ojs.null;((let x14 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x13 with
                               | Some x15 ->
                                   ignore
                                     (Ojs.call x14 "push"
                                        [|(or_number_to_js Ojs.string_to_js
                                             x15)|])
                               | None -> ());
                              x14))|])
    let (for_ : t -> key:string -> symbol) =
      fun (x19 : t) ->
        fun ~key:(x18 : string) ->
          symbol_of_js
            (Ojs.call (t_to_js x19) "for" [|(Ojs.string_to_js x18)|])
    let (keyFor : t -> sym:symbol -> string or_undefined) =
      fun (x21 : t) ->
        fun ~sym:(x20 : symbol) ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.call (t_to_js x21) "keyFor" [|(symbol_to_js x20)|])
  end
let (symbol : _SymbolConstructor) =
  _SymbolConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Symbol")
