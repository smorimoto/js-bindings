[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2019
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type _BigInt = bigint
        and _BigInt64Array = [ `BigInt64Array ] intf
        and _BigInt64ArrayConstructor = [ `BigInt64ArrayConstructor ] intf
        and _BigIntConstructor = [ `BigIntConstructor ] intf
        and _BigIntToLocaleStringOptions =
          [ `BigIntToLocaleStringOptions ] intf
        and _BigUint64Array = [ `BigUint64Array ] intf
        and _BigUint64ArrayConstructor = [ `BigUint64ArrayConstructor ] intf
        and _DataView = [ `DataView ] intf
        and _Intl_NumberFormat = [ `Intl_NumberFormat ] intf
        let rec _BigInt_of_js : Ojs.t -> _BigInt =
          fun (x2 : Ojs.t) -> bigint_of_js x2
        and _BigInt_to_js : _BigInt -> Ojs.t =
          fun (x1 : bigint) -> bigint_to_js x1
        and _BigInt64Array_of_js : Ojs.t -> _BigInt64Array = Obj.magic
        and _BigInt64Array_to_js : _BigInt64Array -> Ojs.t = Obj.magic
        and _BigInt64ArrayConstructor_of_js :
          Ojs.t -> _BigInt64ArrayConstructor = Obj.magic
        and _BigInt64ArrayConstructor_to_js :
          _BigInt64ArrayConstructor -> Ojs.t = Obj.magic
        and _BigIntConstructor_of_js : Ojs.t -> _BigIntConstructor =
          Obj.magic
        and _BigIntConstructor_to_js : _BigIntConstructor -> Ojs.t =
          Obj.magic
        and _BigIntToLocaleStringOptions_of_js :
          Ojs.t -> _BigIntToLocaleStringOptions = Obj.magic
        and _BigIntToLocaleStringOptions_to_js :
          _BigIntToLocaleStringOptions -> Ojs.t = Obj.magic
        and _BigUint64Array_of_js : Ojs.t -> _BigUint64Array = Obj.magic
        and _BigUint64Array_to_js : _BigUint64Array -> Ojs.t = Obj.magic
        and _BigUint64ArrayConstructor_of_js :
          Ojs.t -> _BigUint64ArrayConstructor = Obj.magic
        and _BigUint64ArrayConstructor_to_js :
          _BigUint64ArrayConstructor -> Ojs.t = Obj.magic
        and _DataView_of_js : Ojs.t -> _DataView = Obj.magic
        and _DataView_to_js : _DataView -> Ojs.t = Obj.magic
        and _Intl_NumberFormat_of_js : Ojs.t -> _Intl_NumberFormat =
          Obj.magic
        and _Intl_NumberFormat_to_js : _Intl_NumberFormat -> Ojs.t =
          Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module BigIntToLocaleStringOptions =
  struct
    type t = _BigIntToLocaleStringOptions
    let rec t_of_js : Ojs.t -> t =
      fun (x4 : Ojs.t) -> _BigIntToLocaleStringOptions_of_js x4
    and t_to_js : t -> Ojs.t =
      fun (x3 : _BigIntToLocaleStringOptions) ->
        _BigIntToLocaleStringOptions_to_js x3
    let (get_localeMatcher : t -> string) =
      fun (x5 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5) "localeMatcher")
    let (set_localeMatcher : t -> string -> unit) =
      fun (x6 : t) ->
        fun (x7 : string) ->
          Ojs.set_prop_ascii (t_to_js x6) "localeMatcher"
            (Ojs.string_to_js x7)
    let (get_style : t -> string) =
      fun (x8 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x8) "style")
    let (set_style : t -> string -> unit) =
      fun (x9 : t) ->
        fun (x10 : string) ->
          Ojs.set_prop_ascii (t_to_js x9) "style" (Ojs.string_to_js x10)
    let (get_numberingSystem : t -> string) =
      fun (x11 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x11) "numberingSystem")
    let (set_numberingSystem : t -> string -> unit) =
      fun (x12 : t) ->
        fun (x13 : string) ->
          Ojs.set_prop_ascii (t_to_js x12) "numberingSystem"
            (Ojs.string_to_js x13)
    let (get_unit : t -> string) =
      fun (x14 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x14) "unit")
    let (set_unit : t -> string -> unit) =
      fun (x15 : t) ->
        fun (x16 : string) ->
          Ojs.set_prop_ascii (t_to_js x15) "unit" (Ojs.string_to_js x16)
    let (get_unitDisplay : t -> string) =
      fun (x17 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x17) "unitDisplay")
    let (set_unitDisplay : t -> string -> unit) =
      fun (x18 : t) ->
        fun (x19 : string) ->
          Ojs.set_prop_ascii (t_to_js x18) "unitDisplay"
            (Ojs.string_to_js x19)
    let (get_currency : t -> string) =
      fun (x20 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x20) "currency")
    let (set_currency : t -> string -> unit) =
      fun (x21 : t) ->
        fun (x22 : string) ->
          Ojs.set_prop_ascii (t_to_js x21) "currency" (Ojs.string_to_js x22)
    let (get_currencyDisplay : t -> string) =
      fun (x23 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x23) "currencyDisplay")
    let (set_currencyDisplay : t -> string -> unit) =
      fun (x24 : t) ->
        fun (x25 : string) ->
          Ojs.set_prop_ascii (t_to_js x24) "currencyDisplay"
            (Ojs.string_to_js x25)
    let (get_useGrouping : t -> bool) =
      fun (x26 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x26) "useGrouping")
    let (set_useGrouping : t -> bool -> unit) =
      fun (x27 : t) ->
        fun (x28 : bool) ->
          Ojs.set_prop_ascii (t_to_js x27) "useGrouping" (Ojs.bool_to_js x28)
    let (get_minimumIntegerDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ])
      =
      fun (x29 : t) ->
        let x30 = Ojs.get_prop_ascii (t_to_js x29) "minimumIntegerDigits" in
        match Ojs.int_of_js x30 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | _ -> assert false
    let (set_minimumIntegerDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ] -> unit)
      =
      fun (x31 : t) ->
        fun
          (x32 :
            [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
            | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | 
              `L_n_18 
            | `L_n_19  | `L_n_20  | `L_n_21 ])
          ->
          Ojs.set_prop_ascii (t_to_js x31) "minimumIntegerDigits"
            (match x32 with
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20"
             | `L_n_21 -> Ojs.string_to_js "LN21")
    let (get_minimumFractionDigits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ])
      =
      fun (x33 : t) ->
        let x34 = Ojs.get_prop_ascii (t_to_js x33) "minimumFractionDigits" in
        match Ojs.int_of_js x34 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | _ -> assert false
    let (set_minimumFractionDigits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ] -> unit)
      =
      fun (x35 : t) ->
        fun
          (x36 :
            [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5 
            | `L_n_6  | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11 
            | `L_n_12  | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | 
              `L_n_17 
            | `L_n_18  | `L_n_19  | `L_n_20 ])
          ->
          Ojs.set_prop_ascii (t_to_js x35) "minimumFractionDigits"
            (match x36 with
             | `L_n_0 -> Ojs.string_to_js "LN0"
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20")
    let (get_maximumFractionDigits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ])
      =
      fun (x37 : t) ->
        let x38 = Ojs.get_prop_ascii (t_to_js x37) "maximumFractionDigits" in
        match Ojs.int_of_js x38 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | _ -> assert false
    let (set_maximumFractionDigits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ] -> unit)
      =
      fun (x39 : t) ->
        fun
          (x40 :
            [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5 
            | `L_n_6  | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11 
            | `L_n_12  | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | 
              `L_n_17 
            | `L_n_18  | `L_n_19  | `L_n_20 ])
          ->
          Ojs.set_prop_ascii (t_to_js x39) "maximumFractionDigits"
            (match x40 with
             | `L_n_0 -> Ojs.string_to_js "LN0"
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20")
    let (get_minimumSignificantDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ])
      =
      fun (x41 : t) ->
        let x42 = Ojs.get_prop_ascii (t_to_js x41) "minimumSignificantDigits" in
        match Ojs.int_of_js x42 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | _ -> assert false
    let (set_minimumSignificantDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ] -> unit)
      =
      fun (x43 : t) ->
        fun
          (x44 :
            [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
            | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | 
              `L_n_18 
            | `L_n_19  | `L_n_20  | `L_n_21 ])
          ->
          Ojs.set_prop_ascii (t_to_js x43) "minimumSignificantDigits"
            (match x44 with
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20"
             | `L_n_21 -> Ojs.string_to_js "LN21")
    let (get_maximumSignificantDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ])
      =
      fun (x45 : t) ->
        let x46 = Ojs.get_prop_ascii (t_to_js x45) "maximumSignificantDigits" in
        match Ojs.int_of_js x46 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | _ -> assert false
    let (set_maximumSignificantDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ] -> unit)
      =
      fun (x47 : t) ->
        fun
          (x48 :
            [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
            | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | 
              `L_n_18 
            | `L_n_19  | `L_n_20  | `L_n_21 ])
          ->
          Ojs.set_prop_ascii (t_to_js x47) "maximumSignificantDigits"
            (match x48 with
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20"
             | `L_n_21 -> Ojs.string_to_js "LN21")
    let (get_notation : t -> string) =
      fun (x49 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x49) "notation")
    let (set_notation : t -> string -> unit) =
      fun (x50 : t) ->
        fun (x51 : string) ->
          Ojs.set_prop_ascii (t_to_js x50) "notation" (Ojs.string_to_js x51)
    let (get_compactDisplay : t -> string) =
      fun (x52 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x52) "compactDisplay")
    let (set_compactDisplay : t -> string -> unit) =
      fun (x53 : t) ->
        fun (x54 : string) ->
          Ojs.set_prop_ascii (t_to_js x53) "compactDisplay"
            (Ojs.string_to_js x54)
  end
module BigInt =
  struct
    type t = _BigInt
    let rec t_of_js : Ojs.t -> t = fun (x56 : Ojs.t) -> _BigInt_of_js x56
    and t_to_js : t -> Ojs.t = fun (x55 : _BigInt) -> _BigInt_to_js x55
    let (toString : t -> ?radix:float -> unit -> string) =
      fun (x60 : t) ->
        fun ?radix:(x57 : float option) ->
          fun () ->
            Ojs.string_of_js
              (let x61 = t_to_js x60 in
               Ojs.call (Ojs.get_prop_ascii x61 "toString") "apply"
                 [|x61;((let x58 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x57 with
                          | Some x59 ->
                              ignore
                                (Ojs.call x58 "push"
                                   [|(Ojs.float_to_js x59)|])
                          | None -> ());
                         x58))|])
    let (toLocaleString :
      t ->
        ?locales:string ->
          ?options:_BigIntToLocaleStringOptions -> unit -> string)
      =
      fun (x67 : t) ->
        fun ?locales:(x62 : string option) ->
          fun ?options:(x63 : _BigIntToLocaleStringOptions option) ->
            fun () ->
              Ojs.string_of_js
                (let x68 = t_to_js x67 in
                 Ojs.call (Ojs.get_prop_ascii x68 "toLocaleString") "apply"
                   [|x68;((let x64 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x62 with
                            | Some x66 ->
                                ignore
                                  (Ojs.call x64 "push"
                                     [|(Ojs.string_to_js x66)|])
                            | None -> ());
                           (match x63 with
                            | Some x65 ->
                                ignore
                                  (Ojs.call x64 "push"
                                     [|(_BigIntToLocaleStringOptions_to_js
                                          x65)|])
                            | None -> ());
                           x64))|])
    let (valueOf : t -> bigint) =
      fun (x69 : t) -> bigint_of_js (Ojs.call (t_to_js x69) "valueOf" [||])
    let (asIntN : bits:float -> int:bigint -> bigint) =
      fun ~bits:(x70 : float) ->
        fun ~int:(x71 : bigint) ->
          bigint_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "BitInt") "asIntN"
               [|(Ojs.float_to_js x70);(bigint_to_js x71)|])
    let (asUintN : bits:float -> int:bigint -> bigint) =
      fun ~bits:(x72 : float) ->
        fun ~int:(x73 : bigint) ->
          bigint_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "BitInt") "asUintN"
               [|(Ojs.float_to_js x72);(bigint_to_js x73)|])
  end
module BigIntConstructor =
  struct
    type t = _BigIntConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x75 : Ojs.t) -> _BigIntConstructor_of_js x75
    and t_to_js : t -> Ojs.t =
      fun (x74 : _BigIntConstructor) -> _BigIntConstructor_to_js x74
    let (apply : t -> ?value:any -> unit -> bigint) =
      fun (x79 : t) ->
        fun ?value:(x76 : any option) ->
          fun () ->
            bigint_of_js
              (Ojs.call (t_to_js x79) "apply"
                 [|Ojs.null;((let x77 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x76 with
                               | Some x78 ->
                                   ignore
                                     (Ojs.call x77 "push" [|(any_to_js x78)|])
                               | None -> ());
                              x77))|])
    let (get_prototype : t -> _BigInt) =
      fun (x80 : t) ->
        _BigInt_of_js (Ojs.get_prop_ascii (t_to_js x80) "prototype")
    let (asIntN : t -> bits:float -> int:bigint -> bigint) =
      fun (x83 : t) ->
        fun ~bits:(x81 : float) ->
          fun ~int:(x82 : bigint) ->
            bigint_of_js
              (Ojs.call (t_to_js x83) "asIntN"
                 [|(Ojs.float_to_js x81);(bigint_to_js x82)|])
    let (asUintN : t -> bits:float -> int:bigint -> bigint) =
      fun (x86 : t) ->
        fun ~bits:(x84 : float) ->
          fun ~int:(x85 : bigint) ->
            bigint_of_js
              (Ojs.call (t_to_js x86) "asUintN"
                 [|(Ojs.float_to_js x84);(bigint_to_js x85)|])
  end
let (bigInt : _BigIntConstructor) =
  _BigIntConstructor_of_js (Ojs.get_prop_ascii Ojs.global "BigInt")
module BigInt64Array =
  struct
    type t = _BigInt64Array
    let rec t_of_js : Ojs.t -> t =
      fun (x88 : Ojs.t) -> _BigInt64Array_of_js x88
    and t_to_js : t -> Ojs.t =
      fun (x87 : _BigInt64Array) -> _BigInt64Array_to_js x87
    let (get_BYTES_PER_ELEMENT : t -> float) =
      fun (x89 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x89) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x90 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x90) "buffer")
    let (get_byteLength : t -> float) =
      fun (x91 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x91) "byteLength")
    let (get_byteOffset : t -> float) =
      fun (x92 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x92) "byteOffset")
    let (copyWithin :
      t -> target:float -> start:float -> ?end_:float -> unit -> t) =
      fun (x98 : t) ->
        fun ~target:(x93 : float) ->
          fun ~start:(x94 : float) ->
            fun ?end_:(x95 : float option) ->
              fun () ->
                t_of_js
                  (let x99 = t_to_js x98 in
                   Ojs.call (Ojs.get_prop_ascii x99 "copyWithin") "apply"
                     [|x99;((let x96 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x96 "push" [|(Ojs.float_to_js x93)|]);
                             ignore
                               (Ojs.call x96 "push" [|(Ojs.float_to_js x94)|]);
                             (match x95 with
                              | Some x97 ->
                                  ignore
                                    (Ojs.call x96 "push"
                                       [|(Ojs.float_to_js x97)|])
                              | None -> ());
                             x96))|])
    let (entries : t -> (float * bigint) IterableIterator.t) =
      fun (x100 : t) ->
        IterableIterator.t_of_js
          (fun (x101 : Ojs.t) ->
             let x102 = x101 in
             ((Ojs.float_of_js (Ojs.array_get x102 0)),
               (bigint_of_js (Ojs.array_get x102 1))))
          (Ojs.call (t_to_js x100) "entries" [||])
    let (every :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x110 : t) ->
        fun
          ~predicate:(x103 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x104 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x111 = t_to_js x110 in
                 Ojs.call (Ojs.get_prop_ascii x111 "every") "apply"
                   [|x111;((let x105 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x105 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x107 : Ojs.t) ->
                                         fun (x108 : Ojs.t) ->
                                           fun (x109 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x103
                                                  ~value:(bigint_of_js x107)
                                                  ~index:(Ojs.float_of_js
                                                            x108)
                                                  ~array:(t_of_js x109))))|]);
                            (match x104 with
                             | Some x106 ->
                                 ignore
                                   (Ojs.call x105 "push" [|(any_to_js x106)|])
                             | None -> ());
                            x105))|])
    let (fill :
      t -> value:bigint -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x118 : t) ->
        fun ~value:(x112 : bigint) ->
          fun ?start:(x113 : float option) ->
            fun ?end_:(x114 : float option) ->
              fun () ->
                t_of_js
                  (let x119 = t_to_js x118 in
                   Ojs.call (Ojs.get_prop_ascii x119 "fill") "apply"
                     [|x119;((let x115 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x115 "push" [|(bigint_to_js x112)|]);
                              (match x113 with
                               | Some x117 ->
                                   ignore
                                     (Ojs.call x115 "push"
                                        [|(Ojs.float_to_js x117)|])
                               | None -> ());
                              (match x114 with
                               | Some x116 ->
                                   ignore
                                     (Ojs.call x115 "push"
                                        [|(Ojs.float_to_js x116)|])
                               | None -> ());
                              x115))|])
    let (filter :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x127 : t) ->
        fun ~predicate:(x120 : value:bigint -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x121 : any option) ->
            fun () ->
              t_of_js
                (let x128 = t_to_js x127 in
                 Ojs.call (Ojs.get_prop_ascii x128 "filter") "apply"
                   [|x128;((let x122 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x122 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x124 : Ojs.t) ->
                                         fun (x125 : Ojs.t) ->
                                           fun (x126 : Ojs.t) ->
                                             any_to_js
                                               (x120
                                                  ~value:(bigint_of_js x124)
                                                  ~index:(Ojs.float_of_js
                                                            x125)
                                                  ~array:(t_of_js x126))))|]);
                            (match x121 with
                             | Some x123 ->
                                 ignore
                                   (Ojs.call x122 "push" [|(any_to_js x123)|])
                             | None -> ());
                            x122))|])
    let (find :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bigint or_undefined)
      =
      fun (x136 : t) ->
        fun
          ~predicate:(x129 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x130 : any option) ->
            fun () ->
              or_undefined_of_js bigint_of_js
                (let x137 = t_to_js x136 in
                 Ojs.call (Ojs.get_prop_ascii x137 "find") "apply"
                   [|x137;((let x131 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x131 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x133 : Ojs.t) ->
                                         fun (x134 : Ojs.t) ->
                                           fun (x135 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x129
                                                  ~value:(bigint_of_js x133)
                                                  ~index:(Ojs.float_of_js
                                                            x134)
                                                  ~array:(t_of_js x135))))|]);
                            (match x130 with
                             | Some x132 ->
                                 ignore
                                   (Ojs.call x131 "push" [|(any_to_js x132)|])
                             | None -> ());
                            x131))|])
    let (findIndex :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x146 : t) ->
        fun
          ~predicate:(x139 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x140 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x147 = t_to_js x146 in
                 Ojs.call (Ojs.get_prop_ascii x147 "findIndex") "apply"
                   [|x147;((let x141 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x141 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x143 : Ojs.t) ->
                                         fun (x144 : Ojs.t) ->
                                           fun (x145 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x139
                                                  ~value:(bigint_of_js x143)
                                                  ~index:(Ojs.float_of_js
                                                            x144)
                                                  ~array:(t_of_js x145))))|]);
                            (match x140 with
                             | Some x142 ->
                                 ignore
                                   (Ojs.call x141 "push" [|(any_to_js x142)|])
                             | None -> ());
                            x141))|])
    let (forEach :
      t ->
        callbackfn:(value:bigint -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x155 : t) ->
        fun
          ~callbackfn:(x148 : value:bigint -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x149 : any option) ->
            fun () ->
              ignore
                (let x156 = t_to_js x155 in
                 Ojs.call (Ojs.get_prop_ascii x156 "forEach") "apply"
                   [|x156;((let x150 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x150 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x152 : Ojs.t) ->
                                         fun (x153 : Ojs.t) ->
                                           fun (x154 : Ojs.t) ->
                                             x148 ~value:(bigint_of_js x152)
                                               ~index:(Ojs.float_of_js x153)
                                               ~array:(t_of_js x154)))|]);
                            (match x149 with
                             | Some x151 ->
                                 ignore
                                   (Ojs.call x150 "push" [|(any_to_js x151)|])
                             | None -> ());
                            x150))|])
    let (includes :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> bool) =
      fun (x161 : t) ->
        fun ~searchElement:(x157 : bigint) ->
          fun ?fromIndex:(x158 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x162 = t_to_js x161 in
                 Ojs.call (Ojs.get_prop_ascii x162 "includes") "apply"
                   [|x162;((let x159 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x159 "push" [|(bigint_to_js x157)|]);
                            (match x158 with
                             | Some x160 ->
                                 ignore
                                   (Ojs.call x159 "push"
                                      [|(Ojs.float_to_js x160)|])
                             | None -> ());
                            x159))|])
    let (indexOf :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> float) =
      fun (x167 : t) ->
        fun ~searchElement:(x163 : bigint) ->
          fun ?fromIndex:(x164 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x168 = t_to_js x167 in
                 Ojs.call (Ojs.get_prop_ascii x168 "indexOf") "apply"
                   [|x168;((let x165 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x165 "push" [|(bigint_to_js x163)|]);
                            (match x164 with
                             | Some x166 ->
                                 ignore
                                   (Ojs.call x165 "push"
                                      [|(Ojs.float_to_js x166)|])
                             | None -> ());
                            x165))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x172 : t) ->
        fun ?separator:(x169 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x173 = t_to_js x172 in
               Ojs.call (Ojs.get_prop_ascii x173 "join") "apply"
                 [|x173;((let x170 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x169 with
                           | Some x171 ->
                               ignore
                                 (Ojs.call x170 "push"
                                    [|(Ojs.string_to_js x171)|])
                           | None -> ());
                          x170))|])
    let (keys : t -> float IterableIterator.t) =
      fun (x174 : t) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x174) "keys" [||])
    let (lastIndexOf :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> float) =
      fun (x180 : t) ->
        fun ~searchElement:(x176 : bigint) ->
          fun ?fromIndex:(x177 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x181 = t_to_js x180 in
                 Ojs.call (Ojs.get_prop_ascii x181 "lastIndexOf") "apply"
                   [|x181;((let x178 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x178 "push" [|(bigint_to_js x176)|]);
                            (match x177 with
                             | Some x179 ->
                                 ignore
                                   (Ojs.call x178 "push"
                                      [|(Ojs.float_to_js x179)|])
                             | None -> ());
                            x178))|])
    let (get_length : t -> float) =
      fun (x182 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x182) "length")
    let (map :
      t ->
        callbackfn:(value:bigint -> index:float -> array:t -> bigint) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x190 : t) ->
        fun
          ~callbackfn:(x183 :
                        value:bigint -> index:float -> array:t -> bigint)
          ->
          fun ?thisArg:(x184 : any option) ->
            fun () ->
              t_of_js
                (let x191 = t_to_js x190 in
                 Ojs.call (Ojs.get_prop_ascii x191 "map") "apply"
                   [|x191;((let x185 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x185 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x187 : Ojs.t) ->
                                         fun (x188 : Ojs.t) ->
                                           fun (x189 : Ojs.t) ->
                                             bigint_to_js
                                               (x183
                                                  ~value:(bigint_of_js x187)
                                                  ~index:(Ojs.float_of_js
                                                            x188)
                                                  ~array:(t_of_js x189))))|]);
                            (match x184 with
                             | Some x186 ->
                                 ignore
                                   (Ojs.call x185 "push" [|(any_to_js x186)|])
                             | None -> ());
                            x185))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x197 : t) ->
        fun
          ~callbackfn:(x192 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x197) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x193 : Ojs.t) ->
                       fun (x194 : Ojs.t) ->
                         fun (x195 : Ojs.t) ->
                           fun (x196 : Ojs.t) ->
                             bigint_to_js
                               (x192 ~previousValue:(bigint_of_js x193)
                                  ~currentValue:(bigint_of_js x194)
                                  ~currentIndex:(Ojs.float_of_js x195)
                                  ~array:(t_of_js x196))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x204 : t) ->
        fun
          ~callbackfn:(x198 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x203 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x204) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x199 : Ojs.t) ->
                         fun (x200 : Ojs.t) ->
                           fun (x201 : Ojs.t) ->
                             fun (x202 : Ojs.t) ->
                               Obj.magic
                                 (x198 ~previousValue:(Obj.magic x199)
                                    ~currentValue:(bigint_of_js x200)
                                    ~currentIndex:(Ojs.float_of_js x201)
                                    ~array:(t_of_js x202))));(Obj.magic x203)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x210 : t) ->
        fun
          ~callbackfn:(x205 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x210) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x206 : Ojs.t) ->
                       fun (x207 : Ojs.t) ->
                         fun (x208 : Ojs.t) ->
                           fun (x209 : Ojs.t) ->
                             bigint_to_js
                               (x205 ~previousValue:(bigint_of_js x206)
                                  ~currentValue:(bigint_of_js x207)
                                  ~currentIndex:(Ojs.float_of_js x208)
                                  ~array:(t_of_js x209))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x217 : t) ->
        fun
          ~callbackfn:(x211 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x216 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x217) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x212 : Ojs.t) ->
                         fun (x213 : Ojs.t) ->
                           fun (x214 : Ojs.t) ->
                             fun (x215 : Ojs.t) ->
                               Obj.magic
                                 (x211 ~previousValue:(Obj.magic x212)
                                    ~currentValue:(bigint_of_js x213)
                                    ~currentIndex:(Ojs.float_of_js x214)
                                    ~array:(t_of_js x215))));(Obj.magic x216)|])
    let (reverse : t -> t) =
      fun (x218 : t) -> t_of_js (Ojs.call (t_to_js x218) "reverse" [||])
    let (set_ : t -> array:bigint Array.t -> ?offset:float -> unit -> unit) =
      fun (x224 : t) ->
        fun ~array:(x219 : bigint Array.t) ->
          fun ?offset:(x220 : float option) ->
            fun () ->
              ignore
                (let x225 = t_to_js x224 in
                 Ojs.call (Ojs.get_prop_ascii x225 "set") "apply"
                   [|x225;((let x221 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x221 "push"
                                 [|(Array.t_to_js bigint_to_js x219)|]);
                            (match x220 with
                             | Some x222 ->
                                 ignore
                                   (Ojs.call x221 "push"
                                      [|(Ojs.float_to_js x222)|])
                             | None -> ());
                            x221))|])
    let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x231 : t) ->
        fun ?start:(x226 : float option) ->
          fun ?end_:(x227 : float option) ->
            fun () ->
              t_of_js
                (let x232 = t_to_js x231 in
                 Ojs.call (Ojs.get_prop_ascii x232 "slice") "apply"
                   [|x232;((let x228 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x226 with
                             | Some x230 ->
                                 ignore
                                   (Ojs.call x228 "push"
                                      [|(Ojs.float_to_js x230)|])
                             | None -> ());
                            (match x227 with
                             | Some x229 ->
                                 ignore
                                   (Ojs.call x228 "push"
                                      [|(Ojs.float_to_js x229)|])
                             | None -> ());
                            x228))|])
    let (some :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x240 : t) ->
        fun
          ~predicate:(x233 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x234 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x241 = t_to_js x240 in
                 Ojs.call (Ojs.get_prop_ascii x241 "some") "apply"
                   [|x241;((let x235 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x235 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x237 : Ojs.t) ->
                                         fun (x238 : Ojs.t) ->
                                           fun (x239 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x233
                                                  ~value:(bigint_of_js x237)
                                                  ~index:(Ojs.float_of_js
                                                            x238)
                                                  ~array:(t_of_js x239))))|]);
                            (match x234 with
                             | Some x236 ->
                                 ignore
                                   (Ojs.call x235 "push" [|(any_to_js x236)|])
                             | None -> ());
                            x235))|])
    let (sort :
      t -> ?compareFn:(a:bigint -> b:bigint -> bigint or_number) -> unit -> t)
      =
      fun (x248 : t) ->
        fun
          ?compareFn:(x242 :
                       (a:bigint -> b:bigint -> bigint or_number) option)
          ->
          fun () ->
            t_of_js
              (let x249 = t_to_js x248 in
               Ojs.call (Ojs.get_prop_ascii x249 "sort") "apply"
                 [|x249;((let x243 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x242 with
                           | Some x244 ->
                               ignore
                                 (Ojs.call x243 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x245 : Ojs.t) ->
                                            fun (x246 : Ojs.t) ->
                                              or_number_to_js bigint_to_js
                                                (x244 ~a:(bigint_of_js x245)
                                                   ~b:(bigint_of_js x246))))|])
                           | None -> ());
                          x243))|])
    let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
      fun (x255 : t) ->
        fun ?begin_:(x250 : float option) ->
          fun ?end_:(x251 : float option) ->
            fun () ->
              t_of_js
                (let x256 = t_to_js x255 in
                 Ojs.call (Ojs.get_prop_ascii x256 "subarray") "apply"
                   [|x256;((let x252 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x250 with
                             | Some x254 ->
                                 ignore
                                   (Ojs.call x252 "push"
                                      [|(Ojs.float_to_js x254)|])
                             | None -> ());
                            (match x251 with
                             | Some x253 ->
                                 ignore
                                   (Ojs.call x252 "push"
                                      [|(Ojs.float_to_js x253)|])
                             | None -> ());
                            x252))|])
    let (toLocaleString : t -> string) =
      fun (x257 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x257) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x258 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x258) "toString" [||])
    let (valueOf : t -> t) =
      fun (x259 : t) -> t_of_js (Ojs.call (t_to_js x259) "valueOf" [||])
    let (values : t -> bigint IterableIterator.t) =
      fun (x260 : t) ->
        IterableIterator.t_of_js bigint_of_js
          (Ojs.call (t_to_js x260) "values" [||])
    let (get : t -> float -> bigint) =
      fun (x262 : t) ->
        fun (x263 : float) ->
          bigint_of_js (Ojs.get_prop (t_to_js x262) (Ojs.float_to_js x263))
    let (set : t -> float -> bigint -> unit) =
      fun (x264 : t) ->
        fun (x265 : float) ->
          fun (x266 : bigint) ->
            Ojs.set_prop (t_to_js x264) (Ojs.float_to_js x265)
              (bigint_to_js x266)
    let (create : ?length:float -> unit -> _BigInt64Array) =
      fun ?length:(x267 : float option) ->
        fun () ->
          _BigInt64Array_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
               (let x268 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x267 with
                 | Some x269 ->
                     ignore (Ojs.call x268 "push" [|(Ojs.float_to_js x269)|])
                 | None -> ());
                x268))
    let (create' : array:bigint Iterable.t -> _BigInt64Array) =
      fun ~array:(x270 : bigint Iterable.t) ->
        _BigInt64Array_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
             [|(Iterable.t_to_js bigint_to_js x270)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:float -> ?length:float -> unit -> _BigInt64Array)
      =
      fun (x272 : t) ->
        fun ~buffer:(x273 : ArrayBuffer.t) ->
          fun ?byteOffset:(x274 : float option) ->
            fun ?length:(x275 : float option) ->
              fun () ->
                _BigInt64Array_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
                     (let x276 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x276 "push" [|(t_to_js x272)|]);
                      ignore
                        (Ojs.call x276 "push" [|(ArrayBuffer.t_to_js x273)|]);
                      (match x274 with
                       | Some x278 ->
                           ignore
                             (Ojs.call x276 "push" [|(Ojs.float_to_js x278)|])
                       | None -> ());
                      (match x275 with
                       | Some x277 ->
                           ignore
                             (Ojs.call x276 "push" [|(Ojs.float_to_js x277)|])
                       | None -> ());
                      x276))
    let (of_ : items:bigint list -> _BigInt64Array) =
      fun ~items:(x279 : bigint list) ->
        _BigInt64Array_of_js
          (let x282 = Ojs.get_prop_ascii Ojs.global "BigInt64Array" in
           Ojs.call (Ojs.get_prop_ascii x282 "of") "apply"
             [|x282;((let x280 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      List.iter
                        (fun (x281 : bigint) ->
                           ignore
                             (Ojs.call x280 "push" [|(bigint_to_js x281)|]))
                        x279;
                      x280))|])
    let (from : array:bigint Array.t -> _BigInt64Array) =
      fun ~array:(x283 : bigint Array.t) ->
        _BigInt64Array_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "BigInt64Array") "from"
             [|(Array.t_to_js bigint_to_js x283)|])
    let (from' :
      array:'U Array.t ->
        mapfn:(v:'U -> k:float -> bigint) ->
          ?thisArg:any -> unit -> _BigInt64Array)
      =
      fun ~array:(x285 : 'U Array.t) ->
        fun ~mapfn:(x286 : v:'U -> k:float -> bigint) ->
          fun ?thisArg:(x287 : any option) ->
            fun () ->
              _BigInt64Array_of_js
                (let x293 = Ojs.get_prop_ascii Ojs.global "BigInt64Array" in
                 Ojs.call (Ojs.get_prop_ascii x293 "from") "apply"
                   [|x293;((let x288 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x288 "push"
                                 [|(Array.t_to_js Obj.magic x285)|]);
                            ignore
                              (Ojs.call x288 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x290 : Ojs.t) ->
                                         fun (x291 : Ojs.t) ->
                                           bigint_to_js
                                             (x286 ~v:(Obj.magic x290)
                                                ~k:(Ojs.float_of_js x291))))|]);
                            (match x287 with
                             | Some x289 ->
                                 ignore
                                   (Ojs.call x288 "push" [|(any_to_js x289)|])
                             | None -> ());
                            x288))|])
  end
module BigInt64ArrayConstructor =
  struct
    type t = _BigInt64ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x295 : Ojs.t) -> _BigInt64ArrayConstructor_of_js x295
    and t_to_js : t -> Ojs.t =
      fun (x294 : _BigInt64ArrayConstructor) ->
        _BigInt64ArrayConstructor_to_js x294
    let (get_prototype : t -> _BigInt64Array) =
      fun (x296 : t) ->
        _BigInt64Array_of_js (Ojs.get_prop_ascii (t_to_js x296) "prototype")
    let (create : t -> ?length:float -> unit -> _BigInt64Array) =
      fun (x300 : t) ->
        fun ?length:(x297 : float option) ->
          fun () ->
            _BigInt64Array_of_js
              (Ojs.new_obj_arr (t_to_js x300)
                 (let x298 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x297 with
                   | Some x299 ->
                       ignore
                         (Ojs.call x298 "push" [|(Ojs.float_to_js x299)|])
                   | None -> ());
                  x298))
    let (create' : t -> array:bigint Iterable.t -> _BigInt64Array) =
      fun (x303 : t) ->
        fun ~array:(x301 : bigint Iterable.t) ->
          _BigInt64Array_of_js
            (Ojs.new_obj (t_to_js x303)
               [|(Iterable.t_to_js bigint_to_js x301)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:float -> ?length:float -> unit -> _BigInt64Array)
      =
      fun (x310 : t) ->
        fun ~buffer:(x304 : ArrayBuffer.t) ->
          fun ?byteOffset:(x305 : float option) ->
            fun ?length:(x306 : float option) ->
              fun () ->
                _BigInt64Array_of_js
                  (Ojs.new_obj_arr (t_to_js x310)
                     (let x307 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x307 "push" [|(ArrayBuffer.t_to_js x304)|]);
                      (match x305 with
                       | Some x309 ->
                           ignore
                             (Ojs.call x307 "push" [|(Ojs.float_to_js x309)|])
                       | None -> ());
                      (match x306 with
                       | Some x308 ->
                           ignore
                             (Ojs.call x307 "push" [|(Ojs.float_to_js x308)|])
                       | None -> ());
                      x307))
    let (get_BYTES_PER_ELEMENT : t -> float) =
      fun (x311 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x311) "BYTES_PER_ELEMENT")
    let (of_ : t -> items:bigint list -> _BigInt64Array) =
      fun (x315 : t) ->
        fun ~items:(x312 : bigint list) ->
          _BigInt64Array_of_js
            (let x316 = t_to_js x315 in
             Ojs.call (Ojs.get_prop_ascii x316 "of") "apply"
               [|x316;((let x313 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x314 : bigint) ->
                             ignore
                               (Ojs.call x313 "push" [|(bigint_to_js x314)|]))
                          x312;
                        x313))|])
    let (from : t -> array:bigint Array.t -> _BigInt64Array) =
      fun (x319 : t) ->
        fun ~array:(x317 : bigint Array.t) ->
          _BigInt64Array_of_js
            (Ojs.call (t_to_js x319) "from"
               [|(Array.t_to_js bigint_to_js x317)|])
    let (from' :
      t ->
        array:'U Array.t ->
          mapfn:(v:'U -> k:float -> bigint) ->
            ?thisArg:any -> unit -> _BigInt64Array)
      =
      fun (x328 : t) ->
        fun ~array:(x320 : 'U Array.t) ->
          fun ~mapfn:(x321 : v:'U -> k:float -> bigint) ->
            fun ?thisArg:(x322 : any option) ->
              fun () ->
                _BigInt64Array_of_js
                  (let x329 = t_to_js x328 in
                   Ojs.call (Ojs.get_prop_ascii x329 "from") "apply"
                     [|x329;((let x323 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x323 "push"
                                   [|(Array.t_to_js Obj.magic x320)|]);
                              ignore
                                (Ojs.call x323 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x325 : Ojs.t) ->
                                           fun (x326 : Ojs.t) ->
                                             bigint_to_js
                                               (x321 ~v:(Obj.magic x325)
                                                  ~k:(Ojs.float_of_js x326))))|]);
                              (match x322 with
                               | Some x324 ->
                                   ignore
                                     (Ojs.call x323 "push"
                                        [|(any_to_js x324)|])
                               | None -> ());
                              x323))|])
  end
let (bigInt64Array : _BigInt64ArrayConstructor) =
  _BigInt64ArrayConstructor_of_js
    (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
module BigUint64Array =
  struct
    type t = _BigUint64Array
    let rec t_of_js : Ojs.t -> t =
      fun (x331 : Ojs.t) -> _BigUint64Array_of_js x331
    and t_to_js : t -> Ojs.t =
      fun (x330 : _BigUint64Array) -> _BigUint64Array_to_js x330
    let (get_BYTES_PER_ELEMENT : t -> float) =
      fun (x332 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x332) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x333 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x333) "buffer")
    let (get_byteLength : t -> float) =
      fun (x334 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x334) "byteLength")
    let (get_byteOffset : t -> float) =
      fun (x335 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x335) "byteOffset")
    let (copyWithin :
      t -> target:float -> start:float -> ?end_:float -> unit -> t) =
      fun (x341 : t) ->
        fun ~target:(x336 : float) ->
          fun ~start:(x337 : float) ->
            fun ?end_:(x338 : float option) ->
              fun () ->
                t_of_js
                  (let x342 = t_to_js x341 in
                   Ojs.call (Ojs.get_prop_ascii x342 "copyWithin") "apply"
                     [|x342;((let x339 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x339 "push"
                                   [|(Ojs.float_to_js x336)|]);
                              ignore
                                (Ojs.call x339 "push"
                                   [|(Ojs.float_to_js x337)|]);
                              (match x338 with
                               | Some x340 ->
                                   ignore
                                     (Ojs.call x339 "push"
                                        [|(Ojs.float_to_js x340)|])
                               | None -> ());
                              x339))|])
    let (entries : t -> (float * bigint) IterableIterator.t) =
      fun (x343 : t) ->
        IterableIterator.t_of_js
          (fun (x344 : Ojs.t) ->
             let x345 = x344 in
             ((Ojs.float_of_js (Ojs.array_get x345 0)),
               (bigint_of_js (Ojs.array_get x345 1))))
          (Ojs.call (t_to_js x343) "entries" [||])
    let (every :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x353 : t) ->
        fun
          ~predicate:(x346 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x347 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x354 = t_to_js x353 in
                 Ojs.call (Ojs.get_prop_ascii x354 "every") "apply"
                   [|x354;((let x348 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x348 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x350 : Ojs.t) ->
                                         fun (x351 : Ojs.t) ->
                                           fun (x352 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x346
                                                  ~value:(bigint_of_js x350)
                                                  ~index:(Ojs.float_of_js
                                                            x351)
                                                  ~array:(t_of_js x352))))|]);
                            (match x347 with
                             | Some x349 ->
                                 ignore
                                   (Ojs.call x348 "push" [|(any_to_js x349)|])
                             | None -> ());
                            x348))|])
    let (fill :
      t -> value:bigint -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x361 : t) ->
        fun ~value:(x355 : bigint) ->
          fun ?start:(x356 : float option) ->
            fun ?end_:(x357 : float option) ->
              fun () ->
                t_of_js
                  (let x362 = t_to_js x361 in
                   Ojs.call (Ojs.get_prop_ascii x362 "fill") "apply"
                     [|x362;((let x358 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x358 "push" [|(bigint_to_js x355)|]);
                              (match x356 with
                               | Some x360 ->
                                   ignore
                                     (Ojs.call x358 "push"
                                        [|(Ojs.float_to_js x360)|])
                               | None -> ());
                              (match x357 with
                               | Some x359 ->
                                   ignore
                                     (Ojs.call x358 "push"
                                        [|(Ojs.float_to_js x359)|])
                               | None -> ());
                              x358))|])
    let (filter :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x370 : t) ->
        fun ~predicate:(x363 : value:bigint -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x364 : any option) ->
            fun () ->
              t_of_js
                (let x371 = t_to_js x370 in
                 Ojs.call (Ojs.get_prop_ascii x371 "filter") "apply"
                   [|x371;((let x365 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x365 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x367 : Ojs.t) ->
                                         fun (x368 : Ojs.t) ->
                                           fun (x369 : Ojs.t) ->
                                             any_to_js
                                               (x363
                                                  ~value:(bigint_of_js x367)
                                                  ~index:(Ojs.float_of_js
                                                            x368)
                                                  ~array:(t_of_js x369))))|]);
                            (match x364 with
                             | Some x366 ->
                                 ignore
                                   (Ojs.call x365 "push" [|(any_to_js x366)|])
                             | None -> ());
                            x365))|])
    let (find :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bigint or_undefined)
      =
      fun (x379 : t) ->
        fun
          ~predicate:(x372 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x373 : any option) ->
            fun () ->
              or_undefined_of_js bigint_of_js
                (let x380 = t_to_js x379 in
                 Ojs.call (Ojs.get_prop_ascii x380 "find") "apply"
                   [|x380;((let x374 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x374 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x376 : Ojs.t) ->
                                         fun (x377 : Ojs.t) ->
                                           fun (x378 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x372
                                                  ~value:(bigint_of_js x376)
                                                  ~index:(Ojs.float_of_js
                                                            x377)
                                                  ~array:(t_of_js x378))))|]);
                            (match x373 with
                             | Some x375 ->
                                 ignore
                                   (Ojs.call x374 "push" [|(any_to_js x375)|])
                             | None -> ());
                            x374))|])
    let (findIndex :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x389 : t) ->
        fun
          ~predicate:(x382 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x383 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x390 = t_to_js x389 in
                 Ojs.call (Ojs.get_prop_ascii x390 "findIndex") "apply"
                   [|x390;((let x384 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x384 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x386 : Ojs.t) ->
                                         fun (x387 : Ojs.t) ->
                                           fun (x388 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x382
                                                  ~value:(bigint_of_js x386)
                                                  ~index:(Ojs.float_of_js
                                                            x387)
                                                  ~array:(t_of_js x388))))|]);
                            (match x383 with
                             | Some x385 ->
                                 ignore
                                   (Ojs.call x384 "push" [|(any_to_js x385)|])
                             | None -> ());
                            x384))|])
    let (forEach :
      t ->
        callbackfn:(value:bigint -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x398 : t) ->
        fun
          ~callbackfn:(x391 : value:bigint -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x392 : any option) ->
            fun () ->
              ignore
                (let x399 = t_to_js x398 in
                 Ojs.call (Ojs.get_prop_ascii x399 "forEach") "apply"
                   [|x399;((let x393 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x393 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x395 : Ojs.t) ->
                                         fun (x396 : Ojs.t) ->
                                           fun (x397 : Ojs.t) ->
                                             x391 ~value:(bigint_of_js x395)
                                               ~index:(Ojs.float_of_js x396)
                                               ~array:(t_of_js x397)))|]);
                            (match x392 with
                             | Some x394 ->
                                 ignore
                                   (Ojs.call x393 "push" [|(any_to_js x394)|])
                             | None -> ());
                            x393))|])
    let (includes :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> bool) =
      fun (x404 : t) ->
        fun ~searchElement:(x400 : bigint) ->
          fun ?fromIndex:(x401 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x405 = t_to_js x404 in
                 Ojs.call (Ojs.get_prop_ascii x405 "includes") "apply"
                   [|x405;((let x402 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x402 "push" [|(bigint_to_js x400)|]);
                            (match x401 with
                             | Some x403 ->
                                 ignore
                                   (Ojs.call x402 "push"
                                      [|(Ojs.float_to_js x403)|])
                             | None -> ());
                            x402))|])
    let (indexOf :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> float) =
      fun (x410 : t) ->
        fun ~searchElement:(x406 : bigint) ->
          fun ?fromIndex:(x407 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x411 = t_to_js x410 in
                 Ojs.call (Ojs.get_prop_ascii x411 "indexOf") "apply"
                   [|x411;((let x408 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x408 "push" [|(bigint_to_js x406)|]);
                            (match x407 with
                             | Some x409 ->
                                 ignore
                                   (Ojs.call x408 "push"
                                      [|(Ojs.float_to_js x409)|])
                             | None -> ());
                            x408))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x415 : t) ->
        fun ?separator:(x412 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x416 = t_to_js x415 in
               Ojs.call (Ojs.get_prop_ascii x416 "join") "apply"
                 [|x416;((let x413 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x412 with
                           | Some x414 ->
                               ignore
                                 (Ojs.call x413 "push"
                                    [|(Ojs.string_to_js x414)|])
                           | None -> ());
                          x413))|])
    let (keys : t -> float IterableIterator.t) =
      fun (x417 : t) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x417) "keys" [||])
    let (lastIndexOf :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> float) =
      fun (x423 : t) ->
        fun ~searchElement:(x419 : bigint) ->
          fun ?fromIndex:(x420 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x424 = t_to_js x423 in
                 Ojs.call (Ojs.get_prop_ascii x424 "lastIndexOf") "apply"
                   [|x424;((let x421 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x421 "push" [|(bigint_to_js x419)|]);
                            (match x420 with
                             | Some x422 ->
                                 ignore
                                   (Ojs.call x421 "push"
                                      [|(Ojs.float_to_js x422)|])
                             | None -> ());
                            x421))|])
    let (get_length : t -> float) =
      fun (x425 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x425) "length")
    let (map :
      t ->
        callbackfn:(value:bigint -> index:float -> array:t -> bigint) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x433 : t) ->
        fun
          ~callbackfn:(x426 :
                        value:bigint -> index:float -> array:t -> bigint)
          ->
          fun ?thisArg:(x427 : any option) ->
            fun () ->
              t_of_js
                (let x434 = t_to_js x433 in
                 Ojs.call (Ojs.get_prop_ascii x434 "map") "apply"
                   [|x434;((let x428 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x428 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x430 : Ojs.t) ->
                                         fun (x431 : Ojs.t) ->
                                           fun (x432 : Ojs.t) ->
                                             bigint_to_js
                                               (x426
                                                  ~value:(bigint_of_js x430)
                                                  ~index:(Ojs.float_of_js
                                                            x431)
                                                  ~array:(t_of_js x432))))|]);
                            (match x427 with
                             | Some x429 ->
                                 ignore
                                   (Ojs.call x428 "push" [|(any_to_js x429)|])
                             | None -> ());
                            x428))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x440 : t) ->
        fun
          ~callbackfn:(x435 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x440) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x436 : Ojs.t) ->
                       fun (x437 : Ojs.t) ->
                         fun (x438 : Ojs.t) ->
                           fun (x439 : Ojs.t) ->
                             bigint_to_js
                               (x435 ~previousValue:(bigint_of_js x436)
                                  ~currentValue:(bigint_of_js x437)
                                  ~currentIndex:(Ojs.float_of_js x438)
                                  ~array:(t_of_js x439))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x447 : t) ->
        fun
          ~callbackfn:(x441 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x446 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x447) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x442 : Ojs.t) ->
                         fun (x443 : Ojs.t) ->
                           fun (x444 : Ojs.t) ->
                             fun (x445 : Ojs.t) ->
                               Obj.magic
                                 (x441 ~previousValue:(Obj.magic x442)
                                    ~currentValue:(bigint_of_js x443)
                                    ~currentIndex:(Ojs.float_of_js x444)
                                    ~array:(t_of_js x445))));(Obj.magic x446)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x453 : t) ->
        fun
          ~callbackfn:(x448 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x453) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x449 : Ojs.t) ->
                       fun (x450 : Ojs.t) ->
                         fun (x451 : Ojs.t) ->
                           fun (x452 : Ojs.t) ->
                             bigint_to_js
                               (x448 ~previousValue:(bigint_of_js x449)
                                  ~currentValue:(bigint_of_js x450)
                                  ~currentIndex:(Ojs.float_of_js x451)
                                  ~array:(t_of_js x452))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x460 : t) ->
        fun
          ~callbackfn:(x454 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x459 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x460) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x455 : Ojs.t) ->
                         fun (x456 : Ojs.t) ->
                           fun (x457 : Ojs.t) ->
                             fun (x458 : Ojs.t) ->
                               Obj.magic
                                 (x454 ~previousValue:(Obj.magic x455)
                                    ~currentValue:(bigint_of_js x456)
                                    ~currentIndex:(Ojs.float_of_js x457)
                                    ~array:(t_of_js x458))));(Obj.magic x459)|])
    let (reverse : t -> t) =
      fun (x461 : t) -> t_of_js (Ojs.call (t_to_js x461) "reverse" [||])
    let (set_ : t -> array:bigint Array.t -> ?offset:float -> unit -> unit) =
      fun (x467 : t) ->
        fun ~array:(x462 : bigint Array.t) ->
          fun ?offset:(x463 : float option) ->
            fun () ->
              ignore
                (let x468 = t_to_js x467 in
                 Ojs.call (Ojs.get_prop_ascii x468 "set") "apply"
                   [|x468;((let x464 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x464 "push"
                                 [|(Array.t_to_js bigint_to_js x462)|]);
                            (match x463 with
                             | Some x465 ->
                                 ignore
                                   (Ojs.call x464 "push"
                                      [|(Ojs.float_to_js x465)|])
                             | None -> ());
                            x464))|])
    let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x474 : t) ->
        fun ?start:(x469 : float option) ->
          fun ?end_:(x470 : float option) ->
            fun () ->
              t_of_js
                (let x475 = t_to_js x474 in
                 Ojs.call (Ojs.get_prop_ascii x475 "slice") "apply"
                   [|x475;((let x471 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x469 with
                             | Some x473 ->
                                 ignore
                                   (Ojs.call x471 "push"
                                      [|(Ojs.float_to_js x473)|])
                             | None -> ());
                            (match x470 with
                             | Some x472 ->
                                 ignore
                                   (Ojs.call x471 "push"
                                      [|(Ojs.float_to_js x472)|])
                             | None -> ());
                            x471))|])
    let (some :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x483 : t) ->
        fun
          ~predicate:(x476 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x477 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x484 = t_to_js x483 in
                 Ojs.call (Ojs.get_prop_ascii x484 "some") "apply"
                   [|x484;((let x478 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x478 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x480 : Ojs.t) ->
                                         fun (x481 : Ojs.t) ->
                                           fun (x482 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x476
                                                  ~value:(bigint_of_js x480)
                                                  ~index:(Ojs.float_of_js
                                                            x481)
                                                  ~array:(t_of_js x482))))|]);
                            (match x477 with
                             | Some x479 ->
                                 ignore
                                   (Ojs.call x478 "push" [|(any_to_js x479)|])
                             | None -> ());
                            x478))|])
    let (sort :
      t -> ?compareFn:(a:bigint -> b:bigint -> bigint or_number) -> unit -> t)
      =
      fun (x491 : t) ->
        fun
          ?compareFn:(x485 :
                       (a:bigint -> b:bigint -> bigint or_number) option)
          ->
          fun () ->
            t_of_js
              (let x492 = t_to_js x491 in
               Ojs.call (Ojs.get_prop_ascii x492 "sort") "apply"
                 [|x492;((let x486 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x485 with
                           | Some x487 ->
                               ignore
                                 (Ojs.call x486 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x488 : Ojs.t) ->
                                            fun (x489 : Ojs.t) ->
                                              or_number_to_js bigint_to_js
                                                (x487 ~a:(bigint_of_js x488)
                                                   ~b:(bigint_of_js x489))))|])
                           | None -> ());
                          x486))|])
    let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
      fun (x498 : t) ->
        fun ?begin_:(x493 : float option) ->
          fun ?end_:(x494 : float option) ->
            fun () ->
              t_of_js
                (let x499 = t_to_js x498 in
                 Ojs.call (Ojs.get_prop_ascii x499 "subarray") "apply"
                   [|x499;((let x495 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x493 with
                             | Some x497 ->
                                 ignore
                                   (Ojs.call x495 "push"
                                      [|(Ojs.float_to_js x497)|])
                             | None -> ());
                            (match x494 with
                             | Some x496 ->
                                 ignore
                                   (Ojs.call x495 "push"
                                      [|(Ojs.float_to_js x496)|])
                             | None -> ());
                            x495))|])
    let (toLocaleString : t -> string) =
      fun (x500 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x500) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x501 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x501) "toString" [||])
    let (valueOf : t -> t) =
      fun (x502 : t) -> t_of_js (Ojs.call (t_to_js x502) "valueOf" [||])
    let (values : t -> bigint IterableIterator.t) =
      fun (x503 : t) ->
        IterableIterator.t_of_js bigint_of_js
          (Ojs.call (t_to_js x503) "values" [||])
    let (get : t -> float -> bigint) =
      fun (x505 : t) ->
        fun (x506 : float) ->
          bigint_of_js (Ojs.get_prop (t_to_js x505) (Ojs.float_to_js x506))
    let (set : t -> float -> bigint -> unit) =
      fun (x507 : t) ->
        fun (x508 : float) ->
          fun (x509 : bigint) ->
            Ojs.set_prop (t_to_js x507) (Ojs.float_to_js x508)
              (bigint_to_js x509)
    let (create : ?length:float -> unit -> _BigUint64Array) =
      fun ?length:(x510 : float option) ->
        fun () ->
          _BigUint64Array_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
               (let x511 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x510 with
                 | Some x512 ->
                     ignore (Ojs.call x511 "push" [|(Ojs.float_to_js x512)|])
                 | None -> ());
                x511))
    let (create' : array:bigint Iterable.t -> _BigUint64Array) =
      fun ~array:(x513 : bigint Iterable.t) ->
        _BigUint64Array_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
             [|(Iterable.t_to_js bigint_to_js x513)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:float -> ?length:float -> unit -> _BigUint64Array)
      =
      fun (x515 : t) ->
        fun ~buffer:(x516 : ArrayBuffer.t) ->
          fun ?byteOffset:(x517 : float option) ->
            fun ?length:(x518 : float option) ->
              fun () ->
                _BigUint64Array_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
                     (let x519 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x519 "push" [|(t_to_js x515)|]);
                      ignore
                        (Ojs.call x519 "push" [|(ArrayBuffer.t_to_js x516)|]);
                      (match x517 with
                       | Some x521 ->
                           ignore
                             (Ojs.call x519 "push" [|(Ojs.float_to_js x521)|])
                       | None -> ());
                      (match x518 with
                       | Some x520 ->
                           ignore
                             (Ojs.call x519 "push" [|(Ojs.float_to_js x520)|])
                       | None -> ());
                      x519))
    let (of_ : items:bigint list -> _BigUint64Array) =
      fun ~items:(x522 : bigint list) ->
        _BigUint64Array_of_js
          (let x525 = Ojs.get_prop_ascii Ojs.global "BigUint64Array" in
           Ojs.call (Ojs.get_prop_ascii x525 "of") "apply"
             [|x525;((let x523 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      List.iter
                        (fun (x524 : bigint) ->
                           ignore
                             (Ojs.call x523 "push" [|(bigint_to_js x524)|]))
                        x522;
                      x523))|])
    let (from : array:bigint Array.t -> _BigUint64Array) =
      fun ~array:(x526 : bigint Array.t) ->
        _BigUint64Array_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "BigUint64Array") "from"
             [|(Array.t_to_js bigint_to_js x526)|])
    let (from' :
      array:'U Array.t ->
        mapfn:(v:'U -> k:float -> bigint) ->
          ?thisArg:any -> unit -> _BigUint64Array)
      =
      fun ~array:(x528 : 'U Array.t) ->
        fun ~mapfn:(x529 : v:'U -> k:float -> bigint) ->
          fun ?thisArg:(x530 : any option) ->
            fun () ->
              _BigUint64Array_of_js
                (let x536 = Ojs.get_prop_ascii Ojs.global "BigUint64Array" in
                 Ojs.call (Ojs.get_prop_ascii x536 "from") "apply"
                   [|x536;((let x531 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x531 "push"
                                 [|(Array.t_to_js Obj.magic x528)|]);
                            ignore
                              (Ojs.call x531 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x533 : Ojs.t) ->
                                         fun (x534 : Ojs.t) ->
                                           bigint_to_js
                                             (x529 ~v:(Obj.magic x533)
                                                ~k:(Ojs.float_of_js x534))))|]);
                            (match x530 with
                             | Some x532 ->
                                 ignore
                                   (Ojs.call x531 "push" [|(any_to_js x532)|])
                             | None -> ());
                            x531))|])
  end
module BigUint64ArrayConstructor =
  struct
    type t = _BigUint64ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x538 : Ojs.t) -> _BigUint64ArrayConstructor_of_js x538
    and t_to_js : t -> Ojs.t =
      fun (x537 : _BigUint64ArrayConstructor) ->
        _BigUint64ArrayConstructor_to_js x537
    let (get_prototype : t -> _BigUint64Array) =
      fun (x539 : t) ->
        _BigUint64Array_of_js (Ojs.get_prop_ascii (t_to_js x539) "prototype")
    let (create : t -> ?length:float -> unit -> _BigUint64Array) =
      fun (x543 : t) ->
        fun ?length:(x540 : float option) ->
          fun () ->
            _BigUint64Array_of_js
              (Ojs.new_obj_arr (t_to_js x543)
                 (let x541 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x540 with
                   | Some x542 ->
                       ignore
                         (Ojs.call x541 "push" [|(Ojs.float_to_js x542)|])
                   | None -> ());
                  x541))
    let (create' : t -> array:bigint Iterable.t -> _BigUint64Array) =
      fun (x546 : t) ->
        fun ~array:(x544 : bigint Iterable.t) ->
          _BigUint64Array_of_js
            (Ojs.new_obj (t_to_js x546)
               [|(Iterable.t_to_js bigint_to_js x544)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:float -> ?length:float -> unit -> _BigUint64Array)
      =
      fun (x553 : t) ->
        fun ~buffer:(x547 : ArrayBuffer.t) ->
          fun ?byteOffset:(x548 : float option) ->
            fun ?length:(x549 : float option) ->
              fun () ->
                _BigUint64Array_of_js
                  (Ojs.new_obj_arr (t_to_js x553)
                     (let x550 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x550 "push" [|(ArrayBuffer.t_to_js x547)|]);
                      (match x548 with
                       | Some x552 ->
                           ignore
                             (Ojs.call x550 "push" [|(Ojs.float_to_js x552)|])
                       | None -> ());
                      (match x549 with
                       | Some x551 ->
                           ignore
                             (Ojs.call x550 "push" [|(Ojs.float_to_js x551)|])
                       | None -> ());
                      x550))
    let (get_BYTES_PER_ELEMENT : t -> float) =
      fun (x554 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x554) "BYTES_PER_ELEMENT")
    let (of_ : t -> items:bigint list -> _BigUint64Array) =
      fun (x558 : t) ->
        fun ~items:(x555 : bigint list) ->
          _BigUint64Array_of_js
            (let x559 = t_to_js x558 in
             Ojs.call (Ojs.get_prop_ascii x559 "of") "apply"
               [|x559;((let x556 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x557 : bigint) ->
                             ignore
                               (Ojs.call x556 "push" [|(bigint_to_js x557)|]))
                          x555;
                        x556))|])
    let (from : t -> array:bigint Array.t -> _BigUint64Array) =
      fun (x562 : t) ->
        fun ~array:(x560 : bigint Array.t) ->
          _BigUint64Array_of_js
            (Ojs.call (t_to_js x562) "from"
               [|(Array.t_to_js bigint_to_js x560)|])
    let (from' :
      t ->
        array:'U Array.t ->
          mapfn:(v:'U -> k:float -> bigint) ->
            ?thisArg:any -> unit -> _BigUint64Array)
      =
      fun (x571 : t) ->
        fun ~array:(x563 : 'U Array.t) ->
          fun ~mapfn:(x564 : v:'U -> k:float -> bigint) ->
            fun ?thisArg:(x565 : any option) ->
              fun () ->
                _BigUint64Array_of_js
                  (let x572 = t_to_js x571 in
                   Ojs.call (Ojs.get_prop_ascii x572 "from") "apply"
                     [|x572;((let x566 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x566 "push"
                                   [|(Array.t_to_js Obj.magic x563)|]);
                              ignore
                                (Ojs.call x566 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x568 : Ojs.t) ->
                                           fun (x569 : Ojs.t) ->
                                             bigint_to_js
                                               (x564 ~v:(Obj.magic x568)
                                                  ~k:(Ojs.float_of_js x569))))|]);
                              (match x565 with
                               | Some x567 ->
                                   ignore
                                     (Ojs.call x566 "push"
                                        [|(any_to_js x567)|])
                               | None -> ());
                              x566))|])
  end
let (bigUint64Array : _BigUint64ArrayConstructor) =
  _BigUint64ArrayConstructor_of_js
    (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
module DataView =
  struct
    include struct include DataView end
    let (getBigInt64 :
      t -> byteOffset:float -> ?littleEndian:bool -> unit -> bigint) =
      fun (x577 : t) ->
        fun ~byteOffset:(x573 : float) ->
          fun ?littleEndian:(x574 : bool option) ->
            fun () ->
              bigint_of_js
                (let x578 = t_to_js x577 in
                 Ojs.call (Ojs.get_prop_ascii x578 "getBigInt64") "apply"
                   [|x578;((let x575 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x575 "push"
                                 [|(Ojs.float_to_js x573)|]);
                            (match x574 with
                             | Some x576 ->
                                 ignore
                                   (Ojs.call x575 "push"
                                      [|(Ojs.bool_to_js x576)|])
                             | None -> ());
                            x575))|])
    let (getBigUint64 :
      t -> byteOffset:float -> ?littleEndian:bool -> unit -> bigint) =
      fun (x583 : t) ->
        fun ~byteOffset:(x579 : float) ->
          fun ?littleEndian:(x580 : bool option) ->
            fun () ->
              bigint_of_js
                (let x584 = t_to_js x583 in
                 Ojs.call (Ojs.get_prop_ascii x584 "getBigUint64") "apply"
                   [|x584;((let x581 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x581 "push"
                                 [|(Ojs.float_to_js x579)|]);
                            (match x580 with
                             | Some x582 ->
                                 ignore
                                   (Ojs.call x581 "push"
                                      [|(Ojs.bool_to_js x582)|])
                             | None -> ());
                            x581))|])
    let (setBigInt64 :
      t ->
        byteOffset:float ->
          value:bigint -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x590 : t) ->
        fun ~byteOffset:(x585 : float) ->
          fun ~value:(x586 : bigint) ->
            fun ?littleEndian:(x587 : bool option) ->
              fun () ->
                ignore
                  (let x591 = t_to_js x590 in
                   Ojs.call (Ojs.get_prop_ascii x591 "setBigInt64") "apply"
                     [|x591;((let x588 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x588 "push"
                                   [|(Ojs.float_to_js x585)|]);
                              ignore
                                (Ojs.call x588 "push" [|(bigint_to_js x586)|]);
                              (match x587 with
                               | Some x589 ->
                                   ignore
                                     (Ojs.call x588 "push"
                                        [|(Ojs.bool_to_js x589)|])
                               | None -> ());
                              x588))|])
    let (setBigUint64 :
      t ->
        byteOffset:float ->
          value:bigint -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x597 : t) ->
        fun ~byteOffset:(x592 : float) ->
          fun ~value:(x593 : bigint) ->
            fun ?littleEndian:(x594 : bool option) ->
              fun () ->
                ignore
                  (let x598 = t_to_js x597 in
                   Ojs.call (Ojs.get_prop_ascii x598 "setBigUint64") "apply"
                     [|x598;((let x595 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x595 "push"
                                   [|(Ojs.float_to_js x592)|]);
                              ignore
                                (Ojs.call x595 "push" [|(bigint_to_js x593)|]);
                              (match x594 with
                               | Some x596 ->
                                   ignore
                                     (Ojs.call x595 "push"
                                        [|(Ojs.bool_to_js x596)|])
                               | None -> ());
                              x595))|])
  end
module Intl =
  struct
    module NumberFormat =
      struct
        include struct include NumberFormat end
        let (format : t -> value:bigint or_number -> string) =
          fun (x601 : t) ->
            fun ~value:(x599 : bigint or_number) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x601) "format"
                   [|(or_number_to_js bigint_to_js x599)|])
        let (resolvedOptions : t -> ResolvedNumberFormatOptions.t) =
          fun (x602 : t) ->
            ResolvedNumberFormatOptions.t_of_js
              (Ojs.call (t_to_js x602) "resolvedOptions" [||])
      end
  end
include struct include Intl end
