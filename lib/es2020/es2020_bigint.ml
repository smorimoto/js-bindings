[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2019
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type _BigInt = bigint
        and _BigInt64Array = [ `BigInt64Array ] intf
        and _BigInt64ArrayConstructor = [ `BigInt64ArrayConstructor ] intf
        and _BigIntConstructor = [ `BigIntConstructor ] intf
        and _BigIntToLocaleStringOptions =
          [ `BigIntToLocaleStringOptions ] intf
        and _BigUint64Array = [ `BigUint64Array ] intf
        and _BigUint64ArrayConstructor = [ `BigUint64ArrayConstructor ] intf
        and _DataView = [ `DataView ] intf
        and _Intl_NumberFormat = [ `Intl_NumberFormat ] intf
        let rec _BigInt_of_js : Ojs.t -> _BigInt =
          fun (x2 : Ojs.t) -> bigint_of_js x2
        and _BigInt_to_js : _BigInt -> Ojs.t =
          fun (x1 : bigint) -> bigint_to_js x1
        and _BigInt64Array_of_js : Ojs.t -> _BigInt64Array = Obj.magic
        and _BigInt64Array_to_js : _BigInt64Array -> Ojs.t = Obj.magic
        and _BigInt64ArrayConstructor_of_js :
          Ojs.t -> _BigInt64ArrayConstructor = Obj.magic
        and _BigInt64ArrayConstructor_to_js :
          _BigInt64ArrayConstructor -> Ojs.t = Obj.magic
        and _BigIntConstructor_of_js : Ojs.t -> _BigIntConstructor =
          Obj.magic
        and _BigIntConstructor_to_js : _BigIntConstructor -> Ojs.t =
          Obj.magic
        and _BigIntToLocaleStringOptions_of_js :
          Ojs.t -> _BigIntToLocaleStringOptions = Obj.magic
        and _BigIntToLocaleStringOptions_to_js :
          _BigIntToLocaleStringOptions -> Ojs.t = Obj.magic
        and _BigUint64Array_of_js : Ojs.t -> _BigUint64Array = Obj.magic
        and _BigUint64Array_to_js : _BigUint64Array -> Ojs.t = Obj.magic
        and _BigUint64ArrayConstructor_of_js :
          Ojs.t -> _BigUint64ArrayConstructor = Obj.magic
        and _BigUint64ArrayConstructor_to_js :
          _BigUint64ArrayConstructor -> Ojs.t = Obj.magic
        and _DataView_of_js : Ojs.t -> _DataView = Obj.magic
        and _DataView_to_js : _DataView -> Ojs.t = Obj.magic
        and _Intl_NumberFormat_of_js : Ojs.t -> _Intl_NumberFormat =
          Obj.magic
        and _Intl_NumberFormat_to_js : _Intl_NumberFormat -> Ojs.t =
          Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module BigIntToLocaleStringOptions =
  struct
    type t = _BigIntToLocaleStringOptions
    let rec t_of_js : Ojs.t -> t =
      fun (x4 : Ojs.t) -> _BigIntToLocaleStringOptions_of_js x4
    and t_to_js : t -> Ojs.t =
      fun (x3 : _BigIntToLocaleStringOptions) ->
        _BigIntToLocaleStringOptions_to_js x3
    let (get_localeMatcher : t -> string) =
      fun (x5 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5) "localeMatcher")
    let (set_localeMatcher : t -> string -> unit) =
      fun (x6 : t) ->
        fun (x7 : string) ->
          Ojs.set_prop_ascii (t_to_js x6) "localeMatcher"
            (Ojs.string_to_js x7)
    let (get_style : t -> string) =
      fun (x8 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x8) "style")
    let (set_style : t -> string -> unit) =
      fun (x9 : t) ->
        fun (x10 : string) ->
          Ojs.set_prop_ascii (t_to_js x9) "style" (Ojs.string_to_js x10)
    let (get_numberingSystem : t -> string) =
      fun (x11 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x11) "numberingSystem")
    let (set_numberingSystem : t -> string -> unit) =
      fun (x12 : t) ->
        fun (x13 : string) ->
          Ojs.set_prop_ascii (t_to_js x12) "numberingSystem"
            (Ojs.string_to_js x13)
    let (get_unit : t -> string) =
      fun (x14 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x14) "unit")
    let (set_unit : t -> string -> unit) =
      fun (x15 : t) ->
        fun (x16 : string) ->
          Ojs.set_prop_ascii (t_to_js x15) "unit" (Ojs.string_to_js x16)
    let (get_unitDisplay : t -> string) =
      fun (x17 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x17) "unitDisplay")
    let (set_unitDisplay : t -> string -> unit) =
      fun (x18 : t) ->
        fun (x19 : string) ->
          Ojs.set_prop_ascii (t_to_js x18) "unitDisplay"
            (Ojs.string_to_js x19)
    let (get_currency : t -> string) =
      fun (x20 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x20) "currency")
    let (set_currency : t -> string -> unit) =
      fun (x21 : t) ->
        fun (x22 : string) ->
          Ojs.set_prop_ascii (t_to_js x21) "currency" (Ojs.string_to_js x22)
    let (get_currencyDisplay : t -> string) =
      fun (x23 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x23) "currencyDisplay")
    let (set_currencyDisplay : t -> string -> unit) =
      fun (x24 : t) ->
        fun (x25 : string) ->
          Ojs.set_prop_ascii (t_to_js x24) "currencyDisplay"
            (Ojs.string_to_js x25)
    let (get_useGrouping : t -> bool) =
      fun (x26 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x26) "useGrouping")
    let (set_useGrouping : t -> bool -> unit) =
      fun (x27 : t) ->
        fun (x28 : bool) ->
          Ojs.set_prop_ascii (t_to_js x27) "useGrouping" (Ojs.bool_to_js x28)
    let (get_minimumIntegerDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ])
      =
      fun (x29 : t) ->
        let x30 = Ojs.get_prop_ascii (t_to_js x29) "minimumIntegerDigits" in
        match Ojs.int_of_js x30 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | _ -> assert false
    let (set_minimumIntegerDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ] -> unit)
      =
      fun (x31 : t) ->
        fun
          (x32 :
            [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
            | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | 
              `L_n_18 
            | `L_n_19  | `L_n_20  | `L_n_21 ])
          ->
          Ojs.set_prop_ascii (t_to_js x31) "minimumIntegerDigits"
            (match x32 with
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20"
             | `L_n_21 -> Ojs.string_to_js "LN21")
    let (get_minimumFractionDigits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ])
      =
      fun (x33 : t) ->
        let x34 = Ojs.get_prop_ascii (t_to_js x33) "minimumFractionDigits" in
        match Ojs.int_of_js x34 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | _ -> assert false
    let (set_minimumFractionDigits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ] -> unit)
      =
      fun (x35 : t) ->
        fun
          (x36 :
            [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5 
            | `L_n_6  | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11 
            | `L_n_12  | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | 
              `L_n_17 
            | `L_n_18  | `L_n_19  | `L_n_20 ])
          ->
          Ojs.set_prop_ascii (t_to_js x35) "minimumFractionDigits"
            (match x36 with
             | `L_n_0 -> Ojs.string_to_js "LN0"
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20")
    let (get_maximumFractionDigits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ])
      =
      fun (x37 : t) ->
        let x38 = Ojs.get_prop_ascii (t_to_js x37) "maximumFractionDigits" in
        match Ojs.int_of_js x38 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | _ -> assert false
    let (set_maximumFractionDigits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ] -> unit)
      =
      fun (x39 : t) ->
        fun
          (x40 :
            [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5 
            | `L_n_6  | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11 
            | `L_n_12  | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | 
              `L_n_17 
            | `L_n_18  | `L_n_19  | `L_n_20 ])
          ->
          Ojs.set_prop_ascii (t_to_js x39) "maximumFractionDigits"
            (match x40 with
             | `L_n_0 -> Ojs.string_to_js "LN0"
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20")
    let (get_minimumSignificantDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ])
      =
      fun (x41 : t) ->
        let x42 = Ojs.get_prop_ascii (t_to_js x41) "minimumSignificantDigits" in
        match Ojs.int_of_js x42 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | _ -> assert false
    let (set_minimumSignificantDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ] -> unit)
      =
      fun (x43 : t) ->
        fun
          (x44 :
            [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
            | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | 
              `L_n_18 
            | `L_n_19  | `L_n_20  | `L_n_21 ])
          ->
          Ojs.set_prop_ascii (t_to_js x43) "minimumSignificantDigits"
            (match x44 with
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20"
             | `L_n_21 -> Ojs.string_to_js "LN21")
    let (get_maximumSignificantDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ])
      =
      fun (x45 : t) ->
        let x46 = Ojs.get_prop_ascii (t_to_js x45) "maximumSignificantDigits" in
        match Ojs.int_of_js x46 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | _ -> assert false
    let (set_maximumSignificantDigits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ] -> unit)
      =
      fun (x47 : t) ->
        fun
          (x48 :
            [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
            | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | 
              `L_n_18 
            | `L_n_19  | `L_n_20  | `L_n_21 ])
          ->
          Ojs.set_prop_ascii (t_to_js x47) "maximumSignificantDigits"
            (match x48 with
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20"
             | `L_n_21 -> Ojs.string_to_js "LN21")
    let (get_notation : t -> string) =
      fun (x49 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x49) "notation")
    let (set_notation : t -> string -> unit) =
      fun (x50 : t) ->
        fun (x51 : string) ->
          Ojs.set_prop_ascii (t_to_js x50) "notation" (Ojs.string_to_js x51)
    let (get_compactDisplay : t -> string) =
      fun (x52 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x52) "compactDisplay")
    let (set_compactDisplay : t -> string -> unit) =
      fun (x53 : t) ->
        fun (x54 : string) ->
          Ojs.set_prop_ascii (t_to_js x53) "compactDisplay"
            (Ojs.string_to_js x54)
  end
module BigInt =
  struct
    type t = _BigInt
    let rec t_of_js : Ojs.t -> t = fun (x56 : Ojs.t) -> _BigInt_of_js x56
    and t_to_js : t -> Ojs.t = fun (x55 : _BigInt) -> _BigInt_to_js x55
    let (toString : t -> ?radix:float -> unit -> string) =
      fun (x60 : t) ->
        fun ?radix:(x57 : float option) ->
          fun () ->
            Ojs.string_of_js
              (let x61 = t_to_js x60 in
               Ojs.call (Ojs.get_prop_ascii x61 "toString") "apply"
                 [|x61;((let x58 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x57 with
                          | Some x59 ->
                              ignore
                                (Ojs.call x58 "push"
                                   [|(Ojs.float_to_js x59)|])
                          | None -> ());
                         x58))|])
    let (toLocaleString :
      t ->
        ?locales:string ->
          ?options:_BigIntToLocaleStringOptions -> unit -> string)
      =
      fun (x67 : t) ->
        fun ?locales:(x62 : string option) ->
          fun ?options:(x63 : _BigIntToLocaleStringOptions option) ->
            fun () ->
              Ojs.string_of_js
                (let x68 = t_to_js x67 in
                 Ojs.call (Ojs.get_prop_ascii x68 "toLocaleString") "apply"
                   [|x68;((let x64 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x62 with
                            | Some x66 ->
                                ignore
                                  (Ojs.call x64 "push"
                                     [|(Ojs.string_to_js x66)|])
                            | None -> ());
                           (match x63 with
                            | Some x65 ->
                                ignore
                                  (Ojs.call x64 "push"
                                     [|(_BigIntToLocaleStringOptions_to_js
                                          x65)|])
                            | None -> ());
                           x64))|])
    let (valueOf : t -> bigint) =
      fun (x69 : t) -> bigint_of_js (Ojs.call (t_to_js x69) "valueOf" [||])
  end
module BigIntConstructor =
  struct
    type t = _BigIntConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x71 : Ojs.t) -> _BigIntConstructor_of_js x71
    and t_to_js : t -> Ojs.t =
      fun (x70 : _BigIntConstructor) -> _BigIntConstructor_to_js x70
    let (apply : t -> ?value:any -> unit -> bigint) =
      fun (x75 : t) ->
        fun ?value:(x72 : any option) ->
          fun () ->
            bigint_of_js
              (Ojs.call (t_to_js x75) "apply"
                 [|Ojs.null;((let x73 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x72 with
                               | Some x74 ->
                                   ignore
                                     (Ojs.call x73 "push" [|(any_to_js x74)|])
                               | None -> ());
                              x73))|])
    let (get_prototype : t -> _BigInt) =
      fun (x76 : t) ->
        _BigInt_of_js (Ojs.get_prop_ascii (t_to_js x76) "prototype")
    let (asIntN : t -> bits:float -> int:bigint -> bigint) =
      fun (x79 : t) ->
        fun ~bits:(x77 : float) ->
          fun ~int:(x78 : bigint) ->
            bigint_of_js
              (Ojs.call (t_to_js x79) "asIntN"
                 [|(Ojs.float_to_js x77);(bigint_to_js x78)|])
    let (asUintN : t -> bits:float -> int:bigint -> bigint) =
      fun (x82 : t) ->
        fun ~bits:(x80 : float) ->
          fun ~int:(x81 : bigint) ->
            bigint_of_js
              (Ojs.call (t_to_js x82) "asUintN"
                 [|(Ojs.float_to_js x80);(bigint_to_js x81)|])
  end
let (bigInt : _BigIntConstructor) =
  _BigIntConstructor_of_js (Ojs.get_prop_ascii Ojs.global "BigInt")
module BigInt64Array =
  struct
    type t = _BigInt64Array
    let rec t_of_js : Ojs.t -> t =
      fun (x84 : Ojs.t) -> _BigInt64Array_of_js x84
    and t_to_js : t -> Ojs.t =
      fun (x83 : _BigInt64Array) -> _BigInt64Array_to_js x83
    let (get_BYTES_PER_ELEMENT : t -> float) =
      fun (x85 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x85) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x86 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x86) "buffer")
    let (get_byteLength : t -> float) =
      fun (x87 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x87) "byteLength")
    let (get_byteOffset : t -> float) =
      fun (x88 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x88) "byteOffset")
    let (copyWithin :
      t -> target:float -> start:float -> ?end_:float -> unit -> t) =
      fun (x94 : t) ->
        fun ~target:(x89 : float) ->
          fun ~start:(x90 : float) ->
            fun ?end_:(x91 : float option) ->
              fun () ->
                t_of_js
                  (let x95 = t_to_js x94 in
                   Ojs.call (Ojs.get_prop_ascii x95 "copyWithin") "apply"
                     [|x95;((let x92 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x92 "push" [|(Ojs.float_to_js x89)|]);
                             ignore
                               (Ojs.call x92 "push" [|(Ojs.float_to_js x90)|]);
                             (match x91 with
                              | Some x93 ->
                                  ignore
                                    (Ojs.call x92 "push"
                                       [|(Ojs.float_to_js x93)|])
                              | None -> ());
                             x92))|])
    let (entries : t -> (float * bigint) IterableIterator.t) =
      fun (x96 : t) ->
        IterableIterator.t_of_js
          (fun (x97 : Ojs.t) ->
             let x98 = x97 in
             ((Ojs.float_of_js (Ojs.array_get x98 0)),
               (bigint_of_js (Ojs.array_get x98 1))))
          (Ojs.call (t_to_js x96) "entries" [||])
    let (every :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x106 : t) ->
        fun ~predicate:(x99 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x100 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x107 = t_to_js x106 in
                 Ojs.call (Ojs.get_prop_ascii x107 "every") "apply"
                   [|x107;((let x101 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x101 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x103 : Ojs.t) ->
                                         fun (x104 : Ojs.t) ->
                                           fun (x105 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x99
                                                  ~value:(bigint_of_js x103)
                                                  ~index:(Ojs.float_of_js
                                                            x104)
                                                  ~array:(t_of_js x105))))|]);
                            (match x100 with
                             | Some x102 ->
                                 ignore
                                   (Ojs.call x101 "push" [|(any_to_js x102)|])
                             | None -> ());
                            x101))|])
    let (fill :
      t -> value:bigint -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x114 : t) ->
        fun ~value:(x108 : bigint) ->
          fun ?start:(x109 : float option) ->
            fun ?end_:(x110 : float option) ->
              fun () ->
                t_of_js
                  (let x115 = t_to_js x114 in
                   Ojs.call (Ojs.get_prop_ascii x115 "fill") "apply"
                     [|x115;((let x111 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x111 "push" [|(bigint_to_js x108)|]);
                              (match x109 with
                               | Some x113 ->
                                   ignore
                                     (Ojs.call x111 "push"
                                        [|(Ojs.float_to_js x113)|])
                               | None -> ());
                              (match x110 with
                               | Some x112 ->
                                   ignore
                                     (Ojs.call x111 "push"
                                        [|(Ojs.float_to_js x112)|])
                               | None -> ());
                              x111))|])
    let (filter :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x123 : t) ->
        fun ~predicate:(x116 : value:bigint -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x117 : any option) ->
            fun () ->
              t_of_js
                (let x124 = t_to_js x123 in
                 Ojs.call (Ojs.get_prop_ascii x124 "filter") "apply"
                   [|x124;((let x118 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x118 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x120 : Ojs.t) ->
                                         fun (x121 : Ojs.t) ->
                                           fun (x122 : Ojs.t) ->
                                             any_to_js
                                               (x116
                                                  ~value:(bigint_of_js x120)
                                                  ~index:(Ojs.float_of_js
                                                            x121)
                                                  ~array:(t_of_js x122))))|]);
                            (match x117 with
                             | Some x119 ->
                                 ignore
                                   (Ojs.call x118 "push" [|(any_to_js x119)|])
                             | None -> ());
                            x118))|])
    let (find :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bigint or_undefined)
      =
      fun (x132 : t) ->
        fun
          ~predicate:(x125 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x126 : any option) ->
            fun () ->
              or_undefined_of_js bigint_of_js
                (let x133 = t_to_js x132 in
                 Ojs.call (Ojs.get_prop_ascii x133 "find") "apply"
                   [|x133;((let x127 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x127 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x129 : Ojs.t) ->
                                         fun (x130 : Ojs.t) ->
                                           fun (x131 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x125
                                                  ~value:(bigint_of_js x129)
                                                  ~index:(Ojs.float_of_js
                                                            x130)
                                                  ~array:(t_of_js x131))))|]);
                            (match x126 with
                             | Some x128 ->
                                 ignore
                                   (Ojs.call x127 "push" [|(any_to_js x128)|])
                             | None -> ());
                            x127))|])
    let (findIndex :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x142 : t) ->
        fun
          ~predicate:(x135 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x136 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x143 = t_to_js x142 in
                 Ojs.call (Ojs.get_prop_ascii x143 "findIndex") "apply"
                   [|x143;((let x137 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x137 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x139 : Ojs.t) ->
                                         fun (x140 : Ojs.t) ->
                                           fun (x141 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x135
                                                  ~value:(bigint_of_js x139)
                                                  ~index:(Ojs.float_of_js
                                                            x140)
                                                  ~array:(t_of_js x141))))|]);
                            (match x136 with
                             | Some x138 ->
                                 ignore
                                   (Ojs.call x137 "push" [|(any_to_js x138)|])
                             | None -> ());
                            x137))|])
    let (forEach :
      t ->
        callbackfn:(value:bigint -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x151 : t) ->
        fun
          ~callbackfn:(x144 : value:bigint -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x145 : any option) ->
            fun () ->
              ignore
                (let x152 = t_to_js x151 in
                 Ojs.call (Ojs.get_prop_ascii x152 "forEach") "apply"
                   [|x152;((let x146 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x146 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x148 : Ojs.t) ->
                                         fun (x149 : Ojs.t) ->
                                           fun (x150 : Ojs.t) ->
                                             x144 ~value:(bigint_of_js x148)
                                               ~index:(Ojs.float_of_js x149)
                                               ~array:(t_of_js x150)))|]);
                            (match x145 with
                             | Some x147 ->
                                 ignore
                                   (Ojs.call x146 "push" [|(any_to_js x147)|])
                             | None -> ());
                            x146))|])
    let (includes :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> bool) =
      fun (x157 : t) ->
        fun ~searchElement:(x153 : bigint) ->
          fun ?fromIndex:(x154 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x158 = t_to_js x157 in
                 Ojs.call (Ojs.get_prop_ascii x158 "includes") "apply"
                   [|x158;((let x155 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x155 "push" [|(bigint_to_js x153)|]);
                            (match x154 with
                             | Some x156 ->
                                 ignore
                                   (Ojs.call x155 "push"
                                      [|(Ojs.float_to_js x156)|])
                             | None -> ());
                            x155))|])
    let (indexOf :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> float) =
      fun (x163 : t) ->
        fun ~searchElement:(x159 : bigint) ->
          fun ?fromIndex:(x160 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x164 = t_to_js x163 in
                 Ojs.call (Ojs.get_prop_ascii x164 "indexOf") "apply"
                   [|x164;((let x161 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x161 "push" [|(bigint_to_js x159)|]);
                            (match x160 with
                             | Some x162 ->
                                 ignore
                                   (Ojs.call x161 "push"
                                      [|(Ojs.float_to_js x162)|])
                             | None -> ());
                            x161))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x168 : t) ->
        fun ?separator:(x165 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x169 = t_to_js x168 in
               Ojs.call (Ojs.get_prop_ascii x169 "join") "apply"
                 [|x169;((let x166 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x165 with
                           | Some x167 ->
                               ignore
                                 (Ojs.call x166 "push"
                                    [|(Ojs.string_to_js x167)|])
                           | None -> ());
                          x166))|])
    let (keys : t -> float IterableIterator.t) =
      fun (x170 : t) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x170) "keys" [||])
    let (lastIndexOf :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> float) =
      fun (x176 : t) ->
        fun ~searchElement:(x172 : bigint) ->
          fun ?fromIndex:(x173 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x177 = t_to_js x176 in
                 Ojs.call (Ojs.get_prop_ascii x177 "lastIndexOf") "apply"
                   [|x177;((let x174 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x174 "push" [|(bigint_to_js x172)|]);
                            (match x173 with
                             | Some x175 ->
                                 ignore
                                   (Ojs.call x174 "push"
                                      [|(Ojs.float_to_js x175)|])
                             | None -> ());
                            x174))|])
    let (get_length : t -> float) =
      fun (x178 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x178) "length")
    let (map :
      t ->
        callbackfn:(value:bigint -> index:float -> array:t -> bigint) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x186 : t) ->
        fun
          ~callbackfn:(x179 :
                        value:bigint -> index:float -> array:t -> bigint)
          ->
          fun ?thisArg:(x180 : any option) ->
            fun () ->
              t_of_js
                (let x187 = t_to_js x186 in
                 Ojs.call (Ojs.get_prop_ascii x187 "map") "apply"
                   [|x187;((let x181 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x181 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x183 : Ojs.t) ->
                                         fun (x184 : Ojs.t) ->
                                           fun (x185 : Ojs.t) ->
                                             bigint_to_js
                                               (x179
                                                  ~value:(bigint_of_js x183)
                                                  ~index:(Ojs.float_of_js
                                                            x184)
                                                  ~array:(t_of_js x185))))|]);
                            (match x180 with
                             | Some x182 ->
                                 ignore
                                   (Ojs.call x181 "push" [|(any_to_js x182)|])
                             | None -> ());
                            x181))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x193 : t) ->
        fun
          ~callbackfn:(x188 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x193) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x189 : Ojs.t) ->
                       fun (x190 : Ojs.t) ->
                         fun (x191 : Ojs.t) ->
                           fun (x192 : Ojs.t) ->
                             bigint_to_js
                               (x188 ~previousValue:(bigint_of_js x189)
                                  ~currentValue:(bigint_of_js x190)
                                  ~currentIndex:(Ojs.float_of_js x191)
                                  ~array:(t_of_js x192))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x200 : t) ->
        fun
          ~callbackfn:(x194 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x199 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x200) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x195 : Ojs.t) ->
                         fun (x196 : Ojs.t) ->
                           fun (x197 : Ojs.t) ->
                             fun (x198 : Ojs.t) ->
                               Obj.magic
                                 (x194 ~previousValue:(Obj.magic x195)
                                    ~currentValue:(bigint_of_js x196)
                                    ~currentIndex:(Ojs.float_of_js x197)
                                    ~array:(t_of_js x198))));(Obj.magic x199)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x206 : t) ->
        fun
          ~callbackfn:(x201 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x206) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x202 : Ojs.t) ->
                       fun (x203 : Ojs.t) ->
                         fun (x204 : Ojs.t) ->
                           fun (x205 : Ojs.t) ->
                             bigint_to_js
                               (x201 ~previousValue:(bigint_of_js x202)
                                  ~currentValue:(bigint_of_js x203)
                                  ~currentIndex:(Ojs.float_of_js x204)
                                  ~array:(t_of_js x205))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x213 : t) ->
        fun
          ~callbackfn:(x207 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x212 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x213) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x208 : Ojs.t) ->
                         fun (x209 : Ojs.t) ->
                           fun (x210 : Ojs.t) ->
                             fun (x211 : Ojs.t) ->
                               Obj.magic
                                 (x207 ~previousValue:(Obj.magic x208)
                                    ~currentValue:(bigint_of_js x209)
                                    ~currentIndex:(Ojs.float_of_js x210)
                                    ~array:(t_of_js x211))));(Obj.magic x212)|])
    let (reverse : t -> t) =
      fun (x214 : t) -> t_of_js (Ojs.call (t_to_js x214) "reverse" [||])
    let (set_ : t -> array:bigint Array.t -> ?offset:float -> unit -> unit) =
      fun (x220 : t) ->
        fun ~array:(x215 : bigint Array.t) ->
          fun ?offset:(x216 : float option) ->
            fun () ->
              ignore
                (let x221 = t_to_js x220 in
                 Ojs.call (Ojs.get_prop_ascii x221 "set") "apply"
                   [|x221;((let x217 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x217 "push"
                                 [|(Array.t_to_js bigint_to_js x215)|]);
                            (match x216 with
                             | Some x218 ->
                                 ignore
                                   (Ojs.call x217 "push"
                                      [|(Ojs.float_to_js x218)|])
                             | None -> ());
                            x217))|])
    let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x227 : t) ->
        fun ?start:(x222 : float option) ->
          fun ?end_:(x223 : float option) ->
            fun () ->
              t_of_js
                (let x228 = t_to_js x227 in
                 Ojs.call (Ojs.get_prop_ascii x228 "slice") "apply"
                   [|x228;((let x224 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x222 with
                             | Some x226 ->
                                 ignore
                                   (Ojs.call x224 "push"
                                      [|(Ojs.float_to_js x226)|])
                             | None -> ());
                            (match x223 with
                             | Some x225 ->
                                 ignore
                                   (Ojs.call x224 "push"
                                      [|(Ojs.float_to_js x225)|])
                             | None -> ());
                            x224))|])
    let (some :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x236 : t) ->
        fun
          ~predicate:(x229 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x230 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x237 = t_to_js x236 in
                 Ojs.call (Ojs.get_prop_ascii x237 "some") "apply"
                   [|x237;((let x231 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x231 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x233 : Ojs.t) ->
                                         fun (x234 : Ojs.t) ->
                                           fun (x235 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x229
                                                  ~value:(bigint_of_js x233)
                                                  ~index:(Ojs.float_of_js
                                                            x234)
                                                  ~array:(t_of_js x235))))|]);
                            (match x230 with
                             | Some x232 ->
                                 ignore
                                   (Ojs.call x231 "push" [|(any_to_js x232)|])
                             | None -> ());
                            x231))|])
    let (sort :
      t -> ?compareFn:(a:bigint -> b:bigint -> bigint or_number) -> unit -> t)
      =
      fun (x244 : t) ->
        fun
          ?compareFn:(x238 :
                       (a:bigint -> b:bigint -> bigint or_number) option)
          ->
          fun () ->
            t_of_js
              (let x245 = t_to_js x244 in
               Ojs.call (Ojs.get_prop_ascii x245 "sort") "apply"
                 [|x245;((let x239 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x238 with
                           | Some x240 ->
                               ignore
                                 (Ojs.call x239 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x241 : Ojs.t) ->
                                            fun (x242 : Ojs.t) ->
                                              or_number_to_js bigint_to_js
                                                (x240 ~a:(bigint_of_js x241)
                                                   ~b:(bigint_of_js x242))))|])
                           | None -> ());
                          x239))|])
    let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
      fun (x251 : t) ->
        fun ?begin_:(x246 : float option) ->
          fun ?end_:(x247 : float option) ->
            fun () ->
              t_of_js
                (let x252 = t_to_js x251 in
                 Ojs.call (Ojs.get_prop_ascii x252 "subarray") "apply"
                   [|x252;((let x248 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x246 with
                             | Some x250 ->
                                 ignore
                                   (Ojs.call x248 "push"
                                      [|(Ojs.float_to_js x250)|])
                             | None -> ());
                            (match x247 with
                             | Some x249 ->
                                 ignore
                                   (Ojs.call x248 "push"
                                      [|(Ojs.float_to_js x249)|])
                             | None -> ());
                            x248))|])
    let (toLocaleString : t -> string) =
      fun (x253 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x253) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x254 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x254) "toString" [||])
    let (valueOf : t -> t) =
      fun (x255 : t) -> t_of_js (Ojs.call (t_to_js x255) "valueOf" [||])
    let (values : t -> bigint IterableIterator.t) =
      fun (x256 : t) ->
        IterableIterator.t_of_js bigint_of_js
          (Ojs.call (t_to_js x256) "values" [||])
    let (get : t -> float -> bigint) =
      fun (x258 : t) ->
        fun (x259 : float) ->
          bigint_of_js (Ojs.get_prop (t_to_js x258) (Ojs.float_to_js x259))
    let (set : t -> float -> bigint -> unit) =
      fun (x260 : t) ->
        fun (x261 : float) ->
          fun (x262 : bigint) ->
            Ojs.set_prop (t_to_js x260) (Ojs.float_to_js x261)
              (bigint_to_js x262)
  end
module BigInt64ArrayConstructor =
  struct
    type t = _BigInt64ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x264 : Ojs.t) -> _BigInt64ArrayConstructor_of_js x264
    and t_to_js : t -> Ojs.t =
      fun (x263 : _BigInt64ArrayConstructor) ->
        _BigInt64ArrayConstructor_to_js x263
    let (get_prototype : t -> _BigInt64Array) =
      fun (x265 : t) ->
        _BigInt64Array_of_js (Ojs.get_prop_ascii (t_to_js x265) "prototype")
    let (create : t -> ?length:float -> unit -> _BigInt64Array) =
      fun (x269 : t) ->
        fun ?length:(x266 : float option) ->
          fun () ->
            _BigInt64Array_of_js
              (Ojs.new_obj_arr (t_to_js x269)
                 (let x267 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x266 with
                   | Some x268 ->
                       ignore
                         (Ojs.call x267 "push" [|(Ojs.float_to_js x268)|])
                   | None -> ());
                  x267))
    let (create' : t -> array:bigint Iterable.t -> _BigInt64Array) =
      fun (x272 : t) ->
        fun ~array:(x270 : bigint Iterable.t) ->
          _BigInt64Array_of_js
            (Ojs.new_obj (t_to_js x272)
               [|(Iterable.t_to_js bigint_to_js x270)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:float -> ?length:float -> unit -> _BigInt64Array)
      =
      fun (x279 : t) ->
        fun ~buffer:(x273 : ArrayBuffer.t) ->
          fun ?byteOffset:(x274 : float option) ->
            fun ?length:(x275 : float option) ->
              fun () ->
                _BigInt64Array_of_js
                  (Ojs.new_obj_arr (t_to_js x279)
                     (let x276 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x276 "push" [|(ArrayBuffer.t_to_js x273)|]);
                      (match x274 with
                       | Some x278 ->
                           ignore
                             (Ojs.call x276 "push" [|(Ojs.float_to_js x278)|])
                       | None -> ());
                      (match x275 with
                       | Some x277 ->
                           ignore
                             (Ojs.call x276 "push" [|(Ojs.float_to_js x277)|])
                       | None -> ());
                      x276))
    let (get_BYTES_PER_ELEMENT : t -> float) =
      fun (x280 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x280) "BYTES_PER_ELEMENT")
    let (of_ : t -> items:bigint list -> _BigInt64Array) =
      fun (x284 : t) ->
        fun ~items:(x281 : bigint list) ->
          _BigInt64Array_of_js
            (let x285 = t_to_js x284 in
             Ojs.call (Ojs.get_prop_ascii x285 "of") "apply"
               [|x285;((let x282 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x283 : bigint) ->
                             ignore
                               (Ojs.call x282 "push" [|(bigint_to_js x283)|]))
                          x281;
                        x282))|])
    let (from : t -> array:bigint Array.t -> _BigInt64Array) =
      fun (x288 : t) ->
        fun ~array:(x286 : bigint Array.t) ->
          _BigInt64Array_of_js
            (Ojs.call (t_to_js x288) "from"
               [|(Array.t_to_js bigint_to_js x286)|])
    let (from' :
      t ->
        array:'U Array.t ->
          mapfn:(v:'U -> k:float -> bigint) ->
            ?thisArg:any -> unit -> _BigInt64Array)
      =
      fun (x297 : t) ->
        fun ~array:(x289 : 'U Array.t) ->
          fun ~mapfn:(x290 : v:'U -> k:float -> bigint) ->
            fun ?thisArg:(x291 : any option) ->
              fun () ->
                _BigInt64Array_of_js
                  (let x298 = t_to_js x297 in
                   Ojs.call (Ojs.get_prop_ascii x298 "from") "apply"
                     [|x298;((let x292 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x292 "push"
                                   [|(Array.t_to_js Obj.magic x289)|]);
                              ignore
                                (Ojs.call x292 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x294 : Ojs.t) ->
                                           fun (x295 : Ojs.t) ->
                                             bigint_to_js
                                               (x290 ~v:(Obj.magic x294)
                                                  ~k:(Ojs.float_of_js x295))))|]);
                              (match x291 with
                               | Some x293 ->
                                   ignore
                                     (Ojs.call x292 "push"
                                        [|(any_to_js x293)|])
                               | None -> ());
                              x292))|])
  end
let (bigInt64Array : _BigInt64ArrayConstructor) =
  _BigInt64ArrayConstructor_of_js
    (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
module BigUint64Array =
  struct
    type t = _BigUint64Array
    let rec t_of_js : Ojs.t -> t =
      fun (x300 : Ojs.t) -> _BigUint64Array_of_js x300
    and t_to_js : t -> Ojs.t =
      fun (x299 : _BigUint64Array) -> _BigUint64Array_to_js x299
    let (get_BYTES_PER_ELEMENT : t -> float) =
      fun (x301 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x301) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x302 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x302) "buffer")
    let (get_byteLength : t -> float) =
      fun (x303 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x303) "byteLength")
    let (get_byteOffset : t -> float) =
      fun (x304 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x304) "byteOffset")
    let (copyWithin :
      t -> target:float -> start:float -> ?end_:float -> unit -> t) =
      fun (x310 : t) ->
        fun ~target:(x305 : float) ->
          fun ~start:(x306 : float) ->
            fun ?end_:(x307 : float option) ->
              fun () ->
                t_of_js
                  (let x311 = t_to_js x310 in
                   Ojs.call (Ojs.get_prop_ascii x311 "copyWithin") "apply"
                     [|x311;((let x308 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x308 "push"
                                   [|(Ojs.float_to_js x305)|]);
                              ignore
                                (Ojs.call x308 "push"
                                   [|(Ojs.float_to_js x306)|]);
                              (match x307 with
                               | Some x309 ->
                                   ignore
                                     (Ojs.call x308 "push"
                                        [|(Ojs.float_to_js x309)|])
                               | None -> ());
                              x308))|])
    let (entries : t -> (float * bigint) IterableIterator.t) =
      fun (x312 : t) ->
        IterableIterator.t_of_js
          (fun (x313 : Ojs.t) ->
             let x314 = x313 in
             ((Ojs.float_of_js (Ojs.array_get x314 0)),
               (bigint_of_js (Ojs.array_get x314 1))))
          (Ojs.call (t_to_js x312) "entries" [||])
    let (every :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x322 : t) ->
        fun
          ~predicate:(x315 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x316 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x323 = t_to_js x322 in
                 Ojs.call (Ojs.get_prop_ascii x323 "every") "apply"
                   [|x323;((let x317 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x317 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x319 : Ojs.t) ->
                                         fun (x320 : Ojs.t) ->
                                           fun (x321 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x315
                                                  ~value:(bigint_of_js x319)
                                                  ~index:(Ojs.float_of_js
                                                            x320)
                                                  ~array:(t_of_js x321))))|]);
                            (match x316 with
                             | Some x318 ->
                                 ignore
                                   (Ojs.call x317 "push" [|(any_to_js x318)|])
                             | None -> ());
                            x317))|])
    let (fill :
      t -> value:bigint -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x330 : t) ->
        fun ~value:(x324 : bigint) ->
          fun ?start:(x325 : float option) ->
            fun ?end_:(x326 : float option) ->
              fun () ->
                t_of_js
                  (let x331 = t_to_js x330 in
                   Ojs.call (Ojs.get_prop_ascii x331 "fill") "apply"
                     [|x331;((let x327 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x327 "push" [|(bigint_to_js x324)|]);
                              (match x325 with
                               | Some x329 ->
                                   ignore
                                     (Ojs.call x327 "push"
                                        [|(Ojs.float_to_js x329)|])
                               | None -> ());
                              (match x326 with
                               | Some x328 ->
                                   ignore
                                     (Ojs.call x327 "push"
                                        [|(Ojs.float_to_js x328)|])
                               | None -> ());
                              x327))|])
    let (filter :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x339 : t) ->
        fun ~predicate:(x332 : value:bigint -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x333 : any option) ->
            fun () ->
              t_of_js
                (let x340 = t_to_js x339 in
                 Ojs.call (Ojs.get_prop_ascii x340 "filter") "apply"
                   [|x340;((let x334 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x334 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x336 : Ojs.t) ->
                                         fun (x337 : Ojs.t) ->
                                           fun (x338 : Ojs.t) ->
                                             any_to_js
                                               (x332
                                                  ~value:(bigint_of_js x336)
                                                  ~index:(Ojs.float_of_js
                                                            x337)
                                                  ~array:(t_of_js x338))))|]);
                            (match x333 with
                             | Some x335 ->
                                 ignore
                                   (Ojs.call x334 "push" [|(any_to_js x335)|])
                             | None -> ());
                            x334))|])
    let (find :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bigint or_undefined)
      =
      fun (x348 : t) ->
        fun
          ~predicate:(x341 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x342 : any option) ->
            fun () ->
              or_undefined_of_js bigint_of_js
                (let x349 = t_to_js x348 in
                 Ojs.call (Ojs.get_prop_ascii x349 "find") "apply"
                   [|x349;((let x343 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x343 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x345 : Ojs.t) ->
                                         fun (x346 : Ojs.t) ->
                                           fun (x347 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x341
                                                  ~value:(bigint_of_js x345)
                                                  ~index:(Ojs.float_of_js
                                                            x346)
                                                  ~array:(t_of_js x347))))|]);
                            (match x342 with
                             | Some x344 ->
                                 ignore
                                   (Ojs.call x343 "push" [|(any_to_js x344)|])
                             | None -> ());
                            x343))|])
    let (findIndex :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x358 : t) ->
        fun
          ~predicate:(x351 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x352 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x359 = t_to_js x358 in
                 Ojs.call (Ojs.get_prop_ascii x359 "findIndex") "apply"
                   [|x359;((let x353 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x353 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x355 : Ojs.t) ->
                                         fun (x356 : Ojs.t) ->
                                           fun (x357 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x351
                                                  ~value:(bigint_of_js x355)
                                                  ~index:(Ojs.float_of_js
                                                            x356)
                                                  ~array:(t_of_js x357))))|]);
                            (match x352 with
                             | Some x354 ->
                                 ignore
                                   (Ojs.call x353 "push" [|(any_to_js x354)|])
                             | None -> ());
                            x353))|])
    let (forEach :
      t ->
        callbackfn:(value:bigint -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x367 : t) ->
        fun
          ~callbackfn:(x360 : value:bigint -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x361 : any option) ->
            fun () ->
              ignore
                (let x368 = t_to_js x367 in
                 Ojs.call (Ojs.get_prop_ascii x368 "forEach") "apply"
                   [|x368;((let x362 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x362 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x364 : Ojs.t) ->
                                         fun (x365 : Ojs.t) ->
                                           fun (x366 : Ojs.t) ->
                                             x360 ~value:(bigint_of_js x364)
                                               ~index:(Ojs.float_of_js x365)
                                               ~array:(t_of_js x366)))|]);
                            (match x361 with
                             | Some x363 ->
                                 ignore
                                   (Ojs.call x362 "push" [|(any_to_js x363)|])
                             | None -> ());
                            x362))|])
    let (includes :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> bool) =
      fun (x373 : t) ->
        fun ~searchElement:(x369 : bigint) ->
          fun ?fromIndex:(x370 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x374 = t_to_js x373 in
                 Ojs.call (Ojs.get_prop_ascii x374 "includes") "apply"
                   [|x374;((let x371 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x371 "push" [|(bigint_to_js x369)|]);
                            (match x370 with
                             | Some x372 ->
                                 ignore
                                   (Ojs.call x371 "push"
                                      [|(Ojs.float_to_js x372)|])
                             | None -> ());
                            x371))|])
    let (indexOf :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> float) =
      fun (x379 : t) ->
        fun ~searchElement:(x375 : bigint) ->
          fun ?fromIndex:(x376 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x380 = t_to_js x379 in
                 Ojs.call (Ojs.get_prop_ascii x380 "indexOf") "apply"
                   [|x380;((let x377 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x377 "push" [|(bigint_to_js x375)|]);
                            (match x376 with
                             | Some x378 ->
                                 ignore
                                   (Ojs.call x377 "push"
                                      [|(Ojs.float_to_js x378)|])
                             | None -> ());
                            x377))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x384 : t) ->
        fun ?separator:(x381 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x385 = t_to_js x384 in
               Ojs.call (Ojs.get_prop_ascii x385 "join") "apply"
                 [|x385;((let x382 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x381 with
                           | Some x383 ->
                               ignore
                                 (Ojs.call x382 "push"
                                    [|(Ojs.string_to_js x383)|])
                           | None -> ());
                          x382))|])
    let (keys : t -> float IterableIterator.t) =
      fun (x386 : t) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x386) "keys" [||])
    let (lastIndexOf :
      t -> searchElement:bigint -> ?fromIndex:float -> unit -> float) =
      fun (x392 : t) ->
        fun ~searchElement:(x388 : bigint) ->
          fun ?fromIndex:(x389 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x393 = t_to_js x392 in
                 Ojs.call (Ojs.get_prop_ascii x393 "lastIndexOf") "apply"
                   [|x393;((let x390 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x390 "push" [|(bigint_to_js x388)|]);
                            (match x389 with
                             | Some x391 ->
                                 ignore
                                   (Ojs.call x390 "push"
                                      [|(Ojs.float_to_js x391)|])
                             | None -> ());
                            x390))|])
    let (get_length : t -> float) =
      fun (x394 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x394) "length")
    let (map :
      t ->
        callbackfn:(value:bigint -> index:float -> array:t -> bigint) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x402 : t) ->
        fun
          ~callbackfn:(x395 :
                        value:bigint -> index:float -> array:t -> bigint)
          ->
          fun ?thisArg:(x396 : any option) ->
            fun () ->
              t_of_js
                (let x403 = t_to_js x402 in
                 Ojs.call (Ojs.get_prop_ascii x403 "map") "apply"
                   [|x403;((let x397 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x397 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x399 : Ojs.t) ->
                                         fun (x400 : Ojs.t) ->
                                           fun (x401 : Ojs.t) ->
                                             bigint_to_js
                                               (x395
                                                  ~value:(bigint_of_js x399)
                                                  ~index:(Ojs.float_of_js
                                                            x400)
                                                  ~array:(t_of_js x401))))|]);
                            (match x396 with
                             | Some x398 ->
                                 ignore
                                   (Ojs.call x397 "push" [|(any_to_js x398)|])
                             | None -> ());
                            x397))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x409 : t) ->
        fun
          ~callbackfn:(x404 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x409) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x405 : Ojs.t) ->
                       fun (x406 : Ojs.t) ->
                         fun (x407 : Ojs.t) ->
                           fun (x408 : Ojs.t) ->
                             bigint_to_js
                               (x404 ~previousValue:(bigint_of_js x405)
                                  ~currentValue:(bigint_of_js x406)
                                  ~currentIndex:(Ojs.float_of_js x407)
                                  ~array:(t_of_js x408))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x416 : t) ->
        fun
          ~callbackfn:(x410 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x415 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x416) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x411 : Ojs.t) ->
                         fun (x412 : Ojs.t) ->
                           fun (x413 : Ojs.t) ->
                             fun (x414 : Ojs.t) ->
                               Obj.magic
                                 (x410 ~previousValue:(Obj.magic x411)
                                    ~currentValue:(bigint_of_js x412)
                                    ~currentIndex:(Ojs.float_of_js x413)
                                    ~array:(t_of_js x414))));(Obj.magic x415)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x422 : t) ->
        fun
          ~callbackfn:(x417 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x422) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x418 : Ojs.t) ->
                       fun (x419 : Ojs.t) ->
                         fun (x420 : Ojs.t) ->
                           fun (x421 : Ojs.t) ->
                             bigint_to_js
                               (x417 ~previousValue:(bigint_of_js x418)
                                  ~currentValue:(bigint_of_js x419)
                                  ~currentIndex:(Ojs.float_of_js x420)
                                  ~array:(t_of_js x421))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x429 : t) ->
        fun
          ~callbackfn:(x423 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x428 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x429) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x424 : Ojs.t) ->
                         fun (x425 : Ojs.t) ->
                           fun (x426 : Ojs.t) ->
                             fun (x427 : Ojs.t) ->
                               Obj.magic
                                 (x423 ~previousValue:(Obj.magic x424)
                                    ~currentValue:(bigint_of_js x425)
                                    ~currentIndex:(Ojs.float_of_js x426)
                                    ~array:(t_of_js x427))));(Obj.magic x428)|])
    let (reverse : t -> t) =
      fun (x430 : t) -> t_of_js (Ojs.call (t_to_js x430) "reverse" [||])
    let (set_ : t -> array:bigint Array.t -> ?offset:float -> unit -> unit) =
      fun (x436 : t) ->
        fun ~array:(x431 : bigint Array.t) ->
          fun ?offset:(x432 : float option) ->
            fun () ->
              ignore
                (let x437 = t_to_js x436 in
                 Ojs.call (Ojs.get_prop_ascii x437 "set") "apply"
                   [|x437;((let x433 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x433 "push"
                                 [|(Array.t_to_js bigint_to_js x431)|]);
                            (match x432 with
                             | Some x434 ->
                                 ignore
                                   (Ojs.call x433 "push"
                                      [|(Ojs.float_to_js x434)|])
                             | None -> ());
                            x433))|])
    let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x443 : t) ->
        fun ?start:(x438 : float option) ->
          fun ?end_:(x439 : float option) ->
            fun () ->
              t_of_js
                (let x444 = t_to_js x443 in
                 Ojs.call (Ojs.get_prop_ascii x444 "slice") "apply"
                   [|x444;((let x440 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x438 with
                             | Some x442 ->
                                 ignore
                                   (Ojs.call x440 "push"
                                      [|(Ojs.float_to_js x442)|])
                             | None -> ());
                            (match x439 with
                             | Some x441 ->
                                 ignore
                                   (Ojs.call x440 "push"
                                      [|(Ojs.float_to_js x441)|])
                             | None -> ());
                            x440))|])
    let (some :
      t ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x452 : t) ->
        fun
          ~predicate:(x445 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x446 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x453 = t_to_js x452 in
                 Ojs.call (Ojs.get_prop_ascii x453 "some") "apply"
                   [|x453;((let x447 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x447 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x449 : Ojs.t) ->
                                         fun (x450 : Ojs.t) ->
                                           fun (x451 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x445
                                                  ~value:(bigint_of_js x449)
                                                  ~index:(Ojs.float_of_js
                                                            x450)
                                                  ~array:(t_of_js x451))))|]);
                            (match x446 with
                             | Some x448 ->
                                 ignore
                                   (Ojs.call x447 "push" [|(any_to_js x448)|])
                             | None -> ());
                            x447))|])
    let (sort :
      t -> ?compareFn:(a:bigint -> b:bigint -> bigint or_number) -> unit -> t)
      =
      fun (x460 : t) ->
        fun
          ?compareFn:(x454 :
                       (a:bigint -> b:bigint -> bigint or_number) option)
          ->
          fun () ->
            t_of_js
              (let x461 = t_to_js x460 in
               Ojs.call (Ojs.get_prop_ascii x461 "sort") "apply"
                 [|x461;((let x455 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x454 with
                           | Some x456 ->
                               ignore
                                 (Ojs.call x455 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x457 : Ojs.t) ->
                                            fun (x458 : Ojs.t) ->
                                              or_number_to_js bigint_to_js
                                                (x456 ~a:(bigint_of_js x457)
                                                   ~b:(bigint_of_js x458))))|])
                           | None -> ());
                          x455))|])
    let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
      fun (x467 : t) ->
        fun ?begin_:(x462 : float option) ->
          fun ?end_:(x463 : float option) ->
            fun () ->
              t_of_js
                (let x468 = t_to_js x467 in
                 Ojs.call (Ojs.get_prop_ascii x468 "subarray") "apply"
                   [|x468;((let x464 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x462 with
                             | Some x466 ->
                                 ignore
                                   (Ojs.call x464 "push"
                                      [|(Ojs.float_to_js x466)|])
                             | None -> ());
                            (match x463 with
                             | Some x465 ->
                                 ignore
                                   (Ojs.call x464 "push"
                                      [|(Ojs.float_to_js x465)|])
                             | None -> ());
                            x464))|])
    let (toLocaleString : t -> string) =
      fun (x469 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x469) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x470 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x470) "toString" [||])
    let (valueOf : t -> t) =
      fun (x471 : t) -> t_of_js (Ojs.call (t_to_js x471) "valueOf" [||])
    let (values : t -> bigint IterableIterator.t) =
      fun (x472 : t) ->
        IterableIterator.t_of_js bigint_of_js
          (Ojs.call (t_to_js x472) "values" [||])
    let (get : t -> float -> bigint) =
      fun (x474 : t) ->
        fun (x475 : float) ->
          bigint_of_js (Ojs.get_prop (t_to_js x474) (Ojs.float_to_js x475))
    let (set : t -> float -> bigint -> unit) =
      fun (x476 : t) ->
        fun (x477 : float) ->
          fun (x478 : bigint) ->
            Ojs.set_prop (t_to_js x476) (Ojs.float_to_js x477)
              (bigint_to_js x478)
  end
module BigUint64ArrayConstructor =
  struct
    type t = _BigUint64ArrayConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x480 : Ojs.t) -> _BigUint64ArrayConstructor_of_js x480
    and t_to_js : t -> Ojs.t =
      fun (x479 : _BigUint64ArrayConstructor) ->
        _BigUint64ArrayConstructor_to_js x479
    let (get_prototype : t -> _BigUint64Array) =
      fun (x481 : t) ->
        _BigUint64Array_of_js (Ojs.get_prop_ascii (t_to_js x481) "prototype")
    let (create : t -> ?length:float -> unit -> _BigUint64Array) =
      fun (x485 : t) ->
        fun ?length:(x482 : float option) ->
          fun () ->
            _BigUint64Array_of_js
              (Ojs.new_obj_arr (t_to_js x485)
                 (let x483 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x482 with
                   | Some x484 ->
                       ignore
                         (Ojs.call x483 "push" [|(Ojs.float_to_js x484)|])
                   | None -> ());
                  x483))
    let (create' : t -> array:bigint Iterable.t -> _BigUint64Array) =
      fun (x488 : t) ->
        fun ~array:(x486 : bigint Iterable.t) ->
          _BigUint64Array_of_js
            (Ojs.new_obj (t_to_js x488)
               [|(Iterable.t_to_js bigint_to_js x486)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:float -> ?length:float -> unit -> _BigUint64Array)
      =
      fun (x495 : t) ->
        fun ~buffer:(x489 : ArrayBuffer.t) ->
          fun ?byteOffset:(x490 : float option) ->
            fun ?length:(x491 : float option) ->
              fun () ->
                _BigUint64Array_of_js
                  (Ojs.new_obj_arr (t_to_js x495)
                     (let x492 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x492 "push" [|(ArrayBuffer.t_to_js x489)|]);
                      (match x490 with
                       | Some x494 ->
                           ignore
                             (Ojs.call x492 "push" [|(Ojs.float_to_js x494)|])
                       | None -> ());
                      (match x491 with
                       | Some x493 ->
                           ignore
                             (Ojs.call x492 "push" [|(Ojs.float_to_js x493)|])
                       | None -> ());
                      x492))
    let (get_BYTES_PER_ELEMENT : t -> float) =
      fun (x496 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x496) "BYTES_PER_ELEMENT")
    let (of_ : t -> items:bigint list -> _BigUint64Array) =
      fun (x500 : t) ->
        fun ~items:(x497 : bigint list) ->
          _BigUint64Array_of_js
            (let x501 = t_to_js x500 in
             Ojs.call (Ojs.get_prop_ascii x501 "of") "apply"
               [|x501;((let x498 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x499 : bigint) ->
                             ignore
                               (Ojs.call x498 "push" [|(bigint_to_js x499)|]))
                          x497;
                        x498))|])
    let (from : t -> array:bigint Array.t -> _BigUint64Array) =
      fun (x504 : t) ->
        fun ~array:(x502 : bigint Array.t) ->
          _BigUint64Array_of_js
            (Ojs.call (t_to_js x504) "from"
               [|(Array.t_to_js bigint_to_js x502)|])
    let (from' :
      t ->
        array:'U Array.t ->
          mapfn:(v:'U -> k:float -> bigint) ->
            ?thisArg:any -> unit -> _BigUint64Array)
      =
      fun (x513 : t) ->
        fun ~array:(x505 : 'U Array.t) ->
          fun ~mapfn:(x506 : v:'U -> k:float -> bigint) ->
            fun ?thisArg:(x507 : any option) ->
              fun () ->
                _BigUint64Array_of_js
                  (let x514 = t_to_js x513 in
                   Ojs.call (Ojs.get_prop_ascii x514 "from") "apply"
                     [|x514;((let x508 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x508 "push"
                                   [|(Array.t_to_js Obj.magic x505)|]);
                              ignore
                                (Ojs.call x508 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x510 : Ojs.t) ->
                                           fun (x511 : Ojs.t) ->
                                             bigint_to_js
                                               (x506 ~v:(Obj.magic x510)
                                                  ~k:(Ojs.float_of_js x511))))|]);
                              (match x507 with
                               | Some x509 ->
                                   ignore
                                     (Ojs.call x508 "push"
                                        [|(any_to_js x509)|])
                               | None -> ());
                              x508))|])
  end
let (bigUint64Array : _BigUint64ArrayConstructor) =
  _BigUint64ArrayConstructor_of_js
    (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
module DataView =
  struct
    type t = _DataView
    let rec t_of_js : Ojs.t -> t = fun (x516 : Ojs.t) -> _DataView_of_js x516
    and t_to_js : t -> Ojs.t = fun (x515 : _DataView) -> _DataView_to_js x515
    let (getBigInt64 :
      t -> byteOffset:float -> ?littleEndian:bool -> unit -> bigint) =
      fun (x521 : t) ->
        fun ~byteOffset:(x517 : float) ->
          fun ?littleEndian:(x518 : bool option) ->
            fun () ->
              bigint_of_js
                (let x522 = t_to_js x521 in
                 Ojs.call (Ojs.get_prop_ascii x522 "getBigInt64") "apply"
                   [|x522;((let x519 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x519 "push"
                                 [|(Ojs.float_to_js x517)|]);
                            (match x518 with
                             | Some x520 ->
                                 ignore
                                   (Ojs.call x519 "push"
                                      [|(Ojs.bool_to_js x520)|])
                             | None -> ());
                            x519))|])
    let (getBigUint64 :
      t -> byteOffset:float -> ?littleEndian:bool -> unit -> bigint) =
      fun (x527 : t) ->
        fun ~byteOffset:(x523 : float) ->
          fun ?littleEndian:(x524 : bool option) ->
            fun () ->
              bigint_of_js
                (let x528 = t_to_js x527 in
                 Ojs.call (Ojs.get_prop_ascii x528 "getBigUint64") "apply"
                   [|x528;((let x525 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x525 "push"
                                 [|(Ojs.float_to_js x523)|]);
                            (match x524 with
                             | Some x526 ->
                                 ignore
                                   (Ojs.call x525 "push"
                                      [|(Ojs.bool_to_js x526)|])
                             | None -> ());
                            x525))|])
    let (setBigInt64 :
      t ->
        byteOffset:float ->
          value:bigint -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x534 : t) ->
        fun ~byteOffset:(x529 : float) ->
          fun ~value:(x530 : bigint) ->
            fun ?littleEndian:(x531 : bool option) ->
              fun () ->
                ignore
                  (let x535 = t_to_js x534 in
                   Ojs.call (Ojs.get_prop_ascii x535 "setBigInt64") "apply"
                     [|x535;((let x532 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x532 "push"
                                   [|(Ojs.float_to_js x529)|]);
                              ignore
                                (Ojs.call x532 "push" [|(bigint_to_js x530)|]);
                              (match x531 with
                               | Some x533 ->
                                   ignore
                                     (Ojs.call x532 "push"
                                        [|(Ojs.bool_to_js x533)|])
                               | None -> ());
                              x532))|])
    let (setBigUint64 :
      t ->
        byteOffset:float ->
          value:bigint -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x541 : t) ->
        fun ~byteOffset:(x536 : float) ->
          fun ~value:(x537 : bigint) ->
            fun ?littleEndian:(x538 : bool option) ->
              fun () ->
                ignore
                  (let x542 = t_to_js x541 in
                   Ojs.call (Ojs.get_prop_ascii x542 "setBigUint64") "apply"
                     [|x542;((let x539 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x539 "push"
                                   [|(Ojs.float_to_js x536)|]);
                              ignore
                                (Ojs.call x539 "push" [|(bigint_to_js x537)|]);
                              (match x538 with
                               | Some x540 ->
                                   ignore
                                     (Ojs.call x539 "push"
                                        [|(Ojs.bool_to_js x540)|])
                               | None -> ());
                              x539))|])
  end
module Intl =
  struct
    module NumberFormat =
      struct
        type t = _Intl_NumberFormat
        let rec t_of_js : Ojs.t -> t =
          fun (x544 : Ojs.t) -> _Intl_NumberFormat_of_js x544
        and t_to_js : t -> Ojs.t =
          fun (x543 : _Intl_NumberFormat) -> _Intl_NumberFormat_to_js x543
        let (format : t -> value:bigint or_number -> string) =
          fun (x547 : t) ->
            fun ~value:(x545 : bigint or_number) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x547) "format"
                   [|(or_number_to_js bigint_to_js x545)|])
        let (resolvedOptions : t -> ResolvedNumberFormatOptions.t) =
          fun (x548 : t) ->
            ResolvedNumberFormatOptions.t_of_js
              (Ojs.call (t_to_js x548) "resolvedOptions" [||])
      end
  end
