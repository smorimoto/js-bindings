[@@@js.dummy "!! This code has been generated by gen_js_api !!"]

[@@@ocaml.warning "-7-32-39"]

[@@@ocaml.warning "-7-11-32-33-39"]

type never = Ojs.t

let rec never_of_js : Ojs.t -> never = fun (x2 : Ojs.t) -> x2

and never_to_js : never -> Ojs.t = fun (x1 : Ojs.t) -> x1

module Never = struct
  type t = never

  let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> never_of_js x4

  and t_to_js : t -> Ojs.t = fun (x3 : never) -> never_to_js x3

  exception Ts_Never

  let absurd _ = raise Ts_Never
end

type any = Ojs.t

let rec any_of_js : Ojs.t -> any = fun (x6 : Ojs.t) -> x6

and any_to_js : any -> Ojs.t = fun (x5 : Ojs.t) -> x5

module Any = struct
  type t = any

  let rec t_of_js : Ojs.t -> t = fun (x8 : Ojs.t) -> any_of_js x8

  and t_to_js : t -> Ojs.t = fun (x7 : any) -> any_to_js x7

  let unsafe_cast x = Obj.magic x
end

type unknown = Ojs.t

let rec unknown_of_js : Ojs.t -> unknown = fun (x10 : Ojs.t) -> x10

and unknown_to_js : unknown -> Ojs.t = fun (x9 : Ojs.t) -> x9

module Unknown = struct
  type t = unknown

  let rec t_of_js : Ojs.t -> t = fun (x12 : Ojs.t) -> unknown_of_js x12

  and t_to_js : t -> Ojs.t = fun (x11 : unknown) -> unknown_to_js x11

  let unsafe_cast x = Obj.magic x
end

type -'a intf = Ojs.t

let intf_to_js _ x : Ojs.t = x

let intf_of_js _ x : _ intf = x

type ('t, +'a) enum = 'a

let enum_to_js (_ : 't -> Ojs.t) (f : 'a -> Ojs.t) (e : ('t, 'a) enum) : Ojs.t =
  f e

let enum_of_js (_ : Ojs.t -> 't) (f : Ojs.t -> 'a) (e : Ojs.t) : ('t, 'a) enum =
  f e

module Enum = struct
  type ('t, +'a) t = ('t, 'a) enum

  let t_to_js = enum_to_js

  let t_of_js = enum_of_js

  let get_value x = x
end

type untyped_object = [ `Object ] intf

let rec untyped_object_of_js : Ojs.t -> untyped_object = Obj.magic

and untyped_object_to_js : untyped_object -> Ojs.t = Obj.magic

type untyped_function = [ `Function ] intf

let rec untyped_function_of_js : Ojs.t -> untyped_function = Obj.magic

and untyped_function_to_js : untyped_function -> Ojs.t = Obj.magic

type symbol = [ `Symbol ] intf

let rec symbol_of_js : Ojs.t -> symbol = Obj.magic

and symbol_to_js : symbol -> Ojs.t = Obj.magic

type regexp = [ `RegExp ] intf

let rec regexp_of_js : Ojs.t -> regexp = Obj.magic

and regexp_to_js : regexp -> Ojs.t = Obj.magic

type bigint = [ `BigInt ] intf

let rec bigint_of_js : Ojs.t -> bigint = Obj.magic

and bigint_to_js : bigint -> Ojs.t = Obj.magic

type 'a or_null = 'a option

let rec or_null_of_js : 'a. (Ojs.t -> 'a) -> Ojs.t -> 'a or_null =
  fun (type __a) (__a_of_js : Ojs.t -> __a) (x15 : Ojs.t) ->
   Ojs.option_of_js __a_of_js x15

and or_null_to_js : 'a. ('a -> Ojs.t) -> 'a or_null -> Ojs.t =
  fun (type __a) (__a_to_js : __a -> Ojs.t) (x13 : __a option) ->
   Ojs.option_to_js __a_to_js x13

type 'a or_undefined = 'a option

let rec or_undefined_of_js : 'a. (Ojs.t -> 'a) -> Ojs.t -> 'a or_undefined =
  fun (type __a) (__a_of_js : Ojs.t -> __a) (x19 : Ojs.t) ->
   Ojs.option_of_js __a_of_js x19

and or_undefined_to_js : 'a. ('a -> Ojs.t) -> 'a or_undefined -> Ojs.t =
  fun (type __a) (__a_to_js : __a -> Ojs.t) (x17 : __a option) ->
   Ojs.option_to_js __a_to_js x17

type 'a or_null_or_undefined = 'a option

let rec or_null_or_undefined_of_js :
          'a. (Ojs.t -> 'a) -> Ojs.t -> 'a or_null_or_undefined
  =
  fun (type __a) (__a_of_js : Ojs.t -> __a) (x23 : Ojs.t) ->
   Ojs.option_of_js __a_of_js x23

and or_null_or_undefined_to_js :
      'a. ('a -> Ojs.t) -> 'a or_null_or_undefined -> Ojs.t
  =
  fun (type __a) (__a_to_js : __a -> Ojs.t) (x21 : __a option) ->
   Ojs.option_to_js __a_to_js x21

type ('a, 'b) and_ = Ojs.t

let rec and__of_js :
          'a 'b. (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) and_
  =
  fun (type __a __b)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (x26 : Ojs.t) ->
   x26

and and__to_js : 'a 'b. ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) and_ -> Ojs.t
  =
  fun (type __a __b)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (x25 : Ojs.t) ->
   x25

module And = struct
  type ('a, 'b) t = ('a, 'b) and_

  let rec t_of_js : 'a 'b. (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) t
    =
    fun (type __a __b)
        (__a_of_js : Ojs.t -> __a)
        (__b_of_js : Ojs.t -> __b)
        (x30 : Ojs.t) ->
     and__of_js __a_of_js __b_of_js x30

  and t_to_js : 'a 'b. ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) t -> Ojs.t =
    fun (type __a __b)
        (__a_to_js : __a -> Ojs.t)
        (__b_to_js : __b -> Ojs.t)
        (x27 : (__a, __b) and_) ->
     and__to_js __a_to_js __b_to_js x27

  let car (x : ('a, 'b) t) : 'a = Obj.magic x

  let cdr (x : ('a, 'b) t) : 'b = Obj.magic x
end

type ('a, 'b) intersection2 = ('b, 'a) and_

let rec intersection2_of_js :
          'a 'b.
          (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) intersection2
  =
  fun (type __a __b)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (x36 : Ojs.t) ->
   and__of_js __b_of_js __a_of_js x36

and intersection2_to_js :
      'a 'b. ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) intersection2 -> Ojs.t
  =
  fun (type __a __b)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (x33 : (__b, __a) and_) ->
   and__to_js __b_to_js __a_to_js x33

type ('a, 'b, 'c) intersection3 = (('b, 'c) intersection2, 'a) and_

let rec intersection3_of_js :
          'a 'b 'c.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> Ojs.t
          -> ('a, 'b, 'c) intersection3
  =
  fun (type __a __b __c)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (x44 : Ojs.t) ->
   and__of_js
     (fun (x45 : Ojs.t) -> intersection2_of_js __b_of_js __c_of_js x45)
     __a_of_js
     x44

and intersection3_to_js :
      'a 'b 'c.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('a, 'b, 'c) intersection3
      -> Ojs.t
  =
  fun (type __a __b __c)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (x39 : ((__b, __c) intersection2, __a) and_) ->
   and__to_js
     (fun (x40 : (__b, __c) intersection2) ->
       intersection2_to_js __b_to_js __c_to_js x40)
     __a_to_js
     x39

type ('a, 'b, 'c, 'd) intersection4 = (('b, 'c, 'd) intersection3, 'a) and_

let rec intersection4_of_js :
          'a 'b 'c 'd.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd) intersection4
  =
  fun (type __a __b __c __d)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (x55 : Ojs.t) ->
   and__of_js
     (fun (x56 : Ojs.t) ->
       intersection3_of_js __b_of_js __c_of_js __d_of_js x56)
     __a_of_js
     x55

and intersection4_to_js :
      'a 'b 'c 'd.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('a, 'b, 'c, 'd) intersection4
      -> Ojs.t
  =
  fun (type __a __b __c __d)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (x49 : ((__b, __c, __d) intersection3, __a) and_) ->
   and__to_js
     (fun (x50 : (__b, __c, __d) intersection3) ->
       intersection3_to_js __b_to_js __c_to_js __d_to_js x50)
     __a_to_js
     x49

type ('a, 'b, 'c, 'd, 'e) intersection5 =
  (('b, 'c, 'd, 'e) intersection4, 'a) and_

let rec intersection5_of_js :
          'a 'b 'c 'd 'e.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> (Ojs.t -> 'e)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd, 'e) intersection5
  =
  fun (type __a __b __c __d __e)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (__e_of_js : Ojs.t -> __e)
      (x68 : Ojs.t) ->
   and__of_js
     (fun (x69 : Ojs.t) ->
       intersection4_of_js __b_of_js __c_of_js __d_of_js __e_of_js x69)
     __a_of_js
     x68

and intersection5_to_js :
      'a 'b 'c 'd 'e.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('e -> Ojs.t)
      -> ('a, 'b, 'c, 'd, 'e) intersection5
      -> Ojs.t
  =
  fun (type __a __b __c __d __e)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (__e_to_js : __e -> Ojs.t)
      (x61 : ((__b, __c, __d, __e) intersection4, __a) and_) ->
   and__to_js
     (fun (x62 : (__b, __c, __d, __e) intersection4) ->
       intersection4_to_js __b_to_js __c_to_js __d_to_js __e_to_js x62)
     __a_to_js
     x61

type ('a, 'b, 'c, 'd, 'e, 'f) intersection6 =
  (('b, 'c, 'd, 'e, 'f) intersection5, 'a) and_

let rec intersection6_of_js :
          'a 'b 'c 'd 'e 'f.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> (Ojs.t -> 'e)
          -> (Ojs.t -> 'f)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd, 'e, 'f) intersection6
  =
  fun (type __a __b __c __d __e __f)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (__e_of_js : Ojs.t -> __e)
      (__f_of_js : Ojs.t -> __f)
      (x83 : Ojs.t) ->
   and__of_js
     (fun (x84 : Ojs.t) ->
       intersection5_of_js __b_of_js __c_of_js __d_of_js __e_of_js __f_of_js x84)
     __a_of_js
     x83

and intersection6_to_js :
      'a 'b 'c 'd 'e 'f.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('e -> Ojs.t)
      -> ('f -> Ojs.t)
      -> ('a, 'b, 'c, 'd, 'e, 'f) intersection6
      -> Ojs.t
  =
  fun (type __a __b __c __d __e __f)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (__e_to_js : __e -> Ojs.t)
      (__f_to_js : __f -> Ojs.t)
      (x75 : ((__b, __c, __d, __e, __f) intersection5, __a) and_) ->
   and__to_js
     (fun (x76 : (__b, __c, __d, __e, __f) intersection5) ->
       intersection5_to_js __b_to_js __c_to_js __d_to_js __e_to_js __f_to_js x76)
     __a_to_js
     x75

type ('a, 'b, 'c, 'd, 'e, 'f, 'g) intersection7 =
  (('b, 'c, 'd, 'e, 'f, 'g) intersection6, 'a) and_

let rec intersection7_of_js :
          'a 'b 'c 'd 'e 'f 'g.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> (Ojs.t -> 'e)
          -> (Ojs.t -> 'f)
          -> (Ojs.t -> 'g)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) intersection7
  =
  fun (type __a __b __c __d __e __f __g)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (__e_of_js : Ojs.t -> __e)
      (__f_of_js : Ojs.t -> __f)
      (__g_of_js : Ojs.t -> __g)
      (x100 : Ojs.t) ->
   and__of_js
     (fun (x101 : Ojs.t) ->
       intersection6_of_js
         __b_of_js
         __c_of_js
         __d_of_js
         __e_of_js
         __f_of_js
         __g_of_js
         x101)
     __a_of_js
     x100

and intersection7_to_js :
      'a 'b 'c 'd 'e 'f 'g.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('e -> Ojs.t)
      -> ('f -> Ojs.t)
      -> ('g -> Ojs.t)
      -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) intersection7
      -> Ojs.t
  =
  fun (type __a __b __c __d __e __f __g)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (__e_to_js : __e -> Ojs.t)
      (__f_to_js : __f -> Ojs.t)
      (__g_to_js : __g -> Ojs.t)
      (x91 : ((__b, __c, __d, __e, __f, __g) intersection6, __a) and_) ->
   and__to_js
     (fun (x92 : (__b, __c, __d, __e, __f, __g) intersection6) ->
       intersection6_to_js
         __b_to_js
         __c_to_js
         __d_to_js
         __e_to_js
         __f_to_js
         __g_to_js
         x92)
     __a_to_js
     x91

type ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) intersection8 =
  (('b, 'c, 'd, 'e, 'f, 'g, 'h) intersection7, 'a) and_

let rec intersection8_of_js :
          'a 'b 'c 'd 'e 'f 'g 'h.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> (Ojs.t -> 'e)
          -> (Ojs.t -> 'f)
          -> (Ojs.t -> 'g)
          -> (Ojs.t -> 'h)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) intersection8
  =
  fun (type __a __b __c __d __e __f __g __h)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (__e_of_js : Ojs.t -> __e)
      (__f_of_js : Ojs.t -> __f)
      (__g_of_js : Ojs.t -> __g)
      (__h_of_js : Ojs.t -> __h)
      (x119 : Ojs.t) ->
   and__of_js
     (fun (x120 : Ojs.t) ->
       intersection7_of_js
         __b_of_js
         __c_of_js
         __d_of_js
         __e_of_js
         __f_of_js
         __g_of_js
         __h_of_js
         x120)
     __a_of_js
     x119

and intersection8_to_js :
      'a 'b 'c 'd 'e 'f 'g 'h.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('e -> Ojs.t)
      -> ('f -> Ojs.t)
      -> ('g -> Ojs.t)
      -> ('h -> Ojs.t)
      -> ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) intersection8
      -> Ojs.t
  =
  fun (type __a __b __c __d __e __f __g __h)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (__e_to_js : __e -> Ojs.t)
      (__f_to_js : __f -> Ojs.t)
      (__g_to_js : __g -> Ojs.t)
      (__h_to_js : __h -> Ojs.t)
      (x109 : ((__b, __c, __d, __e, __f, __g, __h) intersection7, __a) and_) ->
   and__to_js
     (fun (x110 : (__b, __c, __d, __e, __f, __g, __h) intersection7) ->
       intersection7_to_js
         __b_to_js
         __c_to_js
         __d_to_js
         __e_to_js
         __f_to_js
         __g_to_js
         __h_to_js
         x110)
     __a_to_js
     x109

module Intersection = struct
  let get_0 x = Obj.magic x

  let get_1 x = Obj.magic x

  let get_2 x = Obj.magic x

  let get_3 x = Obj.magic x

  let get_4 x = Obj.magic x

  let get_5 x = Obj.magic x

  let get_6 x = Obj.magic x
end

type ('a, 'b) or_from_js =
  { a_of_js : Ojs.t -> 'a
  ; b_of_js : Ojs.t -> 'b
  ; value : Ojs.t
  }

type ('a, 'b) or_ =
  | A of 'a
  | B of 'b
  | FromJS of ('a, 'b) or_from_js

let or__to_js a_to_js b_to_js = function
  | A a ->
    a_to_js a
  | B b ->
    b_to_js b
  | FromJS x ->
    x.value

let or__of_js a_of_js b_of_js value = FromJS { a_of_js; b_of_js; value }

module Or = struct
  type ('a, 'b) t = ('a, 'b) or_

  let rec t_of_js : 'a 'b. (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) t
    =
    fun (type __a __b)
        (__a_of_js : Ojs.t -> __a)
        (__b_of_js : Ojs.t -> __b)
        (x132 : Ojs.t) ->
     or__of_js __a_of_js __b_of_js x132

  and t_to_js : 'a 'b. ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) t -> Ojs.t =
    fun (type __a __b)
        (__a_to_js : __a -> Ojs.t)
        (__b_to_js : __b -> Ojs.t)
        (x129 : (__a, __b) or_) ->
     or__to_js __a_to_js __b_to_js x129

  let inl (x : 'a) : ('a, 'b) t = A x

  let inr (x : 'b) : ('a, 'b) t = B x

  let test ~is_left ~is_right = function
    | A a ->
      `Left a
    | B b ->
      `Right b
    | FromJS x ->
      if is_left x.value then
        `Left (x.a_of_js x.value)
      else if is_right x.value then
        `Right (x.b_of_js x.value)
      else
        `Other x.value
end

type ('a, 'b) union2 = ('b, 'a) or_

let rec union2_of_js :
          'a 'b. (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) union2
  =
  fun (type __a __b)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (x138 : Ojs.t) ->
   or__of_js __b_of_js __a_of_js x138

and union2_to_js :
      'a 'b. ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) union2 -> Ojs.t
  =
  fun (type __a __b)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (x135 : (__b, __a) or_) ->
   or__to_js __b_to_js __a_to_js x135

type ('a, 'b, 'c) union3 = (('b, 'c) union2, 'a) or_

let rec union3_of_js :
          'a 'b 'c.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> Ojs.t
          -> ('a, 'b, 'c) union3
  =
  fun (type __a __b __c)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (x146 : Ojs.t) ->
   or__of_js
     (fun (x147 : Ojs.t) -> union2_of_js __b_of_js __c_of_js x147)
     __a_of_js
     x146

and union3_to_js :
      'a 'b 'c.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('a, 'b, 'c) union3
      -> Ojs.t
  =
  fun (type __a __b __c)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (x141 : ((__b, __c) union2, __a) or_) ->
   or__to_js
     (fun (x142 : (__b, __c) union2) -> union2_to_js __b_to_js __c_to_js x142)
     __a_to_js
     x141

type ('a, 'b, 'c, 'd) union4 = (('b, 'c, 'd) union3, 'a) or_

let rec union4_of_js :
          'a 'b 'c 'd.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd) union4
  =
  fun (type __a __b __c __d)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (x157 : Ojs.t) ->
   or__of_js
     (fun (x158 : Ojs.t) -> union3_of_js __b_of_js __c_of_js __d_of_js x158)
     __a_of_js
     x157

and union4_to_js :
      'a 'b 'c 'd.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('a, 'b, 'c, 'd) union4
      -> Ojs.t
  =
  fun (type __a __b __c __d)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (x151 : ((__b, __c, __d) union3, __a) or_) ->
   or__to_js
     (fun (x152 : (__b, __c, __d) union3) ->
       union3_to_js __b_to_js __c_to_js __d_to_js x152)
     __a_to_js
     x151

type ('a, 'b, 'c, 'd, 'e) union5 = (('b, 'c, 'd, 'e) union4, 'a) or_

let rec union5_of_js :
          'a 'b 'c 'd 'e.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> (Ojs.t -> 'e)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd, 'e) union5
  =
  fun (type __a __b __c __d __e)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (__e_of_js : Ojs.t -> __e)
      (x170 : Ojs.t) ->
   or__of_js
     (fun (x171 : Ojs.t) ->
       union4_of_js __b_of_js __c_of_js __d_of_js __e_of_js x171)
     __a_of_js
     x170

and union5_to_js :
      'a 'b 'c 'd 'e.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('e -> Ojs.t)
      -> ('a, 'b, 'c, 'd, 'e) union5
      -> Ojs.t
  =
  fun (type __a __b __c __d __e)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (__e_to_js : __e -> Ojs.t)
      (x163 : ((__b, __c, __d, __e) union4, __a) or_) ->
   or__to_js
     (fun (x164 : (__b, __c, __d, __e) union4) ->
       union4_to_js __b_to_js __c_to_js __d_to_js __e_to_js x164)
     __a_to_js
     x163

type ('a, 'b, 'c, 'd, 'e, 'f) union6 = (('b, 'c, 'd, 'e, 'f) union5, 'a) or_

let rec union6_of_js :
          'a 'b 'c 'd 'e 'f.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> (Ojs.t -> 'e)
          -> (Ojs.t -> 'f)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd, 'e, 'f) union6
  =
  fun (type __a __b __c __d __e __f)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (__e_of_js : Ojs.t -> __e)
      (__f_of_js : Ojs.t -> __f)
      (x185 : Ojs.t) ->
   or__of_js
     (fun (x186 : Ojs.t) ->
       union5_of_js __b_of_js __c_of_js __d_of_js __e_of_js __f_of_js x186)
     __a_of_js
     x185

and union6_to_js :
      'a 'b 'c 'd 'e 'f.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('e -> Ojs.t)
      -> ('f -> Ojs.t)
      -> ('a, 'b, 'c, 'd, 'e, 'f) union6
      -> Ojs.t
  =
  fun (type __a __b __c __d __e __f)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (__e_to_js : __e -> Ojs.t)
      (__f_to_js : __f -> Ojs.t)
      (x177 : ((__b, __c, __d, __e, __f) union5, __a) or_) ->
   or__to_js
     (fun (x178 : (__b, __c, __d, __e, __f) union5) ->
       union5_to_js __b_to_js __c_to_js __d_to_js __e_to_js __f_to_js x178)
     __a_to_js
     x177

type ('a, 'b, 'c, 'd, 'e, 'f, 'g) union7 =
  (('b, 'c, 'd, 'e, 'f, 'g) union6, 'a) or_

let rec union7_of_js :
          'a 'b 'c 'd 'e 'f 'g.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> (Ojs.t -> 'e)
          -> (Ojs.t -> 'f)
          -> (Ojs.t -> 'g)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) union7
  =
  fun (type __a __b __c __d __e __f __g)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (__e_of_js : Ojs.t -> __e)
      (__f_of_js : Ojs.t -> __f)
      (__g_of_js : Ojs.t -> __g)
      (x202 : Ojs.t) ->
   or__of_js
     (fun (x203 : Ojs.t) ->
       union6_of_js
         __b_of_js
         __c_of_js
         __d_of_js
         __e_of_js
         __f_of_js
         __g_of_js
         x203)
     __a_of_js
     x202

and union7_to_js :
      'a 'b 'c 'd 'e 'f 'g.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('e -> Ojs.t)
      -> ('f -> Ojs.t)
      -> ('g -> Ojs.t)
      -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) union7
      -> Ojs.t
  =
  fun (type __a __b __c __d __e __f __g)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (__e_to_js : __e -> Ojs.t)
      (__f_to_js : __f -> Ojs.t)
      (__g_to_js : __g -> Ojs.t)
      (x193 : ((__b, __c, __d, __e, __f, __g) union6, __a) or_) ->
   or__to_js
     (fun (x194 : (__b, __c, __d, __e, __f, __g) union6) ->
       union6_to_js
         __b_to_js
         __c_to_js
         __d_to_js
         __e_to_js
         __f_to_js
         __g_to_js
         x194)
     __a_to_js
     x193

type ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) union8 =
  (('b, 'c, 'd, 'e, 'f, 'g, 'h) union7, 'a) or_

let rec union8_of_js :
          'a 'b 'c 'd 'e 'f 'g 'h.
          (Ojs.t -> 'a)
          -> (Ojs.t -> 'b)
          -> (Ojs.t -> 'c)
          -> (Ojs.t -> 'd)
          -> (Ojs.t -> 'e)
          -> (Ojs.t -> 'f)
          -> (Ojs.t -> 'g)
          -> (Ojs.t -> 'h)
          -> Ojs.t
          -> ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) union8
  =
  fun (type __a __b __c __d __e __f __g __h)
      (__a_of_js : Ojs.t -> __a)
      (__b_of_js : Ojs.t -> __b)
      (__c_of_js : Ojs.t -> __c)
      (__d_of_js : Ojs.t -> __d)
      (__e_of_js : Ojs.t -> __e)
      (__f_of_js : Ojs.t -> __f)
      (__g_of_js : Ojs.t -> __g)
      (__h_of_js : Ojs.t -> __h)
      (x221 : Ojs.t) ->
   or__of_js
     (fun (x222 : Ojs.t) ->
       union7_of_js
         __b_of_js
         __c_of_js
         __d_of_js
         __e_of_js
         __f_of_js
         __g_of_js
         __h_of_js
         x222)
     __a_of_js
     x221

and union8_to_js :
      'a 'b 'c 'd 'e 'f 'g 'h.
      ('a -> Ojs.t)
      -> ('b -> Ojs.t)
      -> ('c -> Ojs.t)
      -> ('d -> Ojs.t)
      -> ('e -> Ojs.t)
      -> ('f -> Ojs.t)
      -> ('g -> Ojs.t)
      -> ('h -> Ojs.t)
      -> ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) union8
      -> Ojs.t
  =
  fun (type __a __b __c __d __e __f __g __h)
      (__a_to_js : __a -> Ojs.t)
      (__b_to_js : __b -> Ojs.t)
      (__c_to_js : __c -> Ojs.t)
      (__d_to_js : __d -> Ojs.t)
      (__e_to_js : __e -> Ojs.t)
      (__f_to_js : __f -> Ojs.t)
      (__g_to_js : __g -> Ojs.t)
      (__h_to_js : __h -> Ojs.t)
      (x211 : ((__b, __c, __d, __e, __f, __g, __h) union7, __a) or_) ->
   or__to_js
     (fun (x212 : (__b, __c, __d, __e, __f, __g, __h) union7) ->
       union7_to_js
         __b_to_js
         __c_to_js
         __d_to_js
         __e_to_js
         __f_to_js
         __g_to_js
         __h_to_js
         x212)
     __a_to_js
     x211

module Union = struct
  let inject_0 x = Obj.magic x

  let inject_1 x = Obj.magic x

  let inject_2 x = Obj.magic x

  let inject_3 x = Obj.magic x

  let inject_4 x = Obj.magic x

  let inject_5 x = Obj.magic x

  let inject_6 x = Obj.magic x
end

type 'a or_string =
  [ `String of string
  | `Other of 'a
  ]

let rec or_string_of_js : 'a. (Ojs.t -> 'a) -> Ojs.t -> 'a or_string =
 fun a_of_js x ->
  match Ojs.type_of x with
  | "string" ->
    `String (Ojs.string_of_js x)
  | _ ->
    `Other (a_of_js x)

and or_string_to_js : 'a. ('a -> Ojs.t) -> 'a or_string -> Ojs.t =
 fun a_to_js -> function
  | `String x ->
    Ojs.string_to_js x
  | `Other x ->
    a_to_js x

type 'a or_number =
  [ `Number of float
  | `Other of 'a
  ]

let rec or_number_of_js : 'a. (Ojs.t -> 'a) -> Ojs.t -> 'a or_number =
 fun a_of_js x ->
  match Ojs.type_of x with
  | "number" ->
    `Number (Ojs.float_of_js x)
  | _ ->
    `Other (a_of_js x)

and or_number_to_js : 'a. ('a -> Ojs.t) -> 'a or_number -> Ojs.t =
 fun a_to_js -> function
  | `Number x ->
    Ojs.float_to_js x
  | `Other x ->
    a_to_js x

type 'a or_boolean =
  [ `Boolean of bool
  | `Other of 'a
  ]

let rec or_boolean_of_js : 'a. (Ojs.t -> 'a) -> Ojs.t -> 'a or_boolean =
 fun a_of_js x ->
  match Ojs.type_of x with
  | "boolean" ->
    `Boolean (Ojs.bool_of_js x)
  | _ ->
    `Other (a_of_js x)

and or_boolean_to_js : 'a. ('a -> Ojs.t) -> 'a or_boolean -> Ojs.t =
 fun a_to_js -> function
  | `Boolean x ->
    Ojs.bool_to_js x
  | `Other x ->
    a_to_js x

type 'a or_symbol =
  [ `Symbol of symbol
  | `Other of 'a
  ]

let rec or_symbol_of_js : 'a. (Ojs.t -> 'a) -> Ojs.t -> 'a or_symbol =
 fun a_of_js x ->
  match Ojs.type_of x with
  | "symbol" ->
    `Symbol (symbol_of_js x)
  | _ ->
    `Other (a_of_js x)

and or_symbol_to_js : 'a. ('a -> Ojs.t) -> 'a or_symbol -> Ojs.t =
 fun a_to_js -> function `Symbol x -> symbol_to_js x | `Other x -> a_to_js x

type 'a or_bigint =
  [ `BigInt of bigint
  | `Other of 'a
  ]

let rec or_bigint_of_js : 'a. (Ojs.t -> 'a) -> Ojs.t -> 'a or_bigint =
 fun a_of_js x ->
  match Ojs.type_of x with
  | "bigint" ->
    `BigInt (bigint_of_js x)
  | _ ->
    `Other (a_of_js x)

and or_bigint_to_js : 'a. ('a -> Ojs.t) -> 'a or_bigint -> Ojs.t =
 fun a_to_js -> function `BigInt x -> bigint_to_js x | `Other x -> a_to_js x

let (is_array : Ojs.t -> bool) =
 fun (x231 : Ojs.t) ->
  Ojs.bool_of_js
    (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "isArray" [| x231 |])

type ('a, 't) or_array =
  [ `Array of 't list
  | `Other of 'a
  ]

let rec or_array_of_js :
          'a 't. (Ojs.t -> 'a) -> (Ojs.t -> 't) -> Ojs.t -> ('a, 't) or_array
  =
 fun a_of_js t_of_js x ->
  if is_array x then
    `Array (Ojs.list_of_js t_of_js x)
  else
    `Other (a_of_js x)

and or_array_to_js :
      'a 't. ('a -> Ojs.t) -> ('t -> Ojs.t) -> ('a, 't) or_array -> Ojs.t
  =
 fun a_to_js t_to_js -> function
  | `Array x ->
    Ojs.list_to_js t_to_js x
  | `Other x ->
    a_to_js x

type ('a, 'cases) or_enum =
  [ `Enum of 'cases
  | `Other of 'a
  ]

let rec or_enum_of_js :
          'a 'cases.
          (Ojs.t -> 'a) -> (Ojs.t -> 'cases) -> Ojs.t -> ('a, 'cases) or_enum
  =
 fun a_of_js cases_of_js x ->
  try `Enum (cases_of_js x) with _ -> `Other (a_of_js x)

and or_enum_to_js :
      'a 'cases.
      ('a -> Ojs.t) -> ('cases -> Ojs.t) -> ('a, 'cases) or_enum -> Ojs.t
  =
 fun a_to_js cases_to_js -> function
  | `Enum cases ->
    cases_to_js cases
  | `Other x ->
    a_to_js x

external pure_js_expr : string -> Ojs.t = "caml_pure_js_expr"

module Internal = struct
  module AnonymousInterfaces = struct
    type anonymous_interface_0 = [ `anonymous_interface_0 ] intf

    let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0 =
      Obj.magic

    and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t = Obj.magic

    type anonymous_interface_1 = [ `anonymous_interface_1 ] intf

    let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1 =
      Obj.magic

    and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t = Obj.magic

    type anonymous_interface_2 = [ `anonymous_interface_2 ] intf

    let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2 =
      Obj.magic

    and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t = Obj.magic

    type anonymous_interface_3 = [ `anonymous_interface_3 ] intf

    let rec anonymous_interface_3_of_js : Ojs.t -> anonymous_interface_3 =
      Obj.magic

    and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t = Obj.magic

    type anonymous_interface_4 = [ `anonymous_interface_4 ] intf

    let rec anonymous_interface_4_of_js : Ojs.t -> anonymous_interface_4 =
      Obj.magic

    and anonymous_interface_4_to_js : anonymous_interface_4 -> Ojs.t = Obj.magic

    type ('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5 =
      [ `anonymous_interface_5 ] intf

    let rec anonymous_interface_5_of_js :
              'A 'A0 'A1 'A2 'A3 'R.
              (Ojs.t -> 'A)
              -> (Ojs.t -> 'A0)
              -> (Ojs.t -> 'A1)
              -> (Ojs.t -> 'A2)
              -> (Ojs.t -> 'A3)
              -> (Ojs.t -> 'R)
              -> Ojs.t
              -> ('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5
      =
     fun _A _A0 _A1 _A2 _A3 _R -> Obj.magic

    and anonymous_interface_5_to_js :
          'A 'A0 'A1 'A2 'A3 'R.
          ('A -> Ojs.t)
          -> ('A0 -> Ojs.t)
          -> ('A1 -> Ojs.t)
          -> ('A2 -> Ojs.t)
          -> ('A3 -> Ojs.t)
          -> ('R -> Ojs.t)
          -> ('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5
          -> Ojs.t
      =
     fun _A _A0 _A1 _A2 _A3 _R -> Obj.magic

    type ('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6 =
      [ `anonymous_interface_6 ] intf

    let rec anonymous_interface_6_of_js :
              'A 'A0 'A1 'A2 'R.
              (Ojs.t -> 'A)
              -> (Ojs.t -> 'A0)
              -> (Ojs.t -> 'A1)
              -> (Ojs.t -> 'A2)
              -> (Ojs.t -> 'R)
              -> Ojs.t
              -> ('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6
      =
     fun _A _A0 _A1 _A2 _R -> Obj.magic

    and anonymous_interface_6_to_js :
          'A 'A0 'A1 'A2 'R.
          ('A -> Ojs.t)
          -> ('A0 -> Ojs.t)
          -> ('A1 -> Ojs.t)
          -> ('A2 -> Ojs.t)
          -> ('R -> Ojs.t)
          -> ('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6
          -> Ojs.t
      =
     fun _A _A0 _A1 _A2 _R -> Obj.magic

    type ('A, 'A0, 'A1, 'R) anonymous_interface_7 =
      [ `anonymous_interface_7 ] intf

    let rec anonymous_interface_7_of_js :
              'A 'A0 'A1 'R.
              (Ojs.t -> 'A)
              -> (Ojs.t -> 'A0)
              -> (Ojs.t -> 'A1)
              -> (Ojs.t -> 'R)
              -> Ojs.t
              -> ('A, 'A0, 'A1, 'R) anonymous_interface_7
      =
     fun _A _A0 _A1 _R -> Obj.magic

    and anonymous_interface_7_to_js :
          'A 'A0 'A1 'R.
          ('A -> Ojs.t)
          -> ('A0 -> Ojs.t)
          -> ('A1 -> Ojs.t)
          -> ('R -> Ojs.t)
          -> ('A, 'A0, 'A1, 'R) anonymous_interface_7
          -> Ojs.t
      =
     fun _A _A0 _A1 _R -> Obj.magic

    type ('A, 'A0, 'R) anonymous_interface_8 = [ `anonymous_interface_8 ] intf

    let rec anonymous_interface_8_of_js :
              'A 'A0 'R.
              (Ojs.t -> 'A)
              -> (Ojs.t -> 'A0)
              -> (Ojs.t -> 'R)
              -> Ojs.t
              -> ('A, 'A0, 'R) anonymous_interface_8
      =
     fun _A _A0 _R -> Obj.magic

    and anonymous_interface_8_to_js :
          'A 'A0 'R.
          ('A -> Ojs.t)
          -> ('A0 -> Ojs.t)
          -> ('R -> Ojs.t)
          -> ('A, 'A0, 'R) anonymous_interface_8
          -> Ojs.t
      =
     fun _A _A0 _R -> Obj.magic

    type ('A, 'R) anonymous_interface_9 = [ `anonymous_interface_9 ] intf

    let rec anonymous_interface_9_of_js :
              'A 'R.
              (Ojs.t -> 'A)
              -> (Ojs.t -> 'R)
              -> Ojs.t
              -> ('A, 'R) anonymous_interface_9
      =
     fun _A _R -> Obj.magic

    and anonymous_interface_9_to_js :
          'A 'R.
          ('A -> Ojs.t)
          -> ('R -> Ojs.t)
          -> ('A, 'R) anonymous_interface_9
          -> Ojs.t
      =
     fun _A _R -> Obj.magic

    type ('A, 'T) anonymous_interface_10 = [ `anonymous_interface_10 ] intf

    let rec anonymous_interface_10_of_js :
              'A 'T.
              (Ojs.t -> 'A)
              -> (Ojs.t -> 'T)
              -> Ojs.t
              -> ('A, 'T) anonymous_interface_10
      =
     fun _A _T -> Obj.magic

    and anonymous_interface_10_to_js :
          'A 'T.
          ('A -> Ojs.t)
          -> ('T -> Ojs.t)
          -> ('A, 'T) anonymous_interface_10
          -> Ojs.t
      =
     fun _A _T -> Obj.magic

    type ('AX, 'R) anonymous_interface_11 = [ `anonymous_interface_11 ] intf

    let rec anonymous_interface_11_of_js :
              'AX 'R.
              (Ojs.t -> 'AX)
              -> (Ojs.t -> 'R)
              -> Ojs.t
              -> ('AX, 'R) anonymous_interface_11
      =
     fun _AX _R -> Obj.magic

    and anonymous_interface_11_to_js :
          'AX 'R.
          ('AX -> Ojs.t)
          -> ('R -> Ojs.t)
          -> ('AX, 'R) anonymous_interface_11
          -> Ojs.t
      =
     fun _AX _R -> Obj.magic

    type 'T anonymous_interface_12 = [ `anonymous_interface_12 ] intf

    let rec anonymous_interface_12_of_js :
              'T. (Ojs.t -> 'T) -> Ojs.t -> 'T anonymous_interface_12
      =
     fun _T -> Obj.magic

    and anonymous_interface_12_to_js :
          'T. ('T -> Ojs.t) -> 'T anonymous_interface_12 -> Ojs.t
      =
     fun _T -> Obj.magic
  end

  module Types = struct
    open AnonymousInterfaces

    type 'T _Array = [ `Array of 'T ] intf

    and _ArrayBuffer = [ `ArrayBuffer ] intf

    and _ArrayBufferConstructor = [ `ArrayBufferConstructor ] intf

    and _ArrayBufferTypes = [ `ArrayBufferTypes ] intf

    and _ArrayBufferView = [ `ArrayBufferView ] intf

    and _ArrayConstructor = [ `ArrayConstructor ] intf

    and _Boolean = [ `Boolean ] intf

    and _BooleanConstructor = [ `BooleanConstructor ] intf

    and _CallableFunction = [ `CallableFunction | `Function ] intf

    and _ClassDecorator = [ `ClassDecorator ] intf

    and 'T _ConcatArray = [ `ConcatArray of 'T ] intf

    and 'T _ConstructorParameters = any

    and _DataView = [ `DataView ] intf

    and _DataViewConstructor = [ `DataViewConstructor ] intf

    and _Date = [ `Date ] intf

    and _DateConstructor = [ `DateConstructor ] intf

    and _Error = [ `Error ] intf

    and _ErrorConstructor = [ `ErrorConstructor ] intf

    and _EvalError = [ `EvalError | `Error ] intf

    and _EvalErrorConstructor =
      [ `EvalErrorConstructor | `ErrorConstructor ] intf

    and ('T, 'U) _Exclude = any

    and ('T, 'U) _Extract = any

    and _Float32Array = [ `Float32Array ] intf

    and _Float32ArrayConstructor = [ `Float32ArrayConstructor ] intf

    and _Float64Array = [ `Float64Array ] intf

    and _Float64ArrayConstructor = [ `Float64ArrayConstructor ] intf

    and _Function = untyped_function

    and _FunctionConstructor = [ `FunctionConstructor ] intf

    and _IArguments = [ `IArguments ] intf

    and _ImportMeta = [ `ImportMeta ] intf

    and 'T _InstanceType = any

    and _Int16Array = [ `Int16Array ] intf

    and _Int16ArrayConstructor = [ `Int16ArrayConstructor ] intf

    and _Int32Array = [ `Int32Array ] intf

    and _Int32ArrayConstructor = [ `Int32ArrayConstructor ] intf

    and _Int8Array = [ `Int8Array ] intf

    and _Int8ArrayConstructor = [ `Int8ArrayConstructor ] intf

    and _Intl_Collator = [ `Intl_Collator ] intf

    and _Intl_CollatorOptions = [ `Intl_CollatorOptions ] intf

    and _Intl_DateTimeFormat = [ `Intl_DateTimeFormat ] intf

    and _Intl_DateTimeFormatOptions = [ `Intl_DateTimeFormatOptions ] intf

    and _Intl_NumberFormat = [ `Intl_NumberFormat ] intf

    and _Intl_NumberFormatOptions = [ `Intl_NumberFormatOptions ] intf

    and _Intl_ResolvedCollatorOptions = [ `Intl_ResolvedCollatorOptions ] intf

    and _Intl_ResolvedDateTimeFormatOptions =
      [ `Intl_ResolvedDateTimeFormatOptions ] intf

    and _Intl_ResolvedNumberFormatOptions =
      [ `Intl_ResolvedNumberFormatOptions ] intf

    and _JSON = [ `JSON ] intf

    and _Math = [ `Math ] intf

    and _MethodDecorator = [ `MethodDecorator ] intf

    and _NewableFunction = [ `NewableFunction | `Function ] intf

    and 'T _NonNullable = any

    and _Number = [ `Number ] intf

    and _NumberConstructor = [ `NumberConstructor ] intf

    and _Object = untyped_object

    and _ObjectConstructor = [ `ObjectConstructor ] intf

    and ('T, 'K) _Omit = ('T, (any, 'K) _Exclude) _Pick

    and 'T _OmitThisParameter = any

    and _ParameterDecorator = [ `ParameterDecorator ] intf

    and 'T _Parameters = any

    and 'T _Partial = any

    and ('T, 'K) _Pick = any

    and 'T _Promise = [ `Promise of 'T ] intf

    and _PropertyDecorator = [ `PropertyDecorator ] intf

    and _PropertyDescriptor = [ `PropertyDescriptor ] intf

    and _PropertyDescriptorMap = [ `PropertyDescriptorMap ] intf

    and _PropertyKey = symbol or_string or_number

    and _RangeError = [ `RangeError | `Error ] intf

    and _RangeErrorConstructor =
      [ `RangeErrorConstructor | `ErrorConstructor ] intf

    and 'T _Readonly = any

    and 'T _ReadonlyArray = [ `ReadonlyArray of 'T ] intf

    and ('K, 'T) _Record = any

    and _ReferenceError = [ `ReferenceError | `Error ] intf

    and _ReferenceErrorConstructor =
      [ `ReferenceErrorConstructor | `ErrorConstructor ] intf

    and _RegExp = regexp

    and _RegExpConstructor = [ `RegExpConstructor ] intf

    and _RegExpExecArray = [ `RegExpExecArray | `Array of string ] intf

    and _RegExpMatchArray = [ `RegExpMatchArray | `Array of string ] intf

    and 'T _Required = any

    and 'T _ReturnType = any

    and _String = [ `String ] intf

    and _StringConstructor = [ `StringConstructor ] intf

    and _Symbol = symbol

    and _SyntaxError = [ `SyntaxError | `Error ] intf

    and _SyntaxErrorConstructor =
      [ `SyntaxErrorConstructor | `ErrorConstructor ] intf

    and _TemplateStringsArray =
      [ `TemplateStringsArray | `ReadonlyArray of string ] intf

    and 'T _ThisParameterType = any

    and 'T _ThisType = [ `ThisType of 'T ] intf

    and _TypeError = [ `TypeError | `Error ] intf

    and _TypeErrorConstructor =
      [ `TypeErrorConstructor | `ErrorConstructor ] intf

    and 'T _TypedPropertyDescriptor = [ `TypedPropertyDescriptor of 'T ] intf

    and _URIError = [ `URIError | `Error ] intf

    and _URIErrorConstructor = [ `URIErrorConstructor | `ErrorConstructor ] intf

    and _Uint16Array = [ `Uint16Array ] intf

    and _Uint16ArrayConstructor = [ `Uint16ArrayConstructor ] intf

    and _Uint32Array = [ `Uint32Array ] intf

    and _Uint32ArrayConstructor = [ `Uint32ArrayConstructor ] intf

    and _Uint8Array = [ `Uint8Array ] intf

    and _Uint8ArrayConstructor = [ `Uint8ArrayConstructor ] intf

    and _Uint8ClampedArray = [ `Uint8ClampedArray ] intf

    and _Uint8ClampedArrayConstructor = [ `Uint8ClampedArrayConstructor ] intf

    let rec _Array_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _Array =
     fun _T -> Obj.magic

    and _Array_to_js : 'T. ('T -> Ojs.t) -> 'T _Array -> Ojs.t =
     fun _T -> Obj.magic

    and _ArrayBuffer_of_js : Ojs.t -> _ArrayBuffer = Obj.magic

    and _ArrayBuffer_to_js : _ArrayBuffer -> Ojs.t = Obj.magic

    and _ArrayBufferConstructor_of_js : Ojs.t -> _ArrayBufferConstructor =
      Obj.magic

    and _ArrayBufferConstructor_to_js : _ArrayBufferConstructor -> Ojs.t =
      Obj.magic

    and _ArrayBufferTypes_of_js : Ojs.t -> _ArrayBufferTypes = Obj.magic

    and _ArrayBufferTypes_to_js : _ArrayBufferTypes -> Ojs.t = Obj.magic

    and _ArrayBufferView_of_js : Ojs.t -> _ArrayBufferView = Obj.magic

    and _ArrayBufferView_to_js : _ArrayBufferView -> Ojs.t = Obj.magic

    and _ArrayConstructor_of_js : Ojs.t -> _ArrayConstructor = Obj.magic

    and _ArrayConstructor_to_js : _ArrayConstructor -> Ojs.t = Obj.magic

    and _Boolean_of_js : Ojs.t -> _Boolean = Obj.magic

    and _Boolean_to_js : _Boolean -> Ojs.t = Obj.magic

    and _BooleanConstructor_of_js : Ojs.t -> _BooleanConstructor = Obj.magic

    and _BooleanConstructor_to_js : _BooleanConstructor -> Ojs.t = Obj.magic

    and _CallableFunction_of_js : Ojs.t -> _CallableFunction = Obj.magic

    and _CallableFunction_to_js : _CallableFunction -> Ojs.t = Obj.magic

    and _ClassDecorator_of_js : Ojs.t -> _ClassDecorator = Obj.magic

    and _ClassDecorator_to_js : _ClassDecorator -> Ojs.t = Obj.magic

    and _ConcatArray_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _ConcatArray =
     fun _T -> Obj.magic

    and _ConcatArray_to_js : 'T. ('T -> Ojs.t) -> 'T _ConcatArray -> Ojs.t =
     fun _T -> Obj.magic

    and _ConstructorParameters_of_js :
          'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _ConstructorParameters
      =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x2 : Ojs.t) -> any_of_js x2

    and _ConstructorParameters_to_js :
          'T. ('T -> Ojs.t) -> 'T _ConstructorParameters -> Ojs.t
      =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x1 : any) -> any_to_js x1

    and _DataView_of_js : Ojs.t -> _DataView = Obj.magic

    and _DataView_to_js : _DataView -> Ojs.t = Obj.magic

    and _DataViewConstructor_of_js : Ojs.t -> _DataViewConstructor = Obj.magic

    and _DataViewConstructor_to_js : _DataViewConstructor -> Ojs.t = Obj.magic

    and _Date_of_js : Ojs.t -> _Date = Obj.magic

    and _Date_to_js : _Date -> Ojs.t = Obj.magic

    and _DateConstructor_of_js : Ojs.t -> _DateConstructor = Obj.magic

    and _DateConstructor_to_js : _DateConstructor -> Ojs.t = Obj.magic

    and _Error_of_js : Ojs.t -> _Error = Obj.magic

    and _Error_to_js : _Error -> Ojs.t = Obj.magic

    and _ErrorConstructor_of_js : Ojs.t -> _ErrorConstructor = Obj.magic

    and _ErrorConstructor_to_js : _ErrorConstructor -> Ojs.t = Obj.magic

    and _EvalError_of_js : Ojs.t -> _EvalError = Obj.magic

    and _EvalError_to_js : _EvalError -> Ojs.t = Obj.magic

    and _EvalErrorConstructor_of_js : Ojs.t -> _EvalErrorConstructor = Obj.magic

    and _EvalErrorConstructor_to_js : _EvalErrorConstructor -> Ojs.t = Obj.magic

    and _Exclude_of_js :
          'T 'U. (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) _Exclude
      =
      fun (type __T __U)
          (__T_of_js : Ojs.t -> __T)
          (__U_of_js : Ojs.t -> __U)
          (x4 : Ojs.t) ->
       any_of_js x4

    and _Exclude_to_js :
          'T 'U. ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) _Exclude -> Ojs.t
      =
      fun (type __T __U)
          (__T_to_js : __T -> Ojs.t)
          (__U_to_js : __U -> Ojs.t)
          (x3 : any) ->
       any_to_js x3

    and _Extract_of_js :
          'T 'U. (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) _Extract
      =
      fun (type __T __U)
          (__T_of_js : Ojs.t -> __T)
          (__U_of_js : Ojs.t -> __U)
          (x6 : Ojs.t) ->
       any_of_js x6

    and _Extract_to_js :
          'T 'U. ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) _Extract -> Ojs.t
      =
      fun (type __T __U)
          (__T_to_js : __T -> Ojs.t)
          (__U_to_js : __U -> Ojs.t)
          (x5 : any) ->
       any_to_js x5

    and _Float32Array_of_js : Ojs.t -> _Float32Array = Obj.magic

    and _Float32Array_to_js : _Float32Array -> Ojs.t = Obj.magic

    and _Float32ArrayConstructor_of_js : Ojs.t -> _Float32ArrayConstructor =
      Obj.magic

    and _Float32ArrayConstructor_to_js : _Float32ArrayConstructor -> Ojs.t =
      Obj.magic

    and _Float64Array_of_js : Ojs.t -> _Float64Array = Obj.magic

    and _Float64Array_to_js : _Float64Array -> Ojs.t = Obj.magic

    and _Float64ArrayConstructor_of_js : Ojs.t -> _Float64ArrayConstructor =
      Obj.magic

    and _Float64ArrayConstructor_to_js : _Float64ArrayConstructor -> Ojs.t =
      Obj.magic

    and _Function_of_js : Ojs.t -> _Function =
     fun (x8 : Ojs.t) -> untyped_function_of_js x8

    and _Function_to_js : _Function -> Ojs.t =
     fun (x7 : untyped_function) -> untyped_function_to_js x7

    and _FunctionConstructor_of_js : Ojs.t -> _FunctionConstructor = Obj.magic

    and _FunctionConstructor_to_js : _FunctionConstructor -> Ojs.t = Obj.magic

    and _IArguments_of_js : Ojs.t -> _IArguments = Obj.magic

    and _IArguments_to_js : _IArguments -> Ojs.t = Obj.magic

    and _ImportMeta_of_js : Ojs.t -> _ImportMeta = Obj.magic

    and _ImportMeta_to_js : _ImportMeta -> Ojs.t = Obj.magic

    and _InstanceType_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _InstanceType =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x10 : Ojs.t) -> any_of_js x10

    and _InstanceType_to_js : 'T. ('T -> Ojs.t) -> 'T _InstanceType -> Ojs.t =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x9 : any) -> any_to_js x9

    and _Int16Array_of_js : Ojs.t -> _Int16Array = Obj.magic

    and _Int16Array_to_js : _Int16Array -> Ojs.t = Obj.magic

    and _Int16ArrayConstructor_of_js : Ojs.t -> _Int16ArrayConstructor =
      Obj.magic

    and _Int16ArrayConstructor_to_js : _Int16ArrayConstructor -> Ojs.t =
      Obj.magic

    and _Int32Array_of_js : Ojs.t -> _Int32Array = Obj.magic

    and _Int32Array_to_js : _Int32Array -> Ojs.t = Obj.magic

    and _Int32ArrayConstructor_of_js : Ojs.t -> _Int32ArrayConstructor =
      Obj.magic

    and _Int32ArrayConstructor_to_js : _Int32ArrayConstructor -> Ojs.t =
      Obj.magic

    and _Int8Array_of_js : Ojs.t -> _Int8Array = Obj.magic

    and _Int8Array_to_js : _Int8Array -> Ojs.t = Obj.magic

    and _Int8ArrayConstructor_of_js : Ojs.t -> _Int8ArrayConstructor = Obj.magic

    and _Int8ArrayConstructor_to_js : _Int8ArrayConstructor -> Ojs.t = Obj.magic

    and _Intl_Collator_of_js : Ojs.t -> _Intl_Collator = Obj.magic

    and _Intl_Collator_to_js : _Intl_Collator -> Ojs.t = Obj.magic

    and _Intl_CollatorOptions_of_js : Ojs.t -> _Intl_CollatorOptions = Obj.magic

    and _Intl_CollatorOptions_to_js : _Intl_CollatorOptions -> Ojs.t = Obj.magic

    and _Intl_DateTimeFormat_of_js : Ojs.t -> _Intl_DateTimeFormat = Obj.magic

    and _Intl_DateTimeFormat_to_js : _Intl_DateTimeFormat -> Ojs.t = Obj.magic

    and _Intl_DateTimeFormatOptions_of_js : Ojs.t -> _Intl_DateTimeFormatOptions
      =
      Obj.magic

    and _Intl_DateTimeFormatOptions_to_js : _Intl_DateTimeFormatOptions -> Ojs.t
      =
      Obj.magic

    and _Intl_NumberFormat_of_js : Ojs.t -> _Intl_NumberFormat = Obj.magic

    and _Intl_NumberFormat_to_js : _Intl_NumberFormat -> Ojs.t = Obj.magic

    and _Intl_NumberFormatOptions_of_js : Ojs.t -> _Intl_NumberFormatOptions =
      Obj.magic

    and _Intl_NumberFormatOptions_to_js : _Intl_NumberFormatOptions -> Ojs.t =
      Obj.magic

    and _Intl_ResolvedCollatorOptions_of_js
        : Ojs.t -> _Intl_ResolvedCollatorOptions
      =
      Obj.magic

    and _Intl_ResolvedCollatorOptions_to_js
        : _Intl_ResolvedCollatorOptions -> Ojs.t
      =
      Obj.magic

    and _Intl_ResolvedDateTimeFormatOptions_of_js
        : Ojs.t -> _Intl_ResolvedDateTimeFormatOptions
      =
      Obj.magic

    and _Intl_ResolvedDateTimeFormatOptions_to_js
        : _Intl_ResolvedDateTimeFormatOptions -> Ojs.t
      =
      Obj.magic

    and _Intl_ResolvedNumberFormatOptions_of_js
        : Ojs.t -> _Intl_ResolvedNumberFormatOptions
      =
      Obj.magic

    and _Intl_ResolvedNumberFormatOptions_to_js
        : _Intl_ResolvedNumberFormatOptions -> Ojs.t
      =
      Obj.magic

    and _JSON_of_js : Ojs.t -> _JSON = Obj.magic

    and _JSON_to_js : _JSON -> Ojs.t = Obj.magic

    and _Math_of_js : Ojs.t -> _Math = Obj.magic

    and _Math_to_js : _Math -> Ojs.t = Obj.magic

    and _MethodDecorator_of_js : Ojs.t -> _MethodDecorator = Obj.magic

    and _MethodDecorator_to_js : _MethodDecorator -> Ojs.t = Obj.magic

    and _NewableFunction_of_js : Ojs.t -> _NewableFunction = Obj.magic

    and _NewableFunction_to_js : _NewableFunction -> Ojs.t = Obj.magic

    and _NonNullable_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _NonNullable =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x12 : Ojs.t) -> any_of_js x12

    and _NonNullable_to_js : 'T. ('T -> Ojs.t) -> 'T _NonNullable -> Ojs.t =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x11 : any) -> any_to_js x11

    and _Number_of_js : Ojs.t -> _Number = Obj.magic

    and _Number_to_js : _Number -> Ojs.t = Obj.magic

    and _NumberConstructor_of_js : Ojs.t -> _NumberConstructor = Obj.magic

    and _NumberConstructor_to_js : _NumberConstructor -> Ojs.t = Obj.magic

    and _Object_of_js : Ojs.t -> _Object =
     fun (x14 : Ojs.t) -> untyped_object_of_js x14

    and _Object_to_js : _Object -> Ojs.t =
     fun (x13 : untyped_object) -> untyped_object_to_js x13

    and _ObjectConstructor_of_js : Ojs.t -> _ObjectConstructor = Obj.magic

    and _ObjectConstructor_to_js : _ObjectConstructor -> Ojs.t = Obj.magic

    and _Omit_of_js :
          'T 'K. (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) _Omit
      =
      fun (type __T __K)
          (__T_of_js : Ojs.t -> __T)
          (__K_of_js : Ojs.t -> __K)
          (x20 : Ojs.t) ->
       _Pick_of_js
         __T_of_js
         (fun (x22 : Ojs.t) -> _Exclude_of_js any_of_js __K_of_js x22)
         x20

    and _Omit_to_js :
          'T 'K. ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) _Omit -> Ojs.t
      =
      fun (type __T __K)
          (__T_to_js : __T -> Ojs.t)
          (__K_to_js : __K -> Ojs.t)
          (x15 : (__T, (any, __K) _Exclude) _Pick) ->
       _Pick_to_js
         __T_to_js
         (fun (x17 : (any, __K) _Exclude) ->
           _Exclude_to_js any_to_js __K_to_js x17)
         x15

    and _OmitThisParameter_of_js :
          'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _OmitThisParameter
      =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x26 : Ojs.t) -> any_of_js x26

    and _OmitThisParameter_to_js :
          'T. ('T -> Ojs.t) -> 'T _OmitThisParameter -> Ojs.t
      =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x25 : any) -> any_to_js x25

    and _ParameterDecorator_of_js : Ojs.t -> _ParameterDecorator = Obj.magic

    and _ParameterDecorator_to_js : _ParameterDecorator -> Ojs.t = Obj.magic

    and _Parameters_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _Parameters =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x28 : Ojs.t) -> any_of_js x28

    and _Parameters_to_js : 'T. ('T -> Ojs.t) -> 'T _Parameters -> Ojs.t =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x27 : any) -> any_to_js x27

    and _Partial_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _Partial =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x30 : Ojs.t) -> any_of_js x30

    and _Partial_to_js : 'T. ('T -> Ojs.t) -> 'T _Partial -> Ojs.t =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x29 : any) -> any_to_js x29

    and _Pick_of_js :
          'T 'K. (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) _Pick
      =
      fun (type __T __K)
          (__T_of_js : Ojs.t -> __T)
          (__K_of_js : Ojs.t -> __K)
          (x32 : Ojs.t) ->
       any_of_js x32

    and _Pick_to_js :
          'T 'K. ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) _Pick -> Ojs.t
      =
      fun (type __T __K)
          (__T_to_js : __T -> Ojs.t)
          (__K_to_js : __K -> Ojs.t)
          (x31 : any) ->
       any_to_js x31

    and _Promise_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _Promise =
     fun _T -> Obj.magic

    and _Promise_to_js : 'T. ('T -> Ojs.t) -> 'T _Promise -> Ojs.t =
     fun _T -> Obj.magic

    and _PropertyDecorator_of_js : Ojs.t -> _PropertyDecorator = Obj.magic

    and _PropertyDecorator_to_js : _PropertyDecorator -> Ojs.t = Obj.magic

    and _PropertyDescriptor_of_js : Ojs.t -> _PropertyDescriptor = Obj.magic

    and _PropertyDescriptor_to_js : _PropertyDescriptor -> Ojs.t = Obj.magic

    and _PropertyDescriptorMap_of_js : Ojs.t -> _PropertyDescriptorMap =
      Obj.magic

    and _PropertyDescriptorMap_to_js : _PropertyDescriptorMap -> Ojs.t =
      Obj.magic

    and _PropertyKey_of_js : Ojs.t -> _PropertyKey =
     fun (x38 : Ojs.t) ->
      or_number_of_js
        (fun (x39 : Ojs.t) -> or_string_of_js symbol_of_js x39)
        x38

    and _PropertyKey_to_js : _PropertyKey -> Ojs.t =
     fun (x35 : symbol or_string or_number) ->
      or_number_to_js
        (fun (x36 : symbol or_string) -> or_string_to_js symbol_to_js x36)
        x35

    and _RangeError_of_js : Ojs.t -> _RangeError = Obj.magic

    and _RangeError_to_js : _RangeError -> Ojs.t = Obj.magic

    and _RangeErrorConstructor_of_js : Ojs.t -> _RangeErrorConstructor =
      Obj.magic

    and _RangeErrorConstructor_to_js : _RangeErrorConstructor -> Ojs.t =
      Obj.magic

    and _Readonly_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _Readonly =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x42 : Ojs.t) -> any_of_js x42

    and _Readonly_to_js : 'T. ('T -> Ojs.t) -> 'T _Readonly -> Ojs.t =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x41 : any) -> any_to_js x41

    and _ReadonlyArray_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _ReadonlyArray =
     fun _T -> Obj.magic

    and _ReadonlyArray_to_js : 'T. ('T -> Ojs.t) -> 'T _ReadonlyArray -> Ojs.t =
     fun _T -> Obj.magic

    and _Record_of_js :
          'K 'T. (Ojs.t -> 'K) -> (Ojs.t -> 'T) -> Ojs.t -> ('K, 'T) _Record
      =
      fun (type __K __T)
          (__K_of_js : Ojs.t -> __K)
          (__T_of_js : Ojs.t -> __T)
          (x44 : Ojs.t) ->
       any_of_js x44

    and _Record_to_js :
          'K 'T. ('K -> Ojs.t) -> ('T -> Ojs.t) -> ('K, 'T) _Record -> Ojs.t
      =
      fun (type __K __T)
          (__K_to_js : __K -> Ojs.t)
          (__T_to_js : __T -> Ojs.t)
          (x43 : any) ->
       any_to_js x43

    and _ReferenceError_of_js : Ojs.t -> _ReferenceError = Obj.magic

    and _ReferenceError_to_js : _ReferenceError -> Ojs.t = Obj.magic

    and _ReferenceErrorConstructor_of_js : Ojs.t -> _ReferenceErrorConstructor =
      Obj.magic

    and _ReferenceErrorConstructor_to_js : _ReferenceErrorConstructor -> Ojs.t =
      Obj.magic

    and _RegExp_of_js : Ojs.t -> _RegExp = fun (x46 : Ojs.t) -> regexp_of_js x46

    and _RegExp_to_js : _RegExp -> Ojs.t =
     fun (x45 : regexp) -> regexp_to_js x45

    and _RegExpConstructor_of_js : Ojs.t -> _RegExpConstructor = Obj.magic

    and _RegExpConstructor_to_js : _RegExpConstructor -> Ojs.t = Obj.magic

    and _RegExpExecArray_of_js : Ojs.t -> _RegExpExecArray = Obj.magic

    and _RegExpExecArray_to_js : _RegExpExecArray -> Ojs.t = Obj.magic

    and _RegExpMatchArray_of_js : Ojs.t -> _RegExpMatchArray = Obj.magic

    and _RegExpMatchArray_to_js : _RegExpMatchArray -> Ojs.t = Obj.magic

    and _Required_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _Required =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x48 : Ojs.t) -> any_of_js x48

    and _Required_to_js : 'T. ('T -> Ojs.t) -> 'T _Required -> Ojs.t =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x47 : any) -> any_to_js x47

    and _ReturnType_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _ReturnType =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x50 : Ojs.t) -> any_of_js x50

    and _ReturnType_to_js : 'T. ('T -> Ojs.t) -> 'T _ReturnType -> Ojs.t =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x49 : any) -> any_to_js x49

    and _String_of_js : Ojs.t -> _String = Obj.magic

    and _String_to_js : _String -> Ojs.t = Obj.magic

    and _StringConstructor_of_js : Ojs.t -> _StringConstructor = Obj.magic

    and _StringConstructor_to_js : _StringConstructor -> Ojs.t = Obj.magic

    and _Symbol_of_js : Ojs.t -> _Symbol = fun (x52 : Ojs.t) -> symbol_of_js x52

    and _Symbol_to_js : _Symbol -> Ojs.t =
     fun (x51 : symbol) -> symbol_to_js x51

    and _SyntaxError_of_js : Ojs.t -> _SyntaxError = Obj.magic

    and _SyntaxError_to_js : _SyntaxError -> Ojs.t = Obj.magic

    and _SyntaxErrorConstructor_of_js : Ojs.t -> _SyntaxErrorConstructor =
      Obj.magic

    and _SyntaxErrorConstructor_to_js : _SyntaxErrorConstructor -> Ojs.t =
      Obj.magic

    and _TemplateStringsArray_of_js : Ojs.t -> _TemplateStringsArray = Obj.magic

    and _TemplateStringsArray_to_js : _TemplateStringsArray -> Ojs.t = Obj.magic

    and _ThisParameterType_of_js :
          'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _ThisParameterType
      =
      fun (type __T) (__T_of_js : Ojs.t -> __T) (x54 : Ojs.t) -> any_of_js x54

    and _ThisParameterType_to_js :
          'T. ('T -> Ojs.t) -> 'T _ThisParameterType -> Ojs.t
      =
      fun (type __T) (__T_to_js : __T -> Ojs.t) (x53 : any) -> any_to_js x53

    and _ThisType_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _ThisType =
     fun _T -> Obj.magic

    and _ThisType_to_js : 'T. ('T -> Ojs.t) -> 'T _ThisType -> Ojs.t =
     fun _T -> Obj.magic

    and _TypeError_of_js : Ojs.t -> _TypeError = Obj.magic

    and _TypeError_to_js : _TypeError -> Ojs.t = Obj.magic

    and _TypeErrorConstructor_of_js : Ojs.t -> _TypeErrorConstructor = Obj.magic

    and _TypeErrorConstructor_to_js : _TypeErrorConstructor -> Ojs.t = Obj.magic

    and _TypedPropertyDescriptor_of_js :
          'T. (Ojs.t -> 'T) -> Ojs.t -> 'T _TypedPropertyDescriptor
      =
     fun _T -> Obj.magic

    and _TypedPropertyDescriptor_to_js :
          'T. ('T -> Ojs.t) -> 'T _TypedPropertyDescriptor -> Ojs.t
      =
     fun _T -> Obj.magic

    and _URIError_of_js : Ojs.t -> _URIError = Obj.magic

    and _URIError_to_js : _URIError -> Ojs.t = Obj.magic

    and _URIErrorConstructor_of_js : Ojs.t -> _URIErrorConstructor = Obj.magic

    and _URIErrorConstructor_to_js : _URIErrorConstructor -> Ojs.t = Obj.magic

    and _Uint16Array_of_js : Ojs.t -> _Uint16Array = Obj.magic

    and _Uint16Array_to_js : _Uint16Array -> Ojs.t = Obj.magic

    and _Uint16ArrayConstructor_of_js : Ojs.t -> _Uint16ArrayConstructor =
      Obj.magic

    and _Uint16ArrayConstructor_to_js : _Uint16ArrayConstructor -> Ojs.t =
      Obj.magic

    and _Uint32Array_of_js : Ojs.t -> _Uint32Array = Obj.magic

    and _Uint32Array_to_js : _Uint32Array -> Ojs.t = Obj.magic

    and _Uint32ArrayConstructor_of_js : Ojs.t -> _Uint32ArrayConstructor =
      Obj.magic

    and _Uint32ArrayConstructor_to_js : _Uint32ArrayConstructor -> Ojs.t =
      Obj.magic

    and _Uint8Array_of_js : Ojs.t -> _Uint8Array = Obj.magic

    and _Uint8Array_to_js : _Uint8Array -> Ojs.t = Obj.magic

    and _Uint8ArrayConstructor_of_js : Ojs.t -> _Uint8ArrayConstructor =
      Obj.magic

    and _Uint8ArrayConstructor_to_js : _Uint8ArrayConstructor -> Ojs.t =
      Obj.magic

    and _Uint8ClampedArray_of_js : Ojs.t -> _Uint8ClampedArray = Obj.magic

    and _Uint8ClampedArray_to_js : _Uint8ClampedArray -> Ojs.t = Obj.magic

    and _Uint8ClampedArrayConstructor_of_js
        : Ojs.t -> _Uint8ClampedArrayConstructor
      =
      Obj.magic

    and _Uint8ClampedArrayConstructor_to_js
        : _Uint8ClampedArrayConstructor -> Ojs.t
      =
      Obj.magic
  end
end

open Internal
open AnonymousInterfaces
open Types

let (naN : float) = Ojs.float_of_js (Ojs.get_prop_ascii Ojs.global "NaN")

let (infinity : float) =
  Ojs.float_of_js (Ojs.get_prop_ascii Ojs.global "Infinity")

let (eval : x:string -> any) =
 fun ~x:(x55 : string) ->
  any_of_js (Ojs.call Ojs.global "eval" [| Ojs.string_to_js x55 |])

let (parseInt : s:string -> ?radix:float -> unit -> float) =
 fun ~s:(x56 : string) ?radix:(x57 : float option) () ->
  Ojs.float_of_js
    (let x60 = Ojs.global in
     Ojs.call
       (Ojs.get_prop_ascii x60 "parseInt")
       "apply"
       [| x60
        ; (let x58 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
           ignore (Ojs.call x58 "push" [| Ojs.string_to_js x56 |]);
           (match x57 with
           | Some x59 ->
             ignore (Ojs.call x58 "push" [| Ojs.float_to_js x59 |])
           | None ->
             ());
           x58)
       |])

let (parseFloat : string:string -> float) =
 fun ~string:(x61 : string) ->
  Ojs.float_of_js (Ojs.call Ojs.global "parseFloat" [| Ojs.string_to_js x61 |])

let (isNaN : number:float -> bool) =
 fun ~number:(x62 : float) ->
  Ojs.bool_of_js (Ojs.call Ojs.global "isNaN" [| Ojs.float_to_js x62 |])

let (isFinite : number:float -> bool) =
 fun ~number:(x63 : float) ->
  Ojs.bool_of_js (Ojs.call Ojs.global "isFinite" [| Ojs.float_to_js x63 |])

let (decodeURI : encodedURI:string -> string) =
 fun ~encodedURI:(x64 : string) ->
  Ojs.string_of_js (Ojs.call Ojs.global "decodeURI" [| Ojs.string_to_js x64 |])

let (decodeURIComponent : encodedURIComponent:string -> string) =
 fun ~encodedURIComponent:(x65 : string) ->
  Ojs.string_of_js
    (Ojs.call Ojs.global "decodeURIComponent" [| Ojs.string_to_js x65 |])

let (encodeURI : uri:string -> string) =
 fun ~uri:(x66 : string) ->
  Ojs.string_of_js (Ojs.call Ojs.global "encodeURI" [| Ojs.string_to_js x66 |])

let (encodeURIComponent : uriComponent:bool or_string or_number -> string) =
 fun ~uriComponent:(x67 : bool or_string or_number) ->
  Ojs.string_of_js
    (Ojs.call
       Ojs.global
       "encodeURIComponent"
       [| or_number_to_js
            (fun (x68 : bool or_string) -> or_string_to_js Ojs.bool_to_js x68)
            x67
       |])

let (escape : string:string -> string) =
 fun ~string:(x70 : string) ->
  Ojs.string_of_js (Ojs.call Ojs.global "escape" [| Ojs.string_to_js x70 |])

let (unescape : string:string -> string) =
 fun ~string:(x71 : string) ->
  Ojs.string_of_js (Ojs.call Ojs.global "unescape" [| Ojs.string_to_js x71 |])

module Symbol = struct
  type t = _Symbol

  let rec t_of_js : Ojs.t -> t = fun (x73 : Ojs.t) -> _Symbol_of_js x73

  and t_to_js : t -> Ojs.t = fun (x72 : _Symbol) -> _Symbol_to_js x72

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x75 : Ojs.t) -> t_of_js x75

  and t_0_to_js : t_0 -> Ojs.t = fun (x74 : t) -> t_to_js x74

  let (toString : t -> string) =
   fun (x76 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x76) "toString" [||])

  let (valueOf : t -> symbol) =
   fun (x77 : t) -> symbol_of_js (Ojs.call (t_to_js x77) "valueOf" [||])
end

module PropertyKey = struct
  type t = _PropertyKey

  let rec t_of_js : Ojs.t -> t = fun (x79 : Ojs.t) -> _PropertyKey_of_js x79

  and t_to_js : t -> Ojs.t = fun (x78 : _PropertyKey) -> _PropertyKey_to_js x78

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x81 : Ojs.t) -> t_of_js x81

  and t_0_to_js : t_0 -> Ojs.t = fun (x80 : t) -> t_to_js x80
end

module PropertyDescriptor = struct
  type t = _PropertyDescriptor

  let rec t_of_js : Ojs.t -> t =
   fun (x83 : Ojs.t) -> _PropertyDescriptor_of_js x83

  and t_to_js : t -> Ojs.t =
   fun (x82 : _PropertyDescriptor) -> _PropertyDescriptor_to_js x82

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x85 : Ojs.t) -> t_of_js x85

  and t_0_to_js : t_0 -> Ojs.t = fun (x84 : t) -> t_to_js x84

  let (get_configurable : t -> bool) =
   fun (x86 : t) ->
    Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x86) "configurable")

  let (set_configurable : t -> bool -> unit) =
   fun (x87 : t) (x88 : bool) ->
    Ojs.set_prop_ascii (t_to_js x87) "configurable" (Ojs.bool_to_js x88)

  let (get_enumerable : t -> bool) =
   fun (x89 : t) ->
    Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x89) "enumerable")

  let (set_enumerable : t -> bool -> unit) =
   fun (x90 : t) (x91 : bool) ->
    Ojs.set_prop_ascii (t_to_js x90) "enumerable" (Ojs.bool_to_js x91)

  let (get_value : t -> any) =
   fun (x92 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x92) "value")

  let (set_value : t -> any -> unit) =
   fun (x93 : t) (x94 : any) ->
    Ojs.set_prop_ascii (t_to_js x93) "value" (any_to_js x94)

  let (get_writable : t -> bool) =
   fun (x95 : t) -> Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x95) "writable")

  let (set_writable : t -> bool -> unit) =
   fun (x96 : t) (x97 : bool) ->
    Ojs.set_prop_ascii (t_to_js x96) "writable" (Ojs.bool_to_js x97)

  let (get_ : t -> any) =
   fun (x98 : t) -> any_of_js (Ojs.call (t_to_js x98) "get" [||])

  let (set_ : t -> v:any -> unit) =
   fun (x100 : t) ~v:(x99 : any) ->
    ignore (Ojs.call (t_to_js x100) "set" [| any_to_js x99 |])
end

module PropertyDescriptorMap = struct
  type t = _PropertyDescriptorMap

  let rec t_of_js : Ojs.t -> t =
   fun (x102 : Ojs.t) -> _PropertyDescriptorMap_of_js x102

  and t_to_js : t -> Ojs.t =
   fun (x101 : _PropertyDescriptorMap) -> _PropertyDescriptorMap_to_js x101

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x104 : Ojs.t) -> t_of_js x104

  and t_0_to_js : t_0 -> Ojs.t = fun (x103 : t) -> t_to_js x103

  let (get : t -> string -> _PropertyDescriptor) =
   fun (x105 : t) (x106 : string) ->
    _PropertyDescriptor_of_js
      (Ojs.get_prop (t_to_js x105) (Ojs.string_to_js x106))

  let (set : t -> string -> _PropertyDescriptor -> unit) =
   fun (x107 : t) (x108 : string) (x109 : _PropertyDescriptor) ->
    Ojs.set_prop
      (t_to_js x107)
      (Ojs.string_to_js x108)
      (_PropertyDescriptor_to_js x109)
end

module Object = struct
  type t = _Object

  let rec t_of_js : Ojs.t -> t = fun (x111 : Ojs.t) -> _Object_of_js x111

  and t_to_js : t -> Ojs.t = fun (x110 : _Object) -> _Object_to_js x110

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x113 : Ojs.t) -> t_of_js x113

  and t_0_to_js : t_0 -> Ojs.t = fun (x112 : t) -> t_to_js x112

  let (get_constructor : t -> _Function) =
   fun (x114 : t) ->
    _Function_of_js (Ojs.get_prop_ascii (t_to_js x114) "constructor")

  let (set_constructor : t -> _Function -> unit) =
   fun (x115 : t) (x116 : _Function) ->
    Ojs.set_prop_ascii (t_to_js x115) "constructor" (_Function_to_js x116)

  let (toString : t -> string) =
   fun (x117 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x117) "toString" [||])

  let (toLocaleString : t -> string) =
   fun (x118 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x118) "toLocaleString" [||])

  let (valueOf : t -> t) =
   fun (x119 : t) -> t_of_js (Ojs.call (t_to_js x119) "valueOf" [||])

  let (hasOwnProperty : t -> v:_PropertyKey -> bool) =
   fun (x121 : t) ~v:(x120 : _PropertyKey) ->
    Ojs.bool_of_js
      (Ojs.call (t_to_js x121) "hasOwnProperty" [| _PropertyKey_to_js x120 |])

  let (isPrototypeOf : t -> v:t -> bool) =
   fun (x123 : t) ~v:(x122 : t) ->
    Ojs.bool_of_js (Ojs.call (t_to_js x123) "isPrototypeOf" [| t_to_js x122 |])

  let (propertyIsEnumerable : t -> v:_PropertyKey -> bool) =
   fun (x125 : t) ~v:(x124 : _PropertyKey) ->
    Ojs.bool_of_js
      (Ojs.call
         (t_to_js x125)
         "propertyIsEnumerable"
         [| _PropertyKey_to_js x124 |])

  let (create : ?value:any -> unit -> _Object) =
   fun ?value:(x126 : any option) () ->
    _Object_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Object")
         (let x127 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          (match x126 with
          | Some x128 ->
            ignore (Ojs.call x127 "push" [| any_to_js x128 |])
          | None ->
            ());
          x127))

  let (getPrototypeOf : o:any -> any) =
   fun ~o:(x129 : any) ->
    any_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "getPrototypeOf"
         [| any_to_js x129 |])

  let (getOwnPropertyDescriptor :
        o:any -> p:_PropertyKey -> _PropertyDescriptor or_undefined)
    =
   fun ~o:(x130 : any) ~p:(x131 : _PropertyKey) ->
    or_undefined_of_js
      _PropertyDescriptor_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "getOwnPropertyDescriptor"
         [| any_to_js x130; _PropertyKey_to_js x131 |])

  let (getOwnPropertyNames : o:any -> string list) =
   fun ~o:(x133 : any) ->
    Ojs.list_of_js
      Ojs.string_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "getOwnPropertyNames"
         [| any_to_js x133 |])

  let (create_ : o:untyped_object or_null -> any) =
   fun ~o:(x135 : untyped_object or_null) ->
    any_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Object")
         [| or_null_to_js untyped_object_to_js x135 |])

  let (create_' :
        o:untyped_object or_null
        -> properties:(_PropertyDescriptorMap, any _ThisType) intersection2
        -> any)
    =
   fun ~o:(x137 : untyped_object or_null)
       ~properties:
         (x139 : (_PropertyDescriptorMap, any _ThisType) intersection2) ->
    any_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Object")
         [| or_null_to_js untyped_object_to_js x137
          ; intersection2_to_js
              _PropertyDescriptorMap_to_js
              (fun (x141 : any _ThisType) -> _ThisType_to_js any_to_js x141)
              x139
         |])

  let (defineProperty :
        t
        -> o:any
        -> p:_PropertyKey
        -> attributes:(_PropertyDescriptor, any _ThisType) intersection2
        -> any)
    =
   fun (x143 : t)
       ~o:(x144 : any)
       ~p:(x145 : _PropertyKey)
       ~attributes:(x146 : (_PropertyDescriptor, any _ThisType) intersection2) ->
    any_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "defineProperty"
         [| t_to_js x143
          ; any_to_js x144
          ; _PropertyKey_to_js x145
          ; intersection2_to_js
              _PropertyDescriptor_to_js
              (fun (x148 : any _ThisType) -> _ThisType_to_js any_to_js x148)
              x146
         |])

  let (defineProperties :
        t
        -> o:any
        -> properties:(_PropertyDescriptorMap, any _ThisType) intersection2
        -> any)
    =
   fun (x150 : t)
       ~o:(x151 : any)
       ~properties:
         (x152 : (_PropertyDescriptorMap, any _ThisType) intersection2) ->
    any_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "defineProperties"
         [| t_to_js x150
          ; any_to_js x151
          ; intersection2_to_js
              _PropertyDescriptorMap_to_js
              (fun (x154 : any _ThisType) -> _ThisType_to_js any_to_js x154)
              x152
         |])

  let (seal : o:'T -> 'T) =
   fun ~o:(x156 : 'T) ->
    Obj.magic
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "seal"
         [| Obj.magic x156 |])

  let (freeze : a:'T list -> 'T list) =
   fun ~a:(x157 : 'T list) ->
    Ojs.list_of_js
      Obj.magic
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "freeze"
         [| Ojs.list_to_js Obj.magic x157 |])

  let (freeze' : f:'T -> 'T) =
   fun ~f:(x160 : 'T) ->
    Obj.magic
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "freeze"
         [| Obj.magic x160 |])

  let (freeze'' : o:'T -> 'T _Readonly) =
   fun ~o:(x161 : 'T) ->
    _Readonly_of_js
      Obj.magic
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "freeze"
         [| Obj.magic x161 |])

  let (preventExtensions : o:'T -> 'T) =
   fun ~o:(x163 : 'T) ->
    Obj.magic
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "preventExtensions"
         [| Obj.magic x163 |])

  let (isSealed : o:any -> bool) =
   fun ~o:(x164 : any) ->
    Ojs.bool_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "isSealed"
         [| any_to_js x164 |])

  let (isFrozen : o:any -> bool) =
   fun ~o:(x165 : any) ->
    Ojs.bool_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "isFrozen"
         [| any_to_js x165 |])

  let (isExtensible : o:any -> bool) =
   fun ~o:(x166 : any) ->
    Ojs.bool_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "isExtensible"
         [| any_to_js x166 |])

  let (keys : o:untyped_object -> string list) =
   fun ~o:(x167 : untyped_object) ->
    Ojs.list_of_js
      Ojs.string_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Object")
         "keys"
         [| untyped_object_to_js x167 |])
end

module ObjectConstructor = struct
  type t = _ObjectConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x170 : Ojs.t) -> _ObjectConstructor_of_js x170

  and t_to_js : t -> Ojs.t =
   fun (x169 : _ObjectConstructor) -> _ObjectConstructor_to_js x169

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x172 : Ojs.t) -> t_of_js x172

  and t_0_to_js : t_0 -> Ojs.t = fun (x171 : t) -> t_to_js x171

  let (create : t -> ?value:any -> unit -> _Object) =
   fun (x176 : t) ?value:(x173 : any option) () ->
    _Object_of_js
      (Ojs.new_obj_arr
         (t_to_js x176)
         (let x174 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          (match x173 with
          | Some x175 ->
            ignore (Ojs.call x174 "push" [| any_to_js x175 |])
          | None ->
            ());
          x174))

  let (apply : t -> any) =
   fun (x177 : t) -> any_of_js (Ojs.apply (t_to_js x177) [||])

  let (apply' : t -> value:any -> any) =
   fun (x179 : t) ~value:(x178 : any) ->
    any_of_js (Ojs.apply (t_to_js x179) [| any_to_js x178 |])

  let (get_prototype : t -> _Object) =
   fun (x180 : t) ->
    _Object_of_js (Ojs.get_prop_ascii (t_to_js x180) "prototype")

  let (getPrototypeOf : t -> o:any -> any) =
   fun (x182 : t) ~o:(x181 : any) ->
    any_of_js (Ojs.call (t_to_js x182) "getPrototypeOf" [| any_to_js x181 |])

  let (getOwnPropertyDescriptor :
        t -> o:any -> p:_PropertyKey -> _PropertyDescriptor or_undefined)
    =
   fun (x185 : t) ~o:(x183 : any) ~p:(x184 : _PropertyKey) ->
    or_undefined_of_js
      _PropertyDescriptor_of_js
      (Ojs.call
         (t_to_js x185)
         "getOwnPropertyDescriptor"
         [| any_to_js x183; _PropertyKey_to_js x184 |])

  let (getOwnPropertyNames : t -> o:any -> string list) =
   fun (x188 : t) ~o:(x187 : any) ->
    Ojs.list_of_js
      Ojs.string_of_js
      (Ojs.call (t_to_js x188) "getOwnPropertyNames" [| any_to_js x187 |])

  let (create_ : t -> o:untyped_object or_null -> any) =
   fun (x192 : t) ~o:(x190 : untyped_object or_null) ->
    any_of_js
      (Ojs.call
         (t_to_js x192)
         "create"
         [| or_null_to_js untyped_object_to_js x190 |])

  let (create_' :
        t
        -> o:untyped_object or_null
        -> properties:(_PropertyDescriptorMap, any _ThisType) intersection2
        -> any)
    =
   fun (x199 : t)
       ~o:(x193 : untyped_object or_null)
       ~properties:
         (x195 : (_PropertyDescriptorMap, any _ThisType) intersection2) ->
    any_of_js
      (Ojs.call
         (t_to_js x199)
         "create"
         [| or_null_to_js untyped_object_to_js x193
          ; intersection2_to_js
              _PropertyDescriptorMap_to_js
              (fun (x197 : any _ThisType) -> _ThisType_to_js any_to_js x197)
              x195
         |])

  let (defineProperty :
        t
        -> o:any
        -> p:_PropertyKey
        -> attributes:(_PropertyDescriptor, any _ThisType) intersection2
        -> any)
    =
   fun (x206 : t)
       ~o:(x200 : any)
       ~p:(x201 : _PropertyKey)
       ~attributes:(x202 : (_PropertyDescriptor, any _ThisType) intersection2) ->
    any_of_js
      (Ojs.call
         (t_to_js x206)
         "defineProperty"
         [| any_to_js x200
          ; _PropertyKey_to_js x201
          ; intersection2_to_js
              _PropertyDescriptor_to_js
              (fun (x204 : any _ThisType) -> _ThisType_to_js any_to_js x204)
              x202
         |])

  let (defineProperties :
        t
        -> o:any
        -> properties:(_PropertyDescriptorMap, any _ThisType) intersection2
        -> any)
    =
   fun (x212 : t)
       ~o:(x207 : any)
       ~properties:
         (x208 : (_PropertyDescriptorMap, any _ThisType) intersection2) ->
    any_of_js
      (Ojs.call
         (t_to_js x212)
         "defineProperties"
         [| any_to_js x207
          ; intersection2_to_js
              _PropertyDescriptorMap_to_js
              (fun (x210 : any _ThisType) -> _ThisType_to_js any_to_js x210)
              x208
         |])

  let (seal : t -> o:'T -> 'T) =
   fun (x214 : t) ~o:(x213 : 'T) ->
    Obj.magic (Ojs.call (t_to_js x214) "seal" [| Obj.magic x213 |])

  let (freeze : t -> a:'T list -> 'T list) =
   fun (x217 : t) ~a:(x215 : 'T list) ->
    Ojs.list_of_js
      Obj.magic
      (Ojs.call (t_to_js x217) "freeze" [| Ojs.list_to_js Obj.magic x215 |])

  let (freeze' : t -> f:'T -> 'T) =
   fun (x220 : t) ~f:(x219 : 'T) ->
    Obj.magic (Ojs.call (t_to_js x220) "freeze" [| Obj.magic x219 |])

  let (freeze'' : t -> o:'T -> 'T _Readonly) =
   fun (x222 : t) ~o:(x221 : 'T) ->
    _Readonly_of_js
      Obj.magic
      (Ojs.call (t_to_js x222) "freeze" [| Obj.magic x221 |])

  let (preventExtensions : t -> o:'T -> 'T) =
   fun (x225 : t) ~o:(x224 : 'T) ->
    Obj.magic (Ojs.call (t_to_js x225) "preventExtensions" [| Obj.magic x224 |])

  let (isSealed : t -> o:any -> bool) =
   fun (x227 : t) ~o:(x226 : any) ->
    Ojs.bool_of_js (Ojs.call (t_to_js x227) "isSealed" [| any_to_js x226 |])

  let (isFrozen : t -> o:any -> bool) =
   fun (x229 : t) ~o:(x228 : any) ->
    Ojs.bool_of_js (Ojs.call (t_to_js x229) "isFrozen" [| any_to_js x228 |])

  let (isExtensible : t -> o:any -> bool) =
   fun (x231 : t) ~o:(x230 : any) ->
    Ojs.bool_of_js (Ojs.call (t_to_js x231) "isExtensible" [| any_to_js x230 |])

  let (keys : t -> o:untyped_object -> string list) =
   fun (x233 : t) ~o:(x232 : untyped_object) ->
    Ojs.list_of_js
      Ojs.string_of_js
      (Ojs.call (t_to_js x233) "keys" [| untyped_object_to_js x232 |])
end

let (object_ : _ObjectConstructor) =
  _ObjectConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Object")

module Function = struct
  type t = _Function

  let rec t_of_js : Ojs.t -> t = fun (x236 : Ojs.t) -> _Function_of_js x236

  and t_to_js : t -> Ojs.t = fun (x235 : _Function) -> _Function_to_js x235

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x238 : Ojs.t) -> t_of_js x238

  and t_0_to_js : t_0 -> Ojs.t = fun (x237 : t) -> t_to_js x237

  let (apply_ : t -> this:t -> thisArg:any -> ?argArray:any -> unit -> any) =
   fun (x244 : t)
       ~this:(x239 : t)
       ~thisArg:(x240 : any)
       ?argArray:(x241 : any option)
       () ->
    any_of_js
      (let x245 = t_to_js x244 in
       Ojs.call
         (Ojs.get_prop_ascii x245 "apply")
         "apply"
         [| x245
          ; (let x242 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x242 "push" [| t_to_js x239 |]);
             ignore (Ojs.call x242 "push" [| any_to_js x240 |]);
             (match x241 with
             | Some x243 ->
               ignore (Ojs.call x242 "push" [| any_to_js x243 |])
             | None ->
               ());
             x242)
         |])

  let (call : t -> this:t -> thisArg:any -> argArray:any list -> any) =
   fun (x251 : t)
       ~this:(x246 : t)
       ~thisArg:(x247 : any)
       ~argArray:(x248 : any list) ->
    any_of_js
      (let x252 = t_to_js x251 in
       Ojs.call
         (Ojs.get_prop_ascii x252 "call")
         "apply"
         [| x252
          ; (let x249 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x249 "push" [| t_to_js x246 |]);
             ignore (Ojs.call x249 "push" [| any_to_js x247 |]);
             List.iter
               (fun (x250 : any) ->
                 ignore (Ojs.call x249 "push" [| any_to_js x250 |]))
               x248;
             x249)
         |])

  let (bind : t -> this:t -> thisArg:any -> argArray:any list -> any) =
   fun (x258 : t)
       ~this:(x253 : t)
       ~thisArg:(x254 : any)
       ~argArray:(x255 : any list) ->
    any_of_js
      (let x259 = t_to_js x258 in
       Ojs.call
         (Ojs.get_prop_ascii x259 "bind")
         "apply"
         [| x259
          ; (let x256 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x256 "push" [| t_to_js x253 |]);
             ignore (Ojs.call x256 "push" [| any_to_js x254 |]);
             List.iter
               (fun (x257 : any) ->
                 ignore (Ojs.call x256 "push" [| any_to_js x257 |]))
               x255;
             x256)
         |])

  let (toString : t -> string) =
   fun (x260 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x260) "toString" [||])

  let (get_prototype : t -> any) =
   fun (x261 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x261) "prototype")

  let (set_prototype : t -> any -> unit) =
   fun (x262 : t) (x263 : any) ->
    Ojs.set_prop_ascii (t_to_js x262) "prototype" (any_to_js x263)

  let (get_length : t -> float) =
   fun (x264 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x264) "length")

  let (get_arguments : t -> any) =
   fun (x265 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x265) "arguments")

  let (set_arguments : t -> any -> unit) =
   fun (x266 : t) (x267 : any) ->
    Ojs.set_prop_ascii (t_to_js x266) "arguments" (any_to_js x267)

  let (get_caller : t -> t) =
   fun (x268 : t) -> t_of_js (Ojs.get_prop_ascii (t_to_js x268) "caller")

  let (set_caller : t -> t -> unit) =
   fun (x269 : t) (x270 : t) ->
    Ojs.set_prop_ascii (t_to_js x269) "caller" (t_to_js x270)

  let (create : args:string list -> _Function) =
   fun ~args:(x271 : string list) ->
    _Function_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Function")
         (let x272 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          List.iter
            (fun (x273 : string) ->
              ignore (Ojs.call x272 "push" [| Ojs.string_to_js x273 |]))
            x271;
          x272))
end

module FunctionConstructor = struct
  type t = _FunctionConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x275 : Ojs.t) -> _FunctionConstructor_of_js x275

  and t_to_js : t -> Ojs.t =
   fun (x274 : _FunctionConstructor) -> _FunctionConstructor_to_js x274

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x277 : Ojs.t) -> t_of_js x277

  and t_0_to_js : t_0 -> Ojs.t = fun (x276 : t) -> t_to_js x276

  let (create : t -> args:string list -> _Function) =
   fun (x281 : t) ~args:(x278 : string list) ->
    _Function_of_js
      (Ojs.new_obj_arr
         (t_to_js x281)
         (let x279 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          List.iter
            (fun (x280 : string) ->
              ignore (Ojs.call x279 "push" [| Ojs.string_to_js x280 |]))
            x278;
          x279))

  let (apply : t -> args:string list -> _Function) =
   fun (x285 : t) ~args:(x282 : string list) ->
    _Function_of_js
      (Ojs.call
         (t_to_js x285)
         "apply"
         [| Ojs.null
          ; (let x283 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x284 : string) ->
                 ignore (Ojs.call x283 "push" [| Ojs.string_to_js x284 |]))
               x282;
             x283)
         |])

  let (get_prototype : t -> _Function) =
   fun (x286 : t) ->
    _Function_of_js (Ojs.get_prop_ascii (t_to_js x286) "prototype")
end

let (function_ : _FunctionConstructor) =
  _FunctionConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Function")

module ThisParameterType = struct
  type 'T t = 'T _ThisParameterType

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x289 : Ojs.t) ->
     _ThisParameterType_of_js __T_of_js x289

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x287 : __T _ThisParameterType) ->
     _ThisParameterType_to_js __T_to_js x287

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x293 : Ojs.t) ->
     t_of_js __T_of_js x293

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x291 : __T t) ->
     t_to_js __T_to_js x291
end

module OmitThisParameter = struct
  type 'T t = 'T _OmitThisParameter

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x297 : Ojs.t) ->
     _OmitThisParameter_of_js __T_of_js x297

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x295 : __T _OmitThisParameter) ->
     _OmitThisParameter_to_js __T_to_js x295

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x301 : Ojs.t) ->
     t_of_js __T_of_js x301

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x299 : __T t) ->
     t_to_js __T_to_js x299
end

module CallableFunction = struct
  type t = _CallableFunction

  let rec t_of_js : Ojs.t -> t =
   fun (x304 : Ojs.t) -> _CallableFunction_of_js x304

  and t_to_js : t -> Ojs.t =
   fun (x303 : _CallableFunction) -> _CallableFunction_to_js x303

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x306 : Ojs.t) -> t_of_js x306

  and t_0_to_js : t_0 -> Ojs.t = fun (x305 : t) -> t_to_js x305

  let (apply_ : t -> this:(this:'T -> 'R) -> thisArg:'T -> 'R) =
   fun (x310 : t) ~this:(x307 : this:'T -> 'R) ~thisArg:(x309 : 'T) ->
    Obj.magic
      (Ojs.call
         (t_to_js x310)
         "apply"
         [| Ojs.fun_to_js 1 (fun (x308 : Ojs.t) ->
                Obj.magic (x307 ~this:(Obj.magic x308)))
          ; Obj.magic x309
         |])

  let (apply_' :
        t
        -> this:(this:'T -> args:any list -> 'R)
        -> thisArg:'T
        -> args:'A
        -> 'R)
    =
   fun (x316 : t)
       ~this:(x311 : this:'T -> args:any list -> 'R)
       ~thisArg:(x314 : 'T)
       ~args:(x315 : 'A) ->
    Obj.magic
      (Ojs.call
         (t_to_js x316)
         "apply"
         [| Ojs.fun_to_js_args (fun (x312 : _) ->
                Obj.magic
                  (x311
                     ~this:(Obj.magic (Ojs.array_get x312 0))
                     ~args:(Ojs.list_of_js_from any_of_js x312 1)))
          ; Obj.magic x314
          ; Obj.magic x315
         |])

  let (call :
        t
        -> this:(this:'T -> args:any list -> 'R)
        -> thisArg:'T
        -> args:any list
        -> 'R)
    =
   fun (x324 : t)
       ~this:(x317 : this:'T -> args:any list -> 'R)
       ~thisArg:(x318 : 'T)
       ~args:(x319 : any list) ->
    Obj.magic
      (let x325 = t_to_js x324 in
       Ojs.call
         (Ojs.get_prop_ascii x325 "call")
         "apply"
         [| x325
          ; (let x320 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x320
                  "push"
                  [| Ojs.fun_to_js_args (fun (x322 : _) ->
                         Obj.magic
                           (x317
                              ~this:(Obj.magic (Ojs.array_get x322 0))
                              ~args:(Ojs.list_of_js_from any_of_js x322 1)))
                  |]);
             ignore (Ojs.call x320 "push" [| Obj.magic x318 |]);
             List.iter
               (fun (x321 : any) ->
                 ignore (Ojs.call x320 "push" [| any_to_js x321 |]))
               x319;
             x320)
         |])

  let (bind :
        t -> this:'T -> thisArg:'T _ThisParameterType -> 'T _OmitThisParameter)
    =
   fun (x329 : t) ~this:(x326 : 'T) ~thisArg:(x327 : 'T _ThisParameterType) ->
    _OmitThisParameter_of_js
      Obj.magic
      (Ojs.call
         (t_to_js x329)
         "bind"
         [| Obj.magic x326; _ThisParameterType_to_js Obj.magic x327 |])

  let (bind' :
        t
        -> this:(this:'T -> arg0:'A0 -> args:any list -> 'R)
        -> thisArg:'T
        -> arg0:'A0
        -> args:any list
        -> 'R)
    =
   fun (x336 : t)
       ~this:(x331 : this:'T -> arg0:'A0 -> args:any list -> 'R)
       ~thisArg:(x334 : 'T)
       ~arg0:(x335 : 'A0)
       ~args:(x337 : any list) ->
    Obj.magic
      (Ojs.call
         (Ojs.call
            (t_to_js x336)
            "bind"
            [| Ojs.fun_to_js_args (fun (x332 : _) ->
                   Obj.magic
                     (x331
                        ~this:(Obj.magic (Ojs.array_get x332 0))
                        ~arg0:(Obj.magic (Ojs.array_get x332 1))
                        ~args:(Ojs.list_of_js_from any_of_js x332 2)))
             ; Obj.magic x334
             ; Obj.magic x335
            |])
         "apply"
         [| Ojs.null
          ; (let x338 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x339 : any) ->
                 ignore (Ojs.call x338 "push" [| any_to_js x339 |]))
               x337;
             x338)
         |])

  let (bind'' :
        t
        -> this:(this:'T -> arg0:'A0 -> arg1:'A1 -> args:any list -> 'R)
        -> thisArg:'T
        -> arg0:'A0
        -> arg1:'A1
        -> args:any list
        -> 'R)
    =
   fun (x346 : t)
       ~this:(x340 : this:'T -> arg0:'A0 -> arg1:'A1 -> args:any list -> 'R)
       ~thisArg:(x343 : 'T)
       ~arg0:(x344 : 'A0)
       ~arg1:(x345 : 'A1)
       ~args:(x347 : any list) ->
    Obj.magic
      (Ojs.call
         (Ojs.call
            (t_to_js x346)
            "bind"
            [| Ojs.fun_to_js_args (fun (x341 : _) ->
                   Obj.magic
                     (x340
                        ~this:(Obj.magic (Ojs.array_get x341 0))
                        ~arg0:(Obj.magic (Ojs.array_get x341 1))
                        ~arg1:(Obj.magic (Ojs.array_get x341 2))
                        ~args:(Ojs.list_of_js_from any_of_js x341 3)))
             ; Obj.magic x343
             ; Obj.magic x344
             ; Obj.magic x345
            |])
         "apply"
         [| Ojs.null
          ; (let x348 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x349 : any) ->
                 ignore (Ojs.call x348 "push" [| any_to_js x349 |]))
               x347;
             x348)
         |])

  let (bind''' :
        t
        -> this:
             (this:'T
              -> arg0:'A0
              -> arg1:'A1
              -> arg2:'A2
              -> args:any list
              -> 'R)
        -> thisArg:'T
        -> arg0:'A0
        -> arg1:'A1
        -> arg2:'A2
        -> args:any list
        -> 'R)
    =
   fun (x357 : t)
       ~this:
         (x350 :
           this:'T -> arg0:'A0 -> arg1:'A1 -> arg2:'A2 -> args:any list -> 'R)
       ~thisArg:(x353 : 'T)
       ~arg0:(x354 : 'A0)
       ~arg1:(x355 : 'A1)
       ~arg2:(x356 : 'A2)
       ~args:(x358 : any list) ->
    Obj.magic
      (Ojs.call
         (Ojs.call
            (t_to_js x357)
            "bind"
            [| Ojs.fun_to_js_args (fun (x351 : _) ->
                   Obj.magic
                     (x350
                        ~this:(Obj.magic (Ojs.array_get x351 0))
                        ~arg0:(Obj.magic (Ojs.array_get x351 1))
                        ~arg1:(Obj.magic (Ojs.array_get x351 2))
                        ~arg2:(Obj.magic (Ojs.array_get x351 3))
                        ~args:(Ojs.list_of_js_from any_of_js x351 4)))
             ; Obj.magic x353
             ; Obj.magic x354
             ; Obj.magic x355
             ; Obj.magic x356
            |])
         "apply"
         [| Ojs.null
          ; (let x359 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x360 : any) ->
                 ignore (Ojs.call x359 "push" [| any_to_js x360 |]))
               x358;
             x359)
         |])

  let (bind'''' :
        t
        -> this:
             (this:'T
              -> arg0:'A0
              -> arg1:'A1
              -> arg2:'A2
              -> arg3:'A3
              -> args:any list
              -> 'R)
        -> thisArg:'T
        -> arg0:'A0
        -> arg1:'A1
        -> arg2:'A2
        -> arg3:'A3
        -> args:any list
        -> 'R)
    =
   fun (x369 : t)
       ~this:
         (x361 :
           this:'T
           -> arg0:'A0
           -> arg1:'A1
           -> arg2:'A2
           -> arg3:'A3
           -> args:any list
           -> 'R)
       ~thisArg:(x364 : 'T)
       ~arg0:(x365 : 'A0)
       ~arg1:(x366 : 'A1)
       ~arg2:(x367 : 'A2)
       ~arg3:(x368 : 'A3)
       ~args:(x370 : any list) ->
    Obj.magic
      (Ojs.call
         (Ojs.call
            (t_to_js x369)
            "bind"
            [| Ojs.fun_to_js_args (fun (x362 : _) ->
                   Obj.magic
                     (x361
                        ~this:(Obj.magic (Ojs.array_get x362 0))
                        ~arg0:(Obj.magic (Ojs.array_get x362 1))
                        ~arg1:(Obj.magic (Ojs.array_get x362 2))
                        ~arg2:(Obj.magic (Ojs.array_get x362 3))
                        ~arg3:(Obj.magic (Ojs.array_get x362 4))
                        ~args:(Ojs.list_of_js_from any_of_js x362 5)))
             ; Obj.magic x364
             ; Obj.magic x365
             ; Obj.magic x366
             ; Obj.magic x367
             ; Obj.magic x368
            |])
         "apply"
         [| Ojs.null
          ; (let x371 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x372 : any) ->
                 ignore (Ojs.call x371 "push" [| any_to_js x372 |]))
               x370;
             x371)
         |])

  let (cast : t -> _Function) = fun (x373 : t) -> _Function_of_js (t_to_js x373)
end

module NewableFunction = struct
  type t = _NewableFunction

  let rec t_of_js : Ojs.t -> t =
   fun (x375 : Ojs.t) -> _NewableFunction_of_js x375

  and t_to_js : t -> Ojs.t =
   fun (x374 : _NewableFunction) -> _NewableFunction_to_js x374

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x377 : Ojs.t) -> t_of_js x377

  and t_0_to_js : t_0 -> Ojs.t = fun (x376 : t) -> t_to_js x376

  let (apply_ : t -> this:'T anonymous_interface_12 -> thisArg:'T -> unit) =
   fun (x381 : t) ~this:(x378 : 'T anonymous_interface_12) ~thisArg:(x380 : 'T) ->
    ignore
      (Ojs.call
         (t_to_js x381)
         "apply"
         [| anonymous_interface_12_to_js Obj.magic x378; Obj.magic x380 |])

  let (apply_' :
        t
        -> this:('A, 'T) anonymous_interface_10
        -> thisArg:'T
        -> args:'A
        -> unit)
    =
   fun (x387 : t)
       ~this:(x382 : ('A, 'T) anonymous_interface_10)
       ~thisArg:(x385 : 'T)
       ~args:(x386 : 'A) ->
    ignore
      (Ojs.call
         (t_to_js x387)
         "apply"
         [| anonymous_interface_10_to_js Obj.magic Obj.magic x382
          ; Obj.magic x385
          ; Obj.magic x386
         |])

  let (call :
        t
        -> this:('A, 'T) anonymous_interface_10
        -> thisArg:'T
        -> args:any list
        -> unit)
    =
   fun (x395 : t)
       ~this:(x388 : ('A, 'T) anonymous_interface_10)
       ~thisArg:(x389 : 'T)
       ~args:(x390 : any list) ->
    ignore
      (let x396 = t_to_js x395 in
       Ojs.call
         (Ojs.get_prop_ascii x396 "call")
         "apply"
         [| x396
          ; (let x391 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x391
                  "push"
                  [| anonymous_interface_10_to_js Obj.magic Obj.magic x388 |]);
             ignore (Ojs.call x391 "push" [| Obj.magic x389 |]);
             List.iter
               (fun (x392 : any) ->
                 ignore (Ojs.call x391 "push" [| any_to_js x392 |]))
               x390;
             x391)
         |])

  let (bind : t -> this:'T -> thisArg:any -> 'T) =
   fun (x399 : t) ~this:(x397 : 'T) ~thisArg:(x398 : any) ->
    Obj.magic
      (Ojs.call (t_to_js x399) "bind" [| Obj.magic x397; any_to_js x398 |])

  let (bind' :
        t
        -> this:('A, 'A0, 'R) anonymous_interface_8
        -> thisArg:any
        -> arg0:'A0
        -> ('A, 'R) anonymous_interface_9)
    =
   fun (x406 : t)
       ~this:(x400 : ('A, 'A0, 'R) anonymous_interface_8)
       ~thisArg:(x404 : any)
       ~arg0:(x405 : 'A0) ->
    anonymous_interface_9_of_js
      Obj.magic
      Obj.magic
      (Ojs.call
         (t_to_js x406)
         "bind"
         [| anonymous_interface_8_to_js Obj.magic Obj.magic Obj.magic x400
          ; any_to_js x404
          ; Obj.magic x405
         |])

  let (bind'' :
        t
        -> this:('A, 'A0, 'A1, 'R) anonymous_interface_7
        -> thisArg:any
        -> arg0:'A0
        -> arg1:'A1
        -> ('A, 'R) anonymous_interface_9)
    =
   fun (x417 : t)
       ~this:(x409 : ('A, 'A0, 'A1, 'R) anonymous_interface_7)
       ~thisArg:(x414 : any)
       ~arg0:(x415 : 'A0)
       ~arg1:(x416 : 'A1) ->
    anonymous_interface_9_of_js
      Obj.magic
      Obj.magic
      (Ojs.call
         (t_to_js x417)
         "bind"
         [| anonymous_interface_7_to_js
              Obj.magic
              Obj.magic
              Obj.magic
              Obj.magic
              x409
          ; any_to_js x414
          ; Obj.magic x415
          ; Obj.magic x416
         |])

  let (bind''' :
        t
        -> this:('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6
        -> thisArg:any
        -> arg0:'A0
        -> arg1:'A1
        -> arg2:'A2
        -> ('A, 'R) anonymous_interface_9)
    =
   fun (x430 : t)
       ~this:(x420 : ('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6)
       ~thisArg:(x426 : any)
       ~arg0:(x427 : 'A0)
       ~arg1:(x428 : 'A1)
       ~arg2:(x429 : 'A2) ->
    anonymous_interface_9_of_js
      Obj.magic
      Obj.magic
      (Ojs.call
         (t_to_js x430)
         "bind"
         [| anonymous_interface_6_to_js
              Obj.magic
              Obj.magic
              Obj.magic
              Obj.magic
              Obj.magic
              x420
          ; any_to_js x426
          ; Obj.magic x427
          ; Obj.magic x428
          ; Obj.magic x429
         |])

  let (bind'''' :
        t
        -> this:('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5
        -> thisArg:any
        -> arg0:'A0
        -> arg1:'A1
        -> arg2:'A2
        -> arg3:'A3
        -> ('A, 'R) anonymous_interface_9)
    =
   fun (x445 : t)
       ~this:(x433 : ('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5)
       ~thisArg:(x440 : any)
       ~arg0:(x441 : 'A0)
       ~arg1:(x442 : 'A1)
       ~arg2:(x443 : 'A2)
       ~arg3:(x444 : 'A3) ->
    anonymous_interface_9_of_js
      Obj.magic
      Obj.magic
      (Ojs.call
         (t_to_js x445)
         "bind"
         [| anonymous_interface_5_to_js
              Obj.magic
              Obj.magic
              Obj.magic
              Obj.magic
              Obj.magic
              Obj.magic
              x433
          ; any_to_js x440
          ; Obj.magic x441
          ; Obj.magic x442
          ; Obj.magic x443
          ; Obj.magic x444
         |])

  let (bind''''' :
        t
        -> this:('AX, 'R) anonymous_interface_11
        -> thisArg:any
        -> args:'AX list
        -> ('AX, 'R) anonymous_interface_11)
    =
   fun (x455 : t)
       ~this:(x448 : ('AX, 'R) anonymous_interface_11)
       ~thisArg:(x449 : any)
       ~args:(x450 : 'AX list) ->
    anonymous_interface_11_of_js
      Obj.magic
      Obj.magic
      (let x456 = t_to_js x455 in
       Ojs.call
         (Ojs.get_prop_ascii x456 "bind")
         "apply"
         [| x456
          ; (let x451 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x451
                  "push"
                  [| anonymous_interface_11_to_js Obj.magic Obj.magic x448 |]);
             ignore (Ojs.call x451 "push" [| any_to_js x449 |]);
             List.iter
               (fun (x452 : 'AX) ->
                 ignore (Ojs.call x451 "push" [| Obj.magic x452 |]))
               x450;
             x451)
         |])

  let (cast : t -> _Function) = fun (x459 : t) -> _Function_of_js (t_to_js x459)
end

module IArguments = struct
  type t = _IArguments

  let rec t_of_js : Ojs.t -> t = fun (x461 : Ojs.t) -> _IArguments_of_js x461

  and t_to_js : t -> Ojs.t = fun (x460 : _IArguments) -> _IArguments_to_js x460

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x463 : Ojs.t) -> t_of_js x463

  and t_0_to_js : t_0 -> Ojs.t = fun (x462 : t) -> t_to_js x462

  let (get : t -> float -> any) =
   fun (x464 : t) (x465 : float) ->
    any_of_js (Ojs.get_prop (t_to_js x464) (Ojs.float_to_js x465))

  let (set : t -> float -> any -> unit) =
   fun (x466 : t) (x467 : float) (x468 : any) ->
    Ojs.set_prop (t_to_js x466) (Ojs.float_to_js x467) (any_to_js x468)

  let (get_length : t -> float) =
   fun (x469 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x469) "length")

  let (set_length : t -> float -> unit) =
   fun (x470 : t) (x471 : float) ->
    Ojs.set_prop_ascii (t_to_js x470) "length" (Ojs.float_to_js x471)

  let (get_callee : t -> _Function) =
   fun (x472 : t) ->
    _Function_of_js (Ojs.get_prop_ascii (t_to_js x472) "callee")

  let (set_callee : t -> _Function -> unit) =
   fun (x473 : t) (x474 : _Function) ->
    Ojs.set_prop_ascii (t_to_js x473) "callee" (_Function_to_js x474)
end

module String = struct
  type t = _String

  let rec t_of_js : Ojs.t -> t = fun (x476 : Ojs.t) -> _String_of_js x476

  and t_to_js : t -> Ojs.t = fun (x475 : _String) -> _String_to_js x475

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x478 : Ojs.t) -> t_of_js x478

  and t_0_to_js : t_0 -> Ojs.t = fun (x477 : t) -> t_to_js x477

  let (localeCompare :
        t
        -> that:string
        -> ?locales:string list or_string
        -> ?options:_Intl_CollatorOptions
        -> unit
        -> float)
    =
   fun (x487 : t)
       ~that:(x479 : string)
       ?locales:(x480 : string list or_string option)
       ?options:(x481 : _Intl_CollatorOptions option)
       () ->
    Ojs.float_of_js
      (let x488 = t_to_js x487 in
       Ojs.call
         (Ojs.get_prop_ascii x488 "localeCompare")
         "apply"
         [| x488
          ; (let x482 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x482 "push" [| Ojs.string_to_js x479 |]);
             (match x480 with
             | Some x484 ->
               ignore
                 (Ojs.call
                    x482
                    "push"
                    [| or_string_to_js
                         (fun (x485 : string list) ->
                           Ojs.list_to_js Ojs.string_to_js x485)
                         x484
                    |])
             | None ->
               ());
             (match x481 with
             | Some x483 ->
               ignore
                 (Ojs.call x482 "push" [| _Intl_CollatorOptions_to_js x483 |])
             | None ->
               ());
             x482)
         |])

  let (toString : t -> string) =
   fun (x489 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x489) "toString" [||])

  let (charAt : t -> pos:float -> string) =
   fun (x491 : t) ~pos:(x490 : float) ->
    Ojs.string_of_js
      (Ojs.call (t_to_js x491) "charAt" [| Ojs.float_to_js x490 |])

  let (charCodeAt : t -> index:float -> float) =
   fun (x493 : t) ~index:(x492 : float) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x493) "charCodeAt" [| Ojs.float_to_js x492 |])

  let (concat : t -> strings:string list -> string) =
   fun (x497 : t) ~strings:(x494 : string list) ->
    Ojs.string_of_js
      (let x498 = t_to_js x497 in
       Ojs.call
         (Ojs.get_prop_ascii x498 "concat")
         "apply"
         [| x498
          ; (let x495 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x496 : string) ->
                 ignore (Ojs.call x495 "push" [| Ojs.string_to_js x496 |]))
               x494;
             x495)
         |])

  let (indexOf : t -> searchString:string -> ?position:float -> unit -> float) =
   fun (x503 : t)
       ~searchString:(x499 : string)
       ?position:(x500 : float option)
       () ->
    Ojs.float_of_js
      (let x504 = t_to_js x503 in
       Ojs.call
         (Ojs.get_prop_ascii x504 "indexOf")
         "apply"
         [| x504
          ; (let x501 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x501 "push" [| Ojs.string_to_js x499 |]);
             (match x500 with
             | Some x502 ->
               ignore (Ojs.call x501 "push" [| Ojs.float_to_js x502 |])
             | None ->
               ());
             x501)
         |])

  let (lastIndexOf :
        t -> searchString:string -> ?position:float -> unit -> float)
    =
   fun (x509 : t)
       ~searchString:(x505 : string)
       ?position:(x506 : float option)
       () ->
    Ojs.float_of_js
      (let x510 = t_to_js x509 in
       Ojs.call
         (Ojs.get_prop_ascii x510 "lastIndexOf")
         "apply"
         [| x510
          ; (let x507 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x507 "push" [| Ojs.string_to_js x505 |]);
             (match x506 with
             | Some x508 ->
               ignore (Ojs.call x507 "push" [| Ojs.float_to_js x508 |])
             | None ->
               ());
             x507)
         |])

  let (localeCompare' : t -> that:string -> float) =
   fun (x512 : t) ~that:(x511 : string) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x512) "localeCompare" [| Ojs.string_to_js x511 |])

  let (match_ : t -> regexp:_RegExp or_string -> _RegExpMatchArray or_null) =
   fun (x515 : t) ~regexp:(x513 : _RegExp or_string) ->
    or_null_of_js
      _RegExpMatchArray_of_js
      (Ojs.call (t_to_js x515) "match" [| or_string_to_js _RegExp_to_js x513 |])

  let (replace :
        t -> searchValue:_RegExp or_string -> replaceValue:string -> string)
    =
   fun (x520 : t)
       ~searchValue:(x517 : _RegExp or_string)
       ~replaceValue:(x519 : string) ->
    Ojs.string_of_js
      (Ojs.call
         (t_to_js x520)
         "replace"
         [| or_string_to_js _RegExp_to_js x517; Ojs.string_to_js x519 |])

  let (replace' :
        t
        -> searchValue:_RegExp or_string
        -> replacer:(substring:string -> args:any list -> string)
        -> string)
    =
   fun (x526 : t)
       ~searchValue:(x521 : _RegExp or_string)
       ~replacer:(x523 : substring:string -> args:any list -> string) ->
    Ojs.string_of_js
      (Ojs.call
         (t_to_js x526)
         "replace"
         [| or_string_to_js _RegExp_to_js x521
          ; Ojs.fun_to_js_args (fun (x524 : _) ->
                Ojs.string_to_js
                  (x523
                     ~substring:(Ojs.string_of_js (Ojs.array_get x524 0))
                     ~args:(Ojs.list_of_js_from any_of_js x524 1)))
         |])

  let (search : t -> regexp:_RegExp or_string -> float) =
   fun (x529 : t) ~regexp:(x527 : _RegExp or_string) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x529)
         "search"
         [| or_string_to_js _RegExp_to_js x527 |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> string) =
   fun (x535 : t) ?start:(x530 : float option) ?end_:(x531 : float option) () ->
    Ojs.string_of_js
      (let x536 = t_to_js x535 in
       Ojs.call
         (Ojs.get_prop_ascii x536 "slice")
         "apply"
         [| x536
          ; (let x532 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x530 with
             | Some x534 ->
               ignore (Ojs.call x532 "push" [| Ojs.float_to_js x534 |])
             | None ->
               ());
             (match x531 with
             | Some x533 ->
               ignore (Ojs.call x532 "push" [| Ojs.float_to_js x533 |])
             | None ->
               ());
             x532)
         |])

  let (split :
        t -> separator:_RegExp or_string -> ?limit:float -> unit -> string list)
    =
   fun (x542 : t)
       ~separator:(x537 : _RegExp or_string)
       ?limit:(x538 : float option)
       () ->
    Ojs.list_of_js
      Ojs.string_of_js
      (let x543 = t_to_js x542 in
       Ojs.call
         (Ojs.get_prop_ascii x543 "split")
         "apply"
         [| x543
          ; (let x539 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x539 "push" [| or_string_to_js _RegExp_to_js x537 |]);
             (match x538 with
             | Some x540 ->
               ignore (Ojs.call x539 "push" [| Ojs.float_to_js x540 |])
             | None ->
               ());
             x539)
         |])

  let (substring : t -> start:float -> ?end_:float -> unit -> string) =
   fun (x549 : t) ~start:(x545 : float) ?end_:(x546 : float option) () ->
    Ojs.string_of_js
      (let x550 = t_to_js x549 in
       Ojs.call
         (Ojs.get_prop_ascii x550 "substring")
         "apply"
         [| x550
          ; (let x547 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x547 "push" [| Ojs.float_to_js x545 |]);
             (match x546 with
             | Some x548 ->
               ignore (Ojs.call x547 "push" [| Ojs.float_to_js x548 |])
             | None ->
               ());
             x547)
         |])

  let (toLowerCase : t -> string) =
   fun (x551 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x551) "toLowerCase" [||])

  let (toLocaleLowerCase :
        t -> ?locales:string list or_string -> unit -> string)
    =
   fun (x557 : t) ?locales:(x552 : string list or_string option) () ->
    Ojs.string_of_js
      (let x558 = t_to_js x557 in
       Ojs.call
         (Ojs.get_prop_ascii x558 "toLocaleLowerCase")
         "apply"
         [| x558
          ; (let x553 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x552 with
             | Some x554 ->
               ignore
                 (Ojs.call
                    x553
                    "push"
                    [| or_string_to_js
                         (fun (x555 : string list) ->
                           Ojs.list_to_js Ojs.string_to_js x555)
                         x554
                    |])
             | None ->
               ());
             x553)
         |])

  let (toUpperCase : t -> string) =
   fun (x559 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x559) "toUpperCase" [||])

  let (toLocaleUpperCase :
        t -> ?locales:string list or_string -> unit -> string)
    =
   fun (x565 : t) ?locales:(x560 : string list or_string option) () ->
    Ojs.string_of_js
      (let x566 = t_to_js x565 in
       Ojs.call
         (Ojs.get_prop_ascii x566 "toLocaleUpperCase")
         "apply"
         [| x566
          ; (let x561 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x560 with
             | Some x562 ->
               ignore
                 (Ojs.call
                    x561
                    "push"
                    [| or_string_to_js
                         (fun (x563 : string list) ->
                           Ojs.list_to_js Ojs.string_to_js x563)
                         x562
                    |])
             | None ->
               ());
             x561)
         |])

  let (trim : t -> string) =
   fun (x567 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x567) "trim" [||])

  let (get_length : t -> float) =
   fun (x568 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x568) "length")

  let (substr : t -> from:float -> ?length:float -> unit -> string) =
   fun (x573 : t) ~from:(x569 : float) ?length:(x570 : float option) () ->
    Ojs.string_of_js
      (let x574 = t_to_js x573 in
       Ojs.call
         (Ojs.get_prop_ascii x574 "substr")
         "apply"
         [| x574
          ; (let x571 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x571 "push" [| Ojs.float_to_js x569 |]);
             (match x570 with
             | Some x572 ->
               ignore (Ojs.call x571 "push" [| Ojs.float_to_js x572 |])
             | None ->
               ());
             x571)
         |])

  let (valueOf : t -> string) =
   fun (x575 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x575) "valueOf" [||])

  let (get : t -> float -> string) =
   fun (x576 : t) (x577 : float) ->
    Ojs.string_of_js (Ojs.get_prop (t_to_js x576) (Ojs.float_to_js x577))

  let (to_ml : t -> string) = fun (x578 : t) -> Ojs.string_of_js (t_to_js x578)

  let (of_ml : string -> t) =
   fun (x579 : string) -> t_of_js (Ojs.string_to_js x579)

  let (create : ?value:any -> unit -> _String) =
   fun ?value:(x580 : any option) () ->
    _String_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "String")
         (let x581 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          (match x580 with
          | Some x582 ->
            ignore (Ojs.call x581 "push" [| any_to_js x582 |])
          | None ->
            ());
          x581))

  let (fromCharCode : codes:float list -> string) =
   fun ~codes:(x583 : float list) ->
    Ojs.string_of_js
      (let x586 = Ojs.get_prop_ascii Ojs.global "String" in
       Ojs.call
         (Ojs.get_prop_ascii x586 "fromCharCode")
         "apply"
         [| x586
          ; (let x584 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x585 : float) ->
                 ignore (Ojs.call x584 "push" [| Ojs.float_to_js x585 |]))
               x583;
             x584)
         |])
end

module StringConstructor = struct
  type t = _StringConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x588 : Ojs.t) -> _StringConstructor_of_js x588

  and t_to_js : t -> Ojs.t =
   fun (x587 : _StringConstructor) -> _StringConstructor_to_js x587

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x590 : Ojs.t) -> t_of_js x590

  and t_0_to_js : t_0 -> Ojs.t = fun (x589 : t) -> t_to_js x589

  let (create : t -> ?value:any -> unit -> _String) =
   fun (x594 : t) ?value:(x591 : any option) () ->
    _String_of_js
      (Ojs.new_obj_arr
         (t_to_js x594)
         (let x592 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          (match x591 with
          | Some x593 ->
            ignore (Ojs.call x592 "push" [| any_to_js x593 |])
          | None ->
            ());
          x592))

  let (apply : t -> ?value:any -> unit -> string) =
   fun (x598 : t) ?value:(x595 : any option) () ->
    Ojs.string_of_js
      (Ojs.call
         (t_to_js x598)
         "apply"
         [| Ojs.null
          ; (let x596 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x595 with
             | Some x597 ->
               ignore (Ojs.call x596 "push" [| any_to_js x597 |])
             | None ->
               ());
             x596)
         |])

  let (get_prototype : t -> _String) =
   fun (x599 : t) ->
    _String_of_js (Ojs.get_prop_ascii (t_to_js x599) "prototype")

  let (fromCharCode : t -> codes:float list -> string) =
   fun (x603 : t) ~codes:(x600 : float list) ->
    Ojs.string_of_js
      (let x604 = t_to_js x603 in
       Ojs.call
         (Ojs.get_prop_ascii x604 "fromCharCode")
         "apply"
         [| x604
          ; (let x601 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x602 : float) ->
                 ignore (Ojs.call x601 "push" [| Ojs.float_to_js x602 |]))
               x600;
             x601)
         |])
end

let (string : _StringConstructor) =
  _StringConstructor_of_js (Ojs.get_prop_ascii Ojs.global "String")

module Boolean = struct
  type t = _Boolean

  let rec t_of_js : Ojs.t -> t = fun (x606 : Ojs.t) -> _Boolean_of_js x606

  and t_to_js : t -> Ojs.t = fun (x605 : _Boolean) -> _Boolean_to_js x605

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x608 : Ojs.t) -> t_of_js x608

  and t_0_to_js : t_0 -> Ojs.t = fun (x607 : t) -> t_to_js x607

  let (valueOf : t -> bool) =
   fun (x609 : t) -> Ojs.bool_of_js (Ojs.call (t_to_js x609) "valueOf" [||])

  let (to_ml : t -> bool) = fun (x610 : t) -> Ojs.bool_of_js (t_to_js x610)

  let (of_ml : bool -> t) = fun (x611 : bool) -> t_of_js (Ojs.bool_to_js x611)

  let (create : ?value:any -> unit -> _Boolean) =
   fun ?value:(x612 : any option) () ->
    _Boolean_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Boolean")
         (let x613 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          (match x612 with
          | Some x614 ->
            ignore (Ojs.call x613 "push" [| any_to_js x614 |])
          | None ->
            ());
          x613))
end

module BooleanConstructor = struct
  type t = _BooleanConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x616 : Ojs.t) -> _BooleanConstructor_of_js x616

  and t_to_js : t -> Ojs.t =
   fun (x615 : _BooleanConstructor) -> _BooleanConstructor_to_js x615

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x618 : Ojs.t) -> t_of_js x618

  and t_0_to_js : t_0 -> Ojs.t = fun (x617 : t) -> t_to_js x617

  let (create : t -> ?value:any -> unit -> _Boolean) =
   fun (x622 : t) ?value:(x619 : any option) () ->
    _Boolean_of_js
      (Ojs.new_obj_arr
         (t_to_js x622)
         (let x620 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          (match x619 with
          | Some x621 ->
            ignore (Ojs.call x620 "push" [| any_to_js x621 |])
          | None ->
            ());
          x620))

  let (apply : t -> ?value:'T -> unit -> bool) =
   fun (x626 : t) ?value:(x623 : 'T option) () ->
    Ojs.bool_of_js
      (Ojs.call
         (t_to_js x626)
         "apply"
         [| Ojs.null
          ; (let x624 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x623 with
             | Some x625 ->
               ignore (Ojs.call x624 "push" [| Obj.magic x625 |])
             | None ->
               ());
             x624)
         |])

  let (get_prototype : t -> _Boolean) =
   fun (x627 : t) ->
    _Boolean_of_js (Ojs.get_prop_ascii (t_to_js x627) "prototype")
end

let (boolean : _BooleanConstructor) =
  _BooleanConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Boolean")

module Number = struct
  type t = _Number

  let rec t_of_js : Ojs.t -> t = fun (x629 : Ojs.t) -> _Number_of_js x629

  and t_to_js : t -> Ojs.t = fun (x628 : _Number) -> _Number_to_js x628

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x631 : Ojs.t) -> t_of_js x631

  and t_0_to_js : t_0 -> Ojs.t = fun (x630 : t) -> t_to_js x630

  let (toLocaleString :
        t
        -> ?locales:string list or_string
        -> ?options:_Intl_NumberFormatOptions
        -> unit
        -> string)
    =
   fun (x639 : t)
       ?locales:(x632 : string list or_string option)
       ?options:(x633 : _Intl_NumberFormatOptions option)
       () ->
    Ojs.string_of_js
      (let x640 = t_to_js x639 in
       Ojs.call
         (Ojs.get_prop_ascii x640 "toLocaleString")
         "apply"
         [| x640
          ; (let x634 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x632 with
             | Some x636 ->
               ignore
                 (Ojs.call
                    x634
                    "push"
                    [| or_string_to_js
                         (fun (x637 : string list) ->
                           Ojs.list_to_js Ojs.string_to_js x637)
                         x636
                    |])
             | None ->
               ());
             (match x633 with
             | Some x635 ->
               ignore
                 (Ojs.call
                    x634
                    "push"
                    [| _Intl_NumberFormatOptions_to_js x635 |])
             | None ->
               ());
             x634)
         |])

  let (toString : t -> ?radix:float -> unit -> string) =
   fun (x644 : t) ?radix:(x641 : float option) () ->
    Ojs.string_of_js
      (let x645 = t_to_js x644 in
       Ojs.call
         (Ojs.get_prop_ascii x645 "toString")
         "apply"
         [| x645
          ; (let x642 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x641 with
             | Some x643 ->
               ignore (Ojs.call x642 "push" [| Ojs.float_to_js x643 |])
             | None ->
               ());
             x642)
         |])

  let (toFixed : t -> ?fractionDigits:float -> unit -> string) =
   fun (x649 : t) ?fractionDigits:(x646 : float option) () ->
    Ojs.string_of_js
      (let x650 = t_to_js x649 in
       Ojs.call
         (Ojs.get_prop_ascii x650 "toFixed")
         "apply"
         [| x650
          ; (let x647 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x646 with
             | Some x648 ->
               ignore (Ojs.call x647 "push" [| Ojs.float_to_js x648 |])
             | None ->
               ());
             x647)
         |])

  let (toExponential : t -> ?fractionDigits:float -> unit -> string) =
   fun (x654 : t) ?fractionDigits:(x651 : float option) () ->
    Ojs.string_of_js
      (let x655 = t_to_js x654 in
       Ojs.call
         (Ojs.get_prop_ascii x655 "toExponential")
         "apply"
         [| x655
          ; (let x652 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x651 with
             | Some x653 ->
               ignore (Ojs.call x652 "push" [| Ojs.float_to_js x653 |])
             | None ->
               ());
             x652)
         |])

  let (toPrecision : t -> ?precision:float -> unit -> string) =
   fun (x659 : t) ?precision:(x656 : float option) () ->
    Ojs.string_of_js
      (let x660 = t_to_js x659 in
       Ojs.call
         (Ojs.get_prop_ascii x660 "toPrecision")
         "apply"
         [| x660
          ; (let x657 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x656 with
             | Some x658 ->
               ignore (Ojs.call x657 "push" [| Ojs.float_to_js x658 |])
             | None ->
               ());
             x657)
         |])

  let (valueOf : t -> float) =
   fun (x661 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x661) "valueOf" [||])

  let (to_ml : t -> float) = fun (x662 : t) -> Ojs.float_of_js (t_to_js x662)

  let (of_ml : float -> t) =
   fun (x663 : float) -> t_of_js (Ojs.float_to_js x663)

  let (create : ?value:any -> unit -> _Number) =
   fun ?value:(x664 : any option) () ->
    _Number_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Number")
         (let x665 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          (match x664 with
          | Some x666 ->
            ignore (Ojs.call x665 "push" [| any_to_js x666 |])
          | None ->
            ());
          x665))

  let (get_MAX_VALUE : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number") "MAX_VALUE")

  let (get_MIN_VALUE : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number") "MIN_VALUE")

  let (get_NaN : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number") "NaN")

  let (get_NEGATIVE_INFINITY : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Number")
         "NEGATIVE_INFINITY")

  let (get_POSITIVE_INFINITY : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Number")
         "POSITIVE_INFINITY")
end

module NumberConstructor = struct
  type t = _NumberConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x668 : Ojs.t) -> _NumberConstructor_of_js x668

  and t_to_js : t -> Ojs.t =
   fun (x667 : _NumberConstructor) -> _NumberConstructor_to_js x667

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x670 : Ojs.t) -> t_of_js x670

  and t_0_to_js : t_0 -> Ojs.t = fun (x669 : t) -> t_to_js x669

  let (create : t -> ?value:any -> unit -> _Number) =
   fun (x674 : t) ?value:(x671 : any option) () ->
    _Number_of_js
      (Ojs.new_obj_arr
         (t_to_js x674)
         (let x672 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          (match x671 with
          | Some x673 ->
            ignore (Ojs.call x672 "push" [| any_to_js x673 |])
          | None ->
            ());
          x672))

  let (apply : t -> ?value:any -> unit -> float) =
   fun (x678 : t) ?value:(x675 : any option) () ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x678)
         "apply"
         [| Ojs.null
          ; (let x676 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x675 with
             | Some x677 ->
               ignore (Ojs.call x676 "push" [| any_to_js x677 |])
             | None ->
               ());
             x676)
         |])

  let (get_prototype : t -> _Number) =
   fun (x679 : t) ->
    _Number_of_js (Ojs.get_prop_ascii (t_to_js x679) "prototype")

  let (get_MAX_VALUE : t -> float) =
   fun (x680 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x680) "MAX_VALUE")

  let (get_MIN_VALUE : t -> float) =
   fun (x681 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x681) "MIN_VALUE")

  let (get_NaN : t -> float) =
   fun (x682 : t) -> Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x682) "NaN")

  let (get_NEGATIVE_INFINITY : t -> float) =
   fun (x683 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x683) "NEGATIVE_INFINITY")

  let (get_POSITIVE_INFINITY : t -> float) =
   fun (x684 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x684) "POSITIVE_INFINITY")
end

let (number : _NumberConstructor) =
  _NumberConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Number")

module TemplateStringsArray = struct
  type t = _TemplateStringsArray

  let rec t_of_js : Ojs.t -> t =
   fun (x686 : Ojs.t) -> _TemplateStringsArray_of_js x686

  and t_to_js : t -> Ojs.t =
   fun (x685 : _TemplateStringsArray) -> _TemplateStringsArray_to_js x685

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x688 : Ojs.t) -> t_of_js x688

  and t_0_to_js : t_0 -> Ojs.t = fun (x687 : t) -> t_to_js x687

  let (get_raw : t -> string list) =
   fun (x689 : t) ->
    Ojs.list_of_js Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x689) "raw")

  let (cast : t -> string _ReadonlyArray) =
   fun (x691 : t) -> _ReadonlyArray_of_js Ojs.string_of_js (t_to_js x691)
end

module ImportMeta = struct
  type t = _ImportMeta

  let rec t_of_js : Ojs.t -> t = fun (x694 : Ojs.t) -> _ImportMeta_of_js x694

  and t_to_js : t -> Ojs.t = fun (x693 : _ImportMeta) -> _ImportMeta_to_js x693

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x696 : Ojs.t) -> t_of_js x696

  and t_0_to_js : t_0 -> Ojs.t = fun (x695 : t) -> t_to_js x695
end

module Math = struct
  type t = _Math

  let rec t_of_js : Ojs.t -> t = fun (x698 : Ojs.t) -> _Math_of_js x698

  and t_to_js : t -> Ojs.t = fun (x697 : _Math) -> _Math_to_js x697

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x700 : Ojs.t) -> t_of_js x700

  and t_0_to_js : t_0 -> Ojs.t = fun (x699 : t) -> t_to_js x699

  let (get_E : t -> float) =
   fun (x701 : t) -> Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x701) "E")

  let (get_LN10 : t -> float) =
   fun (x702 : t) -> Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x702) "LN10")

  let (get_LN2 : t -> float) =
   fun (x703 : t) -> Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x703) "LN2")

  let (get_LOG2E : t -> float) =
   fun (x704 : t) -> Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x704) "LOG2E")

  let (get_LOG10E : t -> float) =
   fun (x705 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x705) "LOG10E")

  let (get_PI : t -> float) =
   fun (x706 : t) -> Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x706) "PI")

  let (get_SQRT1_2 : t -> float) =
   fun (x707 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x707) "SQRT1_2")

  let (get_SQRT2 : t -> float) =
   fun (x708 : t) -> Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x708) "SQRT2")

  let (abs : t -> x:float -> float) =
   fun (x710 : t) ~x:(x709 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x710) "abs" [| Ojs.float_to_js x709 |])

  let (acos : t -> x:float -> float) =
   fun (x712 : t) ~x:(x711 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x712) "acos" [| Ojs.float_to_js x711 |])

  let (asin : t -> x:float -> float) =
   fun (x714 : t) ~x:(x713 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x714) "asin" [| Ojs.float_to_js x713 |])

  let (atan : t -> x:float -> float) =
   fun (x716 : t) ~x:(x715 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x716) "atan" [| Ojs.float_to_js x715 |])

  let (atan2 : t -> y:float -> x:float -> float) =
   fun (x719 : t) ~y:(x717 : float) ~x:(x718 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x719)
         "atan2"
         [| Ojs.float_to_js x717; Ojs.float_to_js x718 |])

  let (ceil : t -> x:float -> float) =
   fun (x721 : t) ~x:(x720 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x721) "ceil" [| Ojs.float_to_js x720 |])

  let (cos : t -> x:float -> float) =
   fun (x723 : t) ~x:(x722 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x723) "cos" [| Ojs.float_to_js x722 |])

  let (exp : t -> x:float -> float) =
   fun (x725 : t) ~x:(x724 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x725) "exp" [| Ojs.float_to_js x724 |])

  let (floor : t -> x:float -> float) =
   fun (x727 : t) ~x:(x726 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x727) "floor" [| Ojs.float_to_js x726 |])

  let (log : t -> x:float -> float) =
   fun (x729 : t) ~x:(x728 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x729) "log" [| Ojs.float_to_js x728 |])

  let (max : t -> values:float list -> float) =
   fun (x733 : t) ~values:(x730 : float list) ->
    Ojs.float_of_js
      (let x734 = t_to_js x733 in
       Ojs.call
         (Ojs.get_prop_ascii x734 "max")
         "apply"
         [| x734
          ; (let x731 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x732 : float) ->
                 ignore (Ojs.call x731 "push" [| Ojs.float_to_js x732 |]))
               x730;
             x731)
         |])

  let (min : t -> values:float list -> float) =
   fun (x738 : t) ~values:(x735 : float list) ->
    Ojs.float_of_js
      (let x739 = t_to_js x738 in
       Ojs.call
         (Ojs.get_prop_ascii x739 "min")
         "apply"
         [| x739
          ; (let x736 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x737 : float) ->
                 ignore (Ojs.call x736 "push" [| Ojs.float_to_js x737 |]))
               x735;
             x736)
         |])

  let (pow : t -> x:float -> y:float -> float) =
   fun (x742 : t) ~x:(x740 : float) ~y:(x741 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x742)
         "pow"
         [| Ojs.float_to_js x740; Ojs.float_to_js x741 |])

  let (random : t -> float) =
   fun (x743 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x743) "random" [||])

  let (round : t -> x:float -> float) =
   fun (x745 : t) ~x:(x744 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x745) "round" [| Ojs.float_to_js x744 |])

  let (sin : t -> x:float -> float) =
   fun (x747 : t) ~x:(x746 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x747) "sin" [| Ojs.float_to_js x746 |])

  let (sqrt : t -> x:float -> float) =
   fun (x749 : t) ~x:(x748 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x749) "sqrt" [| Ojs.float_to_js x748 |])

  let (tan : t -> x:float -> float) =
   fun (x751 : t) ~x:(x750 : float) ->
    Ojs.float_of_js (Ojs.call (t_to_js x751) "tan" [| Ojs.float_to_js x750 |])
end

let (math : _Math) = _Math_of_js (Ojs.get_prop_ascii Ojs.global "Math")

module Date = struct
  type t = _Date

  let rec t_of_js : Ojs.t -> t = fun (x753 : Ojs.t) -> _Date_of_js x753

  and t_to_js : t -> Ojs.t = fun (x752 : _Date) -> _Date_to_js x752

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x755 : Ojs.t) -> t_of_js x755

  and t_0_to_js : t_0 -> Ojs.t = fun (x754 : t) -> t_to_js x754

  let (toLocaleString :
        t
        -> ?locales:string list or_string
        -> ?options:_Intl_DateTimeFormatOptions
        -> unit
        -> string)
    =
   fun (x763 : t)
       ?locales:(x756 : string list or_string option)
       ?options:(x757 : _Intl_DateTimeFormatOptions option)
       () ->
    Ojs.string_of_js
      (let x764 = t_to_js x763 in
       Ojs.call
         (Ojs.get_prop_ascii x764 "toLocaleString")
         "apply"
         [| x764
          ; (let x758 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x756 with
             | Some x760 ->
               ignore
                 (Ojs.call
                    x758
                    "push"
                    [| or_string_to_js
                         (fun (x761 : string list) ->
                           Ojs.list_to_js Ojs.string_to_js x761)
                         x760
                    |])
             | None ->
               ());
             (match x757 with
             | Some x759 ->
               ignore
                 (Ojs.call
                    x758
                    "push"
                    [| _Intl_DateTimeFormatOptions_to_js x759 |])
             | None ->
               ());
             x758)
         |])

  let (toLocaleDateString :
        t
        -> ?locales:string list or_string
        -> ?options:_Intl_DateTimeFormatOptions
        -> unit
        -> string)
    =
   fun (x772 : t)
       ?locales:(x765 : string list or_string option)
       ?options:(x766 : _Intl_DateTimeFormatOptions option)
       () ->
    Ojs.string_of_js
      (let x773 = t_to_js x772 in
       Ojs.call
         (Ojs.get_prop_ascii x773 "toLocaleDateString")
         "apply"
         [| x773
          ; (let x767 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x765 with
             | Some x769 ->
               ignore
                 (Ojs.call
                    x767
                    "push"
                    [| or_string_to_js
                         (fun (x770 : string list) ->
                           Ojs.list_to_js Ojs.string_to_js x770)
                         x769
                    |])
             | None ->
               ());
             (match x766 with
             | Some x768 ->
               ignore
                 (Ojs.call
                    x767
                    "push"
                    [| _Intl_DateTimeFormatOptions_to_js x768 |])
             | None ->
               ());
             x767)
         |])

  let (toLocaleTimeString :
        t
        -> ?locales:string list or_string
        -> ?options:_Intl_DateTimeFormatOptions
        -> unit
        -> string)
    =
   fun (x781 : t)
       ?locales:(x774 : string list or_string option)
       ?options:(x775 : _Intl_DateTimeFormatOptions option)
       () ->
    Ojs.string_of_js
      (let x782 = t_to_js x781 in
       Ojs.call
         (Ojs.get_prop_ascii x782 "toLocaleTimeString")
         "apply"
         [| x782
          ; (let x776 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x774 with
             | Some x778 ->
               ignore
                 (Ojs.call
                    x776
                    "push"
                    [| or_string_to_js
                         (fun (x779 : string list) ->
                           Ojs.list_to_js Ojs.string_to_js x779)
                         x778
                    |])
             | None ->
               ());
             (match x775 with
             | Some x777 ->
               ignore
                 (Ojs.call
                    x776
                    "push"
                    [| _Intl_DateTimeFormatOptions_to_js x777 |])
             | None ->
               ());
             x776)
         |])

  let (toString : t -> string) =
   fun (x783 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x783) "toString" [||])

  let (toDateString : t -> string) =
   fun (x784 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x784) "toDateString" [||])

  let (toTimeString : t -> string) =
   fun (x785 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x785) "toTimeString" [||])

  let (toLocaleString' : t -> string) =
   fun (x786 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x786) "toLocaleString" [||])

  let (toLocaleDateString' : t -> string) =
   fun (x787 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x787) "toLocaleDateString" [||])

  let (toLocaleTimeString' : t -> string) =
   fun (x788 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x788) "toLocaleTimeString" [||])

  let (valueOf : t -> float) =
   fun (x789 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x789) "valueOf" [||])

  let (getTime : t -> float) =
   fun (x790 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x790) "getTime" [||])

  let (getFullYear : t -> float) =
   fun (x791 : t) ->
    Ojs.float_of_js (Ojs.call (t_to_js x791) "getFullYear" [||])

  let (getUTCFullYear : t -> float) =
   fun (x792 : t) ->
    Ojs.float_of_js (Ojs.call (t_to_js x792) "getUTCFullYear" [||])

  let (getMonth : t -> float) =
   fun (x793 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x793) "getMonth" [||])

  let (getUTCMonth : t -> float) =
   fun (x794 : t) ->
    Ojs.float_of_js (Ojs.call (t_to_js x794) "getUTCMonth" [||])

  let (getDate : t -> float) =
   fun (x795 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x795) "getDate" [||])

  let (getUTCDate : t -> float) =
   fun (x796 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x796) "getUTCDate" [||])

  let (getDay : t -> float) =
   fun (x797 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x797) "getDay" [||])

  let (getUTCDay : t -> float) =
   fun (x798 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x798) "getUTCDay" [||])

  let (getHours : t -> float) =
   fun (x799 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x799) "getHours" [||])

  let (getUTCHours : t -> float) =
   fun (x800 : t) ->
    Ojs.float_of_js (Ojs.call (t_to_js x800) "getUTCHours" [||])

  let (getMinutes : t -> float) =
   fun (x801 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x801) "getMinutes" [||])

  let (getUTCMinutes : t -> float) =
   fun (x802 : t) ->
    Ojs.float_of_js (Ojs.call (t_to_js x802) "getUTCMinutes" [||])

  let (getSeconds : t -> float) =
   fun (x803 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x803) "getSeconds" [||])

  let (getUTCSeconds : t -> float) =
   fun (x804 : t) ->
    Ojs.float_of_js (Ojs.call (t_to_js x804) "getUTCSeconds" [||])

  let (getMilliseconds : t -> float) =
   fun (x805 : t) ->
    Ojs.float_of_js (Ojs.call (t_to_js x805) "getMilliseconds" [||])

  let (getUTCMilliseconds : t -> float) =
   fun (x806 : t) ->
    Ojs.float_of_js (Ojs.call (t_to_js x806) "getUTCMilliseconds" [||])

  let (getTimezoneOffset : t -> float) =
   fun (x807 : t) ->
    Ojs.float_of_js (Ojs.call (t_to_js x807) "getTimezoneOffset" [||])

  let (setTime : t -> time:float -> float) =
   fun (x809 : t) ~time:(x808 : float) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x809) "setTime" [| Ojs.float_to_js x808 |])

  let (setMilliseconds : t -> ms:float -> float) =
   fun (x811 : t) ~ms:(x810 : float) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x811) "setMilliseconds" [| Ojs.float_to_js x810 |])

  let (setUTCMilliseconds : t -> ms:float -> float) =
   fun (x813 : t) ~ms:(x812 : float) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x813) "setUTCMilliseconds" [| Ojs.float_to_js x812 |])

  let (setSeconds : t -> sec:float -> ?ms:float -> unit -> float) =
   fun (x818 : t) ~sec:(x814 : float) ?ms:(x815 : float option) () ->
    Ojs.float_of_js
      (let x819 = t_to_js x818 in
       Ojs.call
         (Ojs.get_prop_ascii x819 "setSeconds")
         "apply"
         [| x819
          ; (let x816 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x816 "push" [| Ojs.float_to_js x814 |]);
             (match x815 with
             | Some x817 ->
               ignore (Ojs.call x816 "push" [| Ojs.float_to_js x817 |])
             | None ->
               ());
             x816)
         |])

  let (setUTCSeconds : t -> sec:float -> ?ms:float -> unit -> float) =
   fun (x824 : t) ~sec:(x820 : float) ?ms:(x821 : float option) () ->
    Ojs.float_of_js
      (let x825 = t_to_js x824 in
       Ojs.call
         (Ojs.get_prop_ascii x825 "setUTCSeconds")
         "apply"
         [| x825
          ; (let x822 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x822 "push" [| Ojs.float_to_js x820 |]);
             (match x821 with
             | Some x823 ->
               ignore (Ojs.call x822 "push" [| Ojs.float_to_js x823 |])
             | None ->
               ());
             x822)
         |])

  let (setMinutes : t -> min:float -> ?sec:float -> ?ms:float -> unit -> float) =
   fun (x832 : t)
       ~min:(x826 : float)
       ?sec:(x827 : float option)
       ?ms:(x828 : float option)
       () ->
    Ojs.float_of_js
      (let x833 = t_to_js x832 in
       Ojs.call
         (Ojs.get_prop_ascii x833 "setMinutes")
         "apply"
         [| x833
          ; (let x829 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x829 "push" [| Ojs.float_to_js x826 |]);
             (match x827 with
             | Some x831 ->
               ignore (Ojs.call x829 "push" [| Ojs.float_to_js x831 |])
             | None ->
               ());
             (match x828 with
             | Some x830 ->
               ignore (Ojs.call x829 "push" [| Ojs.float_to_js x830 |])
             | None ->
               ());
             x829)
         |])

  let (setUTCMinutes :
        t -> min:float -> ?sec:float -> ?ms:float -> unit -> float)
    =
   fun (x840 : t)
       ~min:(x834 : float)
       ?sec:(x835 : float option)
       ?ms:(x836 : float option)
       () ->
    Ojs.float_of_js
      (let x841 = t_to_js x840 in
       Ojs.call
         (Ojs.get_prop_ascii x841 "setUTCMinutes")
         "apply"
         [| x841
          ; (let x837 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x837 "push" [| Ojs.float_to_js x834 |]);
             (match x835 with
             | Some x839 ->
               ignore (Ojs.call x837 "push" [| Ojs.float_to_js x839 |])
             | None ->
               ());
             (match x836 with
             | Some x838 ->
               ignore (Ojs.call x837 "push" [| Ojs.float_to_js x838 |])
             | None ->
               ());
             x837)
         |])

  let (setHours :
        t
        -> hours:float
        -> ?min:float
        -> ?sec:float
        -> ?ms:float
        -> unit
        -> float)
    =
   fun (x850 : t)
       ~hours:(x842 : float)
       ?min:(x843 : float option)
       ?sec:(x844 : float option)
       ?ms:(x845 : float option)
       () ->
    Ojs.float_of_js
      (let x851 = t_to_js x850 in
       Ojs.call
         (Ojs.get_prop_ascii x851 "setHours")
         "apply"
         [| x851
          ; (let x846 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x846 "push" [| Ojs.float_to_js x842 |]);
             (match x843 with
             | Some x849 ->
               ignore (Ojs.call x846 "push" [| Ojs.float_to_js x849 |])
             | None ->
               ());
             (match x844 with
             | Some x848 ->
               ignore (Ojs.call x846 "push" [| Ojs.float_to_js x848 |])
             | None ->
               ());
             (match x845 with
             | Some x847 ->
               ignore (Ojs.call x846 "push" [| Ojs.float_to_js x847 |])
             | None ->
               ());
             x846)
         |])

  let (setUTCHours :
        t
        -> hours:float
        -> ?min:float
        -> ?sec:float
        -> ?ms:float
        -> unit
        -> float)
    =
   fun (x860 : t)
       ~hours:(x852 : float)
       ?min:(x853 : float option)
       ?sec:(x854 : float option)
       ?ms:(x855 : float option)
       () ->
    Ojs.float_of_js
      (let x861 = t_to_js x860 in
       Ojs.call
         (Ojs.get_prop_ascii x861 "setUTCHours")
         "apply"
         [| x861
          ; (let x856 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x856 "push" [| Ojs.float_to_js x852 |]);
             (match x853 with
             | Some x859 ->
               ignore (Ojs.call x856 "push" [| Ojs.float_to_js x859 |])
             | None ->
               ());
             (match x854 with
             | Some x858 ->
               ignore (Ojs.call x856 "push" [| Ojs.float_to_js x858 |])
             | None ->
               ());
             (match x855 with
             | Some x857 ->
               ignore (Ojs.call x856 "push" [| Ojs.float_to_js x857 |])
             | None ->
               ());
             x856)
         |])

  let (setDate : t -> date:float -> float) =
   fun (x863 : t) ~date:(x862 : float) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x863) "setDate" [| Ojs.float_to_js x862 |])

  let (setUTCDate : t -> date:float -> float) =
   fun (x865 : t) ~date:(x864 : float) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x865) "setUTCDate" [| Ojs.float_to_js x864 |])

  let (setMonth : t -> month:float -> ?date:float -> unit -> float) =
   fun (x870 : t) ~month:(x866 : float) ?date:(x867 : float option) () ->
    Ojs.float_of_js
      (let x871 = t_to_js x870 in
       Ojs.call
         (Ojs.get_prop_ascii x871 "setMonth")
         "apply"
         [| x871
          ; (let x868 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x868 "push" [| Ojs.float_to_js x866 |]);
             (match x867 with
             | Some x869 ->
               ignore (Ojs.call x868 "push" [| Ojs.float_to_js x869 |])
             | None ->
               ());
             x868)
         |])

  let (setUTCMonth : t -> month:float -> ?date:float -> unit -> float) =
   fun (x876 : t) ~month:(x872 : float) ?date:(x873 : float option) () ->
    Ojs.float_of_js
      (let x877 = t_to_js x876 in
       Ojs.call
         (Ojs.get_prop_ascii x877 "setUTCMonth")
         "apply"
         [| x877
          ; (let x874 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x874 "push" [| Ojs.float_to_js x872 |]);
             (match x873 with
             | Some x875 ->
               ignore (Ojs.call x874 "push" [| Ojs.float_to_js x875 |])
             | None ->
               ());
             x874)
         |])

  let (setFullYear :
        t -> year:float -> ?month:float -> ?date:float -> unit -> float)
    =
   fun (x884 : t)
       ~year:(x878 : float)
       ?month:(x879 : float option)
       ?date:(x880 : float option)
       () ->
    Ojs.float_of_js
      (let x885 = t_to_js x884 in
       Ojs.call
         (Ojs.get_prop_ascii x885 "setFullYear")
         "apply"
         [| x885
          ; (let x881 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x881 "push" [| Ojs.float_to_js x878 |]);
             (match x879 with
             | Some x883 ->
               ignore (Ojs.call x881 "push" [| Ojs.float_to_js x883 |])
             | None ->
               ());
             (match x880 with
             | Some x882 ->
               ignore (Ojs.call x881 "push" [| Ojs.float_to_js x882 |])
             | None ->
               ());
             x881)
         |])

  let (setUTCFullYear :
        t -> year:float -> ?month:float -> ?date:float -> unit -> float)
    =
   fun (x892 : t)
       ~year:(x886 : float)
       ?month:(x887 : float option)
       ?date:(x888 : float option)
       () ->
    Ojs.float_of_js
      (let x893 = t_to_js x892 in
       Ojs.call
         (Ojs.get_prop_ascii x893 "setUTCFullYear")
         "apply"
         [| x893
          ; (let x889 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x889 "push" [| Ojs.float_to_js x886 |]);
             (match x887 with
             | Some x891 ->
               ignore (Ojs.call x889 "push" [| Ojs.float_to_js x891 |])
             | None ->
               ());
             (match x888 with
             | Some x890 ->
               ignore (Ojs.call x889 "push" [| Ojs.float_to_js x890 |])
             | None ->
               ());
             x889)
         |])

  let (toUTCString : t -> string) =
   fun (x894 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x894) "toUTCString" [||])

  let (toISOString : t -> string) =
   fun (x895 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x895) "toISOString" [||])

  let (toJSON : t -> ?key:any -> unit -> string) =
   fun (x899 : t) ?key:(x896 : any option) () ->
    Ojs.string_of_js
      (let x900 = t_to_js x899 in
       Ojs.call
         (Ojs.get_prop_ascii x900 "toJSON")
         "apply"
         [| x900
          ; (let x897 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x896 with
             | Some x898 ->
               ignore (Ojs.call x897 "push" [| any_to_js x898 |])
             | None ->
               ());
             x897)
         |])

  let (create : unit -> _Date) =
   fun () ->
    _Date_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Date") [||])

  let (create' : value:string or_number -> _Date) =
   fun ~value:(x901 : string or_number) ->
    _Date_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Date")
         [| or_number_to_js Ojs.string_to_js x901 |])

  let (create'' :
        t
        -> year:float
        -> month:float
        -> ?date:float
        -> ?hours:float
        -> ?minutes:float
        -> ?seconds:float
        -> ?ms:float
        -> unit
        -> _Date)
    =
   fun (x903 : t)
       ~year:(x904 : float)
       ~month:(x905 : float)
       ?date:(x906 : float option)
       ?hours:(x907 : float option)
       ?minutes:(x908 : float option)
       ?seconds:(x909 : float option)
       ?ms:(x910 : float option)
       () ->
    _Date_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Date")
         (let x911 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          ignore (Ojs.call x911 "push" [| t_to_js x903 |]);
          ignore (Ojs.call x911 "push" [| Ojs.float_to_js x904 |]);
          ignore (Ojs.call x911 "push" [| Ojs.float_to_js x905 |]);
          (match x906 with
          | Some x916 ->
            ignore (Ojs.call x911 "push" [| Ojs.float_to_js x916 |])
          | None ->
            ());
          (match x907 with
          | Some x915 ->
            ignore (Ojs.call x911 "push" [| Ojs.float_to_js x915 |])
          | None ->
            ());
          (match x908 with
          | Some x914 ->
            ignore (Ojs.call x911 "push" [| Ojs.float_to_js x914 |])
          | None ->
            ());
          (match x909 with
          | Some x913 ->
            ignore (Ojs.call x911 "push" [| Ojs.float_to_js x913 |])
          | None ->
            ());
          (match x910 with
          | Some x912 ->
            ignore (Ojs.call x911 "push" [| Ojs.float_to_js x912 |])
          | None ->
            ());
          x911))

  let (parse : s:string -> float) =
   fun ~s:(x917 : string) ->
    Ojs.float_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Date")
         "parse"
         [| Ojs.string_to_js x917 |])

  let (utc :
        year:float
        -> month:float
        -> ?date:float
        -> ?hours:float
        -> ?minutes:float
        -> ?seconds:float
        -> ?ms:float
        -> unit
        -> float)
    =
   fun ~year:(x918 : float)
       ~month:(x919 : float)
       ?date:(x920 : float option)
       ?hours:(x921 : float option)
       ?minutes:(x922 : float option)
       ?seconds:(x923 : float option)
       ?ms:(x924 : float option)
       () ->
    Ojs.float_of_js
      (let x931 = Ojs.get_prop_ascii Ojs.global "Date" in
       Ojs.call
         (Ojs.get_prop_ascii x931 "UTC")
         "apply"
         [| x931
          ; (let x925 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x925 "push" [| Ojs.float_to_js x918 |]);
             ignore (Ojs.call x925 "push" [| Ojs.float_to_js x919 |]);
             (match x920 with
             | Some x930 ->
               ignore (Ojs.call x925 "push" [| Ojs.float_to_js x930 |])
             | None ->
               ());
             (match x921 with
             | Some x929 ->
               ignore (Ojs.call x925 "push" [| Ojs.float_to_js x929 |])
             | None ->
               ());
             (match x922 with
             | Some x928 ->
               ignore (Ojs.call x925 "push" [| Ojs.float_to_js x928 |])
             | None ->
               ());
             (match x923 with
             | Some x927 ->
               ignore (Ojs.call x925 "push" [| Ojs.float_to_js x927 |])
             | None ->
               ());
             (match x924 with
             | Some x926 ->
               ignore (Ojs.call x925 "push" [| Ojs.float_to_js x926 |])
             | None ->
               ());
             x925)
         |])

  let (now : unit -> float) =
   fun () ->
    Ojs.float_of_js (Ojs.call (Ojs.get_prop_ascii Ojs.global "Date") "now" [||])
end

module DateConstructor = struct
  type t = _DateConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x933 : Ojs.t) -> _DateConstructor_of_js x933

  and t_to_js : t -> Ojs.t =
   fun (x932 : _DateConstructor) -> _DateConstructor_to_js x932

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x935 : Ojs.t) -> t_of_js x935

  and t_0_to_js : t_0 -> Ojs.t = fun (x934 : t) -> t_to_js x934

  let (create : t -> _Date) =
   fun (x936 : t) -> _Date_of_js (Ojs.new_obj (t_to_js x936) [||])

  let (create' : t -> value:string or_number -> _Date) =
   fun (x939 : t) ~value:(x937 : string or_number) ->
    _Date_of_js
      (Ojs.new_obj (t_to_js x939) [| or_number_to_js Ojs.string_to_js x937 |])

  let (create'' :
        t
        -> year:float
        -> month:float
        -> ?date:float
        -> ?hours:float
        -> ?minutes:float
        -> ?seconds:float
        -> ?ms:float
        -> unit
        -> _Date)
    =
   fun (x953 : t)
       ~year:(x940 : float)
       ~month:(x941 : float)
       ?date:(x942 : float option)
       ?hours:(x943 : float option)
       ?minutes:(x944 : float option)
       ?seconds:(x945 : float option)
       ?ms:(x946 : float option)
       () ->
    _Date_of_js
      (Ojs.new_obj_arr
         (t_to_js x953)
         (let x947 = Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
          ignore (Ojs.call x947 "push" [| Ojs.float_to_js x940 |]);
          ignore (Ojs.call x947 "push" [| Ojs.float_to_js x941 |]);
          (match x942 with
          | Some x952 ->
            ignore (Ojs.call x947 "push" [| Ojs.float_to_js x952 |])
          | None ->
            ());
          (match x943 with
          | Some x951 ->
            ignore (Ojs.call x947 "push" [| Ojs.float_to_js x951 |])
          | None ->
            ());
          (match x944 with
          | Some x950 ->
            ignore (Ojs.call x947 "push" [| Ojs.float_to_js x950 |])
          | None ->
            ());
          (match x945 with
          | Some x949 ->
            ignore (Ojs.call x947 "push" [| Ojs.float_to_js x949 |])
          | None ->
            ());
          (match x946 with
          | Some x948 ->
            ignore (Ojs.call x947 "push" [| Ojs.float_to_js x948 |])
          | None ->
            ());
          x947))

  let (apply : t -> string) =
   fun (x954 : t) -> Ojs.string_of_js (Ojs.apply (t_to_js x954) [||])

  let (get_prototype : t -> _Date) =
   fun (x955 : t) -> _Date_of_js (Ojs.get_prop_ascii (t_to_js x955) "prototype")

  let (parse : t -> s:string -> float) =
   fun (x957 : t) ~s:(x956 : string) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x957) "parse" [| Ojs.string_to_js x956 |])

  let (utc :
        t
        -> year:float
        -> month:float
        -> ?date:float
        -> ?hours:float
        -> ?minutes:float
        -> ?seconds:float
        -> ?ms:float
        -> unit
        -> float)
    =
   fun (x971 : t)
       ~year:(x958 : float)
       ~month:(x959 : float)
       ?date:(x960 : float option)
       ?hours:(x961 : float option)
       ?minutes:(x962 : float option)
       ?seconds:(x963 : float option)
       ?ms:(x964 : float option)
       () ->
    Ojs.float_of_js
      (let x972 = t_to_js x971 in
       Ojs.call
         (Ojs.get_prop_ascii x972 "UTC")
         "apply"
         [| x972
          ; (let x965 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x965 "push" [| Ojs.float_to_js x958 |]);
             ignore (Ojs.call x965 "push" [| Ojs.float_to_js x959 |]);
             (match x960 with
             | Some x970 ->
               ignore (Ojs.call x965 "push" [| Ojs.float_to_js x970 |])
             | None ->
               ());
             (match x961 with
             | Some x969 ->
               ignore (Ojs.call x965 "push" [| Ojs.float_to_js x969 |])
             | None ->
               ());
             (match x962 with
             | Some x968 ->
               ignore (Ojs.call x965 "push" [| Ojs.float_to_js x968 |])
             | None ->
               ());
             (match x963 with
             | Some x967 ->
               ignore (Ojs.call x965 "push" [| Ojs.float_to_js x967 |])
             | None ->
               ());
             (match x964 with
             | Some x966 ->
               ignore (Ojs.call x965 "push" [| Ojs.float_to_js x966 |])
             | None ->
               ());
             x965)
         |])

  let (now : t -> float) =
   fun (x973 : t) -> Ojs.float_of_js (Ojs.call (t_to_js x973) "now" [||])
end

let (date : _DateConstructor) =
  _DateConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Date")

module RegExpMatchArray = struct
  type t = _RegExpMatchArray

  let rec t_of_js : Ojs.t -> t =
   fun (x975 : Ojs.t) -> _RegExpMatchArray_of_js x975

  and t_to_js : t -> Ojs.t =
   fun (x974 : _RegExpMatchArray) -> _RegExpMatchArray_to_js x974

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x977 : Ojs.t) -> t_of_js x977

  and t_0_to_js : t_0 -> Ojs.t = fun (x976 : t) -> t_to_js x976

  let (get_index : t -> float) =
   fun (x978 : t) -> Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x978) "index")

  let (set_index : t -> float -> unit) =
   fun (x979 : t) (x980 : float) ->
    Ojs.set_prop_ascii (t_to_js x979) "index" (Ojs.float_to_js x980)

  let (get_input : t -> string) =
   fun (x981 : t) ->
    Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x981) "input")

  let (set_input : t -> string -> unit) =
   fun (x982 : t) (x983 : string) ->
    Ojs.set_prop_ascii (t_to_js x982) "input" (Ojs.string_to_js x983)

  let (cast : t -> string _Array) =
   fun (x984 : t) -> _Array_of_js Ojs.string_of_js (t_to_js x984)
end

module RegExpExecArray = struct
  type t = _RegExpExecArray

  let rec t_of_js : Ojs.t -> t =
   fun (x987 : Ojs.t) -> _RegExpExecArray_of_js x987

  and t_to_js : t -> Ojs.t =
   fun (x986 : _RegExpExecArray) -> _RegExpExecArray_to_js x986

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x989 : Ojs.t) -> t_of_js x989

  and t_0_to_js : t_0 -> Ojs.t = fun (x988 : t) -> t_to_js x988

  let (get_index : t -> float) =
   fun (x990 : t) -> Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x990) "index")

  let (set_index : t -> float -> unit) =
   fun (x991 : t) (x992 : float) ->
    Ojs.set_prop_ascii (t_to_js x991) "index" (Ojs.float_to_js x992)

  let (get_input : t -> string) =
   fun (x993 : t) ->
    Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x993) "input")

  let (set_input : t -> string -> unit) =
   fun (x994 : t) (x995 : string) ->
    Ojs.set_prop_ascii (t_to_js x994) "input" (Ojs.string_to_js x995)

  let (cast : t -> string _Array) =
   fun (x996 : t) -> _Array_of_js Ojs.string_of_js (t_to_js x996)
end

module RegExp = struct
  type t = _RegExp

  let rec t_of_js : Ojs.t -> t = fun (x999 : Ojs.t) -> _RegExp_of_js x999

  and t_to_js : t -> Ojs.t = fun (x998 : _RegExp) -> _RegExp_to_js x998

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1001 : Ojs.t) -> t_of_js x1001

  and t_0_to_js : t_0 -> Ojs.t = fun (x1000 : t) -> t_to_js x1000

  let (exec : t -> string:string -> _RegExpExecArray or_null) =
   fun (x1003 : t) ~string:(x1002 : string) ->
    or_null_of_js
      _RegExpExecArray_of_js
      (Ojs.call (t_to_js x1003) "exec" [| Ojs.string_to_js x1002 |])

  let (test : t -> string:string -> bool) =
   fun (x1006 : t) ~string:(x1005 : string) ->
    Ojs.bool_of_js
      (Ojs.call (t_to_js x1006) "test" [| Ojs.string_to_js x1005 |])

  let (get_source : t -> string) =
   fun (x1007 : t) ->
    Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1007) "source")

  let (get_global : t -> bool) =
   fun (x1008 : t) ->
    Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1008) "global")

  let (get_ignoreCase : t -> bool) =
   fun (x1009 : t) ->
    Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1009) "ignoreCase")

  let (get_multiline : t -> bool) =
   fun (x1010 : t) ->
    Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1010) "multiline")

  let (get_lastIndex : t -> float) =
   fun (x1011 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1011) "lastIndex")

  let (set_lastIndex : t -> float -> unit) =
   fun (x1012 : t) (x1013 : float) ->
    Ojs.set_prop_ascii (t_to_js x1012) "lastIndex" (Ojs.float_to_js x1013)

  let (compile : t -> t) =
   fun (x1014 : t) -> t_of_js (Ojs.call (t_to_js x1014) "compile" [||])

  let (create : pattern:_RegExp or_string -> _RegExp) =
   fun ~pattern:(x1015 : _RegExp or_string) ->
    _RegExp_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         [| or_string_to_js _RegExp_to_js x1015 |])

  let (create' : pattern:string -> ?flags:string -> unit -> _RegExp) =
   fun ~pattern:(x1017 : string) ?flags:(x1018 : string option) () ->
    _RegExp_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         (let x1019 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x1019 "push" [| Ojs.string_to_js x1017 |]);
          (match x1018 with
          | Some x1020 ->
            ignore (Ojs.call x1019 "push" [| Ojs.string_to_js x1020 |])
          | None ->
            ());
          x1019))

  let (get__1 : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$1" [||])

  let (set__1 : string -> unit) =
   fun (x1021 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "$1"
         [| Ojs.string_to_js x1021 |])

  let (get__2 : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$2" [||])

  let (set__2 : string -> unit) =
   fun (x1022 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "$2"
         [| Ojs.string_to_js x1022 |])

  let (get__3 : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$3" [||])

  let (set__3 : string -> unit) =
   fun (x1023 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "$3"
         [| Ojs.string_to_js x1023 |])

  let (get__4 : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$4" [||])

  let (set__4 : string -> unit) =
   fun (x1024 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "$4"
         [| Ojs.string_to_js x1024 |])

  let (get__5 : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$5" [||])

  let (set__5 : string -> unit) =
   fun (x1025 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "$5"
         [| Ojs.string_to_js x1025 |])

  let (get__6 : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$6" [||])

  let (set__6 : string -> unit) =
   fun (x1026 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "$6"
         [| Ojs.string_to_js x1026 |])

  let (get__7 : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$7" [||])

  let (set__7 : string -> unit) =
   fun (x1027 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "$7"
         [| Ojs.string_to_js x1027 |])

  let (get__8 : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$8" [||])

  let (set__8 : string -> unit) =
   fun (x1028 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "$8"
         [| Ojs.string_to_js x1028 |])

  let (get__9 : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$9" [||])

  let (set__9 : string -> unit) =
   fun (x1029 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "$9"
         [| Ojs.string_to_js x1029 |])

  let (get_lastMatch : unit -> string) =
   fun () ->
    Ojs.string_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "lastMatch" [||])

  let (set_lastMatch : string -> unit) =
   fun (x1030 : string) ->
    ignore
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "RegExp")
         "lastMatch"
         [| Ojs.string_to_js x1030 |])
end

module RegExpConstructor = struct
  type t = _RegExpConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x1032 : Ojs.t) -> _RegExpConstructor_of_js x1032

  and t_to_js : t -> Ojs.t =
   fun (x1031 : _RegExpConstructor) -> _RegExpConstructor_to_js x1031

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1034 : Ojs.t) -> t_of_js x1034

  and t_0_to_js : t_0 -> Ojs.t = fun (x1033 : t) -> t_to_js x1033

  let (create : t -> pattern:_RegExp or_string -> _RegExp) =
   fun (x1037 : t) ~pattern:(x1035 : _RegExp or_string) ->
    _RegExp_of_js
      (Ojs.new_obj (t_to_js x1037) [| or_string_to_js _RegExp_to_js x1035 |])

  let (create' : t -> pattern:string -> ?flags:string -> unit -> _RegExp) =
   fun (x1042 : t) ~pattern:(x1038 : string) ?flags:(x1039 : string option) () ->
    _RegExp_of_js
      (Ojs.new_obj_arr
         (t_to_js x1042)
         (let x1040 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x1040 "push" [| Ojs.string_to_js x1038 |]);
          (match x1039 with
          | Some x1041 ->
            ignore (Ojs.call x1040 "push" [| Ojs.string_to_js x1041 |])
          | None ->
            ());
          x1040))

  let (apply : t -> pattern:_RegExp or_string -> _RegExp) =
   fun (x1045 : t) ~pattern:(x1043 : _RegExp or_string) ->
    _RegExp_of_js
      (Ojs.apply (t_to_js x1045) [| or_string_to_js _RegExp_to_js x1043 |])

  let (apply' : t -> pattern:string -> ?flags:string -> unit -> _RegExp) =
   fun (x1050 : t) ~pattern:(x1046 : string) ?flags:(x1047 : string option) () ->
    _RegExp_of_js
      (Ojs.call
         (t_to_js x1050)
         "apply"
         [| Ojs.null
          ; (let x1048 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1048 "push" [| Ojs.string_to_js x1046 |]);
             (match x1047 with
             | Some x1049 ->
               ignore (Ojs.call x1048 "push" [| Ojs.string_to_js x1049 |])
             | None ->
               ());
             x1048)
         |])

  let (get_prototype : t -> _RegExp) =
   fun (x1051 : t) ->
    _RegExp_of_js (Ojs.get_prop_ascii (t_to_js x1051) "prototype")

  let (get__1 : t -> string) =
   fun (x1052 : t) -> Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1052) "$1")

  let (set__1 : t -> string -> unit) =
   fun (x1053 : t) (x1054 : string) ->
    Ojs.set_prop_ascii (t_to_js x1053) "$1" (Ojs.string_to_js x1054)

  let (get__2 : t -> string) =
   fun (x1055 : t) -> Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1055) "$2")

  let (set__2 : t -> string -> unit) =
   fun (x1056 : t) (x1057 : string) ->
    Ojs.set_prop_ascii (t_to_js x1056) "$2" (Ojs.string_to_js x1057)

  let (get__3 : t -> string) =
   fun (x1058 : t) -> Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1058) "$3")

  let (set__3 : t -> string -> unit) =
   fun (x1059 : t) (x1060 : string) ->
    Ojs.set_prop_ascii (t_to_js x1059) "$3" (Ojs.string_to_js x1060)

  let (get__4 : t -> string) =
   fun (x1061 : t) -> Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1061) "$4")

  let (set__4 : t -> string -> unit) =
   fun (x1062 : t) (x1063 : string) ->
    Ojs.set_prop_ascii (t_to_js x1062) "$4" (Ojs.string_to_js x1063)

  let (get__5 : t -> string) =
   fun (x1064 : t) -> Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1064) "$5")

  let (set__5 : t -> string -> unit) =
   fun (x1065 : t) (x1066 : string) ->
    Ojs.set_prop_ascii (t_to_js x1065) "$5" (Ojs.string_to_js x1066)

  let (get__6 : t -> string) =
   fun (x1067 : t) -> Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1067) "$6")

  let (set__6 : t -> string -> unit) =
   fun (x1068 : t) (x1069 : string) ->
    Ojs.set_prop_ascii (t_to_js x1068) "$6" (Ojs.string_to_js x1069)

  let (get__7 : t -> string) =
   fun (x1070 : t) -> Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1070) "$7")

  let (set__7 : t -> string -> unit) =
   fun (x1071 : t) (x1072 : string) ->
    Ojs.set_prop_ascii (t_to_js x1071) "$7" (Ojs.string_to_js x1072)

  let (get__8 : t -> string) =
   fun (x1073 : t) -> Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1073) "$8")

  let (set__8 : t -> string -> unit) =
   fun (x1074 : t) (x1075 : string) ->
    Ojs.set_prop_ascii (t_to_js x1074) "$8" (Ojs.string_to_js x1075)

  let (get__9 : t -> string) =
   fun (x1076 : t) -> Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1076) "$9")

  let (set__9 : t -> string -> unit) =
   fun (x1077 : t) (x1078 : string) ->
    Ojs.set_prop_ascii (t_to_js x1077) "$9" (Ojs.string_to_js x1078)

  let (get_lastMatch : t -> string) =
   fun (x1079 : t) ->
    Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1079) "lastMatch")

  let (set_lastMatch : t -> string -> unit) =
   fun (x1080 : t) (x1081 : string) ->
    Ojs.set_prop_ascii (t_to_js x1080) "lastMatch" (Ojs.string_to_js x1081)
end

let (regExp : _RegExpConstructor) =
  _RegExpConstructor_of_js (Ojs.get_prop_ascii Ojs.global "RegExp")

module Error = struct
  type t = _Error

  let rec t_of_js : Ojs.t -> t = fun (x1083 : Ojs.t) -> _Error_of_js x1083

  and t_to_js : t -> Ojs.t = fun (x1082 : _Error) -> _Error_to_js x1082

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1085 : Ojs.t) -> t_of_js x1085

  and t_0_to_js : t_0 -> Ojs.t = fun (x1084 : t) -> t_to_js x1084

  let (get_name : t -> string) =
   fun (x1086 : t) ->
    Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1086) "name")

  let (set_name : t -> string -> unit) =
   fun (x1087 : t) (x1088 : string) ->
    Ojs.set_prop_ascii (t_to_js x1087) "name" (Ojs.string_to_js x1088)

  let (get_message : t -> string) =
   fun (x1089 : t) ->
    Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1089) "message")

  let (set_message : t -> string -> unit) =
   fun (x1090 : t) (x1091 : string) ->
    Ojs.set_prop_ascii (t_to_js x1090) "message" (Ojs.string_to_js x1091)

  let (get_stack : t -> string) =
   fun (x1092 : t) ->
    Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1092) "stack")

  let (set_stack : t -> string -> unit) =
   fun (x1093 : t) (x1094 : string) ->
    Ojs.set_prop_ascii (t_to_js x1093) "stack" (Ojs.string_to_js x1094)

  let (create : ?message:string -> unit -> _Error) =
   fun ?message:(x1095 : string option) () ->
    _Error_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Error")
         (let x1096 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1095 with
          | Some x1097 ->
            ignore (Ojs.call x1096 "push" [| Ojs.string_to_js x1097 |])
          | None ->
            ());
          x1096))
end

module ErrorConstructor = struct
  type t = _ErrorConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x1099 : Ojs.t) -> _ErrorConstructor_of_js x1099

  and t_to_js : t -> Ojs.t =
   fun (x1098 : _ErrorConstructor) -> _ErrorConstructor_to_js x1098

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1101 : Ojs.t) -> t_of_js x1101

  and t_0_to_js : t_0 -> Ojs.t = fun (x1100 : t) -> t_to_js x1100

  let (create : t -> ?message:string -> unit -> _Error) =
   fun (x1105 : t) ?message:(x1102 : string option) () ->
    _Error_of_js
      (Ojs.new_obj_arr
         (t_to_js x1105)
         (let x1103 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1102 with
          | Some x1104 ->
            ignore (Ojs.call x1103 "push" [| Ojs.string_to_js x1104 |])
          | None ->
            ());
          x1103))

  let (apply : t -> ?message:string -> unit -> _Error) =
   fun (x1109 : t) ?message:(x1106 : string option) () ->
    _Error_of_js
      (Ojs.call
         (t_to_js x1109)
         "apply"
         [| Ojs.null
          ; (let x1107 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1106 with
             | Some x1108 ->
               ignore (Ojs.call x1107 "push" [| Ojs.string_to_js x1108 |])
             | None ->
               ());
             x1107)
         |])

  let (get_prototype : t -> _Error) =
   fun (x1110 : t) ->
    _Error_of_js (Ojs.get_prop_ascii (t_to_js x1110) "prototype")
end

let (error : _ErrorConstructor) =
  _ErrorConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Error")

module EvalError = struct
  type t = _EvalError

  let rec t_of_js : Ojs.t -> t = fun (x1112 : Ojs.t) -> _EvalError_of_js x1112

  and t_to_js : t -> Ojs.t = fun (x1111 : _EvalError) -> _EvalError_to_js x1111

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1114 : Ojs.t) -> t_of_js x1114

  and t_0_to_js : t_0 -> Ojs.t = fun (x1113 : t) -> t_to_js x1113

  let (cast : t -> _Error) = fun (x1115 : t) -> _Error_of_js (t_to_js x1115)

  let (create : ?message:string -> unit -> _EvalError) =
   fun ?message:(x1116 : string option) () ->
    _EvalError_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "EvalError")
         (let x1117 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1116 with
          | Some x1118 ->
            ignore (Ojs.call x1117 "push" [| Ojs.string_to_js x1118 |])
          | None ->
            ());
          x1117))
end

module EvalErrorConstructor = struct
  type t = _EvalErrorConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x1120 : Ojs.t) -> _EvalErrorConstructor_of_js x1120

  and t_to_js : t -> Ojs.t =
   fun (x1119 : _EvalErrorConstructor) -> _EvalErrorConstructor_to_js x1119

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1122 : Ojs.t) -> t_of_js x1122

  and t_0_to_js : t_0 -> Ojs.t = fun (x1121 : t) -> t_to_js x1121

  let (create : t -> ?message:string -> unit -> _EvalError) =
   fun (x1126 : t) ?message:(x1123 : string option) () ->
    _EvalError_of_js
      (Ojs.new_obj_arr
         (t_to_js x1126)
         (let x1124 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1123 with
          | Some x1125 ->
            ignore (Ojs.call x1124 "push" [| Ojs.string_to_js x1125 |])
          | None ->
            ());
          x1124))

  let (apply : t -> ?message:string -> unit -> _EvalError) =
   fun (x1130 : t) ?message:(x1127 : string option) () ->
    _EvalError_of_js
      (Ojs.call
         (t_to_js x1130)
         "apply"
         [| Ojs.null
          ; (let x1128 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1127 with
             | Some x1129 ->
               ignore (Ojs.call x1128 "push" [| Ojs.string_to_js x1129 |])
             | None ->
               ());
             x1128)
         |])

  let (get_prototype : t -> _EvalError) =
   fun (x1131 : t) ->
    _EvalError_of_js (Ojs.get_prop_ascii (t_to_js x1131) "prototype")

  let (cast : t -> _ErrorConstructor) =
   fun (x1132 : t) -> _ErrorConstructor_of_js (t_to_js x1132)
end

let (evalError : _EvalErrorConstructor) =
  _EvalErrorConstructor_of_js (Ojs.get_prop_ascii Ojs.global "EvalError")

module RangeError = struct
  type t = _RangeError

  let rec t_of_js : Ojs.t -> t = fun (x1134 : Ojs.t) -> _RangeError_of_js x1134

  and t_to_js : t -> Ojs.t =
   fun (x1133 : _RangeError) -> _RangeError_to_js x1133

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1136 : Ojs.t) -> t_of_js x1136

  and t_0_to_js : t_0 -> Ojs.t = fun (x1135 : t) -> t_to_js x1135

  let (cast : t -> _Error) = fun (x1137 : t) -> _Error_of_js (t_to_js x1137)

  let (create : ?message:string -> unit -> _RangeError) =
   fun ?message:(x1138 : string option) () ->
    _RangeError_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "RangeError")
         (let x1139 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1138 with
          | Some x1140 ->
            ignore (Ojs.call x1139 "push" [| Ojs.string_to_js x1140 |])
          | None ->
            ());
          x1139))
end

module RangeErrorConstructor = struct
  type t = _RangeErrorConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x1142 : Ojs.t) -> _RangeErrorConstructor_of_js x1142

  and t_to_js : t -> Ojs.t =
   fun (x1141 : _RangeErrorConstructor) -> _RangeErrorConstructor_to_js x1141

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1144 : Ojs.t) -> t_of_js x1144

  and t_0_to_js : t_0 -> Ojs.t = fun (x1143 : t) -> t_to_js x1143

  let (create : t -> ?message:string -> unit -> _RangeError) =
   fun (x1148 : t) ?message:(x1145 : string option) () ->
    _RangeError_of_js
      (Ojs.new_obj_arr
         (t_to_js x1148)
         (let x1146 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1145 with
          | Some x1147 ->
            ignore (Ojs.call x1146 "push" [| Ojs.string_to_js x1147 |])
          | None ->
            ());
          x1146))

  let (apply : t -> ?message:string -> unit -> _RangeError) =
   fun (x1152 : t) ?message:(x1149 : string option) () ->
    _RangeError_of_js
      (Ojs.call
         (t_to_js x1152)
         "apply"
         [| Ojs.null
          ; (let x1150 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1149 with
             | Some x1151 ->
               ignore (Ojs.call x1150 "push" [| Ojs.string_to_js x1151 |])
             | None ->
               ());
             x1150)
         |])

  let (get_prototype : t -> _RangeError) =
   fun (x1153 : t) ->
    _RangeError_of_js (Ojs.get_prop_ascii (t_to_js x1153) "prototype")

  let (cast : t -> _ErrorConstructor) =
   fun (x1154 : t) -> _ErrorConstructor_of_js (t_to_js x1154)
end

let (rangeError : _RangeErrorConstructor) =
  _RangeErrorConstructor_of_js (Ojs.get_prop_ascii Ojs.global "RangeError")

module ReferenceError = struct
  type t = _ReferenceError

  let rec t_of_js : Ojs.t -> t =
   fun (x1156 : Ojs.t) -> _ReferenceError_of_js x1156

  and t_to_js : t -> Ojs.t =
   fun (x1155 : _ReferenceError) -> _ReferenceError_to_js x1155

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1158 : Ojs.t) -> t_of_js x1158

  and t_0_to_js : t_0 -> Ojs.t = fun (x1157 : t) -> t_to_js x1157

  let (cast : t -> _Error) = fun (x1159 : t) -> _Error_of_js (t_to_js x1159)

  let (create : ?message:string -> unit -> _ReferenceError) =
   fun ?message:(x1160 : string option) () ->
    _ReferenceError_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "ReferenceError")
         (let x1161 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1160 with
          | Some x1162 ->
            ignore (Ojs.call x1161 "push" [| Ojs.string_to_js x1162 |])
          | None ->
            ());
          x1161))
end

module ReferenceErrorConstructor = struct
  type t = _ReferenceErrorConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x1164 : Ojs.t) -> _ReferenceErrorConstructor_of_js x1164

  and t_to_js : t -> Ojs.t =
   fun (x1163 : _ReferenceErrorConstructor) ->
    _ReferenceErrorConstructor_to_js x1163

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1166 : Ojs.t) -> t_of_js x1166

  and t_0_to_js : t_0 -> Ojs.t = fun (x1165 : t) -> t_to_js x1165

  let (create : t -> ?message:string -> unit -> _ReferenceError) =
   fun (x1170 : t) ?message:(x1167 : string option) () ->
    _ReferenceError_of_js
      (Ojs.new_obj_arr
         (t_to_js x1170)
         (let x1168 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1167 with
          | Some x1169 ->
            ignore (Ojs.call x1168 "push" [| Ojs.string_to_js x1169 |])
          | None ->
            ());
          x1168))

  let (apply : t -> ?message:string -> unit -> _ReferenceError) =
   fun (x1174 : t) ?message:(x1171 : string option) () ->
    _ReferenceError_of_js
      (Ojs.call
         (t_to_js x1174)
         "apply"
         [| Ojs.null
          ; (let x1172 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1171 with
             | Some x1173 ->
               ignore (Ojs.call x1172 "push" [| Ojs.string_to_js x1173 |])
             | None ->
               ());
             x1172)
         |])

  let (get_prototype : t -> _ReferenceError) =
   fun (x1175 : t) ->
    _ReferenceError_of_js (Ojs.get_prop_ascii (t_to_js x1175) "prototype")

  let (cast : t -> _ErrorConstructor) =
   fun (x1176 : t) -> _ErrorConstructor_of_js (t_to_js x1176)
end

let (referenceError : _ReferenceErrorConstructor) =
  _ReferenceErrorConstructor_of_js
    (Ojs.get_prop_ascii Ojs.global "ReferenceError")

module SyntaxError = struct
  type t = _SyntaxError

  let rec t_of_js : Ojs.t -> t = fun (x1178 : Ojs.t) -> _SyntaxError_of_js x1178

  and t_to_js : t -> Ojs.t =
   fun (x1177 : _SyntaxError) -> _SyntaxError_to_js x1177

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1180 : Ojs.t) -> t_of_js x1180

  and t_0_to_js : t_0 -> Ojs.t = fun (x1179 : t) -> t_to_js x1179

  let (cast : t -> _Error) = fun (x1181 : t) -> _Error_of_js (t_to_js x1181)

  let (create : ?message:string -> unit -> _SyntaxError) =
   fun ?message:(x1182 : string option) () ->
    _SyntaxError_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "SyntaxError")
         (let x1183 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1182 with
          | Some x1184 ->
            ignore (Ojs.call x1183 "push" [| Ojs.string_to_js x1184 |])
          | None ->
            ());
          x1183))
end

module SyntaxErrorConstructor = struct
  type t = _SyntaxErrorConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x1186 : Ojs.t) -> _SyntaxErrorConstructor_of_js x1186

  and t_to_js : t -> Ojs.t =
   fun (x1185 : _SyntaxErrorConstructor) -> _SyntaxErrorConstructor_to_js x1185

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1188 : Ojs.t) -> t_of_js x1188

  and t_0_to_js : t_0 -> Ojs.t = fun (x1187 : t) -> t_to_js x1187

  let (create : t -> ?message:string -> unit -> _SyntaxError) =
   fun (x1192 : t) ?message:(x1189 : string option) () ->
    _SyntaxError_of_js
      (Ojs.new_obj_arr
         (t_to_js x1192)
         (let x1190 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1189 with
          | Some x1191 ->
            ignore (Ojs.call x1190 "push" [| Ojs.string_to_js x1191 |])
          | None ->
            ());
          x1190))

  let (apply : t -> ?message:string -> unit -> _SyntaxError) =
   fun (x1196 : t) ?message:(x1193 : string option) () ->
    _SyntaxError_of_js
      (Ojs.call
         (t_to_js x1196)
         "apply"
         [| Ojs.null
          ; (let x1194 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1193 with
             | Some x1195 ->
               ignore (Ojs.call x1194 "push" [| Ojs.string_to_js x1195 |])
             | None ->
               ());
             x1194)
         |])

  let (get_prototype : t -> _SyntaxError) =
   fun (x1197 : t) ->
    _SyntaxError_of_js (Ojs.get_prop_ascii (t_to_js x1197) "prototype")

  let (cast : t -> _ErrorConstructor) =
   fun (x1198 : t) -> _ErrorConstructor_of_js (t_to_js x1198)
end

let (syntaxError : _SyntaxErrorConstructor) =
  _SyntaxErrorConstructor_of_js (Ojs.get_prop_ascii Ojs.global "SyntaxError")

module TypeError = struct
  type t = _TypeError

  let rec t_of_js : Ojs.t -> t = fun (x1200 : Ojs.t) -> _TypeError_of_js x1200

  and t_to_js : t -> Ojs.t = fun (x1199 : _TypeError) -> _TypeError_to_js x1199

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1202 : Ojs.t) -> t_of_js x1202

  and t_0_to_js : t_0 -> Ojs.t = fun (x1201 : t) -> t_to_js x1201

  let (cast : t -> _Error) = fun (x1203 : t) -> _Error_of_js (t_to_js x1203)

  let (create : ?message:string -> unit -> _TypeError) =
   fun ?message:(x1204 : string option) () ->
    _TypeError_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "TypeError")
         (let x1205 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1204 with
          | Some x1206 ->
            ignore (Ojs.call x1205 "push" [| Ojs.string_to_js x1206 |])
          | None ->
            ());
          x1205))
end

module TypeErrorConstructor = struct
  type t = _TypeErrorConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x1208 : Ojs.t) -> _TypeErrorConstructor_of_js x1208

  and t_to_js : t -> Ojs.t =
   fun (x1207 : _TypeErrorConstructor) -> _TypeErrorConstructor_to_js x1207

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1210 : Ojs.t) -> t_of_js x1210

  and t_0_to_js : t_0 -> Ojs.t = fun (x1209 : t) -> t_to_js x1209

  let (create : t -> ?message:string -> unit -> _TypeError) =
   fun (x1214 : t) ?message:(x1211 : string option) () ->
    _TypeError_of_js
      (Ojs.new_obj_arr
         (t_to_js x1214)
         (let x1212 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1211 with
          | Some x1213 ->
            ignore (Ojs.call x1212 "push" [| Ojs.string_to_js x1213 |])
          | None ->
            ());
          x1212))

  let (apply : t -> ?message:string -> unit -> _TypeError) =
   fun (x1218 : t) ?message:(x1215 : string option) () ->
    _TypeError_of_js
      (Ojs.call
         (t_to_js x1218)
         "apply"
         [| Ojs.null
          ; (let x1216 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1215 with
             | Some x1217 ->
               ignore (Ojs.call x1216 "push" [| Ojs.string_to_js x1217 |])
             | None ->
               ());
             x1216)
         |])

  let (get_prototype : t -> _TypeError) =
   fun (x1219 : t) ->
    _TypeError_of_js (Ojs.get_prop_ascii (t_to_js x1219) "prototype")

  let (cast : t -> _ErrorConstructor) =
   fun (x1220 : t) -> _ErrorConstructor_of_js (t_to_js x1220)
end

let (typeError : _TypeErrorConstructor) =
  _TypeErrorConstructor_of_js (Ojs.get_prop_ascii Ojs.global "TypeError")

module URIError = struct
  type t = _URIError

  let rec t_of_js : Ojs.t -> t = fun (x1222 : Ojs.t) -> _URIError_of_js x1222

  and t_to_js : t -> Ojs.t = fun (x1221 : _URIError) -> _URIError_to_js x1221

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1224 : Ojs.t) -> t_of_js x1224

  and t_0_to_js : t_0 -> Ojs.t = fun (x1223 : t) -> t_to_js x1223

  let (cast : t -> _Error) = fun (x1225 : t) -> _Error_of_js (t_to_js x1225)

  let (create : ?message:string -> unit -> _URIError) =
   fun ?message:(x1226 : string option) () ->
    _URIError_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "URIError")
         (let x1227 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1226 with
          | Some x1228 ->
            ignore (Ojs.call x1227 "push" [| Ojs.string_to_js x1228 |])
          | None ->
            ());
          x1227))
end

module URIErrorConstructor = struct
  type t = _URIErrorConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x1230 : Ojs.t) -> _URIErrorConstructor_of_js x1230

  and t_to_js : t -> Ojs.t =
   fun (x1229 : _URIErrorConstructor) -> _URIErrorConstructor_to_js x1229

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1232 : Ojs.t) -> t_of_js x1232

  and t_0_to_js : t_0 -> Ojs.t = fun (x1231 : t) -> t_to_js x1231

  let (create : t -> ?message:string -> unit -> _URIError) =
   fun (x1236 : t) ?message:(x1233 : string option) () ->
    _URIError_of_js
      (Ojs.new_obj_arr
         (t_to_js x1236)
         (let x1234 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1233 with
          | Some x1235 ->
            ignore (Ojs.call x1234 "push" [| Ojs.string_to_js x1235 |])
          | None ->
            ());
          x1234))

  let (apply : t -> ?message:string -> unit -> _URIError) =
   fun (x1240 : t) ?message:(x1237 : string option) () ->
    _URIError_of_js
      (Ojs.call
         (t_to_js x1240)
         "apply"
         [| Ojs.null
          ; (let x1238 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1237 with
             | Some x1239 ->
               ignore (Ojs.call x1238 "push" [| Ojs.string_to_js x1239 |])
             | None ->
               ());
             x1238)
         |])

  let (get_prototype : t -> _URIError) =
   fun (x1241 : t) ->
    _URIError_of_js (Ojs.get_prop_ascii (t_to_js x1241) "prototype")

  let (cast : t -> _ErrorConstructor) =
   fun (x1242 : t) -> _ErrorConstructor_of_js (t_to_js x1242)
end

let (uriError : _URIErrorConstructor) =
  _URIErrorConstructor_of_js (Ojs.get_prop_ascii Ojs.global "URIError")

module JSON = struct
  type t = _JSON

  let rec t_of_js : Ojs.t -> t = fun (x1244 : Ojs.t) -> _JSON_of_js x1244

  and t_to_js : t -> Ojs.t = fun (x1243 : _JSON) -> _JSON_to_js x1243

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1246 : Ojs.t) -> t_of_js x1246

  and t_0_to_js : t_0 -> Ojs.t = fun (x1245 : t) -> t_to_js x1245

  let (parse :
        text:string
        -> ?reviver:(this:any -> key:string -> value:any -> any)
        -> unit
        -> any)
    =
   fun ~text:(x1247 : string)
       ?reviver:(x1248 : (this:any -> key:string -> value:any -> any) option)
       () ->
    any_of_js
      (let x1254 = Ojs.get_prop_ascii Ojs.global "JSON" in
       Ojs.call
         (Ojs.get_prop_ascii x1254 "parse")
         "apply"
         [| x1254
          ; (let x1249 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1249 "push" [| Ojs.string_to_js x1247 |]);
             (match x1248 with
             | Some x1250 ->
               ignore
                 (Ojs.call
                    x1249
                    "push"
                    [| Ojs.fun_to_js
                         3
                         (fun (x1251 : Ojs.t) (x1252 : Ojs.t) (x1253 : Ojs.t) ->
                           any_to_js
                             (x1250
                                ~this:(any_of_js x1251)
                                ~key:(Ojs.string_of_js x1252)
                                ~value:(any_of_js x1253)))
                    |])
             | None ->
               ());
             x1249)
         |])

  let (stringify :
        value:any
        -> ?replacer:(this:any -> key:string -> value:any -> any)
        -> ?space:string or_number
        -> unit
        -> string)
    =
   fun ~value:(x1255 : any)
       ?replacer:(x1256 : (this:any -> key:string -> value:any -> any) option)
       ?space:(x1257 : string or_number option)
       () ->
    Ojs.string_of_js
      (let x1265 = Ojs.get_prop_ascii Ojs.global "JSON" in
       Ojs.call
         (Ojs.get_prop_ascii x1265 "stringify")
         "apply"
         [| x1265
          ; (let x1258 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1258 "push" [| any_to_js x1255 |]);
             (match x1256 with
             | Some x1261 ->
               ignore
                 (Ojs.call
                    x1258
                    "push"
                    [| Ojs.fun_to_js
                         3
                         (fun (x1262 : Ojs.t) (x1263 : Ojs.t) (x1264 : Ojs.t) ->
                           any_to_js
                             (x1261
                                ~this:(any_of_js x1262)
                                ~key:(Ojs.string_of_js x1263)
                                ~value:(any_of_js x1264)))
                    |])
             | None ->
               ());
             (match x1257 with
             | Some x1259 ->
               ignore
                 (Ojs.call
                    x1258
                    "push"
                    [| or_number_to_js Ojs.string_to_js x1259 |])
             | None ->
               ());
             x1258)
         |])

  let (stringify' :
        value:any
        -> ?replacer:string or_number list or_null
        -> ?space:string or_number
        -> unit
        -> string)
    =
   fun ~value:(x1266 : any)
       ?replacer:(x1267 : string or_number list or_null option)
       ?space:(x1268 : string or_number option)
       () ->
    Ojs.string_of_js
      (let x1276 = Ojs.get_prop_ascii Ojs.global "JSON" in
       Ojs.call
         (Ojs.get_prop_ascii x1276 "stringify")
         "apply"
         [| x1276
          ; (let x1269 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1269 "push" [| any_to_js x1266 |]);
             (match x1267 with
             | Some x1272 ->
               ignore
                 (Ojs.call
                    x1269
                    "push"
                    [| or_null_to_js
                         (fun (x1273 : string or_number list) ->
                           Ojs.list_to_js
                             (fun (x1274 : string or_number) ->
                               or_number_to_js Ojs.string_to_js x1274)
                             x1273)
                         x1272
                    |])
             | None ->
               ());
             (match x1268 with
             | Some x1270 ->
               ignore
                 (Ojs.call
                    x1269
                    "push"
                    [| or_number_to_js Ojs.string_to_js x1270 |])
             | None ->
               ());
             x1269)
         |])
end

module ReadonlyArray = struct
  type 'T t = 'T _ReadonlyArray

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1279 : Ojs.t) ->
     _ReadonlyArray_of_js __T_of_js x1279

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1277 : __T _ReadonlyArray) ->
     _ReadonlyArray_to_js __T_to_js x1277

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1283 : Ojs.t) ->
     t_of_js __T_of_js x1283

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1281 : __T t) ->
     t_to_js __T_to_js x1281

  let (get_length : 'T t -> float) =
   fun (x1285 : 'T t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1285) "length")

  let (toString : 'T t -> string) =
   fun (x1287 : 'T t) ->
    Ojs.string_of_js (Ojs.call (t_to_js Obj.magic x1287) "toString" [||])

  let (toLocaleString : 'T t -> string) =
   fun (x1289 : 'T t) ->
    Ojs.string_of_js (Ojs.call (t_to_js Obj.magic x1289) "toLocaleString" [||])

  let (concat : 'T t -> items:'T _ConcatArray list -> 'T list) =
   fun (x1295 : 'T t) ~items:(x1291 : 'T _ConcatArray list) ->
    Ojs.list_of_js
      Obj.magic
      (let x1297 = t_to_js Obj.magic x1295 in
       Ojs.call
         (Ojs.get_prop_ascii x1297 "concat")
         "apply"
         [| x1297
          ; (let x1292 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x1293 : 'T _ConcatArray) ->
                 ignore
                   (Ojs.call
                      x1292
                      "push"
                      [| _ConcatArray_to_js Obj.magic x1293 |]))
               x1291;
             x1292)
         |])

  let (concat' : 'T t -> items:('T, 'T _ConcatArray) union2 list -> 'T list) =
   fun (x1305 : 'T t) ~items:(x1299 : ('T, 'T _ConcatArray) union2 list) ->
    Ojs.list_of_js
      Obj.magic
      (let x1307 = t_to_js Obj.magic x1305 in
       Ojs.call
         (Ojs.get_prop_ascii x1307 "concat")
         "apply"
         [| x1307
          ; (let x1300 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x1301 : ('T, 'T _ConcatArray) union2) ->
                 ignore
                   (Ojs.call
                      x1300
                      "push"
                      [| union2_to_js
                           Obj.magic
                           (fun (x1303 : 'T _ConcatArray) ->
                             _ConcatArray_to_js Obj.magic x1303)
                           x1301
                      |]))
               x1299;
             x1300)
         |])

  let (join : 'T t -> ?separator:string -> unit -> string) =
   fun (x1312 : 'T t) ?separator:(x1309 : string option) () ->
    Ojs.string_of_js
      (let x1314 = t_to_js Obj.magic x1312 in
       Ojs.call
         (Ojs.get_prop_ascii x1314 "join")
         "apply"
         [| x1314
          ; (let x1310 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1309 with
             | Some x1311 ->
               ignore (Ojs.call x1310 "push" [| Ojs.string_to_js x1311 |])
             | None ->
               ());
             x1310)
         |])

  let (slice : 'T t -> ?start:float -> ?end_:float -> unit -> 'T list) =
   fun (x1320 : 'T t)
       ?start:(x1315 : float option)
       ?end_:(x1316 : float option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1322 = t_to_js Obj.magic x1320 in
       Ojs.call
         (Ojs.get_prop_ascii x1322 "slice")
         "apply"
         [| x1322
          ; (let x1317 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1315 with
             | Some x1319 ->
               ignore (Ojs.call x1317 "push" [| Ojs.float_to_js x1319 |])
             | None ->
               ());
             (match x1316 with
             | Some x1318 ->
               ignore (Ojs.call x1317 "push" [| Ojs.float_to_js x1318 |])
             | None ->
               ());
             x1317)
         |])

  let (indexOf : 'T t -> searchElement:'T -> ?fromIndex:float -> unit -> float) =
   fun (x1328 : 'T t)
       ~searchElement:(x1324 : 'T)
       ?fromIndex:(x1325 : float option)
       () ->
    Ojs.float_of_js
      (let x1330 = t_to_js Obj.magic x1328 in
       Ojs.call
         (Ojs.get_prop_ascii x1330 "indexOf")
         "apply"
         [| x1330
          ; (let x1326 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1326 "push" [| Obj.magic x1324 |]);
             (match x1325 with
             | Some x1327 ->
               ignore (Ojs.call x1326 "push" [| Ojs.float_to_js x1327 |])
             | None ->
               ());
             x1326)
         |])

  let (lastIndexOf :
        'T t -> searchElement:'T -> ?fromIndex:float -> unit -> float)
    =
   fun (x1335 : 'T t)
       ~searchElement:(x1331 : 'T)
       ?fromIndex:(x1332 : float option)
       () ->
    Ojs.float_of_js
      (let x1337 = t_to_js Obj.magic x1335 in
       Ojs.call
         (Ojs.get_prop_ascii x1337 "lastIndexOf")
         "apply"
         [| x1337
          ; (let x1333 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1333 "push" [| Obj.magic x1331 |]);
             (match x1332 with
             | Some x1334 ->
               ignore (Ojs.call x1333 "push" [| Ojs.float_to_js x1334 |])
             | None ->
               ());
             x1333)
         |])

  let (every :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> bool)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x1346 : 'T t)
       ~predicate:(x1338 : value:'T -> index:float -> array:'T list -> bool)
       ?thisArg:(x1339 : any option)
       () ->
    Ojs.bool_of_js
      (let x1348 = t_to_js Obj.magic x1346 in
       Ojs.call
         (Ojs.get_prop_ascii x1348 "every")
         "apply"
         [| x1348
          ; (let x1340 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1340
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1342 : Ojs.t) (x1343 : Ojs.t) (x1344 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x1338
                              ~value:(Obj.magic x1342)
                              ~index:(Ojs.float_of_js x1343)
                              ~array:(Ojs.list_of_js Obj.magic x1344)))
                  |]);
             (match x1339 with
             | Some x1341 ->
               ignore (Ojs.call x1340 "push" [| any_to_js x1341 |])
             | None ->
               ());
             x1340)
         |])

  let (every' :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x1357 : 'T t)
       ~predicate:(x1349 : value:'T -> index:float -> array:'T list -> unknown)
       ?thisArg:(x1350 : any option)
       () ->
    Ojs.bool_of_js
      (let x1359 = t_to_js Obj.magic x1357 in
       Ojs.call
         (Ojs.get_prop_ascii x1359 "every")
         "apply"
         [| x1359
          ; (let x1351 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1351
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1353 : Ojs.t) (x1354 : Ojs.t) (x1355 : Ojs.t) ->
                         unknown_to_js
                           (x1349
                              ~value:(Obj.magic x1353)
                              ~index:(Ojs.float_of_js x1354)
                              ~array:(Ojs.list_of_js Obj.magic x1355)))
                  |]);
             (match x1350 with
             | Some x1352 ->
               ignore (Ojs.call x1351 "push" [| any_to_js x1352 |])
             | None ->
               ());
             x1351)
         |])

  let (some :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x1368 : 'T t)
       ~predicate:(x1360 : value:'T -> index:float -> array:'T list -> unknown)
       ?thisArg:(x1361 : any option)
       () ->
    Ojs.bool_of_js
      (let x1370 = t_to_js Obj.magic x1368 in
       Ojs.call
         (Ojs.get_prop_ascii x1370 "some")
         "apply"
         [| x1370
          ; (let x1362 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1362
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1364 : Ojs.t) (x1365 : Ojs.t) (x1366 : Ojs.t) ->
                         unknown_to_js
                           (x1360
                              ~value:(Obj.magic x1364)
                              ~index:(Ojs.float_of_js x1365)
                              ~array:(Ojs.list_of_js Obj.magic x1366)))
                  |]);
             (match x1361 with
             | Some x1363 ->
               ignore (Ojs.call x1362 "push" [| any_to_js x1363 |])
             | None ->
               ());
             x1362)
         |])

  let (forEach :
        'T t
        -> callbackfn:(value:'T -> index:float -> array:'T list -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x1379 : 'T t)
       ~callbackfn:(x1371 : value:'T -> index:float -> array:'T list -> unit)
       ?thisArg:(x1372 : any option)
       () ->
    ignore
      (let x1381 = t_to_js Obj.magic x1379 in
       Ojs.call
         (Ojs.get_prop_ascii x1381 "forEach")
         "apply"
         [| x1381
          ; (let x1373 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1373
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1375 : Ojs.t) (x1376 : Ojs.t) (x1377 : Ojs.t) ->
                         x1371
                           ~value:(Obj.magic x1375)
                           ~index:(Ojs.float_of_js x1376)
                           ~array:(Ojs.list_of_js Obj.magic x1377))
                  |]);
             (match x1372 with
             | Some x1374 ->
               ignore (Ojs.call x1373 "push" [| any_to_js x1374 |])
             | None ->
               ());
             x1373)
         |])

  let (map :
        'T t
        -> callbackfn:(value:'T -> index:float -> array:'T list -> 'U)
        -> ?thisArg:any
        -> unit
        -> 'U list)
    =
   fun (x1390 : 'T t)
       ~callbackfn:(x1382 : value:'T -> index:float -> array:'T list -> 'U)
       ?thisArg:(x1383 : any option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1392 = t_to_js Obj.magic x1390 in
       Ojs.call
         (Ojs.get_prop_ascii x1392 "map")
         "apply"
         [| x1392
          ; (let x1384 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1384
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1386 : Ojs.t) (x1387 : Ojs.t) (x1388 : Ojs.t) ->
                         Obj.magic
                           (x1382
                              ~value:(Obj.magic x1386)
                              ~index:(Ojs.float_of_js x1387)
                              ~array:(Ojs.list_of_js Obj.magic x1388)))
                  |]);
             (match x1383 with
             | Some x1385 ->
               ignore (Ojs.call x1384 "push" [| any_to_js x1385 |])
             | None ->
               ());
             x1384)
         |])

  let (filter :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> bool)
        -> ?thisArg:any
        -> unit
        -> 'S list)
    =
   fun (x1402 : 'T t)
       ~predicate:(x1394 : value:'T -> index:float -> array:'T list -> bool)
       ?thisArg:(x1395 : any option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1404 = t_to_js Obj.magic x1402 in
       Ojs.call
         (Ojs.get_prop_ascii x1404 "filter")
         "apply"
         [| x1404
          ; (let x1396 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1396
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1398 : Ojs.t) (x1399 : Ojs.t) (x1400 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x1394
                              ~value:(Obj.magic x1398)
                              ~index:(Ojs.float_of_js x1399)
                              ~array:(Ojs.list_of_js Obj.magic x1400)))
                  |]);
             (match x1395 with
             | Some x1397 ->
               ignore (Ojs.call x1396 "push" [| any_to_js x1397 |])
             | None ->
               ());
             x1396)
         |])

  let (filter' :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> unknown)
        -> ?thisArg:any
        -> unit
        -> 'T list)
    =
   fun (x1414 : 'T t)
       ~predicate:(x1406 : value:'T -> index:float -> array:'T list -> unknown)
       ?thisArg:(x1407 : any option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1416 = t_to_js Obj.magic x1414 in
       Ojs.call
         (Ojs.get_prop_ascii x1416 "filter")
         "apply"
         [| x1416
          ; (let x1408 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1408
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1410 : Ojs.t) (x1411 : Ojs.t) (x1412 : Ojs.t) ->
                         unknown_to_js
                           (x1406
                              ~value:(Obj.magic x1410)
                              ~index:(Ojs.float_of_js x1411)
                              ~array:(Ojs.list_of_js Obj.magic x1412)))
                  |]);
             (match x1407 with
             | Some x1409 ->
               ignore (Ojs.call x1408 "push" [| any_to_js x1409 |])
             | None ->
               ());
             x1408)
         |])

  let (reduce :
        'T t
        -> callbackfn:
             (previousValue:'T
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'T)
        -> 'T)
    =
   fun (x1424 : 'T t)
       ~callbackfn:
         (x1418 :
           previousValue:'T
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'T) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1424)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x1419 : Ojs.t)
                (x1420 : Ojs.t)
                (x1421 : Ojs.t)
                (x1422 : Ojs.t)
              ->
                Obj.magic
                  (x1418
                     ~previousValue:(Obj.magic x1419)
                     ~currentValue:(Obj.magic x1420)
                     ~currentIndex:(Ojs.float_of_js x1421)
                     ~array:(Ojs.list_of_js Obj.magic x1422)))
         |])

  let (reduce' :
        'T t
        -> callbackfn:
             (previousValue:'T
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'T)
        -> initialValue:'T
        -> 'T)
    =
   fun (x1433 : 'T t)
       ~callbackfn:
         (x1426 :
           previousValue:'T
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'T)
       ~initialValue:(x1432 : 'T) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1433)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x1427 : Ojs.t)
                (x1428 : Ojs.t)
                (x1429 : Ojs.t)
                (x1430 : Ojs.t)
              ->
                Obj.magic
                  (x1426
                     ~previousValue:(Obj.magic x1427)
                     ~currentValue:(Obj.magic x1428)
                     ~currentIndex:(Ojs.float_of_js x1429)
                     ~array:(Ojs.list_of_js Obj.magic x1430)))
          ; Obj.magic x1432
         |])

  let (reduce'' :
        'T t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x1442 : 'T t)
       ~callbackfn:
         (x1435 :
           previousValue:'U
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'U)
       ~initialValue:(x1441 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1442)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x1436 : Ojs.t)
                (x1437 : Ojs.t)
                (x1438 : Ojs.t)
                (x1439 : Ojs.t)
              ->
                Obj.magic
                  (x1435
                     ~previousValue:(Obj.magic x1436)
                     ~currentValue:(Obj.magic x1437)
                     ~currentIndex:(Ojs.float_of_js x1438)
                     ~array:(Ojs.list_of_js Obj.magic x1439)))
          ; Obj.magic x1441
         |])

  let (reduceRight :
        'T t
        -> callbackfn:
             (previousValue:'T
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'T)
        -> 'T)
    =
   fun (x1450 : 'T t)
       ~callbackfn:
         (x1444 :
           previousValue:'T
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'T) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1450)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x1445 : Ojs.t)
                (x1446 : Ojs.t)
                (x1447 : Ojs.t)
                (x1448 : Ojs.t)
              ->
                Obj.magic
                  (x1444
                     ~previousValue:(Obj.magic x1445)
                     ~currentValue:(Obj.magic x1446)
                     ~currentIndex:(Ojs.float_of_js x1447)
                     ~array:(Ojs.list_of_js Obj.magic x1448)))
         |])

  let (reduceRight' :
        'T t
        -> callbackfn:
             (previousValue:'T
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'T)
        -> initialValue:'T
        -> 'T)
    =
   fun (x1459 : 'T t)
       ~callbackfn:
         (x1452 :
           previousValue:'T
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'T)
       ~initialValue:(x1458 : 'T) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1459)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x1453 : Ojs.t)
                (x1454 : Ojs.t)
                (x1455 : Ojs.t)
                (x1456 : Ojs.t)
              ->
                Obj.magic
                  (x1452
                     ~previousValue:(Obj.magic x1453)
                     ~currentValue:(Obj.magic x1454)
                     ~currentIndex:(Ojs.float_of_js x1455)
                     ~array:(Ojs.list_of_js Obj.magic x1456)))
          ; Obj.magic x1458
         |])

  let (reduceRight'' :
        'T t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x1468 : 'T t)
       ~callbackfn:
         (x1461 :
           previousValue:'U
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'U)
       ~initialValue:(x1467 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1468)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x1462 : Ojs.t)
                (x1463 : Ojs.t)
                (x1464 : Ojs.t)
                (x1465 : Ojs.t)
              ->
                Obj.magic
                  (x1461
                     ~previousValue:(Obj.magic x1462)
                     ~currentValue:(Obj.magic x1463)
                     ~currentIndex:(Ojs.float_of_js x1464)
                     ~array:(Ojs.list_of_js Obj.magic x1465)))
          ; Obj.magic x1467
         |])

  let (get : 'T t -> float -> 'T) =
   fun (x1470 : 'T t) (x1472 : float) ->
    Obj.magic (Ojs.get_prop (t_to_js Obj.magic x1470) (Ojs.float_to_js x1472))

  let (to_ml : 'T t -> 'T list) =
   fun (x1473 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x1473)

  let (of_ml : 'T list -> 'T t) =
   fun (x1476 : 'T list) -> t_of_js Obj.magic (Ojs.list_to_js Obj.magic x1476)
end

module ConcatArray = struct
  type 'T t = 'T _ConcatArray

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1481 : Ojs.t) ->
     _ConcatArray_of_js __T_of_js x1481

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1479 : __T _ConcatArray) ->
     _ConcatArray_to_js __T_to_js x1479

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1485 : Ojs.t) ->
     t_of_js __T_of_js x1485

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1483 : __T t) ->
     t_to_js __T_to_js x1483

  let (get_length : 'T t -> float) =
   fun (x1487 : 'T t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1487) "length")

  let (get : 'T t -> float -> 'T) =
   fun (x1489 : 'T t) (x1491 : float) ->
    Obj.magic (Ojs.get_prop (t_to_js Obj.magic x1489) (Ojs.float_to_js x1491))

  let (join : 'T t -> ?separator:string -> unit -> string) =
   fun (x1495 : 'T t) ?separator:(x1492 : string option) () ->
    Ojs.string_of_js
      (let x1497 = t_to_js Obj.magic x1495 in
       Ojs.call
         (Ojs.get_prop_ascii x1497 "join")
         "apply"
         [| x1497
          ; (let x1493 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1492 with
             | Some x1494 ->
               ignore (Ojs.call x1493 "push" [| Ojs.string_to_js x1494 |])
             | None ->
               ());
             x1493)
         |])

  let (slice : 'T t -> ?start:float -> ?end_:float -> unit -> 'T list) =
   fun (x1503 : 'T t)
       ?start:(x1498 : float option)
       ?end_:(x1499 : float option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1505 = t_to_js Obj.magic x1503 in
       Ojs.call
         (Ojs.get_prop_ascii x1505 "slice")
         "apply"
         [| x1505
          ; (let x1500 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1498 with
             | Some x1502 ->
               ignore (Ojs.call x1500 "push" [| Ojs.float_to_js x1502 |])
             | None ->
               ());
             (match x1499 with
             | Some x1501 ->
               ignore (Ojs.call x1500 "push" [| Ojs.float_to_js x1501 |])
             | None ->
               ());
             x1500)
         |])
end

module Array = struct
  type 'T t = 'T _Array

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1509 : Ojs.t) ->
     _Array_of_js __T_of_js x1509

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1507 : __T _Array) ->
     _Array_to_js __T_to_js x1507

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1513 : Ojs.t) ->
     t_of_js __T_of_js x1513

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1511 : __T t) ->
     t_to_js __T_to_js x1511

  let (get_length : 'T t -> float) =
   fun (x1515 : 'T t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1515) "length")

  let (set_length : 'T t -> float -> unit) =
   fun (x1517 : 'T t) (x1518 : float) ->
    Ojs.set_prop_ascii
      (t_to_js Obj.magic x1517)
      "length"
      (Ojs.float_to_js x1518)

  let (toString : 'T t -> string) =
   fun (x1520 : 'T t) ->
    Ojs.string_of_js (Ojs.call (t_to_js Obj.magic x1520) "toString" [||])

  let (toLocaleString : 'T t -> string) =
   fun (x1522 : 'T t) ->
    Ojs.string_of_js (Ojs.call (t_to_js Obj.magic x1522) "toLocaleString" [||])

  let (pop : 'T t -> 'T or_undefined) =
   fun (x1524 : 'T t) ->
    or_undefined_of_js Obj.magic (Ojs.call (t_to_js Obj.magic x1524) "pop" [||])

  let (push : 'T t -> items:'T list -> float) =
   fun (x1530 : 'T t) ~items:(x1527 : 'T list) ->
    Ojs.float_of_js
      (let x1532 = t_to_js Obj.magic x1530 in
       Ojs.call
         (Ojs.get_prop_ascii x1532 "push")
         "apply"
         [| x1532
          ; (let x1528 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x1529 : 'T) ->
                 ignore (Ojs.call x1528 "push" [| Obj.magic x1529 |]))
               x1527;
             x1528)
         |])

  let (concat : 'T t -> items:'T _ConcatArray list -> 'T list) =
   fun (x1537 : 'T t) ~items:(x1533 : 'T _ConcatArray list) ->
    Ojs.list_of_js
      Obj.magic
      (let x1539 = t_to_js Obj.magic x1537 in
       Ojs.call
         (Ojs.get_prop_ascii x1539 "concat")
         "apply"
         [| x1539
          ; (let x1534 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x1535 : 'T _ConcatArray) ->
                 ignore
                   (Ojs.call
                      x1534
                      "push"
                      [| _ConcatArray_to_js Obj.magic x1535 |]))
               x1533;
             x1534)
         |])

  let (concat' : 'T t -> items:('T, 'T _ConcatArray) union2 list -> 'T list) =
   fun (x1547 : 'T t) ~items:(x1541 : ('T, 'T _ConcatArray) union2 list) ->
    Ojs.list_of_js
      Obj.magic
      (let x1549 = t_to_js Obj.magic x1547 in
       Ojs.call
         (Ojs.get_prop_ascii x1549 "concat")
         "apply"
         [| x1549
          ; (let x1542 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x1543 : ('T, 'T _ConcatArray) union2) ->
                 ignore
                   (Ojs.call
                      x1542
                      "push"
                      [| union2_to_js
                           Obj.magic
                           (fun (x1545 : 'T _ConcatArray) ->
                             _ConcatArray_to_js Obj.magic x1545)
                           x1543
                      |]))
               x1541;
             x1542)
         |])

  let (join : 'T t -> ?separator:string -> unit -> string) =
   fun (x1554 : 'T t) ?separator:(x1551 : string option) () ->
    Ojs.string_of_js
      (let x1556 = t_to_js Obj.magic x1554 in
       Ojs.call
         (Ojs.get_prop_ascii x1556 "join")
         "apply"
         [| x1556
          ; (let x1552 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1551 with
             | Some x1553 ->
               ignore (Ojs.call x1552 "push" [| Ojs.string_to_js x1553 |])
             | None ->
               ());
             x1552)
         |])

  let (reverse : 'T t -> 'T list) =
   fun (x1557 : 'T t) ->
    Ojs.list_of_js Obj.magic (Ojs.call (t_to_js Obj.magic x1557) "reverse" [||])

  let (shift : 'T t -> 'T or_undefined) =
   fun (x1560 : 'T t) ->
    or_undefined_of_js
      Obj.magic
      (Ojs.call (t_to_js Obj.magic x1560) "shift" [||])

  let (slice : 'T t -> ?start:float -> ?end_:float -> unit -> 'T list) =
   fun (x1568 : 'T t)
       ?start:(x1563 : float option)
       ?end_:(x1564 : float option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1570 = t_to_js Obj.magic x1568 in
       Ojs.call
         (Ojs.get_prop_ascii x1570 "slice")
         "apply"
         [| x1570
          ; (let x1565 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1563 with
             | Some x1567 ->
               ignore (Ojs.call x1565 "push" [| Ojs.float_to_js x1567 |])
             | None ->
               ());
             (match x1564 with
             | Some x1566 ->
               ignore (Ojs.call x1565 "push" [| Ojs.float_to_js x1566 |])
             | None ->
               ());
             x1565)
         |])

  let (sort : 'T t -> ?compareFn:(a:'T -> b:'T -> float) -> unit -> 'T t) =
   fun (x1577 : 'T t) ?compareFn:(x1572 : (a:'T -> b:'T -> float) option) () ->
    t_of_js
      Obj.magic
      (let x1579 = t_to_js Obj.magic x1577 in
       Ojs.call
         (Ojs.get_prop_ascii x1579 "sort")
         "apply"
         [| x1579
          ; (let x1573 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1572 with
             | Some x1574 ->
               ignore
                 (Ojs.call
                    x1573
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x1575 : Ojs.t) (x1576 : Ojs.t) ->
                           Ojs.float_to_js
                             (x1574 ~a:(Obj.magic x1575) ~b:(Obj.magic x1576)))
                    |])
             | None ->
               ());
             x1573)
         |])

  let (splice : 'T t -> start:float -> ?deleteCount:float -> unit -> 'T list) =
   fun (x1585 : 'T t)
       ~start:(x1581 : float)
       ?deleteCount:(x1582 : float option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1587 = t_to_js Obj.magic x1585 in
       Ojs.call
         (Ojs.get_prop_ascii x1587 "splice")
         "apply"
         [| x1587
          ; (let x1583 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1583 "push" [| Ojs.float_to_js x1581 |]);
             (match x1582 with
             | Some x1584 ->
               ignore (Ojs.call x1583 "push" [| Ojs.float_to_js x1584 |])
             | None ->
               ());
             x1583)
         |])

  let (splice' :
        'T t -> start:float -> deleteCount:float -> items:'T list -> 'T list)
    =
   fun (x1594 : 'T t)
       ~start:(x1589 : float)
       ~deleteCount:(x1590 : float)
       ~items:(x1591 : 'T list) ->
    Ojs.list_of_js
      Obj.magic
      (let x1596 = t_to_js Obj.magic x1594 in
       Ojs.call
         (Ojs.get_prop_ascii x1596 "splice")
         "apply"
         [| x1596
          ; (let x1592 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1592 "push" [| Ojs.float_to_js x1589 |]);
             ignore (Ojs.call x1592 "push" [| Ojs.float_to_js x1590 |]);
             List.iter
               (fun (x1593 : 'T) ->
                 ignore (Ojs.call x1592 "push" [| Obj.magic x1593 |]))
               x1591;
             x1592)
         |])

  let (unshift : 'T t -> items:'T list -> float) =
   fun (x1601 : 'T t) ~items:(x1598 : 'T list) ->
    Ojs.float_of_js
      (let x1603 = t_to_js Obj.magic x1601 in
       Ojs.call
         (Ojs.get_prop_ascii x1603 "unshift")
         "apply"
         [| x1603
          ; (let x1599 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x1600 : 'T) ->
                 ignore (Ojs.call x1599 "push" [| Obj.magic x1600 |]))
               x1598;
             x1599)
         |])

  let (indexOf : 'T t -> searchElement:'T -> ?fromIndex:float -> unit -> float) =
   fun (x1608 : 'T t)
       ~searchElement:(x1604 : 'T)
       ?fromIndex:(x1605 : float option)
       () ->
    Ojs.float_of_js
      (let x1610 = t_to_js Obj.magic x1608 in
       Ojs.call
         (Ojs.get_prop_ascii x1610 "indexOf")
         "apply"
         [| x1610
          ; (let x1606 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1606 "push" [| Obj.magic x1604 |]);
             (match x1605 with
             | Some x1607 ->
               ignore (Ojs.call x1606 "push" [| Ojs.float_to_js x1607 |])
             | None ->
               ());
             x1606)
         |])

  let (lastIndexOf :
        'T t -> searchElement:'T -> ?fromIndex:float -> unit -> float)
    =
   fun (x1615 : 'T t)
       ~searchElement:(x1611 : 'T)
       ?fromIndex:(x1612 : float option)
       () ->
    Ojs.float_of_js
      (let x1617 = t_to_js Obj.magic x1615 in
       Ojs.call
         (Ojs.get_prop_ascii x1617 "lastIndexOf")
         "apply"
         [| x1617
          ; (let x1613 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x1613 "push" [| Obj.magic x1611 |]);
             (match x1612 with
             | Some x1614 ->
               ignore (Ojs.call x1613 "push" [| Ojs.float_to_js x1614 |])
             | None ->
               ());
             x1613)
         |])

  let (every :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> bool)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x1626 : 'T t)
       ~predicate:(x1618 : value:'T -> index:float -> array:'T list -> bool)
       ?thisArg:(x1619 : any option)
       () ->
    Ojs.bool_of_js
      (let x1628 = t_to_js Obj.magic x1626 in
       Ojs.call
         (Ojs.get_prop_ascii x1628 "every")
         "apply"
         [| x1628
          ; (let x1620 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1620
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1622 : Ojs.t) (x1623 : Ojs.t) (x1624 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x1618
                              ~value:(Obj.magic x1622)
                              ~index:(Ojs.float_of_js x1623)
                              ~array:(Ojs.list_of_js Obj.magic x1624)))
                  |]);
             (match x1619 with
             | Some x1621 ->
               ignore (Ojs.call x1620 "push" [| any_to_js x1621 |])
             | None ->
               ());
             x1620)
         |])

  let (every' :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x1637 : 'T t)
       ~predicate:(x1629 : value:'T -> index:float -> array:'T list -> unknown)
       ?thisArg:(x1630 : any option)
       () ->
    Ojs.bool_of_js
      (let x1639 = t_to_js Obj.magic x1637 in
       Ojs.call
         (Ojs.get_prop_ascii x1639 "every")
         "apply"
         [| x1639
          ; (let x1631 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1631
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1633 : Ojs.t) (x1634 : Ojs.t) (x1635 : Ojs.t) ->
                         unknown_to_js
                           (x1629
                              ~value:(Obj.magic x1633)
                              ~index:(Ojs.float_of_js x1634)
                              ~array:(Ojs.list_of_js Obj.magic x1635)))
                  |]);
             (match x1630 with
             | Some x1632 ->
               ignore (Ojs.call x1631 "push" [| any_to_js x1632 |])
             | None ->
               ());
             x1631)
         |])

  let (some :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x1648 : 'T t)
       ~predicate:(x1640 : value:'T -> index:float -> array:'T list -> unknown)
       ?thisArg:(x1641 : any option)
       () ->
    Ojs.bool_of_js
      (let x1650 = t_to_js Obj.magic x1648 in
       Ojs.call
         (Ojs.get_prop_ascii x1650 "some")
         "apply"
         [| x1650
          ; (let x1642 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1642
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1644 : Ojs.t) (x1645 : Ojs.t) (x1646 : Ojs.t) ->
                         unknown_to_js
                           (x1640
                              ~value:(Obj.magic x1644)
                              ~index:(Ojs.float_of_js x1645)
                              ~array:(Ojs.list_of_js Obj.magic x1646)))
                  |]);
             (match x1641 with
             | Some x1643 ->
               ignore (Ojs.call x1642 "push" [| any_to_js x1643 |])
             | None ->
               ());
             x1642)
         |])

  let (forEach :
        'T t
        -> callbackfn:(value:'T -> index:float -> array:'T list -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x1659 : 'T t)
       ~callbackfn:(x1651 : value:'T -> index:float -> array:'T list -> unit)
       ?thisArg:(x1652 : any option)
       () ->
    ignore
      (let x1661 = t_to_js Obj.magic x1659 in
       Ojs.call
         (Ojs.get_prop_ascii x1661 "forEach")
         "apply"
         [| x1661
          ; (let x1653 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1653
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1655 : Ojs.t) (x1656 : Ojs.t) (x1657 : Ojs.t) ->
                         x1651
                           ~value:(Obj.magic x1655)
                           ~index:(Ojs.float_of_js x1656)
                           ~array:(Ojs.list_of_js Obj.magic x1657))
                  |]);
             (match x1652 with
             | Some x1654 ->
               ignore (Ojs.call x1653 "push" [| any_to_js x1654 |])
             | None ->
               ());
             x1653)
         |])

  let (map :
        'T t
        -> callbackfn:(value:'T -> index:float -> array:'T list -> 'U)
        -> ?thisArg:any
        -> unit
        -> 'U list)
    =
   fun (x1670 : 'T t)
       ~callbackfn:(x1662 : value:'T -> index:float -> array:'T list -> 'U)
       ?thisArg:(x1663 : any option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1672 = t_to_js Obj.magic x1670 in
       Ojs.call
         (Ojs.get_prop_ascii x1672 "map")
         "apply"
         [| x1672
          ; (let x1664 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1664
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1666 : Ojs.t) (x1667 : Ojs.t) (x1668 : Ojs.t) ->
                         Obj.magic
                           (x1662
                              ~value:(Obj.magic x1666)
                              ~index:(Ojs.float_of_js x1667)
                              ~array:(Ojs.list_of_js Obj.magic x1668)))
                  |]);
             (match x1663 with
             | Some x1665 ->
               ignore (Ojs.call x1664 "push" [| any_to_js x1665 |])
             | None ->
               ());
             x1664)
         |])

  let (filter :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> bool)
        -> ?thisArg:any
        -> unit
        -> 'S list)
    =
   fun (x1682 : 'T t)
       ~predicate:(x1674 : value:'T -> index:float -> array:'T list -> bool)
       ?thisArg:(x1675 : any option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1684 = t_to_js Obj.magic x1682 in
       Ojs.call
         (Ojs.get_prop_ascii x1684 "filter")
         "apply"
         [| x1684
          ; (let x1676 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1676
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1678 : Ojs.t) (x1679 : Ojs.t) (x1680 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x1674
                              ~value:(Obj.magic x1678)
                              ~index:(Ojs.float_of_js x1679)
                              ~array:(Ojs.list_of_js Obj.magic x1680)))
                  |]);
             (match x1675 with
             | Some x1677 ->
               ignore (Ojs.call x1676 "push" [| any_to_js x1677 |])
             | None ->
               ());
             x1676)
         |])

  let (filter' :
        'T t
        -> predicate:(value:'T -> index:float -> array:'T list -> unknown)
        -> ?thisArg:any
        -> unit
        -> 'T list)
    =
   fun (x1694 : 'T t)
       ~predicate:(x1686 : value:'T -> index:float -> array:'T list -> unknown)
       ?thisArg:(x1687 : any option)
       () ->
    Ojs.list_of_js
      Obj.magic
      (let x1696 = t_to_js Obj.magic x1694 in
       Ojs.call
         (Ojs.get_prop_ascii x1696 "filter")
         "apply"
         [| x1696
          ; (let x1688 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x1688
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x1690 : Ojs.t) (x1691 : Ojs.t) (x1692 : Ojs.t) ->
                         unknown_to_js
                           (x1686
                              ~value:(Obj.magic x1690)
                              ~index:(Ojs.float_of_js x1691)
                              ~array:(Ojs.list_of_js Obj.magic x1692)))
                  |]);
             (match x1687 with
             | Some x1689 ->
               ignore (Ojs.call x1688 "push" [| any_to_js x1689 |])
             | None ->
               ());
             x1688)
         |])

  let (reduce :
        'T t
        -> callbackfn:
             (previousValue:'T
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'T)
        -> 'T)
    =
   fun (x1704 : 'T t)
       ~callbackfn:
         (x1698 :
           previousValue:'T
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'T) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1704)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x1699 : Ojs.t)
                (x1700 : Ojs.t)
                (x1701 : Ojs.t)
                (x1702 : Ojs.t)
              ->
                Obj.magic
                  (x1698
                     ~previousValue:(Obj.magic x1699)
                     ~currentValue:(Obj.magic x1700)
                     ~currentIndex:(Ojs.float_of_js x1701)
                     ~array:(Ojs.list_of_js Obj.magic x1702)))
         |])

  let (reduce' :
        'T t
        -> callbackfn:
             (previousValue:'T
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'T)
        -> initialValue:'T
        -> 'T)
    =
   fun (x1713 : 'T t)
       ~callbackfn:
         (x1706 :
           previousValue:'T
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'T)
       ~initialValue:(x1712 : 'T) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1713)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x1707 : Ojs.t)
                (x1708 : Ojs.t)
                (x1709 : Ojs.t)
                (x1710 : Ojs.t)
              ->
                Obj.magic
                  (x1706
                     ~previousValue:(Obj.magic x1707)
                     ~currentValue:(Obj.magic x1708)
                     ~currentIndex:(Ojs.float_of_js x1709)
                     ~array:(Ojs.list_of_js Obj.magic x1710)))
          ; Obj.magic x1712
         |])

  let (reduce'' :
        'T t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x1722 : 'T t)
       ~callbackfn:
         (x1715 :
           previousValue:'U
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'U)
       ~initialValue:(x1721 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1722)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x1716 : Ojs.t)
                (x1717 : Ojs.t)
                (x1718 : Ojs.t)
                (x1719 : Ojs.t)
              ->
                Obj.magic
                  (x1715
                     ~previousValue:(Obj.magic x1716)
                     ~currentValue:(Obj.magic x1717)
                     ~currentIndex:(Ojs.float_of_js x1718)
                     ~array:(Ojs.list_of_js Obj.magic x1719)))
          ; Obj.magic x1721
         |])

  let (reduceRight :
        'T t
        -> callbackfn:
             (previousValue:'T
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'T)
        -> 'T)
    =
   fun (x1730 : 'T t)
       ~callbackfn:
         (x1724 :
           previousValue:'T
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'T) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1730)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x1725 : Ojs.t)
                (x1726 : Ojs.t)
                (x1727 : Ojs.t)
                (x1728 : Ojs.t)
              ->
                Obj.magic
                  (x1724
                     ~previousValue:(Obj.magic x1725)
                     ~currentValue:(Obj.magic x1726)
                     ~currentIndex:(Ojs.float_of_js x1727)
                     ~array:(Ojs.list_of_js Obj.magic x1728)))
         |])

  let (reduceRight' :
        'T t
        -> callbackfn:
             (previousValue:'T
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'T)
        -> initialValue:'T
        -> 'T)
    =
   fun (x1739 : 'T t)
       ~callbackfn:
         (x1732 :
           previousValue:'T
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'T)
       ~initialValue:(x1738 : 'T) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1739)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x1733 : Ojs.t)
                (x1734 : Ojs.t)
                (x1735 : Ojs.t)
                (x1736 : Ojs.t)
              ->
                Obj.magic
                  (x1732
                     ~previousValue:(Obj.magic x1733)
                     ~currentValue:(Obj.magic x1734)
                     ~currentIndex:(Ojs.float_of_js x1735)
                     ~array:(Ojs.list_of_js Obj.magic x1736)))
          ; Obj.magic x1738
         |])

  let (reduceRight'' :
        'T t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:'T
              -> currentIndex:float
              -> array:'T list
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x1748 : 'T t)
       ~callbackfn:
         (x1741 :
           previousValue:'U
           -> currentValue:'T
           -> currentIndex:float
           -> array:'T list
           -> 'U)
       ~initialValue:(x1747 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js Obj.magic x1748)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x1742 : Ojs.t)
                (x1743 : Ojs.t)
                (x1744 : Ojs.t)
                (x1745 : Ojs.t)
              ->
                Obj.magic
                  (x1741
                     ~previousValue:(Obj.magic x1742)
                     ~currentValue:(Obj.magic x1743)
                     ~currentIndex:(Ojs.float_of_js x1744)
                     ~array:(Ojs.list_of_js Obj.magic x1745)))
          ; Obj.magic x1747
         |])

  let (get : 'T t -> float -> 'T) =
   fun (x1750 : 'T t) (x1752 : float) ->
    Obj.magic (Ojs.get_prop (t_to_js Obj.magic x1750) (Ojs.float_to_js x1752))

  let (set : 'T t -> float -> 'T -> unit) =
   fun (x1753 : 'T t) (x1755 : float) (x1756 : 'T) ->
    Ojs.set_prop
      (t_to_js Obj.magic x1753)
      (Ojs.float_to_js x1755)
      (Obj.magic x1756)

  let (to_ml : 'T t -> 'T list) =
   fun (x1757 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x1757)

  let (of_ml : 'T list -> 'T t) =
   fun (x1760 : 'T list) -> t_of_js Obj.magic (Ojs.list_to_js Obj.magic x1760)

  let (create : ?arrayLength:float -> unit -> any list) =
   fun ?arrayLength:(x1763 : float option) () ->
    Ojs.list_of_js
      any_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Array")
         (let x1764 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1763 with
          | Some x1765 ->
            ignore (Ojs.call x1764 "push" [| Ojs.float_to_js x1765 |])
          | None ->
            ());
          x1764))

  let (create' : arrayLength:float -> 'T list) =
   fun ~arrayLength:(x1767 : float) ->
    Ojs.list_of_js
      Obj.magic
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Array")
         [| Ojs.float_to_js x1767 |])

  let (create'' : items:'T list -> 'T list) =
   fun ~items:(x1769 : 'T list) ->
    Ojs.list_of_js
      Obj.magic
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Array")
         (let x1770 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          List.iter
            (fun (x1771 : 'T) ->
              ignore (Ojs.call x1770 "push" [| Obj.magic x1771 |]))
            x1769;
          x1770))

  let (isArray : arg:any -> bool) =
   fun ~arg:(x1773 : any) ->
    Ojs.bool_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Array")
         "isArray"
         [| any_to_js x1773 |])
end

module ArrayConstructor = struct
  type t = _ArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x1775 : Ojs.t) -> _ArrayConstructor_of_js x1775

  and t_to_js : t -> Ojs.t =
   fun (x1774 : _ArrayConstructor) -> _ArrayConstructor_to_js x1774

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1777 : Ojs.t) -> t_of_js x1777

  and t_0_to_js : t_0 -> Ojs.t = fun (x1776 : t) -> t_to_js x1776

  let (create : t -> ?arrayLength:float -> unit -> any list) =
   fun (x1781 : t) ?arrayLength:(x1778 : float option) () ->
    Ojs.list_of_js
      any_of_js
      (Ojs.new_obj_arr
         (t_to_js x1781)
         (let x1779 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          (match x1778 with
          | Some x1780 ->
            ignore (Ojs.call x1779 "push" [| Ojs.float_to_js x1780 |])
          | None ->
            ());
          x1779))

  let (create' : t -> arrayLength:float -> 'T list) =
   fun (x1784 : t) ~arrayLength:(x1783 : float) ->
    Ojs.list_of_js
      Obj.magic
      (Ojs.new_obj (t_to_js x1784) [| Ojs.float_to_js x1783 |])

  let (create'' : t -> items:'T list -> 'T list) =
   fun (x1789 : t) ~items:(x1786 : 'T list) ->
    Ojs.list_of_js
      Obj.magic
      (Ojs.new_obj_arr
         (t_to_js x1789)
         (let x1787 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          List.iter
            (fun (x1788 : 'T) ->
              ignore (Ojs.call x1787 "push" [| Obj.magic x1788 |]))
            x1786;
          x1787))

  let (apply : t -> ?arrayLength:float -> unit -> any list) =
   fun (x1794 : t) ?arrayLength:(x1791 : float option) () ->
    Ojs.list_of_js
      any_of_js
      (Ojs.call
         (t_to_js x1794)
         "apply"
         [| Ojs.null
          ; (let x1792 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1791 with
             | Some x1793 ->
               ignore (Ojs.call x1792 "push" [| Ojs.float_to_js x1793 |])
             | None ->
               ());
             x1792)
         |])

  let (apply' : t -> arrayLength:float -> 'T list) =
   fun (x1797 : t) ~arrayLength:(x1796 : float) ->
    Ojs.list_of_js
      Obj.magic
      (Ojs.apply (t_to_js x1797) [| Ojs.float_to_js x1796 |])

  let (apply'' : t -> items:'T list -> 'T list) =
   fun (x1802 : t) ~items:(x1799 : 'T list) ->
    Ojs.list_of_js
      Obj.magic
      (Ojs.call
         (t_to_js x1802)
         "apply"
         [| Ojs.null
          ; (let x1800 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x1801 : 'T) ->
                 ignore (Ojs.call x1800 "push" [| Obj.magic x1801 |]))
               x1799;
             x1800)
         |])

  let (isArray : t -> arg:any -> bool) =
   fun (x1805 : t) ~arg:(x1804 : any) ->
    Ojs.bool_of_js (Ojs.call (t_to_js x1805) "isArray" [| any_to_js x1804 |])

  let (get_prototype : t -> any list) =
   fun (x1806 : t) ->
    Ojs.list_of_js any_of_js (Ojs.get_prop_ascii (t_to_js x1806) "prototype")
end

let (array : _ArrayConstructor) =
  _ArrayConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Array")

module TypedPropertyDescriptor = struct
  type 'T t = 'T _TypedPropertyDescriptor

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1810 : Ojs.t) ->
     _TypedPropertyDescriptor_of_js __T_of_js x1810

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T)
        (__T_to_js : __T -> Ojs.t)
        (x1808 : __T _TypedPropertyDescriptor) ->
     _TypedPropertyDescriptor_to_js __T_to_js x1808

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1814 : Ojs.t) ->
     t_of_js __T_of_js x1814

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1812 : __T t) ->
     t_to_js __T_to_js x1812

  let (get_enumerable : 'T t -> bool) =
   fun (x1816 : 'T t) ->
    Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1816) "enumerable")

  let (set_enumerable : 'T t -> bool -> unit) =
   fun (x1818 : 'T t) (x1819 : bool) ->
    Ojs.set_prop_ascii
      (t_to_js Obj.magic x1818)
      "enumerable"
      (Ojs.bool_to_js x1819)

  let (get_configurable : 'T t -> bool) =
   fun (x1821 : 'T t) ->
    Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1821) "configurable")

  let (set_configurable : 'T t -> bool -> unit) =
   fun (x1823 : 'T t) (x1824 : bool) ->
    Ojs.set_prop_ascii
      (t_to_js Obj.magic x1823)
      "configurable"
      (Ojs.bool_to_js x1824)

  let (get_writable : 'T t -> bool) =
   fun (x1826 : 'T t) ->
    Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1826) "writable")

  let (set_writable : 'T t -> bool -> unit) =
   fun (x1828 : 'T t) (x1829 : bool) ->
    Ojs.set_prop_ascii
      (t_to_js Obj.magic x1828)
      "writable"
      (Ojs.bool_to_js x1829)

  let (get_value : 'T t -> 'T) =
   fun (x1831 : 'T t) ->
    Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1831) "value")

  let (set_value : 'T t -> 'T -> unit) =
   fun (x1833 : 'T t) (x1834 : 'T) ->
    Ojs.set_prop_ascii (t_to_js Obj.magic x1833) "value" (Obj.magic x1834)

  let (get_ : 'T t -> 'T) =
   fun (x1836 : 'T t) ->
    Obj.magic (Ojs.call (t_to_js Obj.magic x1836) "get" [||])

  let (set_ : 'T t -> value:'T -> unit) =
   fun (x1839 : 'T t) ~value:(x1838 : 'T) ->
    ignore (Ojs.call (t_to_js Obj.magic x1839) "set" [| Obj.magic x1838 |])
end

module ClassDecorator = struct
  type t = _ClassDecorator

  let rec t_of_js : Ojs.t -> t =
   fun (x1842 : Ojs.t) -> _ClassDecorator_of_js x1842

  and t_to_js : t -> Ojs.t =
   fun (x1841 : _ClassDecorator) -> _ClassDecorator_to_js x1841

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1844 : Ojs.t) -> t_of_js x1844

  and t_0_to_js : t_0 -> Ojs.t = fun (x1843 : t) -> t_to_js x1843

  let (apply : t -> target:'TFunction -> ('TFunction, unit) union2) =
   fun (x1846 : t) ~target:(x1845 : 'TFunction) ->
    union2_of_js
      Obj.magic
      Ojs.unit_of_js
      (Ojs.apply (t_to_js x1846) [| Obj.magic x1845 |])
end

module PropertyDecorator = struct
  type t = _PropertyDecorator

  let rec t_of_js : Ojs.t -> t =
   fun (x1850 : Ojs.t) -> _PropertyDecorator_of_js x1850

  and t_to_js : t -> Ojs.t =
   fun (x1849 : _PropertyDecorator) -> _PropertyDecorator_to_js x1849

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1852 : Ojs.t) -> t_of_js x1852

  and t_0_to_js : t_0 -> Ojs.t = fun (x1851 : t) -> t_to_js x1851

  let (apply : t -> target:_Object -> propertyKey:symbol or_string -> unit) =
   fun (x1856 : t)
       ~target:(x1853 : _Object)
       ~propertyKey:(x1854 : symbol or_string) ->
    ignore
      (Ojs.apply
         (t_to_js x1856)
         [| _Object_to_js x1853; or_string_to_js symbol_to_js x1854 |])
end

module MethodDecorator = struct
  type t = _MethodDecorator

  let rec t_of_js : Ojs.t -> t =
   fun (x1858 : Ojs.t) -> _MethodDecorator_of_js x1858

  and t_to_js : t -> Ojs.t =
   fun (x1857 : _MethodDecorator) -> _MethodDecorator_to_js x1857

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1860 : Ojs.t) -> t_of_js x1860

  and t_0_to_js : t_0 -> Ojs.t = fun (x1859 : t) -> t_to_js x1859

  let (apply :
        t
        -> target:_Object
        -> propertyKey:symbol or_string
        -> descriptor:'T _TypedPropertyDescriptor
        -> (unit, 'T _TypedPropertyDescriptor) union2)
    =
   fun (x1866 : t)
       ~target:(x1861 : _Object)
       ~propertyKey:(x1862 : symbol or_string)
       ~descriptor:(x1864 : 'T _TypedPropertyDescriptor) ->
    union2_of_js
      Ojs.unit_of_js
      (fun (x1868 : Ojs.t) -> _TypedPropertyDescriptor_of_js Obj.magic x1868)
      (Ojs.apply
         (t_to_js x1866)
         [| _Object_to_js x1861
          ; or_string_to_js symbol_to_js x1862
          ; _TypedPropertyDescriptor_to_js Obj.magic x1864
         |])
end

module ParameterDecorator = struct
  type t = _ParameterDecorator

  let rec t_of_js : Ojs.t -> t =
   fun (x1871 : Ojs.t) -> _ParameterDecorator_of_js x1871

  and t_to_js : t -> Ojs.t =
   fun (x1870 : _ParameterDecorator) -> _ParameterDecorator_to_js x1870

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x1873 : Ojs.t) -> t_of_js x1873

  and t_0_to_js : t_0 -> Ojs.t = fun (x1872 : t) -> t_to_js x1872

  let (apply :
        t
        -> target:_Object
        -> propertyKey:symbol or_string
        -> parameterIndex:float
        -> unit)
    =
   fun (x1878 : t)
       ~target:(x1874 : _Object)
       ~propertyKey:(x1875 : symbol or_string)
       ~parameterIndex:(x1877 : float) ->
    ignore
      (Ojs.apply
         (t_to_js x1878)
         [| _Object_to_js x1874
          ; or_string_to_js symbol_to_js x1875
          ; Ojs.float_to_js x1877
         |])
end

module Promise = struct
  type 'T t = 'T _Promise

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1885 : Ojs.t) ->
     _Promise_of_js __T_of_js x1885

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1883 : __T _Promise) ->
     _Promise_to_js __T_to_js x1883

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1889 : Ojs.t) ->
     t_of_js __T_of_js x1889

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1887 : __T t) ->
     t_to_js __T_to_js x1887

  let (then_ :
        'T t
        -> ?onfulfilled:('T -> 'TResult t)
        -> ?onrejected:(any -> 'TResult t)
        -> unit
        -> 'TResult t)
    =
   fun (x1900 : 'T t)
       ?onfulfilled:(x1891 : ('T -> 'TResult t) option)
       ?onrejected:(x1892 : (any -> 'TResult t) option)
       () ->
    t_of_js
      Obj.magic
      (let x1902 = t_to_js Obj.magic x1900 in
       Ojs.call
         (Ojs.get_prop_ascii x1902 "then")
         "apply"
         [| x1902
          ; (let x1893 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1891 with
             | Some x1897 ->
               ignore
                 (Ojs.call
                    x1893
                    "push"
                    [| Ojs.fun_to_js 1 (fun (x1898 : Ojs.t) ->
                           t_to_js Obj.magic (x1897 (Obj.magic x1898)))
                    |])
             | None ->
               ());
             (match x1892 with
             | Some x1894 ->
               ignore
                 (Ojs.call
                    x1893
                    "push"
                    [| Ojs.fun_to_js 1 (fun (x1895 : Ojs.t) ->
                           t_to_js Obj.magic (x1894 (any_of_js x1895)))
                    |])
             | None ->
               ());
             x1893)
         |])

  let (catch : 'T t -> ?onrejected:(any -> 'T t) -> unit -> 'T t) =
   fun (x1909 : 'T t) ?onrejected:(x1904 : (any -> 'T t) option) () ->
    t_of_js
      Obj.magic
      (let x1911 = t_to_js Obj.magic x1909 in
       Ojs.call
         (Ojs.get_prop_ascii x1911 "catch")
         "apply"
         [| x1911
          ; (let x1905 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x1904 with
             | Some x1906 ->
               ignore
                 (Ojs.call
                    x1905
                    "push"
                    [| Ojs.fun_to_js 1 (fun (x1907 : Ojs.t) ->
                           t_to_js Obj.magic (x1906 (any_of_js x1907)))
                    |])
             | None ->
               ());
             x1905)
         |])
end

module Partial = struct
  type 'T t = 'T _Partial

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1915 : Ojs.t) ->
     _Partial_of_js __T_of_js x1915

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1913 : __T _Partial) ->
     _Partial_to_js __T_to_js x1913

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1919 : Ojs.t) ->
     t_of_js __T_of_js x1919

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1917 : __T t) ->
     t_to_js __T_to_js x1917
end

module Required = struct
  type 'T t = 'T _Required

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1923 : Ojs.t) ->
     _Required_of_js __T_of_js x1923

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1921 : __T _Required) ->
     _Required_to_js __T_to_js x1921

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1927 : Ojs.t) ->
     t_of_js __T_of_js x1927

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1925 : __T t) ->
     t_to_js __T_to_js x1925
end

module Readonly = struct
  type 'T t = 'T _Readonly

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1931 : Ojs.t) ->
     _Readonly_of_js __T_of_js x1931

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1929 : __T _Readonly) ->
     _Readonly_to_js __T_to_js x1929

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1935 : Ojs.t) ->
     t_of_js __T_of_js x1935

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1933 : __T t) ->
     t_to_js __T_to_js x1933
end

module Pick = struct
  type ('T, 'K) t = ('T, 'K) _Pick

  let rec t_of_js : 'T 'K. (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t
    =
    fun (type __T __K)
        (__T_of_js : Ojs.t -> __T)
        (__K_of_js : Ojs.t -> __K)
        (x1940 : Ojs.t) ->
     _Pick_of_js __T_of_js __K_of_js x1940

  and t_to_js : 'T 'K. ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t -> Ojs.t =
    fun (type __T __K)
        (__T_to_js : __T -> Ojs.t)
        (__K_to_js : __K -> Ojs.t)
        (x1937 : (__T, __K) _Pick) ->
     _Pick_to_js __T_to_js __K_to_js x1937

  type ('T, 'K) t_2 = ('T, 'K) t

  let rec t_2_of_js :
            'T 'K. (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t_2
    =
    fun (type __T __K)
        (__T_of_js : Ojs.t -> __T)
        (__K_of_js : Ojs.t -> __K)
        (x1946 : Ojs.t) ->
     t_of_js __T_of_js __K_of_js x1946

  and t_2_to_js : 'T 'K. ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t_2 -> Ojs.t
    =
    fun (type __T __K)
        (__T_to_js : __T -> Ojs.t)
        (__K_to_js : __K -> Ojs.t)
        (x1943 : (__T, __K) t) ->
     t_to_js __T_to_js __K_to_js x1943
end

module Record = struct
  type ('K, 'T) t = ('K, 'T) _Record

  let rec t_of_js : 'K 'T. (Ojs.t -> 'K) -> (Ojs.t -> 'T) -> Ojs.t -> ('K, 'T) t
    =
    fun (type __K __T)
        (__K_of_js : Ojs.t -> __K)
        (__T_of_js : Ojs.t -> __T)
        (x1952 : Ojs.t) ->
     _Record_of_js __K_of_js __T_of_js x1952

  and t_to_js : 'K 'T. ('K -> Ojs.t) -> ('T -> Ojs.t) -> ('K, 'T) t -> Ojs.t =
    fun (type __K __T)
        (__K_to_js : __K -> Ojs.t)
        (__T_to_js : __T -> Ojs.t)
        (x1949 : (__K, __T) _Record) ->
     _Record_to_js __K_to_js __T_to_js x1949

  type ('K, 'T) t_2 = ('K, 'T) t

  let rec t_2_of_js :
            'K 'T. (Ojs.t -> 'K) -> (Ojs.t -> 'T) -> Ojs.t -> ('K, 'T) t_2
    =
    fun (type __K __T)
        (__K_of_js : Ojs.t -> __K)
        (__T_of_js : Ojs.t -> __T)
        (x1958 : Ojs.t) ->
     t_of_js __K_of_js __T_of_js x1958

  and t_2_to_js : 'K 'T. ('K -> Ojs.t) -> ('T -> Ojs.t) -> ('K, 'T) t_2 -> Ojs.t
    =
    fun (type __K __T)
        (__K_to_js : __K -> Ojs.t)
        (__T_to_js : __T -> Ojs.t)
        (x1955 : (__K, __T) t) ->
     t_to_js __K_to_js __T_to_js x1955
end

module Exclude = struct
  type ('T, 'U) t = ('T, 'U) _Exclude

  let rec t_of_js : 'T 'U. (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t
    =
    fun (type __T __U)
        (__T_of_js : Ojs.t -> __T)
        (__U_of_js : Ojs.t -> __U)
        (x1964 : Ojs.t) ->
     _Exclude_of_js __T_of_js __U_of_js x1964

  and t_to_js : 'T 'U. ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t -> Ojs.t =
    fun (type __T __U)
        (__T_to_js : __T -> Ojs.t)
        (__U_to_js : __U -> Ojs.t)
        (x1961 : (__T, __U) _Exclude) ->
     _Exclude_to_js __T_to_js __U_to_js x1961

  type ('T, 'U) t_2 = ('T, 'U) t

  let rec t_2_of_js :
            'T 'U. (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t_2
    =
    fun (type __T __U)
        (__T_of_js : Ojs.t -> __T)
        (__U_of_js : Ojs.t -> __U)
        (x1970 : Ojs.t) ->
     t_of_js __T_of_js __U_of_js x1970

  and t_2_to_js : 'T 'U. ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t_2 -> Ojs.t
    =
    fun (type __T __U)
        (__T_to_js : __T -> Ojs.t)
        (__U_to_js : __U -> Ojs.t)
        (x1967 : (__T, __U) t) ->
     t_to_js __T_to_js __U_to_js x1967
end

module Extract = struct
  type ('T, 'U) t = ('T, 'U) _Extract

  let rec t_of_js : 'T 'U. (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t
    =
    fun (type __T __U)
        (__T_of_js : Ojs.t -> __T)
        (__U_of_js : Ojs.t -> __U)
        (x1976 : Ojs.t) ->
     _Extract_of_js __T_of_js __U_of_js x1976

  and t_to_js : 'T 'U. ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t -> Ojs.t =
    fun (type __T __U)
        (__T_to_js : __T -> Ojs.t)
        (__U_to_js : __U -> Ojs.t)
        (x1973 : (__T, __U) _Extract) ->
     _Extract_to_js __T_to_js __U_to_js x1973

  type ('T, 'U) t_2 = ('T, 'U) t

  let rec t_2_of_js :
            'T 'U. (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t_2
    =
    fun (type __T __U)
        (__T_of_js : Ojs.t -> __T)
        (__U_of_js : Ojs.t -> __U)
        (x1982 : Ojs.t) ->
     t_of_js __T_of_js __U_of_js x1982

  and t_2_to_js : 'T 'U. ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t_2 -> Ojs.t
    =
    fun (type __T __U)
        (__T_to_js : __T -> Ojs.t)
        (__U_to_js : __U -> Ojs.t)
        (x1979 : (__T, __U) t) ->
     t_to_js __T_to_js __U_to_js x1979
end

module Omit = struct
  type ('T, 'K) t = ('T, 'K) _Omit

  let rec t_of_js : 'T 'K. (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t
    =
    fun (type __T __K)
        (__T_of_js : Ojs.t -> __T)
        (__K_of_js : Ojs.t -> __K)
        (x1988 : Ojs.t) ->
     _Omit_of_js __T_of_js __K_of_js x1988

  and t_to_js : 'T 'K. ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t -> Ojs.t =
    fun (type __T __K)
        (__T_to_js : __T -> Ojs.t)
        (__K_to_js : __K -> Ojs.t)
        (x1985 : (__T, __K) _Omit) ->
     _Omit_to_js __T_to_js __K_to_js x1985

  type ('T, 'K) t_2 = ('T, 'K) t

  let rec t_2_of_js :
            'T 'K. (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t_2
    =
    fun (type __T __K)
        (__T_of_js : Ojs.t -> __T)
        (__K_of_js : Ojs.t -> __K)
        (x1994 : Ojs.t) ->
     t_of_js __T_of_js __K_of_js x1994

  and t_2_to_js : 'T 'K. ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t_2 -> Ojs.t
    =
    fun (type __T __K)
        (__T_to_js : __T -> Ojs.t)
        (__K_to_js : __K -> Ojs.t)
        (x1991 : (__T, __K) t) ->
     t_to_js __T_to_js __K_to_js x1991
end

module NonNullable = struct
  type 'T t = 'T _NonNullable

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x1999 : Ojs.t) ->
     _NonNullable_of_js __T_of_js x1999

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x1997 : __T _NonNullable) ->
     _NonNullable_to_js __T_to_js x1997

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2003 : Ojs.t) ->
     t_of_js __T_of_js x2003

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2001 : __T t) ->
     t_to_js __T_to_js x2001
end

module Parameters = struct
  type 'T t = 'T _Parameters

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2007 : Ojs.t) ->
     _Parameters_of_js __T_of_js x2007

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2005 : __T _Parameters) ->
     _Parameters_to_js __T_to_js x2005

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2011 : Ojs.t) ->
     t_of_js __T_of_js x2011

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2009 : __T t) ->
     t_to_js __T_to_js x2009
end

module ConstructorParameters = struct
  type 'T t = 'T _ConstructorParameters

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2015 : Ojs.t) ->
     _ConstructorParameters_of_js __T_of_js x2015

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T)
        (__T_to_js : __T -> Ojs.t)
        (x2013 : __T _ConstructorParameters) ->
     _ConstructorParameters_to_js __T_to_js x2013

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2019 : Ojs.t) ->
     t_of_js __T_of_js x2019

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2017 : __T t) ->
     t_to_js __T_to_js x2017
end

module ReturnType = struct
  type 'T t = 'T _ReturnType

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2023 : Ojs.t) ->
     _ReturnType_of_js __T_of_js x2023

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2021 : __T _ReturnType) ->
     _ReturnType_to_js __T_to_js x2021

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2027 : Ojs.t) ->
     t_of_js __T_of_js x2027

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2025 : __T t) ->
     t_to_js __T_to_js x2025
end

module InstanceType = struct
  type 'T t = 'T _InstanceType

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2031 : Ojs.t) ->
     _InstanceType_of_js __T_of_js x2031

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2029 : __T _InstanceType) ->
     _InstanceType_to_js __T_to_js x2029

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2035 : Ojs.t) ->
     t_of_js __T_of_js x2035

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2033 : __T t) ->
     t_to_js __T_to_js x2033
end

module ThisType = struct
  type 'T t = 'T _ThisType

  let rec t_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2039 : Ojs.t) ->
     _ThisType_of_js __T_of_js x2039

  and t_to_js : 'T. ('T -> Ojs.t) -> 'T t -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2037 : __T _ThisType) ->
     _ThisType_to_js __T_to_js x2037

  type 'T t_1 = 'T t

  let rec t_1_of_js : 'T. (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
    fun (type __T) (__T_of_js : Ojs.t -> __T) (x2043 : Ojs.t) ->
     t_of_js __T_of_js x2043

  and t_1_to_js : 'T. ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
    fun (type __T) (__T_to_js : __T -> Ojs.t) (x2041 : __T t) ->
     t_to_js __T_to_js x2041
end

module ArrayBuffer = struct
  type t = _ArrayBuffer

  let rec t_of_js : Ojs.t -> t = fun (x2046 : Ojs.t) -> _ArrayBuffer_of_js x2046

  and t_to_js : t -> Ojs.t =
   fun (x2045 : _ArrayBuffer) -> _ArrayBuffer_to_js x2045

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2048 : Ojs.t) -> t_of_js x2048

  and t_0_to_js : t_0 -> Ojs.t = fun (x2047 : t) -> t_to_js x2047

  let (get_byteLength : t -> float) =
   fun (x2049 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2049) "byteLength")

  let (slice : t -> begin_:float -> ?end_:float -> unit -> t) =
   fun (x2054 : t) ~begin_:(x2050 : float) ?end_:(x2051 : float option) () ->
    t_of_js
      (let x2055 = t_to_js x2054 in
       Ojs.call
         (Ojs.get_prop_ascii x2055 "slice")
         "apply"
         [| x2055
          ; (let x2052 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2052 "push" [| Ojs.float_to_js x2050 |]);
             (match x2051 with
             | Some x2053 ->
               ignore (Ojs.call x2052 "push" [| Ojs.float_to_js x2053 |])
             | None ->
               ());
             x2052)
         |])

  let (create : byteLength:float -> _ArrayBuffer) =
   fun ~byteLength:(x2056 : float) ->
    _ArrayBuffer_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "ArrayBuffer")
         [| Ojs.float_to_js x2056 |])

  let (isView : arg:any -> bool) =
   fun ~arg:(x2057 : any) ->
    Ojs.bool_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "ArrayBuffer")
         "isView"
         [| any_to_js x2057 |])
end

module ArrayBufferTypes = struct
  type t = _ArrayBufferTypes

  let rec t_of_js : Ojs.t -> t =
   fun (x2059 : Ojs.t) -> _ArrayBufferTypes_of_js x2059

  and t_to_js : t -> Ojs.t =
   fun (x2058 : _ArrayBufferTypes) -> _ArrayBufferTypes_to_js x2058

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2061 : Ojs.t) -> t_of_js x2061

  and t_0_to_js : t_0 -> Ojs.t = fun (x2060 : t) -> t_to_js x2060

  let (get_ArrayBuffer : t -> _ArrayBuffer) =
   fun (x2062 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x2062) "ArrayBuffer")

  let (set_ArrayBuffer : t -> _ArrayBuffer -> unit) =
   fun (x2063 : t) (x2064 : _ArrayBuffer) ->
    Ojs.set_prop_ascii (t_to_js x2063) "ArrayBuffer" (_ArrayBuffer_to_js x2064)
end

module ArrayBufferConstructor = struct
  type t = _ArrayBufferConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x2066 : Ojs.t) -> _ArrayBufferConstructor_of_js x2066

  and t_to_js : t -> Ojs.t =
   fun (x2065 : _ArrayBufferConstructor) -> _ArrayBufferConstructor_to_js x2065

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2068 : Ojs.t) -> t_of_js x2068

  and t_0_to_js : t_0 -> Ojs.t = fun (x2067 : t) -> t_to_js x2067

  let (get_prototype : t -> _ArrayBuffer) =
   fun (x2069 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x2069) "prototype")

  let (create : t -> byteLength:float -> _ArrayBuffer) =
   fun (x2071 : t) ~byteLength:(x2070 : float) ->
    _ArrayBuffer_of_js (Ojs.new_obj (t_to_js x2071) [| Ojs.float_to_js x2070 |])

  let (isView : t -> arg:any -> bool) =
   fun (x2073 : t) ~arg:(x2072 : any) ->
    Ojs.bool_of_js (Ojs.call (t_to_js x2073) "isView" [| any_to_js x2072 |])
end

let (arrayBuffer : _ArrayBufferConstructor) =
  _ArrayBufferConstructor_of_js (Ojs.get_prop_ascii Ojs.global "ArrayBuffer")

module ArrayBufferView = struct
  type t = _ArrayBufferView

  let rec t_of_js : Ojs.t -> t =
   fun (x2075 : Ojs.t) -> _ArrayBufferView_of_js x2075

  and t_to_js : t -> Ojs.t =
   fun (x2074 : _ArrayBufferView) -> _ArrayBufferView_to_js x2074

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2077 : Ojs.t) -> t_of_js x2077

  and t_0_to_js : t_0 -> Ojs.t = fun (x2076 : t) -> t_to_js x2076

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x2078 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x2078) "buffer")

  let (set_buffer : t -> _ArrayBuffer -> unit) =
   fun (x2079 : t) (x2080 : _ArrayBuffer) ->
    Ojs.set_prop_ascii (t_to_js x2079) "buffer" (_ArrayBuffer_to_js x2080)

  let (get_byteLength : t -> float) =
   fun (x2081 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2081) "byteLength")

  let (set_byteLength : t -> float -> unit) =
   fun (x2082 : t) (x2083 : float) ->
    Ojs.set_prop_ascii (t_to_js x2082) "byteLength" (Ojs.float_to_js x2083)

  let (get_byteOffset : t -> float) =
   fun (x2084 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2084) "byteOffset")

  let (set_byteOffset : t -> float -> unit) =
   fun (x2085 : t) (x2086 : float) ->
    Ojs.set_prop_ascii (t_to_js x2085) "byteOffset" (Ojs.float_to_js x2086)
end

module DataView = struct
  type t = _DataView

  let rec t_of_js : Ojs.t -> t = fun (x2088 : Ojs.t) -> _DataView_of_js x2088

  and t_to_js : t -> Ojs.t = fun (x2087 : _DataView) -> _DataView_to_js x2087

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2090 : Ojs.t) -> t_of_js x2090

  and t_0_to_js : t_0 -> Ojs.t = fun (x2089 : t) -> t_to_js x2089

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x2091 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x2091) "buffer")

  let (get_byteLength : t -> float) =
   fun (x2092 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2092) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x2093 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2093) "byteOffset")

  let (getFloat32 :
        t -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
    =
   fun (x2098 : t)
       ~byteOffset:(x2094 : float)
       ?littleEndian:(x2095 : bool option)
       () ->
    Ojs.float_of_js
      (let x2099 = t_to_js x2098 in
       Ojs.call
         (Ojs.get_prop_ascii x2099 "getFloat32")
         "apply"
         [| x2099
          ; (let x2096 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2096 "push" [| Ojs.float_to_js x2094 |]);
             (match x2095 with
             | Some x2097 ->
               ignore (Ojs.call x2096 "push" [| Ojs.bool_to_js x2097 |])
             | None ->
               ());
             x2096)
         |])

  let (getFloat64 :
        t -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
    =
   fun (x2104 : t)
       ~byteOffset:(x2100 : float)
       ?littleEndian:(x2101 : bool option)
       () ->
    Ojs.float_of_js
      (let x2105 = t_to_js x2104 in
       Ojs.call
         (Ojs.get_prop_ascii x2105 "getFloat64")
         "apply"
         [| x2105
          ; (let x2102 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2102 "push" [| Ojs.float_to_js x2100 |]);
             (match x2101 with
             | Some x2103 ->
               ignore (Ojs.call x2102 "push" [| Ojs.bool_to_js x2103 |])
             | None ->
               ());
             x2102)
         |])

  let (getInt8 : t -> byteOffset:float -> float) =
   fun (x2107 : t) ~byteOffset:(x2106 : float) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x2107) "getInt8" [| Ojs.float_to_js x2106 |])

  let (getInt16 : t -> byteOffset:float -> ?littleEndian:bool -> unit -> float) =
   fun (x2112 : t)
       ~byteOffset:(x2108 : float)
       ?littleEndian:(x2109 : bool option)
       () ->
    Ojs.float_of_js
      (let x2113 = t_to_js x2112 in
       Ojs.call
         (Ojs.get_prop_ascii x2113 "getInt16")
         "apply"
         [| x2113
          ; (let x2110 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2110 "push" [| Ojs.float_to_js x2108 |]);
             (match x2109 with
             | Some x2111 ->
               ignore (Ojs.call x2110 "push" [| Ojs.bool_to_js x2111 |])
             | None ->
               ());
             x2110)
         |])

  let (getInt32 : t -> byteOffset:float -> ?littleEndian:bool -> unit -> float) =
   fun (x2118 : t)
       ~byteOffset:(x2114 : float)
       ?littleEndian:(x2115 : bool option)
       () ->
    Ojs.float_of_js
      (let x2119 = t_to_js x2118 in
       Ojs.call
         (Ojs.get_prop_ascii x2119 "getInt32")
         "apply"
         [| x2119
          ; (let x2116 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2116 "push" [| Ojs.float_to_js x2114 |]);
             (match x2115 with
             | Some x2117 ->
               ignore (Ojs.call x2116 "push" [| Ojs.bool_to_js x2117 |])
             | None ->
               ());
             x2116)
         |])

  let (getUint8 : t -> byteOffset:float -> float) =
   fun (x2121 : t) ~byteOffset:(x2120 : float) ->
    Ojs.float_of_js
      (Ojs.call (t_to_js x2121) "getUint8" [| Ojs.float_to_js x2120 |])

  let (getUint16 : t -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
    =
   fun (x2126 : t)
       ~byteOffset:(x2122 : float)
       ?littleEndian:(x2123 : bool option)
       () ->
    Ojs.float_of_js
      (let x2127 = t_to_js x2126 in
       Ojs.call
         (Ojs.get_prop_ascii x2127 "getUint16")
         "apply"
         [| x2127
          ; (let x2124 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2124 "push" [| Ojs.float_to_js x2122 |]);
             (match x2123 with
             | Some x2125 ->
               ignore (Ojs.call x2124 "push" [| Ojs.bool_to_js x2125 |])
             | None ->
               ());
             x2124)
         |])

  let (getUint32 : t -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
    =
   fun (x2132 : t)
       ~byteOffset:(x2128 : float)
       ?littleEndian:(x2129 : bool option)
       () ->
    Ojs.float_of_js
      (let x2133 = t_to_js x2132 in
       Ojs.call
         (Ojs.get_prop_ascii x2133 "getUint32")
         "apply"
         [| x2133
          ; (let x2130 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2130 "push" [| Ojs.float_to_js x2128 |]);
             (match x2129 with
             | Some x2131 ->
               ignore (Ojs.call x2130 "push" [| Ojs.bool_to_js x2131 |])
             | None ->
               ());
             x2130)
         |])

  let (setFloat32 :
        t
        -> byteOffset:float
        -> value:float
        -> ?littleEndian:bool
        -> unit
        -> unit)
    =
   fun (x2139 : t)
       ~byteOffset:(x2134 : float)
       ~value:(x2135 : float)
       ?littleEndian:(x2136 : bool option)
       () ->
    ignore
      (let x2140 = t_to_js x2139 in
       Ojs.call
         (Ojs.get_prop_ascii x2140 "setFloat32")
         "apply"
         [| x2140
          ; (let x2137 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2137 "push" [| Ojs.float_to_js x2134 |]);
             ignore (Ojs.call x2137 "push" [| Ojs.float_to_js x2135 |]);
             (match x2136 with
             | Some x2138 ->
               ignore (Ojs.call x2137 "push" [| Ojs.bool_to_js x2138 |])
             | None ->
               ());
             x2137)
         |])

  let (setFloat64 :
        t
        -> byteOffset:float
        -> value:float
        -> ?littleEndian:bool
        -> unit
        -> unit)
    =
   fun (x2146 : t)
       ~byteOffset:(x2141 : float)
       ~value:(x2142 : float)
       ?littleEndian:(x2143 : bool option)
       () ->
    ignore
      (let x2147 = t_to_js x2146 in
       Ojs.call
         (Ojs.get_prop_ascii x2147 "setFloat64")
         "apply"
         [| x2147
          ; (let x2144 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2144 "push" [| Ojs.float_to_js x2141 |]);
             ignore (Ojs.call x2144 "push" [| Ojs.float_to_js x2142 |]);
             (match x2143 with
             | Some x2145 ->
               ignore (Ojs.call x2144 "push" [| Ojs.bool_to_js x2145 |])
             | None ->
               ());
             x2144)
         |])

  let (setInt8 : t -> byteOffset:float -> value:float -> unit) =
   fun (x2150 : t) ~byteOffset:(x2148 : float) ~value:(x2149 : float) ->
    ignore
      (Ojs.call
         (t_to_js x2150)
         "setInt8"
         [| Ojs.float_to_js x2148; Ojs.float_to_js x2149 |])

  let (setInt16 :
        t
        -> byteOffset:float
        -> value:float
        -> ?littleEndian:bool
        -> unit
        -> unit)
    =
   fun (x2156 : t)
       ~byteOffset:(x2151 : float)
       ~value:(x2152 : float)
       ?littleEndian:(x2153 : bool option)
       () ->
    ignore
      (let x2157 = t_to_js x2156 in
       Ojs.call
         (Ojs.get_prop_ascii x2157 "setInt16")
         "apply"
         [| x2157
          ; (let x2154 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2154 "push" [| Ojs.float_to_js x2151 |]);
             ignore (Ojs.call x2154 "push" [| Ojs.float_to_js x2152 |]);
             (match x2153 with
             | Some x2155 ->
               ignore (Ojs.call x2154 "push" [| Ojs.bool_to_js x2155 |])
             | None ->
               ());
             x2154)
         |])

  let (setInt32 :
        t
        -> byteOffset:float
        -> value:float
        -> ?littleEndian:bool
        -> unit
        -> unit)
    =
   fun (x2163 : t)
       ~byteOffset:(x2158 : float)
       ~value:(x2159 : float)
       ?littleEndian:(x2160 : bool option)
       () ->
    ignore
      (let x2164 = t_to_js x2163 in
       Ojs.call
         (Ojs.get_prop_ascii x2164 "setInt32")
         "apply"
         [| x2164
          ; (let x2161 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2161 "push" [| Ojs.float_to_js x2158 |]);
             ignore (Ojs.call x2161 "push" [| Ojs.float_to_js x2159 |]);
             (match x2160 with
             | Some x2162 ->
               ignore (Ojs.call x2161 "push" [| Ojs.bool_to_js x2162 |])
             | None ->
               ());
             x2161)
         |])

  let (setUint8 : t -> byteOffset:float -> value:float -> unit) =
   fun (x2167 : t) ~byteOffset:(x2165 : float) ~value:(x2166 : float) ->
    ignore
      (Ojs.call
         (t_to_js x2167)
         "setUint8"
         [| Ojs.float_to_js x2165; Ojs.float_to_js x2166 |])

  let (setUint16 :
        t
        -> byteOffset:float
        -> value:float
        -> ?littleEndian:bool
        -> unit
        -> unit)
    =
   fun (x2173 : t)
       ~byteOffset:(x2168 : float)
       ~value:(x2169 : float)
       ?littleEndian:(x2170 : bool option)
       () ->
    ignore
      (let x2174 = t_to_js x2173 in
       Ojs.call
         (Ojs.get_prop_ascii x2174 "setUint16")
         "apply"
         [| x2174
          ; (let x2171 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2171 "push" [| Ojs.float_to_js x2168 |]);
             ignore (Ojs.call x2171 "push" [| Ojs.float_to_js x2169 |]);
             (match x2170 with
             | Some x2172 ->
               ignore (Ojs.call x2171 "push" [| Ojs.bool_to_js x2172 |])
             | None ->
               ());
             x2171)
         |])

  let (setUint32 :
        t
        -> byteOffset:float
        -> value:float
        -> ?littleEndian:bool
        -> unit
        -> unit)
    =
   fun (x2180 : t)
       ~byteOffset:(x2175 : float)
       ~value:(x2176 : float)
       ?littleEndian:(x2177 : bool option)
       () ->
    ignore
      (let x2181 = t_to_js x2180 in
       Ojs.call
         (Ojs.get_prop_ascii x2181 "setUint32")
         "apply"
         [| x2181
          ; (let x2178 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2178 "push" [| Ojs.float_to_js x2175 |]);
             ignore (Ojs.call x2178 "push" [| Ojs.float_to_js x2176 |]);
             (match x2177 with
             | Some x2179 ->
               ignore (Ojs.call x2178 "push" [| Ojs.bool_to_js x2179 |])
             | None ->
               ());
             x2178)
         |])

  let (create :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?byteLength:float
        -> unit
        -> _DataView)
    =
   fun ~buffer:(x2182 : _ArrayBuffer)
       ?byteOffset:(x2183 : float option)
       ?byteLength:(x2184 : float option)
       () ->
    _DataView_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "DataView")
         (let x2185 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x2185 "push" [| _ArrayBuffer_to_js x2182 |]);
          (match x2183 with
          | Some x2187 ->
            ignore (Ojs.call x2185 "push" [| Ojs.float_to_js x2187 |])
          | None ->
            ());
          (match x2184 with
          | Some x2186 ->
            ignore (Ojs.call x2185 "push" [| Ojs.float_to_js x2186 |])
          | None ->
            ());
          x2185))
end

module DataViewConstructor = struct
  type t = _DataViewConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x2189 : Ojs.t) -> _DataViewConstructor_of_js x2189

  and t_to_js : t -> Ojs.t =
   fun (x2188 : _DataViewConstructor) -> _DataViewConstructor_to_js x2188

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2191 : Ojs.t) -> t_of_js x2191

  and t_0_to_js : t_0 -> Ojs.t = fun (x2190 : t) -> t_to_js x2190

  let (get_prototype : t -> _DataView) =
   fun (x2192 : t) ->
    _DataView_of_js (Ojs.get_prop_ascii (t_to_js x2192) "prototype")

  let (create :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?byteLength:float
        -> unit
        -> _DataView)
    =
   fun (x2199 : t)
       ~buffer:(x2193 : _ArrayBuffer)
       ?byteOffset:(x2194 : float option)
       ?byteLength:(x2195 : float option)
       () ->
    _DataView_of_js
      (Ojs.new_obj_arr
         (t_to_js x2199)
         (let x2196 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x2196 "push" [| _ArrayBuffer_to_js x2193 |]);
          (match x2194 with
          | Some x2198 ->
            ignore (Ojs.call x2196 "push" [| Ojs.float_to_js x2198 |])
          | None ->
            ());
          (match x2195 with
          | Some x2197 ->
            ignore (Ojs.call x2196 "push" [| Ojs.float_to_js x2197 |])
          | None ->
            ());
          x2196))
end

let (dataView : _DataViewConstructor) =
  _DataViewConstructor_of_js (Ojs.get_prop_ascii Ojs.global "DataView")

module Int8Array = struct
  type t = _Int8Array

  let rec t_of_js : Ojs.t -> t = fun (x2201 : Ojs.t) -> _Int8Array_of_js x2201

  and t_to_js : t -> Ojs.t = fun (x2200 : _Int8Array) -> _Int8Array_to_js x2200

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2203 : Ojs.t) -> t_of_js x2203

  and t_0_to_js : t_0 -> Ojs.t = fun (x2202 : t) -> t_to_js x2202

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x2204 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2204) "BYTES_PER_ELEMENT")

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x2205 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x2205) "buffer")

  let (get_byteLength : t -> float) =
   fun (x2206 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2206) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x2207 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2207) "byteOffset")

  let (copyWithin :
        t -> target:float -> start:float -> ?end_:float -> unit -> t)
    =
   fun (x2213 : t)
       ~target:(x2208 : float)
       ~start:(x2209 : float)
       ?end_:(x2210 : float option)
       () ->
    t_of_js
      (let x2214 = t_to_js x2213 in
       Ojs.call
         (Ojs.get_prop_ascii x2214 "copyWithin")
         "apply"
         [| x2214
          ; (let x2211 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2211 "push" [| Ojs.float_to_js x2208 |]);
             ignore (Ojs.call x2211 "push" [| Ojs.float_to_js x2209 |]);
             (match x2210 with
             | Some x2212 ->
               ignore (Ojs.call x2211 "push" [| Ojs.float_to_js x2212 |])
             | None ->
               ());
             x2211)
         |])

  let (every :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x2222 : t)
       ~predicate:(x2215 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x2216 : any option)
       () ->
    Ojs.bool_of_js
      (let x2223 = t_to_js x2222 in
       Ojs.call
         (Ojs.get_prop_ascii x2223 "every")
         "apply"
         [| x2223
          ; (let x2217 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2217
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2219 : Ojs.t) (x2220 : Ojs.t) (x2221 : Ojs.t) ->
                         unknown_to_js
                           (x2215
                              ~value:(Ojs.float_of_js x2219)
                              ~index:(Ojs.float_of_js x2220)
                              ~array:(t_of_js x2221)))
                  |]);
             (match x2216 with
             | Some x2218 ->
               ignore (Ojs.call x2217 "push" [| any_to_js x2218 |])
             | None ->
               ());
             x2217)
         |])

  let (fill : t -> value:float -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x2230 : t)
       ~value:(x2224 : float)
       ?start:(x2225 : float option)
       ?end_:(x2226 : float option)
       () ->
    t_of_js
      (let x2231 = t_to_js x2230 in
       Ojs.call
         (Ojs.get_prop_ascii x2231 "fill")
         "apply"
         [| x2231
          ; (let x2227 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2227 "push" [| Ojs.float_to_js x2224 |]);
             (match x2225 with
             | Some x2229 ->
               ignore (Ojs.call x2227 "push" [| Ojs.float_to_js x2229 |])
             | None ->
               ());
             (match x2226 with
             | Some x2228 ->
               ignore (Ojs.call x2227 "push" [| Ojs.float_to_js x2228 |])
             | None ->
               ());
             x2227)
         |])

  let (filter :
        t
        -> predicate:(value:float -> index:float -> array:t -> any)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x2239 : t)
       ~predicate:(x2232 : value:float -> index:float -> array:t -> any)
       ?thisArg:(x2233 : any option)
       () ->
    t_of_js
      (let x2240 = t_to_js x2239 in
       Ojs.call
         (Ojs.get_prop_ascii x2240 "filter")
         "apply"
         [| x2240
          ; (let x2234 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2234
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2236 : Ojs.t) (x2237 : Ojs.t) (x2238 : Ojs.t) ->
                         any_to_js
                           (x2232
                              ~value:(Ojs.float_of_js x2236)
                              ~index:(Ojs.float_of_js x2237)
                              ~array:(t_of_js x2238)))
                  |]);
             (match x2233 with
             | Some x2235 ->
               ignore (Ojs.call x2234 "push" [| any_to_js x2235 |])
             | None ->
               ());
             x2234)
         |])

  let (find :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float or_undefined)
    =
   fun (x2248 : t)
       ~predicate:(x2241 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x2242 : any option)
       () ->
    or_undefined_of_js
      Ojs.float_of_js
      (let x2249 = t_to_js x2248 in
       Ojs.call
         (Ojs.get_prop_ascii x2249 "find")
         "apply"
         [| x2249
          ; (let x2243 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2243
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2245 : Ojs.t) (x2246 : Ojs.t) (x2247 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x2241
                              ~value:(Ojs.float_of_js x2245)
                              ~index:(Ojs.float_of_js x2246)
                              ~obj:(t_of_js x2247)))
                  |]);
             (match x2242 with
             | Some x2244 ->
               ignore (Ojs.call x2243 "push" [| any_to_js x2244 |])
             | None ->
               ());
             x2243)
         |])

  let (findIndex :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float)
    =
   fun (x2258 : t)
       ~predicate:(x2251 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x2252 : any option)
       () ->
    Ojs.float_of_js
      (let x2259 = t_to_js x2258 in
       Ojs.call
         (Ojs.get_prop_ascii x2259 "findIndex")
         "apply"
         [| x2259
          ; (let x2253 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2253
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2255 : Ojs.t) (x2256 : Ojs.t) (x2257 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x2251
                              ~value:(Ojs.float_of_js x2255)
                              ~index:(Ojs.float_of_js x2256)
                              ~obj:(t_of_js x2257)))
                  |]);
             (match x2252 with
             | Some x2254 ->
               ignore (Ojs.call x2253 "push" [| any_to_js x2254 |])
             | None ->
               ());
             x2253)
         |])

  let (forEach :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x2267 : t)
       ~callbackfn:(x2260 : value:float -> index:float -> array:t -> unit)
       ?thisArg:(x2261 : any option)
       () ->
    ignore
      (let x2268 = t_to_js x2267 in
       Ojs.call
         (Ojs.get_prop_ascii x2268 "forEach")
         "apply"
         [| x2268
          ; (let x2262 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2262
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2264 : Ojs.t) (x2265 : Ojs.t) (x2266 : Ojs.t) ->
                         x2260
                           ~value:(Ojs.float_of_js x2264)
                           ~index:(Ojs.float_of_js x2265)
                           ~array:(t_of_js x2266))
                  |]);
             (match x2261 with
             | Some x2263 ->
               ignore (Ojs.call x2262 "push" [| any_to_js x2263 |])
             | None ->
               ());
             x2262)
         |])

  let (indexOf : t -> searchElement:float -> ?fromIndex:float -> unit -> float) =
   fun (x2273 : t)
       ~searchElement:(x2269 : float)
       ?fromIndex:(x2270 : float option)
       () ->
    Ojs.float_of_js
      (let x2274 = t_to_js x2273 in
       Ojs.call
         (Ojs.get_prop_ascii x2274 "indexOf")
         "apply"
         [| x2274
          ; (let x2271 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2271 "push" [| Ojs.float_to_js x2269 |]);
             (match x2270 with
             | Some x2272 ->
               ignore (Ojs.call x2271 "push" [| Ojs.float_to_js x2272 |])
             | None ->
               ());
             x2271)
         |])

  let (join : t -> ?separator:string -> unit -> string) =
   fun (x2278 : t) ?separator:(x2275 : string option) () ->
    Ojs.string_of_js
      (let x2279 = t_to_js x2278 in
       Ojs.call
         (Ojs.get_prop_ascii x2279 "join")
         "apply"
         [| x2279
          ; (let x2276 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2275 with
             | Some x2277 ->
               ignore (Ojs.call x2276 "push" [| Ojs.string_to_js x2277 |])
             | None ->
               ());
             x2276)
         |])

  let (lastIndexOf :
        t -> searchElement:float -> ?fromIndex:float -> unit -> float)
    =
   fun (x2284 : t)
       ~searchElement:(x2280 : float)
       ?fromIndex:(x2281 : float option)
       () ->
    Ojs.float_of_js
      (let x2285 = t_to_js x2284 in
       Ojs.call
         (Ojs.get_prop_ascii x2285 "lastIndexOf")
         "apply"
         [| x2285
          ; (let x2282 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2282 "push" [| Ojs.float_to_js x2280 |]);
             (match x2281 with
             | Some x2283 ->
               ignore (Ojs.call x2282 "push" [| Ojs.float_to_js x2283 |])
             | None ->
               ());
             x2282)
         |])

  let (get_length : t -> float) =
   fun (x2286 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2286) "length")

  let (map :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> float)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x2294 : t)
       ~callbackfn:(x2287 : value:float -> index:float -> array:t -> float)
       ?thisArg:(x2288 : any option)
       () ->
    t_of_js
      (let x2295 = t_to_js x2294 in
       Ojs.call
         (Ojs.get_prop_ascii x2295 "map")
         "apply"
         [| x2295
          ; (let x2289 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2289
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2291 : Ojs.t) (x2292 : Ojs.t) (x2293 : Ojs.t) ->
                         Ojs.float_to_js
                           (x2287
                              ~value:(Ojs.float_of_js x2291)
                              ~index:(Ojs.float_of_js x2292)
                              ~array:(t_of_js x2293)))
                  |]);
             (match x2288 with
             | Some x2290 ->
               ignore (Ojs.call x2289 "push" [| any_to_js x2290 |])
             | None ->
               ());
             x2289)
         |])

  let (reduce :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x2301 : t)
       ~callbackfn:
         (x2296 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2301)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x2297 : Ojs.t)
                (x2298 : Ojs.t)
                (x2299 : Ojs.t)
                (x2300 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2296
                     ~previousValue:(Ojs.float_of_js x2297)
                     ~currentValue:(Ojs.float_of_js x2298)
                     ~currentIndex:(Ojs.float_of_js x2299)
                     ~array:(t_of_js x2300)))
         |])

  let (reduce' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x2308 : t)
       ~callbackfn:
         (x2302 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x2307 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2308)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x2303 : Ojs.t)
                (x2304 : Ojs.t)
                (x2305 : Ojs.t)
                (x2306 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2302
                     ~previousValue:(Ojs.float_of_js x2303)
                     ~currentValue:(Ojs.float_of_js x2304)
                     ~currentIndex:(Ojs.float_of_js x2305)
                     ~array:(t_of_js x2306)))
          ; Ojs.float_to_js x2307
         |])

  let (reduce'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x2315 : t)
       ~callbackfn:
         (x2309 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x2314 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x2315)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x2310 : Ojs.t)
                (x2311 : Ojs.t)
                (x2312 : Ojs.t)
                (x2313 : Ojs.t)
              ->
                Obj.magic
                  (x2309
                     ~previousValue:(Obj.magic x2310)
                     ~currentValue:(Ojs.float_of_js x2311)
                     ~currentIndex:(Ojs.float_of_js x2312)
                     ~array:(t_of_js x2313)))
          ; Obj.magic x2314
         |])

  let (reduceRight :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x2321 : t)
       ~callbackfn:
         (x2316 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2321)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x2317 : Ojs.t)
                (x2318 : Ojs.t)
                (x2319 : Ojs.t)
                (x2320 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2316
                     ~previousValue:(Ojs.float_of_js x2317)
                     ~currentValue:(Ojs.float_of_js x2318)
                     ~currentIndex:(Ojs.float_of_js x2319)
                     ~array:(t_of_js x2320)))
         |])

  let (reduceRight' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x2328 : t)
       ~callbackfn:
         (x2322 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x2327 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2328)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x2323 : Ojs.t)
                (x2324 : Ojs.t)
                (x2325 : Ojs.t)
                (x2326 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2322
                     ~previousValue:(Ojs.float_of_js x2323)
                     ~currentValue:(Ojs.float_of_js x2324)
                     ~currentIndex:(Ojs.float_of_js x2325)
                     ~array:(t_of_js x2326)))
          ; Ojs.float_to_js x2327
         |])

  let (reduceRight'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x2335 : t)
       ~callbackfn:
         (x2329 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x2334 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x2335)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x2330 : Ojs.t)
                (x2331 : Ojs.t)
                (x2332 : Ojs.t)
                (x2333 : Ojs.t)
              ->
                Obj.magic
                  (x2329
                     ~previousValue:(Obj.magic x2330)
                     ~currentValue:(Ojs.float_of_js x2331)
                     ~currentIndex:(Ojs.float_of_js x2332)
                     ~array:(t_of_js x2333)))
          ; Obj.magic x2334
         |])

  let (reverse : t -> t) =
   fun (x2336 : t) -> t_of_js (Ojs.call (t_to_js x2336) "reverse" [||])

  let (set_ : t -> array:float _Array -> ?offset:float -> unit -> unit) =
   fun (x2342 : t)
       ~array:(x2337 : float _Array)
       ?offset:(x2338 : float option)
       () ->
    ignore
      (let x2343 = t_to_js x2342 in
       Ojs.call
         (Ojs.get_prop_ascii x2343 "set")
         "apply"
         [| x2343
          ; (let x2339 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x2339 "push" [| _Array_to_js Ojs.float_to_js x2337 |]);
             (match x2338 with
             | Some x2340 ->
               ignore (Ojs.call x2339 "push" [| Ojs.float_to_js x2340 |])
             | None ->
               ());
             x2339)
         |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x2349 : t) ?start:(x2344 : float option) ?end_:(x2345 : float option) () ->
    t_of_js
      (let x2350 = t_to_js x2349 in
       Ojs.call
         (Ojs.get_prop_ascii x2350 "slice")
         "apply"
         [| x2350
          ; (let x2346 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2344 with
             | Some x2348 ->
               ignore (Ojs.call x2346 "push" [| Ojs.float_to_js x2348 |])
             | None ->
               ());
             (match x2345 with
             | Some x2347 ->
               ignore (Ojs.call x2346 "push" [| Ojs.float_to_js x2347 |])
             | None ->
               ());
             x2346)
         |])

  let (some :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x2358 : t)
       ~predicate:(x2351 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x2352 : any option)
       () ->
    Ojs.bool_of_js
      (let x2359 = t_to_js x2358 in
       Ojs.call
         (Ojs.get_prop_ascii x2359 "some")
         "apply"
         [| x2359
          ; (let x2353 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2353
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2355 : Ojs.t) (x2356 : Ojs.t) (x2357 : Ojs.t) ->
                         unknown_to_js
                           (x2351
                              ~value:(Ojs.float_of_js x2355)
                              ~index:(Ojs.float_of_js x2356)
                              ~array:(t_of_js x2357)))
                  |]);
             (match x2352 with
             | Some x2354 ->
               ignore (Ojs.call x2353 "push" [| any_to_js x2354 |])
             | None ->
               ());
             x2353)
         |])

  let (sort : t -> ?compareFn:(a:float -> b:float -> float) -> unit -> t) =
   fun (x2365 : t) ?compareFn:(x2360 : (a:float -> b:float -> float) option) () ->
    t_of_js
      (let x2366 = t_to_js x2365 in
       Ojs.call
         (Ojs.get_prop_ascii x2366 "sort")
         "apply"
         [| x2366
          ; (let x2361 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2360 with
             | Some x2362 ->
               ignore
                 (Ojs.call
                    x2361
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x2363 : Ojs.t) (x2364 : Ojs.t) ->
                           Ojs.float_to_js
                             (x2362
                                ~a:(Ojs.float_of_js x2363)
                                ~b:(Ojs.float_of_js x2364)))
                    |])
             | None ->
               ());
             x2361)
         |])

  let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
   fun (x2372 : t)
       ?begin_:(x2367 : float option)
       ?end_:(x2368 : float option)
       () ->
    t_of_js
      (let x2373 = t_to_js x2372 in
       Ojs.call
         (Ojs.get_prop_ascii x2373 "subarray")
         "apply"
         [| x2373
          ; (let x2369 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2367 with
             | Some x2371 ->
               ignore (Ojs.call x2369 "push" [| Ojs.float_to_js x2371 |])
             | None ->
               ());
             (match x2368 with
             | Some x2370 ->
               ignore (Ojs.call x2369 "push" [| Ojs.float_to_js x2370 |])
             | None ->
               ());
             x2369)
         |])

  let (toLocaleString : t -> string) =
   fun (x2374 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x2374) "toLocaleString" [||])

  let (toString : t -> string) =
   fun (x2375 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x2375) "toString" [||])

  let (valueOf : t -> t) =
   fun (x2376 : t) -> t_of_js (Ojs.call (t_to_js x2376) "valueOf" [||])

  let (get : t -> float -> float) =
   fun (x2377 : t) (x2378 : float) ->
    Ojs.float_of_js (Ojs.get_prop (t_to_js x2377) (Ojs.float_to_js x2378))

  let (set : t -> float -> float -> unit) =
   fun (x2379 : t) (x2380 : float) (x2381 : float) ->
    Ojs.set_prop (t_to_js x2379) (Ojs.float_to_js x2380) (Ojs.float_to_js x2381)

  let (create : length:float -> _Int8Array) =
   fun ~length:(x2382 : float) ->
    _Int8Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Int8Array")
         [| Ojs.float_to_js x2382 |])

  let (create' : array:(_ArrayBuffer, float _Array) union2 -> _Int8Array) =
   fun ~array:(x2383 : (_ArrayBuffer, float _Array) union2) ->
    _Int8Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Int8Array")
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x2385 : float _Array) -> _Array_to_js Ojs.float_to_js x2385)
              x2383
         |])

  let (create'' :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Int8Array)
    =
   fun ~buffer:(x2387 : _ArrayBuffer)
       ?byteOffset:(x2388 : float option)
       ?length:(x2389 : float option)
       () ->
    _Int8Array_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Int8Array")
         (let x2390 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x2390 "push" [| _ArrayBuffer_to_js x2387 |]);
          (match x2388 with
          | Some x2392 ->
            ignore (Ojs.call x2390 "push" [| Ojs.float_to_js x2392 |])
          | None ->
            ());
          (match x2389 with
          | Some x2391 ->
            ignore (Ojs.call x2390 "push" [| Ojs.float_to_js x2391 |])
          | None ->
            ());
          x2390))

  let (get_BYTES_PER_ELEMENT : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Int8Array")
         "BYTES_PER_ELEMENT")

  let (of_ : items:float list -> _Int8Array) =
   fun ~items:(x2393 : float list) ->
    _Int8Array_of_js
      (let x2396 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
       Ojs.call
         (Ojs.get_prop_ascii x2396 "of")
         "apply"
         [| x2396
          ; (let x2394 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x2395 : float) ->
                 ignore (Ojs.call x2394 "push" [| Ojs.float_to_js x2395 |]))
               x2393;
             x2394)
         |])

  let (from : array:float _Array -> _Int8Array) =
   fun ~array:(x2397 : float _Array) ->
    _Int8Array_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Int8Array")
         "from"
         [| _Array_to_js Ojs.float_to_js x2397 |])

  let (from' :
        array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Int8Array)
    =
   fun ~array:(x2399 : 'T _Array)
       ~mapfn:(x2400 : v:'T -> k:float -> float)
       ?thisArg:(x2401 : any option)
       () ->
    _Int8Array_of_js
      (let x2407 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
       Ojs.call
         (Ojs.get_prop_ascii x2407 "from")
         "apply"
         [| x2407
          ; (let x2402 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2402 "push" [| _Array_to_js Obj.magic x2399 |]);
             ignore
               (Ojs.call
                  x2402
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x2404 : Ojs.t) (x2405 : Ojs.t) ->
                         Ojs.float_to_js
                           (x2400
                              ~v:(Obj.magic x2404)
                              ~k:(Ojs.float_of_js x2405)))
                  |]);
             (match x2401 with
             | Some x2403 ->
               ignore (Ojs.call x2402 "push" [| any_to_js x2403 |])
             | None ->
               ());
             x2402)
         |])
end

module Int8ArrayConstructor = struct
  type t = _Int8ArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x2409 : Ojs.t) -> _Int8ArrayConstructor_of_js x2409

  and t_to_js : t -> Ojs.t =
   fun (x2408 : _Int8ArrayConstructor) -> _Int8ArrayConstructor_to_js x2408

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2411 : Ojs.t) -> t_of_js x2411

  and t_0_to_js : t_0 -> Ojs.t = fun (x2410 : t) -> t_to_js x2410

  let (get_prototype : t -> _Int8Array) =
   fun (x2412 : t) ->
    _Int8Array_of_js (Ojs.get_prop_ascii (t_to_js x2412) "prototype")

  let (create : t -> length:float -> _Int8Array) =
   fun (x2414 : t) ~length:(x2413 : float) ->
    _Int8Array_of_js (Ojs.new_obj (t_to_js x2414) [| Ojs.float_to_js x2413 |])

  let (create' : t -> array:(_ArrayBuffer, float _Array) union2 -> _Int8Array) =
   fun (x2419 : t) ~array:(x2415 : (_ArrayBuffer, float _Array) union2) ->
    _Int8Array_of_js
      (Ojs.new_obj
         (t_to_js x2419)
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x2417 : float _Array) -> _Array_to_js Ojs.float_to_js x2417)
              x2415
         |])

  let (create'' :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Int8Array)
    =
   fun (x2426 : t)
       ~buffer:(x2420 : _ArrayBuffer)
       ?byteOffset:(x2421 : float option)
       ?length:(x2422 : float option)
       () ->
    _Int8Array_of_js
      (Ojs.new_obj_arr
         (t_to_js x2426)
         (let x2423 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x2423 "push" [| _ArrayBuffer_to_js x2420 |]);
          (match x2421 with
          | Some x2425 ->
            ignore (Ojs.call x2423 "push" [| Ojs.float_to_js x2425 |])
          | None ->
            ());
          (match x2422 with
          | Some x2424 ->
            ignore (Ojs.call x2423 "push" [| Ojs.float_to_js x2424 |])
          | None ->
            ());
          x2423))

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x2427 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2427) "BYTES_PER_ELEMENT")

  let (of_ : t -> items:float list -> _Int8Array) =
   fun (x2431 : t) ~items:(x2428 : float list) ->
    _Int8Array_of_js
      (let x2432 = t_to_js x2431 in
       Ojs.call
         (Ojs.get_prop_ascii x2432 "of")
         "apply"
         [| x2432
          ; (let x2429 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x2430 : float) ->
                 ignore (Ojs.call x2429 "push" [| Ojs.float_to_js x2430 |]))
               x2428;
             x2429)
         |])

  let (from : t -> array:float _Array -> _Int8Array) =
   fun (x2435 : t) ~array:(x2433 : float _Array) ->
    _Int8Array_of_js
      (Ojs.call (t_to_js x2435) "from" [| _Array_to_js Ojs.float_to_js x2433 |])

  let (from' :
        t
        -> array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Int8Array)
    =
   fun (x2444 : t)
       ~array:(x2436 : 'T _Array)
       ~mapfn:(x2437 : v:'T -> k:float -> float)
       ?thisArg:(x2438 : any option)
       () ->
    _Int8Array_of_js
      (let x2445 = t_to_js x2444 in
       Ojs.call
         (Ojs.get_prop_ascii x2445 "from")
         "apply"
         [| x2445
          ; (let x2439 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2439 "push" [| _Array_to_js Obj.magic x2436 |]);
             ignore
               (Ojs.call
                  x2439
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x2441 : Ojs.t) (x2442 : Ojs.t) ->
                         Ojs.float_to_js
                           (x2437
                              ~v:(Obj.magic x2441)
                              ~k:(Ojs.float_of_js x2442)))
                  |]);
             (match x2438 with
             | Some x2440 ->
               ignore (Ojs.call x2439 "push" [| any_to_js x2440 |])
             | None ->
               ());
             x2439)
         |])
end

let (int8Array : _Int8ArrayConstructor) =
  _Int8ArrayConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Int8Array")

module Uint8Array = struct
  type t = _Uint8Array

  let rec t_of_js : Ojs.t -> t = fun (x2447 : Ojs.t) -> _Uint8Array_of_js x2447

  and t_to_js : t -> Ojs.t =
   fun (x2446 : _Uint8Array) -> _Uint8Array_to_js x2446

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2449 : Ojs.t) -> t_of_js x2449

  and t_0_to_js : t_0 -> Ojs.t = fun (x2448 : t) -> t_to_js x2448

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x2450 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2450) "BYTES_PER_ELEMENT")

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x2451 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x2451) "buffer")

  let (get_byteLength : t -> float) =
   fun (x2452 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2452) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x2453 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2453) "byteOffset")

  let (copyWithin :
        t -> target:float -> start:float -> ?end_:float -> unit -> t)
    =
   fun (x2459 : t)
       ~target:(x2454 : float)
       ~start:(x2455 : float)
       ?end_:(x2456 : float option)
       () ->
    t_of_js
      (let x2460 = t_to_js x2459 in
       Ojs.call
         (Ojs.get_prop_ascii x2460 "copyWithin")
         "apply"
         [| x2460
          ; (let x2457 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2457 "push" [| Ojs.float_to_js x2454 |]);
             ignore (Ojs.call x2457 "push" [| Ojs.float_to_js x2455 |]);
             (match x2456 with
             | Some x2458 ->
               ignore (Ojs.call x2457 "push" [| Ojs.float_to_js x2458 |])
             | None ->
               ());
             x2457)
         |])

  let (every :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x2468 : t)
       ~predicate:(x2461 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x2462 : any option)
       () ->
    Ojs.bool_of_js
      (let x2469 = t_to_js x2468 in
       Ojs.call
         (Ojs.get_prop_ascii x2469 "every")
         "apply"
         [| x2469
          ; (let x2463 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2463
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2465 : Ojs.t) (x2466 : Ojs.t) (x2467 : Ojs.t) ->
                         unknown_to_js
                           (x2461
                              ~value:(Ojs.float_of_js x2465)
                              ~index:(Ojs.float_of_js x2466)
                              ~array:(t_of_js x2467)))
                  |]);
             (match x2462 with
             | Some x2464 ->
               ignore (Ojs.call x2463 "push" [| any_to_js x2464 |])
             | None ->
               ());
             x2463)
         |])

  let (fill : t -> value:float -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x2476 : t)
       ~value:(x2470 : float)
       ?start:(x2471 : float option)
       ?end_:(x2472 : float option)
       () ->
    t_of_js
      (let x2477 = t_to_js x2476 in
       Ojs.call
         (Ojs.get_prop_ascii x2477 "fill")
         "apply"
         [| x2477
          ; (let x2473 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2473 "push" [| Ojs.float_to_js x2470 |]);
             (match x2471 with
             | Some x2475 ->
               ignore (Ojs.call x2473 "push" [| Ojs.float_to_js x2475 |])
             | None ->
               ());
             (match x2472 with
             | Some x2474 ->
               ignore (Ojs.call x2473 "push" [| Ojs.float_to_js x2474 |])
             | None ->
               ());
             x2473)
         |])

  let (filter :
        t
        -> predicate:(value:float -> index:float -> array:t -> any)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x2485 : t)
       ~predicate:(x2478 : value:float -> index:float -> array:t -> any)
       ?thisArg:(x2479 : any option)
       () ->
    t_of_js
      (let x2486 = t_to_js x2485 in
       Ojs.call
         (Ojs.get_prop_ascii x2486 "filter")
         "apply"
         [| x2486
          ; (let x2480 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2480
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2482 : Ojs.t) (x2483 : Ojs.t) (x2484 : Ojs.t) ->
                         any_to_js
                           (x2478
                              ~value:(Ojs.float_of_js x2482)
                              ~index:(Ojs.float_of_js x2483)
                              ~array:(t_of_js x2484)))
                  |]);
             (match x2479 with
             | Some x2481 ->
               ignore (Ojs.call x2480 "push" [| any_to_js x2481 |])
             | None ->
               ());
             x2480)
         |])

  let (find :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float or_undefined)
    =
   fun (x2494 : t)
       ~predicate:(x2487 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x2488 : any option)
       () ->
    or_undefined_of_js
      Ojs.float_of_js
      (let x2495 = t_to_js x2494 in
       Ojs.call
         (Ojs.get_prop_ascii x2495 "find")
         "apply"
         [| x2495
          ; (let x2489 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2489
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2491 : Ojs.t) (x2492 : Ojs.t) (x2493 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x2487
                              ~value:(Ojs.float_of_js x2491)
                              ~index:(Ojs.float_of_js x2492)
                              ~obj:(t_of_js x2493)))
                  |]);
             (match x2488 with
             | Some x2490 ->
               ignore (Ojs.call x2489 "push" [| any_to_js x2490 |])
             | None ->
               ());
             x2489)
         |])

  let (findIndex :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float)
    =
   fun (x2504 : t)
       ~predicate:(x2497 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x2498 : any option)
       () ->
    Ojs.float_of_js
      (let x2505 = t_to_js x2504 in
       Ojs.call
         (Ojs.get_prop_ascii x2505 "findIndex")
         "apply"
         [| x2505
          ; (let x2499 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2499
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2501 : Ojs.t) (x2502 : Ojs.t) (x2503 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x2497
                              ~value:(Ojs.float_of_js x2501)
                              ~index:(Ojs.float_of_js x2502)
                              ~obj:(t_of_js x2503)))
                  |]);
             (match x2498 with
             | Some x2500 ->
               ignore (Ojs.call x2499 "push" [| any_to_js x2500 |])
             | None ->
               ());
             x2499)
         |])

  let (forEach :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x2513 : t)
       ~callbackfn:(x2506 : value:float -> index:float -> array:t -> unit)
       ?thisArg:(x2507 : any option)
       () ->
    ignore
      (let x2514 = t_to_js x2513 in
       Ojs.call
         (Ojs.get_prop_ascii x2514 "forEach")
         "apply"
         [| x2514
          ; (let x2508 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2508
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2510 : Ojs.t) (x2511 : Ojs.t) (x2512 : Ojs.t) ->
                         x2506
                           ~value:(Ojs.float_of_js x2510)
                           ~index:(Ojs.float_of_js x2511)
                           ~array:(t_of_js x2512))
                  |]);
             (match x2507 with
             | Some x2509 ->
               ignore (Ojs.call x2508 "push" [| any_to_js x2509 |])
             | None ->
               ());
             x2508)
         |])

  let (indexOf : t -> searchElement:float -> ?fromIndex:float -> unit -> float) =
   fun (x2519 : t)
       ~searchElement:(x2515 : float)
       ?fromIndex:(x2516 : float option)
       () ->
    Ojs.float_of_js
      (let x2520 = t_to_js x2519 in
       Ojs.call
         (Ojs.get_prop_ascii x2520 "indexOf")
         "apply"
         [| x2520
          ; (let x2517 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2517 "push" [| Ojs.float_to_js x2515 |]);
             (match x2516 with
             | Some x2518 ->
               ignore (Ojs.call x2517 "push" [| Ojs.float_to_js x2518 |])
             | None ->
               ());
             x2517)
         |])

  let (join : t -> ?separator:string -> unit -> string) =
   fun (x2524 : t) ?separator:(x2521 : string option) () ->
    Ojs.string_of_js
      (let x2525 = t_to_js x2524 in
       Ojs.call
         (Ojs.get_prop_ascii x2525 "join")
         "apply"
         [| x2525
          ; (let x2522 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2521 with
             | Some x2523 ->
               ignore (Ojs.call x2522 "push" [| Ojs.string_to_js x2523 |])
             | None ->
               ());
             x2522)
         |])

  let (lastIndexOf :
        t -> searchElement:float -> ?fromIndex:float -> unit -> float)
    =
   fun (x2530 : t)
       ~searchElement:(x2526 : float)
       ?fromIndex:(x2527 : float option)
       () ->
    Ojs.float_of_js
      (let x2531 = t_to_js x2530 in
       Ojs.call
         (Ojs.get_prop_ascii x2531 "lastIndexOf")
         "apply"
         [| x2531
          ; (let x2528 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2528 "push" [| Ojs.float_to_js x2526 |]);
             (match x2527 with
             | Some x2529 ->
               ignore (Ojs.call x2528 "push" [| Ojs.float_to_js x2529 |])
             | None ->
               ());
             x2528)
         |])

  let (get_length : t -> float) =
   fun (x2532 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2532) "length")

  let (map :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> float)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x2540 : t)
       ~callbackfn:(x2533 : value:float -> index:float -> array:t -> float)
       ?thisArg:(x2534 : any option)
       () ->
    t_of_js
      (let x2541 = t_to_js x2540 in
       Ojs.call
         (Ojs.get_prop_ascii x2541 "map")
         "apply"
         [| x2541
          ; (let x2535 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2535
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2537 : Ojs.t) (x2538 : Ojs.t) (x2539 : Ojs.t) ->
                         Ojs.float_to_js
                           (x2533
                              ~value:(Ojs.float_of_js x2537)
                              ~index:(Ojs.float_of_js x2538)
                              ~array:(t_of_js x2539)))
                  |]);
             (match x2534 with
             | Some x2536 ->
               ignore (Ojs.call x2535 "push" [| any_to_js x2536 |])
             | None ->
               ());
             x2535)
         |])

  let (reduce :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x2547 : t)
       ~callbackfn:
         (x2542 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2547)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x2543 : Ojs.t)
                (x2544 : Ojs.t)
                (x2545 : Ojs.t)
                (x2546 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2542
                     ~previousValue:(Ojs.float_of_js x2543)
                     ~currentValue:(Ojs.float_of_js x2544)
                     ~currentIndex:(Ojs.float_of_js x2545)
                     ~array:(t_of_js x2546)))
         |])

  let (reduce' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x2554 : t)
       ~callbackfn:
         (x2548 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x2553 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2554)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x2549 : Ojs.t)
                (x2550 : Ojs.t)
                (x2551 : Ojs.t)
                (x2552 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2548
                     ~previousValue:(Ojs.float_of_js x2549)
                     ~currentValue:(Ojs.float_of_js x2550)
                     ~currentIndex:(Ojs.float_of_js x2551)
                     ~array:(t_of_js x2552)))
          ; Ojs.float_to_js x2553
         |])

  let (reduce'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x2561 : t)
       ~callbackfn:
         (x2555 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x2560 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x2561)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x2556 : Ojs.t)
                (x2557 : Ojs.t)
                (x2558 : Ojs.t)
                (x2559 : Ojs.t)
              ->
                Obj.magic
                  (x2555
                     ~previousValue:(Obj.magic x2556)
                     ~currentValue:(Ojs.float_of_js x2557)
                     ~currentIndex:(Ojs.float_of_js x2558)
                     ~array:(t_of_js x2559)))
          ; Obj.magic x2560
         |])

  let (reduceRight :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x2567 : t)
       ~callbackfn:
         (x2562 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2567)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x2563 : Ojs.t)
                (x2564 : Ojs.t)
                (x2565 : Ojs.t)
                (x2566 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2562
                     ~previousValue:(Ojs.float_of_js x2563)
                     ~currentValue:(Ojs.float_of_js x2564)
                     ~currentIndex:(Ojs.float_of_js x2565)
                     ~array:(t_of_js x2566)))
         |])

  let (reduceRight' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x2574 : t)
       ~callbackfn:
         (x2568 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x2573 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2574)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x2569 : Ojs.t)
                (x2570 : Ojs.t)
                (x2571 : Ojs.t)
                (x2572 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2568
                     ~previousValue:(Ojs.float_of_js x2569)
                     ~currentValue:(Ojs.float_of_js x2570)
                     ~currentIndex:(Ojs.float_of_js x2571)
                     ~array:(t_of_js x2572)))
          ; Ojs.float_to_js x2573
         |])

  let (reduceRight'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x2581 : t)
       ~callbackfn:
         (x2575 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x2580 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x2581)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x2576 : Ojs.t)
                (x2577 : Ojs.t)
                (x2578 : Ojs.t)
                (x2579 : Ojs.t)
              ->
                Obj.magic
                  (x2575
                     ~previousValue:(Obj.magic x2576)
                     ~currentValue:(Ojs.float_of_js x2577)
                     ~currentIndex:(Ojs.float_of_js x2578)
                     ~array:(t_of_js x2579)))
          ; Obj.magic x2580
         |])

  let (reverse : t -> t) =
   fun (x2582 : t) -> t_of_js (Ojs.call (t_to_js x2582) "reverse" [||])

  let (set_ : t -> array:float _Array -> ?offset:float -> unit -> unit) =
   fun (x2588 : t)
       ~array:(x2583 : float _Array)
       ?offset:(x2584 : float option)
       () ->
    ignore
      (let x2589 = t_to_js x2588 in
       Ojs.call
         (Ojs.get_prop_ascii x2589 "set")
         "apply"
         [| x2589
          ; (let x2585 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x2585 "push" [| _Array_to_js Ojs.float_to_js x2583 |]);
             (match x2584 with
             | Some x2586 ->
               ignore (Ojs.call x2585 "push" [| Ojs.float_to_js x2586 |])
             | None ->
               ());
             x2585)
         |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x2595 : t) ?start:(x2590 : float option) ?end_:(x2591 : float option) () ->
    t_of_js
      (let x2596 = t_to_js x2595 in
       Ojs.call
         (Ojs.get_prop_ascii x2596 "slice")
         "apply"
         [| x2596
          ; (let x2592 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2590 with
             | Some x2594 ->
               ignore (Ojs.call x2592 "push" [| Ojs.float_to_js x2594 |])
             | None ->
               ());
             (match x2591 with
             | Some x2593 ->
               ignore (Ojs.call x2592 "push" [| Ojs.float_to_js x2593 |])
             | None ->
               ());
             x2592)
         |])

  let (some :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x2604 : t)
       ~predicate:(x2597 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x2598 : any option)
       () ->
    Ojs.bool_of_js
      (let x2605 = t_to_js x2604 in
       Ojs.call
         (Ojs.get_prop_ascii x2605 "some")
         "apply"
         [| x2605
          ; (let x2599 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2599
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2601 : Ojs.t) (x2602 : Ojs.t) (x2603 : Ojs.t) ->
                         unknown_to_js
                           (x2597
                              ~value:(Ojs.float_of_js x2601)
                              ~index:(Ojs.float_of_js x2602)
                              ~array:(t_of_js x2603)))
                  |]);
             (match x2598 with
             | Some x2600 ->
               ignore (Ojs.call x2599 "push" [| any_to_js x2600 |])
             | None ->
               ());
             x2599)
         |])

  let (sort : t -> ?compareFn:(a:float -> b:float -> float) -> unit -> t) =
   fun (x2611 : t) ?compareFn:(x2606 : (a:float -> b:float -> float) option) () ->
    t_of_js
      (let x2612 = t_to_js x2611 in
       Ojs.call
         (Ojs.get_prop_ascii x2612 "sort")
         "apply"
         [| x2612
          ; (let x2607 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2606 with
             | Some x2608 ->
               ignore
                 (Ojs.call
                    x2607
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x2609 : Ojs.t) (x2610 : Ojs.t) ->
                           Ojs.float_to_js
                             (x2608
                                ~a:(Ojs.float_of_js x2609)
                                ~b:(Ojs.float_of_js x2610)))
                    |])
             | None ->
               ());
             x2607)
         |])

  let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
   fun (x2618 : t)
       ?begin_:(x2613 : float option)
       ?end_:(x2614 : float option)
       () ->
    t_of_js
      (let x2619 = t_to_js x2618 in
       Ojs.call
         (Ojs.get_prop_ascii x2619 "subarray")
         "apply"
         [| x2619
          ; (let x2615 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2613 with
             | Some x2617 ->
               ignore (Ojs.call x2615 "push" [| Ojs.float_to_js x2617 |])
             | None ->
               ());
             (match x2614 with
             | Some x2616 ->
               ignore (Ojs.call x2615 "push" [| Ojs.float_to_js x2616 |])
             | None ->
               ());
             x2615)
         |])

  let (toLocaleString : t -> string) =
   fun (x2620 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x2620) "toLocaleString" [||])

  let (toString : t -> string) =
   fun (x2621 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x2621) "toString" [||])

  let (valueOf : t -> t) =
   fun (x2622 : t) -> t_of_js (Ojs.call (t_to_js x2622) "valueOf" [||])

  let (get : t -> float -> float) =
   fun (x2623 : t) (x2624 : float) ->
    Ojs.float_of_js (Ojs.get_prop (t_to_js x2623) (Ojs.float_to_js x2624))

  let (set : t -> float -> float -> unit) =
   fun (x2625 : t) (x2626 : float) (x2627 : float) ->
    Ojs.set_prop (t_to_js x2625) (Ojs.float_to_js x2626) (Ojs.float_to_js x2627)

  let (create : length:float -> _Uint8Array) =
   fun ~length:(x2628 : float) ->
    _Uint8Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Uint8Array")
         [| Ojs.float_to_js x2628 |])

  let (create' : array:(_ArrayBuffer, float _Array) union2 -> _Uint8Array) =
   fun ~array:(x2629 : (_ArrayBuffer, float _Array) union2) ->
    _Uint8Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Uint8Array")
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x2631 : float _Array) -> _Array_to_js Ojs.float_to_js x2631)
              x2629
         |])

  let (create'' :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Uint8Array)
    =
   fun ~buffer:(x2633 : _ArrayBuffer)
       ?byteOffset:(x2634 : float option)
       ?length:(x2635 : float option)
       () ->
    _Uint8Array_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Uint8Array")
         (let x2636 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x2636 "push" [| _ArrayBuffer_to_js x2633 |]);
          (match x2634 with
          | Some x2638 ->
            ignore (Ojs.call x2636 "push" [| Ojs.float_to_js x2638 |])
          | None ->
            ());
          (match x2635 with
          | Some x2637 ->
            ignore (Ojs.call x2636 "push" [| Ojs.float_to_js x2637 |])
          | None ->
            ());
          x2636))

  let (get_BYTES_PER_ELEMENT : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Uint8Array")
         "BYTES_PER_ELEMENT")

  let (of_ : items:float list -> _Uint8Array) =
   fun ~items:(x2639 : float list) ->
    _Uint8Array_of_js
      (let x2642 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
       Ojs.call
         (Ojs.get_prop_ascii x2642 "of")
         "apply"
         [| x2642
          ; (let x2640 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x2641 : float) ->
                 ignore (Ojs.call x2640 "push" [| Ojs.float_to_js x2641 |]))
               x2639;
             x2640)
         |])

  let (from : array:float _Array -> _Uint8Array) =
   fun ~array:(x2643 : float _Array) ->
    _Uint8Array_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Uint8Array")
         "from"
         [| _Array_to_js Ojs.float_to_js x2643 |])

  let (from' :
        array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Uint8Array)
    =
   fun ~array:(x2645 : 'T _Array)
       ~mapfn:(x2646 : v:'T -> k:float -> float)
       ?thisArg:(x2647 : any option)
       () ->
    _Uint8Array_of_js
      (let x2653 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
       Ojs.call
         (Ojs.get_prop_ascii x2653 "from")
         "apply"
         [| x2653
          ; (let x2648 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2648 "push" [| _Array_to_js Obj.magic x2645 |]);
             ignore
               (Ojs.call
                  x2648
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x2650 : Ojs.t) (x2651 : Ojs.t) ->
                         Ojs.float_to_js
                           (x2646
                              ~v:(Obj.magic x2650)
                              ~k:(Ojs.float_of_js x2651)))
                  |]);
             (match x2647 with
             | Some x2649 ->
               ignore (Ojs.call x2648 "push" [| any_to_js x2649 |])
             | None ->
               ());
             x2648)
         |])
end

module Uint8ArrayConstructor = struct
  type t = _Uint8ArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x2655 : Ojs.t) -> _Uint8ArrayConstructor_of_js x2655

  and t_to_js : t -> Ojs.t =
   fun (x2654 : _Uint8ArrayConstructor) -> _Uint8ArrayConstructor_to_js x2654

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2657 : Ojs.t) -> t_of_js x2657

  and t_0_to_js : t_0 -> Ojs.t = fun (x2656 : t) -> t_to_js x2656

  let (get_prototype : t -> _Uint8Array) =
   fun (x2658 : t) ->
    _Uint8Array_of_js (Ojs.get_prop_ascii (t_to_js x2658) "prototype")

  let (create : t -> length:float -> _Uint8Array) =
   fun (x2660 : t) ~length:(x2659 : float) ->
    _Uint8Array_of_js (Ojs.new_obj (t_to_js x2660) [| Ojs.float_to_js x2659 |])

  let (create' : t -> array:(_ArrayBuffer, float _Array) union2 -> _Uint8Array) =
   fun (x2665 : t) ~array:(x2661 : (_ArrayBuffer, float _Array) union2) ->
    _Uint8Array_of_js
      (Ojs.new_obj
         (t_to_js x2665)
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x2663 : float _Array) -> _Array_to_js Ojs.float_to_js x2663)
              x2661
         |])

  let (create'' :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Uint8Array)
    =
   fun (x2672 : t)
       ~buffer:(x2666 : _ArrayBuffer)
       ?byteOffset:(x2667 : float option)
       ?length:(x2668 : float option)
       () ->
    _Uint8Array_of_js
      (Ojs.new_obj_arr
         (t_to_js x2672)
         (let x2669 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x2669 "push" [| _ArrayBuffer_to_js x2666 |]);
          (match x2667 with
          | Some x2671 ->
            ignore (Ojs.call x2669 "push" [| Ojs.float_to_js x2671 |])
          | None ->
            ());
          (match x2668 with
          | Some x2670 ->
            ignore (Ojs.call x2669 "push" [| Ojs.float_to_js x2670 |])
          | None ->
            ());
          x2669))

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x2673 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2673) "BYTES_PER_ELEMENT")

  let (of_ : t -> items:float list -> _Uint8Array) =
   fun (x2677 : t) ~items:(x2674 : float list) ->
    _Uint8Array_of_js
      (let x2678 = t_to_js x2677 in
       Ojs.call
         (Ojs.get_prop_ascii x2678 "of")
         "apply"
         [| x2678
          ; (let x2675 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x2676 : float) ->
                 ignore (Ojs.call x2675 "push" [| Ojs.float_to_js x2676 |]))
               x2674;
             x2675)
         |])

  let (from : t -> array:float _Array -> _Uint8Array) =
   fun (x2681 : t) ~array:(x2679 : float _Array) ->
    _Uint8Array_of_js
      (Ojs.call (t_to_js x2681) "from" [| _Array_to_js Ojs.float_to_js x2679 |])

  let (from' :
        t
        -> array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Uint8Array)
    =
   fun (x2690 : t)
       ~array:(x2682 : 'T _Array)
       ~mapfn:(x2683 : v:'T -> k:float -> float)
       ?thisArg:(x2684 : any option)
       () ->
    _Uint8Array_of_js
      (let x2691 = t_to_js x2690 in
       Ojs.call
         (Ojs.get_prop_ascii x2691 "from")
         "apply"
         [| x2691
          ; (let x2685 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2685 "push" [| _Array_to_js Obj.magic x2682 |]);
             ignore
               (Ojs.call
                  x2685
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x2687 : Ojs.t) (x2688 : Ojs.t) ->
                         Ojs.float_to_js
                           (x2683
                              ~v:(Obj.magic x2687)
                              ~k:(Ojs.float_of_js x2688)))
                  |]);
             (match x2684 with
             | Some x2686 ->
               ignore (Ojs.call x2685 "push" [| any_to_js x2686 |])
             | None ->
               ());
             x2685)
         |])
end

let (uint8Array : _Uint8ArrayConstructor) =
  _Uint8ArrayConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Uint8Array")

module Uint8ClampedArray = struct
  type t = _Uint8ClampedArray

  let rec t_of_js : Ojs.t -> t =
   fun (x2693 : Ojs.t) -> _Uint8ClampedArray_of_js x2693

  and t_to_js : t -> Ojs.t =
   fun (x2692 : _Uint8ClampedArray) -> _Uint8ClampedArray_to_js x2692

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2695 : Ojs.t) -> t_of_js x2695

  and t_0_to_js : t_0 -> Ojs.t = fun (x2694 : t) -> t_to_js x2694

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x2696 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2696) "BYTES_PER_ELEMENT")

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x2697 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x2697) "buffer")

  let (get_byteLength : t -> float) =
   fun (x2698 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2698) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x2699 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2699) "byteOffset")

  let (copyWithin :
        t -> target:float -> start:float -> ?end_:float -> unit -> t)
    =
   fun (x2705 : t)
       ~target:(x2700 : float)
       ~start:(x2701 : float)
       ?end_:(x2702 : float option)
       () ->
    t_of_js
      (let x2706 = t_to_js x2705 in
       Ojs.call
         (Ojs.get_prop_ascii x2706 "copyWithin")
         "apply"
         [| x2706
          ; (let x2703 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2703 "push" [| Ojs.float_to_js x2700 |]);
             ignore (Ojs.call x2703 "push" [| Ojs.float_to_js x2701 |]);
             (match x2702 with
             | Some x2704 ->
               ignore (Ojs.call x2703 "push" [| Ojs.float_to_js x2704 |])
             | None ->
               ());
             x2703)
         |])

  let (every :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x2714 : t)
       ~predicate:(x2707 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x2708 : any option)
       () ->
    Ojs.bool_of_js
      (let x2715 = t_to_js x2714 in
       Ojs.call
         (Ojs.get_prop_ascii x2715 "every")
         "apply"
         [| x2715
          ; (let x2709 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2709
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2711 : Ojs.t) (x2712 : Ojs.t) (x2713 : Ojs.t) ->
                         unknown_to_js
                           (x2707
                              ~value:(Ojs.float_of_js x2711)
                              ~index:(Ojs.float_of_js x2712)
                              ~array:(t_of_js x2713)))
                  |]);
             (match x2708 with
             | Some x2710 ->
               ignore (Ojs.call x2709 "push" [| any_to_js x2710 |])
             | None ->
               ());
             x2709)
         |])

  let (fill : t -> value:float -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x2722 : t)
       ~value:(x2716 : float)
       ?start:(x2717 : float option)
       ?end_:(x2718 : float option)
       () ->
    t_of_js
      (let x2723 = t_to_js x2722 in
       Ojs.call
         (Ojs.get_prop_ascii x2723 "fill")
         "apply"
         [| x2723
          ; (let x2719 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2719 "push" [| Ojs.float_to_js x2716 |]);
             (match x2717 with
             | Some x2721 ->
               ignore (Ojs.call x2719 "push" [| Ojs.float_to_js x2721 |])
             | None ->
               ());
             (match x2718 with
             | Some x2720 ->
               ignore (Ojs.call x2719 "push" [| Ojs.float_to_js x2720 |])
             | None ->
               ());
             x2719)
         |])

  let (filter :
        t
        -> predicate:(value:float -> index:float -> array:t -> any)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x2731 : t)
       ~predicate:(x2724 : value:float -> index:float -> array:t -> any)
       ?thisArg:(x2725 : any option)
       () ->
    t_of_js
      (let x2732 = t_to_js x2731 in
       Ojs.call
         (Ojs.get_prop_ascii x2732 "filter")
         "apply"
         [| x2732
          ; (let x2726 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2726
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2728 : Ojs.t) (x2729 : Ojs.t) (x2730 : Ojs.t) ->
                         any_to_js
                           (x2724
                              ~value:(Ojs.float_of_js x2728)
                              ~index:(Ojs.float_of_js x2729)
                              ~array:(t_of_js x2730)))
                  |]);
             (match x2725 with
             | Some x2727 ->
               ignore (Ojs.call x2726 "push" [| any_to_js x2727 |])
             | None ->
               ());
             x2726)
         |])

  let (find :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float or_undefined)
    =
   fun (x2740 : t)
       ~predicate:(x2733 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x2734 : any option)
       () ->
    or_undefined_of_js
      Ojs.float_of_js
      (let x2741 = t_to_js x2740 in
       Ojs.call
         (Ojs.get_prop_ascii x2741 "find")
         "apply"
         [| x2741
          ; (let x2735 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2735
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2737 : Ojs.t) (x2738 : Ojs.t) (x2739 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x2733
                              ~value:(Ojs.float_of_js x2737)
                              ~index:(Ojs.float_of_js x2738)
                              ~obj:(t_of_js x2739)))
                  |]);
             (match x2734 with
             | Some x2736 ->
               ignore (Ojs.call x2735 "push" [| any_to_js x2736 |])
             | None ->
               ());
             x2735)
         |])

  let (findIndex :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float)
    =
   fun (x2750 : t)
       ~predicate:(x2743 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x2744 : any option)
       () ->
    Ojs.float_of_js
      (let x2751 = t_to_js x2750 in
       Ojs.call
         (Ojs.get_prop_ascii x2751 "findIndex")
         "apply"
         [| x2751
          ; (let x2745 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2745
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2747 : Ojs.t) (x2748 : Ojs.t) (x2749 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x2743
                              ~value:(Ojs.float_of_js x2747)
                              ~index:(Ojs.float_of_js x2748)
                              ~obj:(t_of_js x2749)))
                  |]);
             (match x2744 with
             | Some x2746 ->
               ignore (Ojs.call x2745 "push" [| any_to_js x2746 |])
             | None ->
               ());
             x2745)
         |])

  let (forEach :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x2759 : t)
       ~callbackfn:(x2752 : value:float -> index:float -> array:t -> unit)
       ?thisArg:(x2753 : any option)
       () ->
    ignore
      (let x2760 = t_to_js x2759 in
       Ojs.call
         (Ojs.get_prop_ascii x2760 "forEach")
         "apply"
         [| x2760
          ; (let x2754 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2754
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2756 : Ojs.t) (x2757 : Ojs.t) (x2758 : Ojs.t) ->
                         x2752
                           ~value:(Ojs.float_of_js x2756)
                           ~index:(Ojs.float_of_js x2757)
                           ~array:(t_of_js x2758))
                  |]);
             (match x2753 with
             | Some x2755 ->
               ignore (Ojs.call x2754 "push" [| any_to_js x2755 |])
             | None ->
               ());
             x2754)
         |])

  let (indexOf : t -> searchElement:float -> ?fromIndex:float -> unit -> float) =
   fun (x2765 : t)
       ~searchElement:(x2761 : float)
       ?fromIndex:(x2762 : float option)
       () ->
    Ojs.float_of_js
      (let x2766 = t_to_js x2765 in
       Ojs.call
         (Ojs.get_prop_ascii x2766 "indexOf")
         "apply"
         [| x2766
          ; (let x2763 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2763 "push" [| Ojs.float_to_js x2761 |]);
             (match x2762 with
             | Some x2764 ->
               ignore (Ojs.call x2763 "push" [| Ojs.float_to_js x2764 |])
             | None ->
               ());
             x2763)
         |])

  let (join : t -> ?separator:string -> unit -> string) =
   fun (x2770 : t) ?separator:(x2767 : string option) () ->
    Ojs.string_of_js
      (let x2771 = t_to_js x2770 in
       Ojs.call
         (Ojs.get_prop_ascii x2771 "join")
         "apply"
         [| x2771
          ; (let x2768 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2767 with
             | Some x2769 ->
               ignore (Ojs.call x2768 "push" [| Ojs.string_to_js x2769 |])
             | None ->
               ());
             x2768)
         |])

  let (lastIndexOf :
        t -> searchElement:float -> ?fromIndex:float -> unit -> float)
    =
   fun (x2776 : t)
       ~searchElement:(x2772 : float)
       ?fromIndex:(x2773 : float option)
       () ->
    Ojs.float_of_js
      (let x2777 = t_to_js x2776 in
       Ojs.call
         (Ojs.get_prop_ascii x2777 "lastIndexOf")
         "apply"
         [| x2777
          ; (let x2774 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2774 "push" [| Ojs.float_to_js x2772 |]);
             (match x2773 with
             | Some x2775 ->
               ignore (Ojs.call x2774 "push" [| Ojs.float_to_js x2775 |])
             | None ->
               ());
             x2774)
         |])

  let (get_length : t -> float) =
   fun (x2778 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2778) "length")

  let (map :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> float)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x2786 : t)
       ~callbackfn:(x2779 : value:float -> index:float -> array:t -> float)
       ?thisArg:(x2780 : any option)
       () ->
    t_of_js
      (let x2787 = t_to_js x2786 in
       Ojs.call
         (Ojs.get_prop_ascii x2787 "map")
         "apply"
         [| x2787
          ; (let x2781 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2781
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2783 : Ojs.t) (x2784 : Ojs.t) (x2785 : Ojs.t) ->
                         Ojs.float_to_js
                           (x2779
                              ~value:(Ojs.float_of_js x2783)
                              ~index:(Ojs.float_of_js x2784)
                              ~array:(t_of_js x2785)))
                  |]);
             (match x2780 with
             | Some x2782 ->
               ignore (Ojs.call x2781 "push" [| any_to_js x2782 |])
             | None ->
               ());
             x2781)
         |])

  let (reduce :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x2793 : t)
       ~callbackfn:
         (x2788 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2793)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x2789 : Ojs.t)
                (x2790 : Ojs.t)
                (x2791 : Ojs.t)
                (x2792 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2788
                     ~previousValue:(Ojs.float_of_js x2789)
                     ~currentValue:(Ojs.float_of_js x2790)
                     ~currentIndex:(Ojs.float_of_js x2791)
                     ~array:(t_of_js x2792)))
         |])

  let (reduce' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x2800 : t)
       ~callbackfn:
         (x2794 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x2799 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2800)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x2795 : Ojs.t)
                (x2796 : Ojs.t)
                (x2797 : Ojs.t)
                (x2798 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2794
                     ~previousValue:(Ojs.float_of_js x2795)
                     ~currentValue:(Ojs.float_of_js x2796)
                     ~currentIndex:(Ojs.float_of_js x2797)
                     ~array:(t_of_js x2798)))
          ; Ojs.float_to_js x2799
         |])

  let (reduce'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x2807 : t)
       ~callbackfn:
         (x2801 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x2806 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x2807)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x2802 : Ojs.t)
                (x2803 : Ojs.t)
                (x2804 : Ojs.t)
                (x2805 : Ojs.t)
              ->
                Obj.magic
                  (x2801
                     ~previousValue:(Obj.magic x2802)
                     ~currentValue:(Ojs.float_of_js x2803)
                     ~currentIndex:(Ojs.float_of_js x2804)
                     ~array:(t_of_js x2805)))
          ; Obj.magic x2806
         |])

  let (reduceRight :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x2813 : t)
       ~callbackfn:
         (x2808 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2813)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x2809 : Ojs.t)
                (x2810 : Ojs.t)
                (x2811 : Ojs.t)
                (x2812 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2808
                     ~previousValue:(Ojs.float_of_js x2809)
                     ~currentValue:(Ojs.float_of_js x2810)
                     ~currentIndex:(Ojs.float_of_js x2811)
                     ~array:(t_of_js x2812)))
         |])

  let (reduceRight' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x2820 : t)
       ~callbackfn:
         (x2814 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x2819 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x2820)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x2815 : Ojs.t)
                (x2816 : Ojs.t)
                (x2817 : Ojs.t)
                (x2818 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x2814
                     ~previousValue:(Ojs.float_of_js x2815)
                     ~currentValue:(Ojs.float_of_js x2816)
                     ~currentIndex:(Ojs.float_of_js x2817)
                     ~array:(t_of_js x2818)))
          ; Ojs.float_to_js x2819
         |])

  let (reduceRight'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x2827 : t)
       ~callbackfn:
         (x2821 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x2826 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x2827)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x2822 : Ojs.t)
                (x2823 : Ojs.t)
                (x2824 : Ojs.t)
                (x2825 : Ojs.t)
              ->
                Obj.magic
                  (x2821
                     ~previousValue:(Obj.magic x2822)
                     ~currentValue:(Ojs.float_of_js x2823)
                     ~currentIndex:(Ojs.float_of_js x2824)
                     ~array:(t_of_js x2825)))
          ; Obj.magic x2826
         |])

  let (reverse : t -> t) =
   fun (x2828 : t) -> t_of_js (Ojs.call (t_to_js x2828) "reverse" [||])

  let (set_ : t -> array:float _Array -> ?offset:float -> unit -> unit) =
   fun (x2834 : t)
       ~array:(x2829 : float _Array)
       ?offset:(x2830 : float option)
       () ->
    ignore
      (let x2835 = t_to_js x2834 in
       Ojs.call
         (Ojs.get_prop_ascii x2835 "set")
         "apply"
         [| x2835
          ; (let x2831 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x2831 "push" [| _Array_to_js Ojs.float_to_js x2829 |]);
             (match x2830 with
             | Some x2832 ->
               ignore (Ojs.call x2831 "push" [| Ojs.float_to_js x2832 |])
             | None ->
               ());
             x2831)
         |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x2841 : t) ?start:(x2836 : float option) ?end_:(x2837 : float option) () ->
    t_of_js
      (let x2842 = t_to_js x2841 in
       Ojs.call
         (Ojs.get_prop_ascii x2842 "slice")
         "apply"
         [| x2842
          ; (let x2838 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2836 with
             | Some x2840 ->
               ignore (Ojs.call x2838 "push" [| Ojs.float_to_js x2840 |])
             | None ->
               ());
             (match x2837 with
             | Some x2839 ->
               ignore (Ojs.call x2838 "push" [| Ojs.float_to_js x2839 |])
             | None ->
               ());
             x2838)
         |])

  let (some :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x2850 : t)
       ~predicate:(x2843 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x2844 : any option)
       () ->
    Ojs.bool_of_js
      (let x2851 = t_to_js x2850 in
       Ojs.call
         (Ojs.get_prop_ascii x2851 "some")
         "apply"
         [| x2851
          ; (let x2845 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2845
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2847 : Ojs.t) (x2848 : Ojs.t) (x2849 : Ojs.t) ->
                         unknown_to_js
                           (x2843
                              ~value:(Ojs.float_of_js x2847)
                              ~index:(Ojs.float_of_js x2848)
                              ~array:(t_of_js x2849)))
                  |]);
             (match x2844 with
             | Some x2846 ->
               ignore (Ojs.call x2845 "push" [| any_to_js x2846 |])
             | None ->
               ());
             x2845)
         |])

  let (sort : t -> ?compareFn:(a:float -> b:float -> float) -> unit -> t) =
   fun (x2857 : t) ?compareFn:(x2852 : (a:float -> b:float -> float) option) () ->
    t_of_js
      (let x2858 = t_to_js x2857 in
       Ojs.call
         (Ojs.get_prop_ascii x2858 "sort")
         "apply"
         [| x2858
          ; (let x2853 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2852 with
             | Some x2854 ->
               ignore
                 (Ojs.call
                    x2853
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x2855 : Ojs.t) (x2856 : Ojs.t) ->
                           Ojs.float_to_js
                             (x2854
                                ~a:(Ojs.float_of_js x2855)
                                ~b:(Ojs.float_of_js x2856)))
                    |])
             | None ->
               ());
             x2853)
         |])

  let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
   fun (x2864 : t)
       ?begin_:(x2859 : float option)
       ?end_:(x2860 : float option)
       () ->
    t_of_js
      (let x2865 = t_to_js x2864 in
       Ojs.call
         (Ojs.get_prop_ascii x2865 "subarray")
         "apply"
         [| x2865
          ; (let x2861 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x2859 with
             | Some x2863 ->
               ignore (Ojs.call x2861 "push" [| Ojs.float_to_js x2863 |])
             | None ->
               ());
             (match x2860 with
             | Some x2862 ->
               ignore (Ojs.call x2861 "push" [| Ojs.float_to_js x2862 |])
             | None ->
               ());
             x2861)
         |])

  let (toLocaleString : t -> string) =
   fun (x2866 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x2866) "toLocaleString" [||])

  let (toString : t -> string) =
   fun (x2867 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x2867) "toString" [||])

  let (valueOf : t -> t) =
   fun (x2868 : t) -> t_of_js (Ojs.call (t_to_js x2868) "valueOf" [||])

  let (get : t -> float -> float) =
   fun (x2869 : t) (x2870 : float) ->
    Ojs.float_of_js (Ojs.get_prop (t_to_js x2869) (Ojs.float_to_js x2870))

  let (set : t -> float -> float -> unit) =
   fun (x2871 : t) (x2872 : float) (x2873 : float) ->
    Ojs.set_prop (t_to_js x2871) (Ojs.float_to_js x2872) (Ojs.float_to_js x2873)

  let (create : length:float -> _Uint8ClampedArray) =
   fun ~length:(x2874 : float) ->
    _Uint8ClampedArray_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
         [| Ojs.float_to_js x2874 |])

  let (create' :
        array:(_ArrayBuffer, float _Array) union2 -> _Uint8ClampedArray)
    =
   fun ~array:(x2875 : (_ArrayBuffer, float _Array) union2) ->
    _Uint8ClampedArray_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x2877 : float _Array) -> _Array_to_js Ojs.float_to_js x2877)
              x2875
         |])

  let (create'' :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Uint8ClampedArray)
    =
   fun ~buffer:(x2879 : _ArrayBuffer)
       ?byteOffset:(x2880 : float option)
       ?length:(x2881 : float option)
       () ->
    _Uint8ClampedArray_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
         (let x2882 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x2882 "push" [| _ArrayBuffer_to_js x2879 |]);
          (match x2880 with
          | Some x2884 ->
            ignore (Ojs.call x2882 "push" [| Ojs.float_to_js x2884 |])
          | None ->
            ());
          (match x2881 with
          | Some x2883 ->
            ignore (Ojs.call x2882 "push" [| Ojs.float_to_js x2883 |])
          | None ->
            ());
          x2882))

  let (get_BYTES_PER_ELEMENT : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
         "BYTES_PER_ELEMENT")

  let (of_ : items:float list -> _Uint8ClampedArray) =
   fun ~items:(x2885 : float list) ->
    _Uint8ClampedArray_of_js
      (let x2888 = Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
       Ojs.call
         (Ojs.get_prop_ascii x2888 "of")
         "apply"
         [| x2888
          ; (let x2886 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x2887 : float) ->
                 ignore (Ojs.call x2886 "push" [| Ojs.float_to_js x2887 |]))
               x2885;
             x2886)
         |])

  let (from : array:float _Array -> _Uint8ClampedArray) =
   fun ~array:(x2889 : float _Array) ->
    _Uint8ClampedArray_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
         "from"
         [| _Array_to_js Ojs.float_to_js x2889 |])

  let (from' :
        array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Uint8ClampedArray)
    =
   fun ~array:(x2891 : 'T _Array)
       ~mapfn:(x2892 : v:'T -> k:float -> float)
       ?thisArg:(x2893 : any option)
       () ->
    _Uint8ClampedArray_of_js
      (let x2899 = Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
       Ojs.call
         (Ojs.get_prop_ascii x2899 "from")
         "apply"
         [| x2899
          ; (let x2894 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2894 "push" [| _Array_to_js Obj.magic x2891 |]);
             ignore
               (Ojs.call
                  x2894
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x2896 : Ojs.t) (x2897 : Ojs.t) ->
                         Ojs.float_to_js
                           (x2892
                              ~v:(Obj.magic x2896)
                              ~k:(Ojs.float_of_js x2897)))
                  |]);
             (match x2893 with
             | Some x2895 ->
               ignore (Ojs.call x2894 "push" [| any_to_js x2895 |])
             | None ->
               ());
             x2894)
         |])
end

module Uint8ClampedArrayConstructor = struct
  type t = _Uint8ClampedArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x2901 : Ojs.t) -> _Uint8ClampedArrayConstructor_of_js x2901

  and t_to_js : t -> Ojs.t =
   fun (x2900 : _Uint8ClampedArrayConstructor) ->
    _Uint8ClampedArrayConstructor_to_js x2900

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2903 : Ojs.t) -> t_of_js x2903

  and t_0_to_js : t_0 -> Ojs.t = fun (x2902 : t) -> t_to_js x2902

  let (get_prototype : t -> _Uint8ClampedArray) =
   fun (x2904 : t) ->
    _Uint8ClampedArray_of_js (Ojs.get_prop_ascii (t_to_js x2904) "prototype")

  let (create : t -> length:float -> _Uint8ClampedArray) =
   fun (x2906 : t) ~length:(x2905 : float) ->
    _Uint8ClampedArray_of_js
      (Ojs.new_obj (t_to_js x2906) [| Ojs.float_to_js x2905 |])

  let (create' :
        t -> array:(_ArrayBuffer, float _Array) union2 -> _Uint8ClampedArray)
    =
   fun (x2911 : t) ~array:(x2907 : (_ArrayBuffer, float _Array) union2) ->
    _Uint8ClampedArray_of_js
      (Ojs.new_obj
         (t_to_js x2911)
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x2909 : float _Array) -> _Array_to_js Ojs.float_to_js x2909)
              x2907
         |])

  let (create'' :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Uint8ClampedArray)
    =
   fun (x2918 : t)
       ~buffer:(x2912 : _ArrayBuffer)
       ?byteOffset:(x2913 : float option)
       ?length:(x2914 : float option)
       () ->
    _Uint8ClampedArray_of_js
      (Ojs.new_obj_arr
         (t_to_js x2918)
         (let x2915 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x2915 "push" [| _ArrayBuffer_to_js x2912 |]);
          (match x2913 with
          | Some x2917 ->
            ignore (Ojs.call x2915 "push" [| Ojs.float_to_js x2917 |])
          | None ->
            ());
          (match x2914 with
          | Some x2916 ->
            ignore (Ojs.call x2915 "push" [| Ojs.float_to_js x2916 |])
          | None ->
            ());
          x2915))

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x2919 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2919) "BYTES_PER_ELEMENT")

  let (of_ : t -> items:float list -> _Uint8ClampedArray) =
   fun (x2923 : t) ~items:(x2920 : float list) ->
    _Uint8ClampedArray_of_js
      (let x2924 = t_to_js x2923 in
       Ojs.call
         (Ojs.get_prop_ascii x2924 "of")
         "apply"
         [| x2924
          ; (let x2921 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x2922 : float) ->
                 ignore (Ojs.call x2921 "push" [| Ojs.float_to_js x2922 |]))
               x2920;
             x2921)
         |])

  let (from : t -> array:float _Array -> _Uint8ClampedArray) =
   fun (x2927 : t) ~array:(x2925 : float _Array) ->
    _Uint8ClampedArray_of_js
      (Ojs.call (t_to_js x2927) "from" [| _Array_to_js Ojs.float_to_js x2925 |])

  let (from' :
        t
        -> array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Uint8ClampedArray)
    =
   fun (x2936 : t)
       ~array:(x2928 : 'T _Array)
       ~mapfn:(x2929 : v:'T -> k:float -> float)
       ?thisArg:(x2930 : any option)
       () ->
    _Uint8ClampedArray_of_js
      (let x2937 = t_to_js x2936 in
       Ojs.call
         (Ojs.get_prop_ascii x2937 "from")
         "apply"
         [| x2937
          ; (let x2931 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2931 "push" [| _Array_to_js Obj.magic x2928 |]);
             ignore
               (Ojs.call
                  x2931
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x2933 : Ojs.t) (x2934 : Ojs.t) ->
                         Ojs.float_to_js
                           (x2929
                              ~v:(Obj.magic x2933)
                              ~k:(Ojs.float_of_js x2934)))
                  |]);
             (match x2930 with
             | Some x2932 ->
               ignore (Ojs.call x2931 "push" [| any_to_js x2932 |])
             | None ->
               ());
             x2931)
         |])
end

let (uint8ClampedArray : _Uint8ClampedArrayConstructor) =
  _Uint8ClampedArrayConstructor_of_js
    (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")

module Int16Array = struct
  type t = _Int16Array

  let rec t_of_js : Ojs.t -> t = fun (x2939 : Ojs.t) -> _Int16Array_of_js x2939

  and t_to_js : t -> Ojs.t =
   fun (x2938 : _Int16Array) -> _Int16Array_to_js x2938

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x2941 : Ojs.t) -> t_of_js x2941

  and t_0_to_js : t_0 -> Ojs.t = fun (x2940 : t) -> t_to_js x2940

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x2942 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2942) "BYTES_PER_ELEMENT")

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x2943 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x2943) "buffer")

  let (get_byteLength : t -> float) =
   fun (x2944 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2944) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x2945 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x2945) "byteOffset")

  let (copyWithin :
        t -> target:float -> start:float -> ?end_:float -> unit -> t)
    =
   fun (x2951 : t)
       ~target:(x2946 : float)
       ~start:(x2947 : float)
       ?end_:(x2948 : float option)
       () ->
    t_of_js
      (let x2952 = t_to_js x2951 in
       Ojs.call
         (Ojs.get_prop_ascii x2952 "copyWithin")
         "apply"
         [| x2952
          ; (let x2949 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2949 "push" [| Ojs.float_to_js x2946 |]);
             ignore (Ojs.call x2949 "push" [| Ojs.float_to_js x2947 |]);
             (match x2948 with
             | Some x2950 ->
               ignore (Ojs.call x2949 "push" [| Ojs.float_to_js x2950 |])
             | None ->
               ());
             x2949)
         |])

  let (every :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x2960 : t)
       ~predicate:(x2953 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x2954 : any option)
       () ->
    Ojs.bool_of_js
      (let x2961 = t_to_js x2960 in
       Ojs.call
         (Ojs.get_prop_ascii x2961 "every")
         "apply"
         [| x2961
          ; (let x2955 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2955
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2957 : Ojs.t) (x2958 : Ojs.t) (x2959 : Ojs.t) ->
                         unknown_to_js
                           (x2953
                              ~value:(Ojs.float_of_js x2957)
                              ~index:(Ojs.float_of_js x2958)
                              ~array:(t_of_js x2959)))
                  |]);
             (match x2954 with
             | Some x2956 ->
               ignore (Ojs.call x2955 "push" [| any_to_js x2956 |])
             | None ->
               ());
             x2955)
         |])

  let (fill : t -> value:float -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x2968 : t)
       ~value:(x2962 : float)
       ?start:(x2963 : float option)
       ?end_:(x2964 : float option)
       () ->
    t_of_js
      (let x2969 = t_to_js x2968 in
       Ojs.call
         (Ojs.get_prop_ascii x2969 "fill")
         "apply"
         [| x2969
          ; (let x2965 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x2965 "push" [| Ojs.float_to_js x2962 |]);
             (match x2963 with
             | Some x2967 ->
               ignore (Ojs.call x2965 "push" [| Ojs.float_to_js x2967 |])
             | None ->
               ());
             (match x2964 with
             | Some x2966 ->
               ignore (Ojs.call x2965 "push" [| Ojs.float_to_js x2966 |])
             | None ->
               ());
             x2965)
         |])

  let (filter :
        t
        -> predicate:(value:float -> index:float -> array:t -> any)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x2977 : t)
       ~predicate:(x2970 : value:float -> index:float -> array:t -> any)
       ?thisArg:(x2971 : any option)
       () ->
    t_of_js
      (let x2978 = t_to_js x2977 in
       Ojs.call
         (Ojs.get_prop_ascii x2978 "filter")
         "apply"
         [| x2978
          ; (let x2972 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2972
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2974 : Ojs.t) (x2975 : Ojs.t) (x2976 : Ojs.t) ->
                         any_to_js
                           (x2970
                              ~value:(Ojs.float_of_js x2974)
                              ~index:(Ojs.float_of_js x2975)
                              ~array:(t_of_js x2976)))
                  |]);
             (match x2971 with
             | Some x2973 ->
               ignore (Ojs.call x2972 "push" [| any_to_js x2973 |])
             | None ->
               ());
             x2972)
         |])

  let (find :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float or_undefined)
    =
   fun (x2986 : t)
       ~predicate:(x2979 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x2980 : any option)
       () ->
    or_undefined_of_js
      Ojs.float_of_js
      (let x2987 = t_to_js x2986 in
       Ojs.call
         (Ojs.get_prop_ascii x2987 "find")
         "apply"
         [| x2987
          ; (let x2981 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2981
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2983 : Ojs.t) (x2984 : Ojs.t) (x2985 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x2979
                              ~value:(Ojs.float_of_js x2983)
                              ~index:(Ojs.float_of_js x2984)
                              ~obj:(t_of_js x2985)))
                  |]);
             (match x2980 with
             | Some x2982 ->
               ignore (Ojs.call x2981 "push" [| any_to_js x2982 |])
             | None ->
               ());
             x2981)
         |])

  let (findIndex :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float)
    =
   fun (x2996 : t)
       ~predicate:(x2989 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x2990 : any option)
       () ->
    Ojs.float_of_js
      (let x2997 = t_to_js x2996 in
       Ojs.call
         (Ojs.get_prop_ascii x2997 "findIndex")
         "apply"
         [| x2997
          ; (let x2991 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x2991
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x2993 : Ojs.t) (x2994 : Ojs.t) (x2995 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x2989
                              ~value:(Ojs.float_of_js x2993)
                              ~index:(Ojs.float_of_js x2994)
                              ~obj:(t_of_js x2995)))
                  |]);
             (match x2990 with
             | Some x2992 ->
               ignore (Ojs.call x2991 "push" [| any_to_js x2992 |])
             | None ->
               ());
             x2991)
         |])

  let (forEach :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x3005 : t)
       ~callbackfn:(x2998 : value:float -> index:float -> array:t -> unit)
       ?thisArg:(x2999 : any option)
       () ->
    ignore
      (let x3006 = t_to_js x3005 in
       Ojs.call
         (Ojs.get_prop_ascii x3006 "forEach")
         "apply"
         [| x3006
          ; (let x3000 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3000
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3002 : Ojs.t) (x3003 : Ojs.t) (x3004 : Ojs.t) ->
                         x2998
                           ~value:(Ojs.float_of_js x3002)
                           ~index:(Ojs.float_of_js x3003)
                           ~array:(t_of_js x3004))
                  |]);
             (match x2999 with
             | Some x3001 ->
               ignore (Ojs.call x3000 "push" [| any_to_js x3001 |])
             | None ->
               ());
             x3000)
         |])

  let (indexOf : t -> searchElement:float -> ?fromIndex:float -> unit -> float) =
   fun (x3011 : t)
       ~searchElement:(x3007 : float)
       ?fromIndex:(x3008 : float option)
       () ->
    Ojs.float_of_js
      (let x3012 = t_to_js x3011 in
       Ojs.call
         (Ojs.get_prop_ascii x3012 "indexOf")
         "apply"
         [| x3012
          ; (let x3009 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3009 "push" [| Ojs.float_to_js x3007 |]);
             (match x3008 with
             | Some x3010 ->
               ignore (Ojs.call x3009 "push" [| Ojs.float_to_js x3010 |])
             | None ->
               ());
             x3009)
         |])

  let (join : t -> ?separator:string -> unit -> string) =
   fun (x3016 : t) ?separator:(x3013 : string option) () ->
    Ojs.string_of_js
      (let x3017 = t_to_js x3016 in
       Ojs.call
         (Ojs.get_prop_ascii x3017 "join")
         "apply"
         [| x3017
          ; (let x3014 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3013 with
             | Some x3015 ->
               ignore (Ojs.call x3014 "push" [| Ojs.string_to_js x3015 |])
             | None ->
               ());
             x3014)
         |])

  let (lastIndexOf :
        t -> searchElement:float -> ?fromIndex:float -> unit -> float)
    =
   fun (x3022 : t)
       ~searchElement:(x3018 : float)
       ?fromIndex:(x3019 : float option)
       () ->
    Ojs.float_of_js
      (let x3023 = t_to_js x3022 in
       Ojs.call
         (Ojs.get_prop_ascii x3023 "lastIndexOf")
         "apply"
         [| x3023
          ; (let x3020 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3020 "push" [| Ojs.float_to_js x3018 |]);
             (match x3019 with
             | Some x3021 ->
               ignore (Ojs.call x3020 "push" [| Ojs.float_to_js x3021 |])
             | None ->
               ());
             x3020)
         |])

  let (get_length : t -> float) =
   fun (x3024 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3024) "length")

  let (map :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> float)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x3032 : t)
       ~callbackfn:(x3025 : value:float -> index:float -> array:t -> float)
       ?thisArg:(x3026 : any option)
       () ->
    t_of_js
      (let x3033 = t_to_js x3032 in
       Ojs.call
         (Ojs.get_prop_ascii x3033 "map")
         "apply"
         [| x3033
          ; (let x3027 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3027
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3029 : Ojs.t) (x3030 : Ojs.t) (x3031 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3025
                              ~value:(Ojs.float_of_js x3029)
                              ~index:(Ojs.float_of_js x3030)
                              ~array:(t_of_js x3031)))
                  |]);
             (match x3026 with
             | Some x3028 ->
               ignore (Ojs.call x3027 "push" [| any_to_js x3028 |])
             | None ->
               ());
             x3027)
         |])

  let (reduce :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x3039 : t)
       ~callbackfn:
         (x3034 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3039)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3035 : Ojs.t)
                (x3036 : Ojs.t)
                (x3037 : Ojs.t)
                (x3038 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3034
                     ~previousValue:(Ojs.float_of_js x3035)
                     ~currentValue:(Ojs.float_of_js x3036)
                     ~currentIndex:(Ojs.float_of_js x3037)
                     ~array:(t_of_js x3038)))
         |])

  let (reduce' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x3046 : t)
       ~callbackfn:
         (x3040 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x3045 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3046)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3041 : Ojs.t)
                (x3042 : Ojs.t)
                (x3043 : Ojs.t)
                (x3044 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3040
                     ~previousValue:(Ojs.float_of_js x3041)
                     ~currentValue:(Ojs.float_of_js x3042)
                     ~currentIndex:(Ojs.float_of_js x3043)
                     ~array:(t_of_js x3044)))
          ; Ojs.float_to_js x3045
         |])

  let (reduce'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x3053 : t)
       ~callbackfn:
         (x3047 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x3052 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x3053)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3048 : Ojs.t)
                (x3049 : Ojs.t)
                (x3050 : Ojs.t)
                (x3051 : Ojs.t)
              ->
                Obj.magic
                  (x3047
                     ~previousValue:(Obj.magic x3048)
                     ~currentValue:(Ojs.float_of_js x3049)
                     ~currentIndex:(Ojs.float_of_js x3050)
                     ~array:(t_of_js x3051)))
          ; Obj.magic x3052
         |])

  let (reduceRight :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x3059 : t)
       ~callbackfn:
         (x3054 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3059)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3055 : Ojs.t)
                (x3056 : Ojs.t)
                (x3057 : Ojs.t)
                (x3058 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3054
                     ~previousValue:(Ojs.float_of_js x3055)
                     ~currentValue:(Ojs.float_of_js x3056)
                     ~currentIndex:(Ojs.float_of_js x3057)
                     ~array:(t_of_js x3058)))
         |])

  let (reduceRight' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x3066 : t)
       ~callbackfn:
         (x3060 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x3065 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3066)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3061 : Ojs.t)
                (x3062 : Ojs.t)
                (x3063 : Ojs.t)
                (x3064 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3060
                     ~previousValue:(Ojs.float_of_js x3061)
                     ~currentValue:(Ojs.float_of_js x3062)
                     ~currentIndex:(Ojs.float_of_js x3063)
                     ~array:(t_of_js x3064)))
          ; Ojs.float_to_js x3065
         |])

  let (reduceRight'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x3073 : t)
       ~callbackfn:
         (x3067 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x3072 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x3073)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3068 : Ojs.t)
                (x3069 : Ojs.t)
                (x3070 : Ojs.t)
                (x3071 : Ojs.t)
              ->
                Obj.magic
                  (x3067
                     ~previousValue:(Obj.magic x3068)
                     ~currentValue:(Ojs.float_of_js x3069)
                     ~currentIndex:(Ojs.float_of_js x3070)
                     ~array:(t_of_js x3071)))
          ; Obj.magic x3072
         |])

  let (reverse : t -> t) =
   fun (x3074 : t) -> t_of_js (Ojs.call (t_to_js x3074) "reverse" [||])

  let (set_ : t -> array:float _Array -> ?offset:float -> unit -> unit) =
   fun (x3080 : t)
       ~array:(x3075 : float _Array)
       ?offset:(x3076 : float option)
       () ->
    ignore
      (let x3081 = t_to_js x3080 in
       Ojs.call
         (Ojs.get_prop_ascii x3081 "set")
         "apply"
         [| x3081
          ; (let x3077 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x3077 "push" [| _Array_to_js Ojs.float_to_js x3075 |]);
             (match x3076 with
             | Some x3078 ->
               ignore (Ojs.call x3077 "push" [| Ojs.float_to_js x3078 |])
             | None ->
               ());
             x3077)
         |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x3087 : t) ?start:(x3082 : float option) ?end_:(x3083 : float option) () ->
    t_of_js
      (let x3088 = t_to_js x3087 in
       Ojs.call
         (Ojs.get_prop_ascii x3088 "slice")
         "apply"
         [| x3088
          ; (let x3084 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3082 with
             | Some x3086 ->
               ignore (Ojs.call x3084 "push" [| Ojs.float_to_js x3086 |])
             | None ->
               ());
             (match x3083 with
             | Some x3085 ->
               ignore (Ojs.call x3084 "push" [| Ojs.float_to_js x3085 |])
             | None ->
               ());
             x3084)
         |])

  let (some :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x3096 : t)
       ~predicate:(x3089 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x3090 : any option)
       () ->
    Ojs.bool_of_js
      (let x3097 = t_to_js x3096 in
       Ojs.call
         (Ojs.get_prop_ascii x3097 "some")
         "apply"
         [| x3097
          ; (let x3091 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3091
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3093 : Ojs.t) (x3094 : Ojs.t) (x3095 : Ojs.t) ->
                         unknown_to_js
                           (x3089
                              ~value:(Ojs.float_of_js x3093)
                              ~index:(Ojs.float_of_js x3094)
                              ~array:(t_of_js x3095)))
                  |]);
             (match x3090 with
             | Some x3092 ->
               ignore (Ojs.call x3091 "push" [| any_to_js x3092 |])
             | None ->
               ());
             x3091)
         |])

  let (sort : t -> ?compareFn:(a:float -> b:float -> float) -> unit -> t) =
   fun (x3103 : t) ?compareFn:(x3098 : (a:float -> b:float -> float) option) () ->
    t_of_js
      (let x3104 = t_to_js x3103 in
       Ojs.call
         (Ojs.get_prop_ascii x3104 "sort")
         "apply"
         [| x3104
          ; (let x3099 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3098 with
             | Some x3100 ->
               ignore
                 (Ojs.call
                    x3099
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x3101 : Ojs.t) (x3102 : Ojs.t) ->
                           Ojs.float_to_js
                             (x3100
                                ~a:(Ojs.float_of_js x3101)
                                ~b:(Ojs.float_of_js x3102)))
                    |])
             | None ->
               ());
             x3099)
         |])

  let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
   fun (x3110 : t)
       ?begin_:(x3105 : float option)
       ?end_:(x3106 : float option)
       () ->
    t_of_js
      (let x3111 = t_to_js x3110 in
       Ojs.call
         (Ojs.get_prop_ascii x3111 "subarray")
         "apply"
         [| x3111
          ; (let x3107 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3105 with
             | Some x3109 ->
               ignore (Ojs.call x3107 "push" [| Ojs.float_to_js x3109 |])
             | None ->
               ());
             (match x3106 with
             | Some x3108 ->
               ignore (Ojs.call x3107 "push" [| Ojs.float_to_js x3108 |])
             | None ->
               ());
             x3107)
         |])

  let (toLocaleString : t -> string) =
   fun (x3112 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x3112) "toLocaleString" [||])

  let (toString : t -> string) =
   fun (x3113 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x3113) "toString" [||])

  let (valueOf : t -> t) =
   fun (x3114 : t) -> t_of_js (Ojs.call (t_to_js x3114) "valueOf" [||])

  let (get : t -> float -> float) =
   fun (x3115 : t) (x3116 : float) ->
    Ojs.float_of_js (Ojs.get_prop (t_to_js x3115) (Ojs.float_to_js x3116))

  let (set : t -> float -> float -> unit) =
   fun (x3117 : t) (x3118 : float) (x3119 : float) ->
    Ojs.set_prop (t_to_js x3117) (Ojs.float_to_js x3118) (Ojs.float_to_js x3119)

  let (create : length:float -> _Int16Array) =
   fun ~length:(x3120 : float) ->
    _Int16Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Int16Array")
         [| Ojs.float_to_js x3120 |])

  let (create' : array:(_ArrayBuffer, float _Array) union2 -> _Int16Array) =
   fun ~array:(x3121 : (_ArrayBuffer, float _Array) union2) ->
    _Int16Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Int16Array")
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x3123 : float _Array) -> _Array_to_js Ojs.float_to_js x3123)
              x3121
         |])

  let (create'' :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Int16Array)
    =
   fun ~buffer:(x3125 : _ArrayBuffer)
       ?byteOffset:(x3126 : float option)
       ?length:(x3127 : float option)
       () ->
    _Int16Array_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Int16Array")
         (let x3128 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x3128 "push" [| _ArrayBuffer_to_js x3125 |]);
          (match x3126 with
          | Some x3130 ->
            ignore (Ojs.call x3128 "push" [| Ojs.float_to_js x3130 |])
          | None ->
            ());
          (match x3127 with
          | Some x3129 ->
            ignore (Ojs.call x3128 "push" [| Ojs.float_to_js x3129 |])
          | None ->
            ());
          x3128))

  let (get_BYTES_PER_ELEMENT : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Int16Array")
         "BYTES_PER_ELEMENT")

  let (of_ : items:float list -> _Int16Array) =
   fun ~items:(x3131 : float list) ->
    _Int16Array_of_js
      (let x3134 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
       Ojs.call
         (Ojs.get_prop_ascii x3134 "of")
         "apply"
         [| x3134
          ; (let x3132 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x3133 : float) ->
                 ignore (Ojs.call x3132 "push" [| Ojs.float_to_js x3133 |]))
               x3131;
             x3132)
         |])

  let (from : array:float _Array -> _Int16Array) =
   fun ~array:(x3135 : float _Array) ->
    _Int16Array_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Int16Array")
         "from"
         [| _Array_to_js Ojs.float_to_js x3135 |])

  let (from' :
        array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Int16Array)
    =
   fun ~array:(x3137 : 'T _Array)
       ~mapfn:(x3138 : v:'T -> k:float -> float)
       ?thisArg:(x3139 : any option)
       () ->
    _Int16Array_of_js
      (let x3145 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
       Ojs.call
         (Ojs.get_prop_ascii x3145 "from")
         "apply"
         [| x3145
          ; (let x3140 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3140 "push" [| _Array_to_js Obj.magic x3137 |]);
             ignore
               (Ojs.call
                  x3140
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x3142 : Ojs.t) (x3143 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3138
                              ~v:(Obj.magic x3142)
                              ~k:(Ojs.float_of_js x3143)))
                  |]);
             (match x3139 with
             | Some x3141 ->
               ignore (Ojs.call x3140 "push" [| any_to_js x3141 |])
             | None ->
               ());
             x3140)
         |])
end

module Int16ArrayConstructor = struct
  type t = _Int16ArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x3147 : Ojs.t) -> _Int16ArrayConstructor_of_js x3147

  and t_to_js : t -> Ojs.t =
   fun (x3146 : _Int16ArrayConstructor) -> _Int16ArrayConstructor_to_js x3146

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x3149 : Ojs.t) -> t_of_js x3149

  and t_0_to_js : t_0 -> Ojs.t = fun (x3148 : t) -> t_to_js x3148

  let (get_prototype : t -> _Int16Array) =
   fun (x3150 : t) ->
    _Int16Array_of_js (Ojs.get_prop_ascii (t_to_js x3150) "prototype")

  let (create : t -> length:float -> _Int16Array) =
   fun (x3152 : t) ~length:(x3151 : float) ->
    _Int16Array_of_js (Ojs.new_obj (t_to_js x3152) [| Ojs.float_to_js x3151 |])

  let (create' : t -> array:(_ArrayBuffer, float _Array) union2 -> _Int16Array) =
   fun (x3157 : t) ~array:(x3153 : (_ArrayBuffer, float _Array) union2) ->
    _Int16Array_of_js
      (Ojs.new_obj
         (t_to_js x3157)
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x3155 : float _Array) -> _Array_to_js Ojs.float_to_js x3155)
              x3153
         |])

  let (create'' :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Int16Array)
    =
   fun (x3164 : t)
       ~buffer:(x3158 : _ArrayBuffer)
       ?byteOffset:(x3159 : float option)
       ?length:(x3160 : float option)
       () ->
    _Int16Array_of_js
      (Ojs.new_obj_arr
         (t_to_js x3164)
         (let x3161 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x3161 "push" [| _ArrayBuffer_to_js x3158 |]);
          (match x3159 with
          | Some x3163 ->
            ignore (Ojs.call x3161 "push" [| Ojs.float_to_js x3163 |])
          | None ->
            ());
          (match x3160 with
          | Some x3162 ->
            ignore (Ojs.call x3161 "push" [| Ojs.float_to_js x3162 |])
          | None ->
            ());
          x3161))

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x3165 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3165) "BYTES_PER_ELEMENT")

  let (of_ : t -> items:float list -> _Int16Array) =
   fun (x3169 : t) ~items:(x3166 : float list) ->
    _Int16Array_of_js
      (let x3170 = t_to_js x3169 in
       Ojs.call
         (Ojs.get_prop_ascii x3170 "of")
         "apply"
         [| x3170
          ; (let x3167 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x3168 : float) ->
                 ignore (Ojs.call x3167 "push" [| Ojs.float_to_js x3168 |]))
               x3166;
             x3167)
         |])

  let (from : t -> array:float _Array -> _Int16Array) =
   fun (x3173 : t) ~array:(x3171 : float _Array) ->
    _Int16Array_of_js
      (Ojs.call (t_to_js x3173) "from" [| _Array_to_js Ojs.float_to_js x3171 |])

  let (from' :
        t
        -> array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Int16Array)
    =
   fun (x3182 : t)
       ~array:(x3174 : 'T _Array)
       ~mapfn:(x3175 : v:'T -> k:float -> float)
       ?thisArg:(x3176 : any option)
       () ->
    _Int16Array_of_js
      (let x3183 = t_to_js x3182 in
       Ojs.call
         (Ojs.get_prop_ascii x3183 "from")
         "apply"
         [| x3183
          ; (let x3177 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3177 "push" [| _Array_to_js Obj.magic x3174 |]);
             ignore
               (Ojs.call
                  x3177
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x3179 : Ojs.t) (x3180 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3175
                              ~v:(Obj.magic x3179)
                              ~k:(Ojs.float_of_js x3180)))
                  |]);
             (match x3176 with
             | Some x3178 ->
               ignore (Ojs.call x3177 "push" [| any_to_js x3178 |])
             | None ->
               ());
             x3177)
         |])
end

let (int16Array : _Int16ArrayConstructor) =
  _Int16ArrayConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Int16Array")

module Uint16Array = struct
  type t = _Uint16Array

  let rec t_of_js : Ojs.t -> t = fun (x3185 : Ojs.t) -> _Uint16Array_of_js x3185

  and t_to_js : t -> Ojs.t =
   fun (x3184 : _Uint16Array) -> _Uint16Array_to_js x3184

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x3187 : Ojs.t) -> t_of_js x3187

  and t_0_to_js : t_0 -> Ojs.t = fun (x3186 : t) -> t_to_js x3186

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x3188 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3188) "BYTES_PER_ELEMENT")

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x3189 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x3189) "buffer")

  let (get_byteLength : t -> float) =
   fun (x3190 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3190) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x3191 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3191) "byteOffset")

  let (copyWithin :
        t -> target:float -> start:float -> ?end_:float -> unit -> t)
    =
   fun (x3197 : t)
       ~target:(x3192 : float)
       ~start:(x3193 : float)
       ?end_:(x3194 : float option)
       () ->
    t_of_js
      (let x3198 = t_to_js x3197 in
       Ojs.call
         (Ojs.get_prop_ascii x3198 "copyWithin")
         "apply"
         [| x3198
          ; (let x3195 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3195 "push" [| Ojs.float_to_js x3192 |]);
             ignore (Ojs.call x3195 "push" [| Ojs.float_to_js x3193 |]);
             (match x3194 with
             | Some x3196 ->
               ignore (Ojs.call x3195 "push" [| Ojs.float_to_js x3196 |])
             | None ->
               ());
             x3195)
         |])

  let (every :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x3206 : t)
       ~predicate:(x3199 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x3200 : any option)
       () ->
    Ojs.bool_of_js
      (let x3207 = t_to_js x3206 in
       Ojs.call
         (Ojs.get_prop_ascii x3207 "every")
         "apply"
         [| x3207
          ; (let x3201 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3201
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3203 : Ojs.t) (x3204 : Ojs.t) (x3205 : Ojs.t) ->
                         unknown_to_js
                           (x3199
                              ~value:(Ojs.float_of_js x3203)
                              ~index:(Ojs.float_of_js x3204)
                              ~array:(t_of_js x3205)))
                  |]);
             (match x3200 with
             | Some x3202 ->
               ignore (Ojs.call x3201 "push" [| any_to_js x3202 |])
             | None ->
               ());
             x3201)
         |])

  let (fill : t -> value:float -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x3214 : t)
       ~value:(x3208 : float)
       ?start:(x3209 : float option)
       ?end_:(x3210 : float option)
       () ->
    t_of_js
      (let x3215 = t_to_js x3214 in
       Ojs.call
         (Ojs.get_prop_ascii x3215 "fill")
         "apply"
         [| x3215
          ; (let x3211 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3211 "push" [| Ojs.float_to_js x3208 |]);
             (match x3209 with
             | Some x3213 ->
               ignore (Ojs.call x3211 "push" [| Ojs.float_to_js x3213 |])
             | None ->
               ());
             (match x3210 with
             | Some x3212 ->
               ignore (Ojs.call x3211 "push" [| Ojs.float_to_js x3212 |])
             | None ->
               ());
             x3211)
         |])

  let (filter :
        t
        -> predicate:(value:float -> index:float -> array:t -> any)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x3223 : t)
       ~predicate:(x3216 : value:float -> index:float -> array:t -> any)
       ?thisArg:(x3217 : any option)
       () ->
    t_of_js
      (let x3224 = t_to_js x3223 in
       Ojs.call
         (Ojs.get_prop_ascii x3224 "filter")
         "apply"
         [| x3224
          ; (let x3218 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3218
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3220 : Ojs.t) (x3221 : Ojs.t) (x3222 : Ojs.t) ->
                         any_to_js
                           (x3216
                              ~value:(Ojs.float_of_js x3220)
                              ~index:(Ojs.float_of_js x3221)
                              ~array:(t_of_js x3222)))
                  |]);
             (match x3217 with
             | Some x3219 ->
               ignore (Ojs.call x3218 "push" [| any_to_js x3219 |])
             | None ->
               ());
             x3218)
         |])

  let (find :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float or_undefined)
    =
   fun (x3232 : t)
       ~predicate:(x3225 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x3226 : any option)
       () ->
    or_undefined_of_js
      Ojs.float_of_js
      (let x3233 = t_to_js x3232 in
       Ojs.call
         (Ojs.get_prop_ascii x3233 "find")
         "apply"
         [| x3233
          ; (let x3227 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3227
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3229 : Ojs.t) (x3230 : Ojs.t) (x3231 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x3225
                              ~value:(Ojs.float_of_js x3229)
                              ~index:(Ojs.float_of_js x3230)
                              ~obj:(t_of_js x3231)))
                  |]);
             (match x3226 with
             | Some x3228 ->
               ignore (Ojs.call x3227 "push" [| any_to_js x3228 |])
             | None ->
               ());
             x3227)
         |])

  let (findIndex :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float)
    =
   fun (x3242 : t)
       ~predicate:(x3235 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x3236 : any option)
       () ->
    Ojs.float_of_js
      (let x3243 = t_to_js x3242 in
       Ojs.call
         (Ojs.get_prop_ascii x3243 "findIndex")
         "apply"
         [| x3243
          ; (let x3237 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3237
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3239 : Ojs.t) (x3240 : Ojs.t) (x3241 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x3235
                              ~value:(Ojs.float_of_js x3239)
                              ~index:(Ojs.float_of_js x3240)
                              ~obj:(t_of_js x3241)))
                  |]);
             (match x3236 with
             | Some x3238 ->
               ignore (Ojs.call x3237 "push" [| any_to_js x3238 |])
             | None ->
               ());
             x3237)
         |])

  let (forEach :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x3251 : t)
       ~callbackfn:(x3244 : value:float -> index:float -> array:t -> unit)
       ?thisArg:(x3245 : any option)
       () ->
    ignore
      (let x3252 = t_to_js x3251 in
       Ojs.call
         (Ojs.get_prop_ascii x3252 "forEach")
         "apply"
         [| x3252
          ; (let x3246 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3246
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3248 : Ojs.t) (x3249 : Ojs.t) (x3250 : Ojs.t) ->
                         x3244
                           ~value:(Ojs.float_of_js x3248)
                           ~index:(Ojs.float_of_js x3249)
                           ~array:(t_of_js x3250))
                  |]);
             (match x3245 with
             | Some x3247 ->
               ignore (Ojs.call x3246 "push" [| any_to_js x3247 |])
             | None ->
               ());
             x3246)
         |])

  let (indexOf : t -> searchElement:float -> ?fromIndex:float -> unit -> float) =
   fun (x3257 : t)
       ~searchElement:(x3253 : float)
       ?fromIndex:(x3254 : float option)
       () ->
    Ojs.float_of_js
      (let x3258 = t_to_js x3257 in
       Ojs.call
         (Ojs.get_prop_ascii x3258 "indexOf")
         "apply"
         [| x3258
          ; (let x3255 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3255 "push" [| Ojs.float_to_js x3253 |]);
             (match x3254 with
             | Some x3256 ->
               ignore (Ojs.call x3255 "push" [| Ojs.float_to_js x3256 |])
             | None ->
               ());
             x3255)
         |])

  let (join : t -> ?separator:string -> unit -> string) =
   fun (x3262 : t) ?separator:(x3259 : string option) () ->
    Ojs.string_of_js
      (let x3263 = t_to_js x3262 in
       Ojs.call
         (Ojs.get_prop_ascii x3263 "join")
         "apply"
         [| x3263
          ; (let x3260 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3259 with
             | Some x3261 ->
               ignore (Ojs.call x3260 "push" [| Ojs.string_to_js x3261 |])
             | None ->
               ());
             x3260)
         |])

  let (lastIndexOf :
        t -> searchElement:float -> ?fromIndex:float -> unit -> float)
    =
   fun (x3268 : t)
       ~searchElement:(x3264 : float)
       ?fromIndex:(x3265 : float option)
       () ->
    Ojs.float_of_js
      (let x3269 = t_to_js x3268 in
       Ojs.call
         (Ojs.get_prop_ascii x3269 "lastIndexOf")
         "apply"
         [| x3269
          ; (let x3266 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3266 "push" [| Ojs.float_to_js x3264 |]);
             (match x3265 with
             | Some x3267 ->
               ignore (Ojs.call x3266 "push" [| Ojs.float_to_js x3267 |])
             | None ->
               ());
             x3266)
         |])

  let (get_length : t -> float) =
   fun (x3270 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3270) "length")

  let (map :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> float)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x3278 : t)
       ~callbackfn:(x3271 : value:float -> index:float -> array:t -> float)
       ?thisArg:(x3272 : any option)
       () ->
    t_of_js
      (let x3279 = t_to_js x3278 in
       Ojs.call
         (Ojs.get_prop_ascii x3279 "map")
         "apply"
         [| x3279
          ; (let x3273 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3273
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3275 : Ojs.t) (x3276 : Ojs.t) (x3277 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3271
                              ~value:(Ojs.float_of_js x3275)
                              ~index:(Ojs.float_of_js x3276)
                              ~array:(t_of_js x3277)))
                  |]);
             (match x3272 with
             | Some x3274 ->
               ignore (Ojs.call x3273 "push" [| any_to_js x3274 |])
             | None ->
               ());
             x3273)
         |])

  let (reduce :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x3285 : t)
       ~callbackfn:
         (x3280 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3285)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3281 : Ojs.t)
                (x3282 : Ojs.t)
                (x3283 : Ojs.t)
                (x3284 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3280
                     ~previousValue:(Ojs.float_of_js x3281)
                     ~currentValue:(Ojs.float_of_js x3282)
                     ~currentIndex:(Ojs.float_of_js x3283)
                     ~array:(t_of_js x3284)))
         |])

  let (reduce' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x3292 : t)
       ~callbackfn:
         (x3286 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x3291 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3292)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3287 : Ojs.t)
                (x3288 : Ojs.t)
                (x3289 : Ojs.t)
                (x3290 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3286
                     ~previousValue:(Ojs.float_of_js x3287)
                     ~currentValue:(Ojs.float_of_js x3288)
                     ~currentIndex:(Ojs.float_of_js x3289)
                     ~array:(t_of_js x3290)))
          ; Ojs.float_to_js x3291
         |])

  let (reduce'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x3299 : t)
       ~callbackfn:
         (x3293 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x3298 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x3299)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3294 : Ojs.t)
                (x3295 : Ojs.t)
                (x3296 : Ojs.t)
                (x3297 : Ojs.t)
              ->
                Obj.magic
                  (x3293
                     ~previousValue:(Obj.magic x3294)
                     ~currentValue:(Ojs.float_of_js x3295)
                     ~currentIndex:(Ojs.float_of_js x3296)
                     ~array:(t_of_js x3297)))
          ; Obj.magic x3298
         |])

  let (reduceRight :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x3305 : t)
       ~callbackfn:
         (x3300 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3305)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3301 : Ojs.t)
                (x3302 : Ojs.t)
                (x3303 : Ojs.t)
                (x3304 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3300
                     ~previousValue:(Ojs.float_of_js x3301)
                     ~currentValue:(Ojs.float_of_js x3302)
                     ~currentIndex:(Ojs.float_of_js x3303)
                     ~array:(t_of_js x3304)))
         |])

  let (reduceRight' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x3312 : t)
       ~callbackfn:
         (x3306 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x3311 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3312)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3307 : Ojs.t)
                (x3308 : Ojs.t)
                (x3309 : Ojs.t)
                (x3310 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3306
                     ~previousValue:(Ojs.float_of_js x3307)
                     ~currentValue:(Ojs.float_of_js x3308)
                     ~currentIndex:(Ojs.float_of_js x3309)
                     ~array:(t_of_js x3310)))
          ; Ojs.float_to_js x3311
         |])

  let (reduceRight'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x3319 : t)
       ~callbackfn:
         (x3313 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x3318 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x3319)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3314 : Ojs.t)
                (x3315 : Ojs.t)
                (x3316 : Ojs.t)
                (x3317 : Ojs.t)
              ->
                Obj.magic
                  (x3313
                     ~previousValue:(Obj.magic x3314)
                     ~currentValue:(Ojs.float_of_js x3315)
                     ~currentIndex:(Ojs.float_of_js x3316)
                     ~array:(t_of_js x3317)))
          ; Obj.magic x3318
         |])

  let (reverse : t -> t) =
   fun (x3320 : t) -> t_of_js (Ojs.call (t_to_js x3320) "reverse" [||])

  let (set_ : t -> array:float _Array -> ?offset:float -> unit -> unit) =
   fun (x3326 : t)
       ~array:(x3321 : float _Array)
       ?offset:(x3322 : float option)
       () ->
    ignore
      (let x3327 = t_to_js x3326 in
       Ojs.call
         (Ojs.get_prop_ascii x3327 "set")
         "apply"
         [| x3327
          ; (let x3323 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x3323 "push" [| _Array_to_js Ojs.float_to_js x3321 |]);
             (match x3322 with
             | Some x3324 ->
               ignore (Ojs.call x3323 "push" [| Ojs.float_to_js x3324 |])
             | None ->
               ());
             x3323)
         |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x3333 : t) ?start:(x3328 : float option) ?end_:(x3329 : float option) () ->
    t_of_js
      (let x3334 = t_to_js x3333 in
       Ojs.call
         (Ojs.get_prop_ascii x3334 "slice")
         "apply"
         [| x3334
          ; (let x3330 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3328 with
             | Some x3332 ->
               ignore (Ojs.call x3330 "push" [| Ojs.float_to_js x3332 |])
             | None ->
               ());
             (match x3329 with
             | Some x3331 ->
               ignore (Ojs.call x3330 "push" [| Ojs.float_to_js x3331 |])
             | None ->
               ());
             x3330)
         |])

  let (some :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x3342 : t)
       ~predicate:(x3335 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x3336 : any option)
       () ->
    Ojs.bool_of_js
      (let x3343 = t_to_js x3342 in
       Ojs.call
         (Ojs.get_prop_ascii x3343 "some")
         "apply"
         [| x3343
          ; (let x3337 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3337
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3339 : Ojs.t) (x3340 : Ojs.t) (x3341 : Ojs.t) ->
                         unknown_to_js
                           (x3335
                              ~value:(Ojs.float_of_js x3339)
                              ~index:(Ojs.float_of_js x3340)
                              ~array:(t_of_js x3341)))
                  |]);
             (match x3336 with
             | Some x3338 ->
               ignore (Ojs.call x3337 "push" [| any_to_js x3338 |])
             | None ->
               ());
             x3337)
         |])

  let (sort : t -> ?compareFn:(a:float -> b:float -> float) -> unit -> t) =
   fun (x3349 : t) ?compareFn:(x3344 : (a:float -> b:float -> float) option) () ->
    t_of_js
      (let x3350 = t_to_js x3349 in
       Ojs.call
         (Ojs.get_prop_ascii x3350 "sort")
         "apply"
         [| x3350
          ; (let x3345 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3344 with
             | Some x3346 ->
               ignore
                 (Ojs.call
                    x3345
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x3347 : Ojs.t) (x3348 : Ojs.t) ->
                           Ojs.float_to_js
                             (x3346
                                ~a:(Ojs.float_of_js x3347)
                                ~b:(Ojs.float_of_js x3348)))
                    |])
             | None ->
               ());
             x3345)
         |])

  let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
   fun (x3356 : t)
       ?begin_:(x3351 : float option)
       ?end_:(x3352 : float option)
       () ->
    t_of_js
      (let x3357 = t_to_js x3356 in
       Ojs.call
         (Ojs.get_prop_ascii x3357 "subarray")
         "apply"
         [| x3357
          ; (let x3353 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3351 with
             | Some x3355 ->
               ignore (Ojs.call x3353 "push" [| Ojs.float_to_js x3355 |])
             | None ->
               ());
             (match x3352 with
             | Some x3354 ->
               ignore (Ojs.call x3353 "push" [| Ojs.float_to_js x3354 |])
             | None ->
               ());
             x3353)
         |])

  let (toLocaleString : t -> string) =
   fun (x3358 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x3358) "toLocaleString" [||])

  let (toString : t -> string) =
   fun (x3359 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x3359) "toString" [||])

  let (valueOf : t -> t) =
   fun (x3360 : t) -> t_of_js (Ojs.call (t_to_js x3360) "valueOf" [||])

  let (get : t -> float -> float) =
   fun (x3361 : t) (x3362 : float) ->
    Ojs.float_of_js (Ojs.get_prop (t_to_js x3361) (Ojs.float_to_js x3362))

  let (set : t -> float -> float -> unit) =
   fun (x3363 : t) (x3364 : float) (x3365 : float) ->
    Ojs.set_prop (t_to_js x3363) (Ojs.float_to_js x3364) (Ojs.float_to_js x3365)

  let (create : length:float -> _Uint16Array) =
   fun ~length:(x3366 : float) ->
    _Uint16Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Uint16Array")
         [| Ojs.float_to_js x3366 |])

  let (create' : array:(_ArrayBuffer, float _Array) union2 -> _Uint16Array) =
   fun ~array:(x3367 : (_ArrayBuffer, float _Array) union2) ->
    _Uint16Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Uint16Array")
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x3369 : float _Array) -> _Array_to_js Ojs.float_to_js x3369)
              x3367
         |])

  let (create'' :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Uint16Array)
    =
   fun ~buffer:(x3371 : _ArrayBuffer)
       ?byteOffset:(x3372 : float option)
       ?length:(x3373 : float option)
       () ->
    _Uint16Array_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Uint16Array")
         (let x3374 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x3374 "push" [| _ArrayBuffer_to_js x3371 |]);
          (match x3372 with
          | Some x3376 ->
            ignore (Ojs.call x3374 "push" [| Ojs.float_to_js x3376 |])
          | None ->
            ());
          (match x3373 with
          | Some x3375 ->
            ignore (Ojs.call x3374 "push" [| Ojs.float_to_js x3375 |])
          | None ->
            ());
          x3374))

  let (get_BYTES_PER_ELEMENT : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Uint16Array")
         "BYTES_PER_ELEMENT")

  let (of_ : items:float list -> _Uint16Array) =
   fun ~items:(x3377 : float list) ->
    _Uint16Array_of_js
      (let x3380 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
       Ojs.call
         (Ojs.get_prop_ascii x3380 "of")
         "apply"
         [| x3380
          ; (let x3378 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x3379 : float) ->
                 ignore (Ojs.call x3378 "push" [| Ojs.float_to_js x3379 |]))
               x3377;
             x3378)
         |])

  let (from : array:float _Array -> _Uint16Array) =
   fun ~array:(x3381 : float _Array) ->
    _Uint16Array_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Uint16Array")
         "from"
         [| _Array_to_js Ojs.float_to_js x3381 |])

  let (from' :
        array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Uint16Array)
    =
   fun ~array:(x3383 : 'T _Array)
       ~mapfn:(x3384 : v:'T -> k:float -> float)
       ?thisArg:(x3385 : any option)
       () ->
    _Uint16Array_of_js
      (let x3391 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
       Ojs.call
         (Ojs.get_prop_ascii x3391 "from")
         "apply"
         [| x3391
          ; (let x3386 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3386 "push" [| _Array_to_js Obj.magic x3383 |]);
             ignore
               (Ojs.call
                  x3386
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x3388 : Ojs.t) (x3389 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3384
                              ~v:(Obj.magic x3388)
                              ~k:(Ojs.float_of_js x3389)))
                  |]);
             (match x3385 with
             | Some x3387 ->
               ignore (Ojs.call x3386 "push" [| any_to_js x3387 |])
             | None ->
               ());
             x3386)
         |])
end

module Uint16ArrayConstructor = struct
  type t = _Uint16ArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x3393 : Ojs.t) -> _Uint16ArrayConstructor_of_js x3393

  and t_to_js : t -> Ojs.t =
   fun (x3392 : _Uint16ArrayConstructor) -> _Uint16ArrayConstructor_to_js x3392

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x3395 : Ojs.t) -> t_of_js x3395

  and t_0_to_js : t_0 -> Ojs.t = fun (x3394 : t) -> t_to_js x3394

  let (get_prototype : t -> _Uint16Array) =
   fun (x3396 : t) ->
    _Uint16Array_of_js (Ojs.get_prop_ascii (t_to_js x3396) "prototype")

  let (create : t -> length:float -> _Uint16Array) =
   fun (x3398 : t) ~length:(x3397 : float) ->
    _Uint16Array_of_js (Ojs.new_obj (t_to_js x3398) [| Ojs.float_to_js x3397 |])

  let (create' : t -> array:(_ArrayBuffer, float _Array) union2 -> _Uint16Array)
    =
   fun (x3403 : t) ~array:(x3399 : (_ArrayBuffer, float _Array) union2) ->
    _Uint16Array_of_js
      (Ojs.new_obj
         (t_to_js x3403)
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x3401 : float _Array) -> _Array_to_js Ojs.float_to_js x3401)
              x3399
         |])

  let (create'' :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Uint16Array)
    =
   fun (x3410 : t)
       ~buffer:(x3404 : _ArrayBuffer)
       ?byteOffset:(x3405 : float option)
       ?length:(x3406 : float option)
       () ->
    _Uint16Array_of_js
      (Ojs.new_obj_arr
         (t_to_js x3410)
         (let x3407 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x3407 "push" [| _ArrayBuffer_to_js x3404 |]);
          (match x3405 with
          | Some x3409 ->
            ignore (Ojs.call x3407 "push" [| Ojs.float_to_js x3409 |])
          | None ->
            ());
          (match x3406 with
          | Some x3408 ->
            ignore (Ojs.call x3407 "push" [| Ojs.float_to_js x3408 |])
          | None ->
            ());
          x3407))

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x3411 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3411) "BYTES_PER_ELEMENT")

  let (of_ : t -> items:float list -> _Uint16Array) =
   fun (x3415 : t) ~items:(x3412 : float list) ->
    _Uint16Array_of_js
      (let x3416 = t_to_js x3415 in
       Ojs.call
         (Ojs.get_prop_ascii x3416 "of")
         "apply"
         [| x3416
          ; (let x3413 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x3414 : float) ->
                 ignore (Ojs.call x3413 "push" [| Ojs.float_to_js x3414 |]))
               x3412;
             x3413)
         |])

  let (from : t -> array:float _Array -> _Uint16Array) =
   fun (x3419 : t) ~array:(x3417 : float _Array) ->
    _Uint16Array_of_js
      (Ojs.call (t_to_js x3419) "from" [| _Array_to_js Ojs.float_to_js x3417 |])

  let (from' :
        t
        -> array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Uint16Array)
    =
   fun (x3428 : t)
       ~array:(x3420 : 'T _Array)
       ~mapfn:(x3421 : v:'T -> k:float -> float)
       ?thisArg:(x3422 : any option)
       () ->
    _Uint16Array_of_js
      (let x3429 = t_to_js x3428 in
       Ojs.call
         (Ojs.get_prop_ascii x3429 "from")
         "apply"
         [| x3429
          ; (let x3423 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3423 "push" [| _Array_to_js Obj.magic x3420 |]);
             ignore
               (Ojs.call
                  x3423
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x3425 : Ojs.t) (x3426 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3421
                              ~v:(Obj.magic x3425)
                              ~k:(Ojs.float_of_js x3426)))
                  |]);
             (match x3422 with
             | Some x3424 ->
               ignore (Ojs.call x3423 "push" [| any_to_js x3424 |])
             | None ->
               ());
             x3423)
         |])
end

let (uint16Array : _Uint16ArrayConstructor) =
  _Uint16ArrayConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Uint16Array")

module Int32Array = struct
  type t = _Int32Array

  let rec t_of_js : Ojs.t -> t = fun (x3431 : Ojs.t) -> _Int32Array_of_js x3431

  and t_to_js : t -> Ojs.t =
   fun (x3430 : _Int32Array) -> _Int32Array_to_js x3430

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x3433 : Ojs.t) -> t_of_js x3433

  and t_0_to_js : t_0 -> Ojs.t = fun (x3432 : t) -> t_to_js x3432

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x3434 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3434) "BYTES_PER_ELEMENT")

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x3435 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x3435) "buffer")

  let (get_byteLength : t -> float) =
   fun (x3436 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3436) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x3437 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3437) "byteOffset")

  let (copyWithin :
        t -> target:float -> start:float -> ?end_:float -> unit -> t)
    =
   fun (x3443 : t)
       ~target:(x3438 : float)
       ~start:(x3439 : float)
       ?end_:(x3440 : float option)
       () ->
    t_of_js
      (let x3444 = t_to_js x3443 in
       Ojs.call
         (Ojs.get_prop_ascii x3444 "copyWithin")
         "apply"
         [| x3444
          ; (let x3441 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3441 "push" [| Ojs.float_to_js x3438 |]);
             ignore (Ojs.call x3441 "push" [| Ojs.float_to_js x3439 |]);
             (match x3440 with
             | Some x3442 ->
               ignore (Ojs.call x3441 "push" [| Ojs.float_to_js x3442 |])
             | None ->
               ());
             x3441)
         |])

  let (every :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x3452 : t)
       ~predicate:(x3445 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x3446 : any option)
       () ->
    Ojs.bool_of_js
      (let x3453 = t_to_js x3452 in
       Ojs.call
         (Ojs.get_prop_ascii x3453 "every")
         "apply"
         [| x3453
          ; (let x3447 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3447
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3449 : Ojs.t) (x3450 : Ojs.t) (x3451 : Ojs.t) ->
                         unknown_to_js
                           (x3445
                              ~value:(Ojs.float_of_js x3449)
                              ~index:(Ojs.float_of_js x3450)
                              ~array:(t_of_js x3451)))
                  |]);
             (match x3446 with
             | Some x3448 ->
               ignore (Ojs.call x3447 "push" [| any_to_js x3448 |])
             | None ->
               ());
             x3447)
         |])

  let (fill : t -> value:float -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x3460 : t)
       ~value:(x3454 : float)
       ?start:(x3455 : float option)
       ?end_:(x3456 : float option)
       () ->
    t_of_js
      (let x3461 = t_to_js x3460 in
       Ojs.call
         (Ojs.get_prop_ascii x3461 "fill")
         "apply"
         [| x3461
          ; (let x3457 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3457 "push" [| Ojs.float_to_js x3454 |]);
             (match x3455 with
             | Some x3459 ->
               ignore (Ojs.call x3457 "push" [| Ojs.float_to_js x3459 |])
             | None ->
               ());
             (match x3456 with
             | Some x3458 ->
               ignore (Ojs.call x3457 "push" [| Ojs.float_to_js x3458 |])
             | None ->
               ());
             x3457)
         |])

  let (filter :
        t
        -> predicate:(value:float -> index:float -> array:t -> any)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x3469 : t)
       ~predicate:(x3462 : value:float -> index:float -> array:t -> any)
       ?thisArg:(x3463 : any option)
       () ->
    t_of_js
      (let x3470 = t_to_js x3469 in
       Ojs.call
         (Ojs.get_prop_ascii x3470 "filter")
         "apply"
         [| x3470
          ; (let x3464 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3464
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3466 : Ojs.t) (x3467 : Ojs.t) (x3468 : Ojs.t) ->
                         any_to_js
                           (x3462
                              ~value:(Ojs.float_of_js x3466)
                              ~index:(Ojs.float_of_js x3467)
                              ~array:(t_of_js x3468)))
                  |]);
             (match x3463 with
             | Some x3465 ->
               ignore (Ojs.call x3464 "push" [| any_to_js x3465 |])
             | None ->
               ());
             x3464)
         |])

  let (find :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float or_undefined)
    =
   fun (x3478 : t)
       ~predicate:(x3471 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x3472 : any option)
       () ->
    or_undefined_of_js
      Ojs.float_of_js
      (let x3479 = t_to_js x3478 in
       Ojs.call
         (Ojs.get_prop_ascii x3479 "find")
         "apply"
         [| x3479
          ; (let x3473 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3473
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3475 : Ojs.t) (x3476 : Ojs.t) (x3477 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x3471
                              ~value:(Ojs.float_of_js x3475)
                              ~index:(Ojs.float_of_js x3476)
                              ~obj:(t_of_js x3477)))
                  |]);
             (match x3472 with
             | Some x3474 ->
               ignore (Ojs.call x3473 "push" [| any_to_js x3474 |])
             | None ->
               ());
             x3473)
         |])

  let (findIndex :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float)
    =
   fun (x3488 : t)
       ~predicate:(x3481 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x3482 : any option)
       () ->
    Ojs.float_of_js
      (let x3489 = t_to_js x3488 in
       Ojs.call
         (Ojs.get_prop_ascii x3489 "findIndex")
         "apply"
         [| x3489
          ; (let x3483 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3483
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3485 : Ojs.t) (x3486 : Ojs.t) (x3487 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x3481
                              ~value:(Ojs.float_of_js x3485)
                              ~index:(Ojs.float_of_js x3486)
                              ~obj:(t_of_js x3487)))
                  |]);
             (match x3482 with
             | Some x3484 ->
               ignore (Ojs.call x3483 "push" [| any_to_js x3484 |])
             | None ->
               ());
             x3483)
         |])

  let (forEach :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x3497 : t)
       ~callbackfn:(x3490 : value:float -> index:float -> array:t -> unit)
       ?thisArg:(x3491 : any option)
       () ->
    ignore
      (let x3498 = t_to_js x3497 in
       Ojs.call
         (Ojs.get_prop_ascii x3498 "forEach")
         "apply"
         [| x3498
          ; (let x3492 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3492
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3494 : Ojs.t) (x3495 : Ojs.t) (x3496 : Ojs.t) ->
                         x3490
                           ~value:(Ojs.float_of_js x3494)
                           ~index:(Ojs.float_of_js x3495)
                           ~array:(t_of_js x3496))
                  |]);
             (match x3491 with
             | Some x3493 ->
               ignore (Ojs.call x3492 "push" [| any_to_js x3493 |])
             | None ->
               ());
             x3492)
         |])

  let (indexOf : t -> searchElement:float -> ?fromIndex:float -> unit -> float) =
   fun (x3503 : t)
       ~searchElement:(x3499 : float)
       ?fromIndex:(x3500 : float option)
       () ->
    Ojs.float_of_js
      (let x3504 = t_to_js x3503 in
       Ojs.call
         (Ojs.get_prop_ascii x3504 "indexOf")
         "apply"
         [| x3504
          ; (let x3501 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3501 "push" [| Ojs.float_to_js x3499 |]);
             (match x3500 with
             | Some x3502 ->
               ignore (Ojs.call x3501 "push" [| Ojs.float_to_js x3502 |])
             | None ->
               ());
             x3501)
         |])

  let (join : t -> ?separator:string -> unit -> string) =
   fun (x3508 : t) ?separator:(x3505 : string option) () ->
    Ojs.string_of_js
      (let x3509 = t_to_js x3508 in
       Ojs.call
         (Ojs.get_prop_ascii x3509 "join")
         "apply"
         [| x3509
          ; (let x3506 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3505 with
             | Some x3507 ->
               ignore (Ojs.call x3506 "push" [| Ojs.string_to_js x3507 |])
             | None ->
               ());
             x3506)
         |])

  let (lastIndexOf :
        t -> searchElement:float -> ?fromIndex:float -> unit -> float)
    =
   fun (x3514 : t)
       ~searchElement:(x3510 : float)
       ?fromIndex:(x3511 : float option)
       () ->
    Ojs.float_of_js
      (let x3515 = t_to_js x3514 in
       Ojs.call
         (Ojs.get_prop_ascii x3515 "lastIndexOf")
         "apply"
         [| x3515
          ; (let x3512 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3512 "push" [| Ojs.float_to_js x3510 |]);
             (match x3511 with
             | Some x3513 ->
               ignore (Ojs.call x3512 "push" [| Ojs.float_to_js x3513 |])
             | None ->
               ());
             x3512)
         |])

  let (get_length : t -> float) =
   fun (x3516 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3516) "length")

  let (map :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> float)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x3524 : t)
       ~callbackfn:(x3517 : value:float -> index:float -> array:t -> float)
       ?thisArg:(x3518 : any option)
       () ->
    t_of_js
      (let x3525 = t_to_js x3524 in
       Ojs.call
         (Ojs.get_prop_ascii x3525 "map")
         "apply"
         [| x3525
          ; (let x3519 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3519
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3521 : Ojs.t) (x3522 : Ojs.t) (x3523 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3517
                              ~value:(Ojs.float_of_js x3521)
                              ~index:(Ojs.float_of_js x3522)
                              ~array:(t_of_js x3523)))
                  |]);
             (match x3518 with
             | Some x3520 ->
               ignore (Ojs.call x3519 "push" [| any_to_js x3520 |])
             | None ->
               ());
             x3519)
         |])

  let (reduce :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x3531 : t)
       ~callbackfn:
         (x3526 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3531)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3527 : Ojs.t)
                (x3528 : Ojs.t)
                (x3529 : Ojs.t)
                (x3530 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3526
                     ~previousValue:(Ojs.float_of_js x3527)
                     ~currentValue:(Ojs.float_of_js x3528)
                     ~currentIndex:(Ojs.float_of_js x3529)
                     ~array:(t_of_js x3530)))
         |])

  let (reduce' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x3538 : t)
       ~callbackfn:
         (x3532 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x3537 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3538)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3533 : Ojs.t)
                (x3534 : Ojs.t)
                (x3535 : Ojs.t)
                (x3536 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3532
                     ~previousValue:(Ojs.float_of_js x3533)
                     ~currentValue:(Ojs.float_of_js x3534)
                     ~currentIndex:(Ojs.float_of_js x3535)
                     ~array:(t_of_js x3536)))
          ; Ojs.float_to_js x3537
         |])

  let (reduce'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x3545 : t)
       ~callbackfn:
         (x3539 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x3544 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x3545)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3540 : Ojs.t)
                (x3541 : Ojs.t)
                (x3542 : Ojs.t)
                (x3543 : Ojs.t)
              ->
                Obj.magic
                  (x3539
                     ~previousValue:(Obj.magic x3540)
                     ~currentValue:(Ojs.float_of_js x3541)
                     ~currentIndex:(Ojs.float_of_js x3542)
                     ~array:(t_of_js x3543)))
          ; Obj.magic x3544
         |])

  let (reduceRight :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x3551 : t)
       ~callbackfn:
         (x3546 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3551)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3547 : Ojs.t)
                (x3548 : Ojs.t)
                (x3549 : Ojs.t)
                (x3550 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3546
                     ~previousValue:(Ojs.float_of_js x3547)
                     ~currentValue:(Ojs.float_of_js x3548)
                     ~currentIndex:(Ojs.float_of_js x3549)
                     ~array:(t_of_js x3550)))
         |])

  let (reduceRight' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x3558 : t)
       ~callbackfn:
         (x3552 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x3557 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3558)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3553 : Ojs.t)
                (x3554 : Ojs.t)
                (x3555 : Ojs.t)
                (x3556 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3552
                     ~previousValue:(Ojs.float_of_js x3553)
                     ~currentValue:(Ojs.float_of_js x3554)
                     ~currentIndex:(Ojs.float_of_js x3555)
                     ~array:(t_of_js x3556)))
          ; Ojs.float_to_js x3557
         |])

  let (reduceRight'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x3565 : t)
       ~callbackfn:
         (x3559 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x3564 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x3565)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3560 : Ojs.t)
                (x3561 : Ojs.t)
                (x3562 : Ojs.t)
                (x3563 : Ojs.t)
              ->
                Obj.magic
                  (x3559
                     ~previousValue:(Obj.magic x3560)
                     ~currentValue:(Ojs.float_of_js x3561)
                     ~currentIndex:(Ojs.float_of_js x3562)
                     ~array:(t_of_js x3563)))
          ; Obj.magic x3564
         |])

  let (reverse : t -> t) =
   fun (x3566 : t) -> t_of_js (Ojs.call (t_to_js x3566) "reverse" [||])

  let (set_ : t -> array:float _Array -> ?offset:float -> unit -> unit) =
   fun (x3572 : t)
       ~array:(x3567 : float _Array)
       ?offset:(x3568 : float option)
       () ->
    ignore
      (let x3573 = t_to_js x3572 in
       Ojs.call
         (Ojs.get_prop_ascii x3573 "set")
         "apply"
         [| x3573
          ; (let x3569 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x3569 "push" [| _Array_to_js Ojs.float_to_js x3567 |]);
             (match x3568 with
             | Some x3570 ->
               ignore (Ojs.call x3569 "push" [| Ojs.float_to_js x3570 |])
             | None ->
               ());
             x3569)
         |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x3579 : t) ?start:(x3574 : float option) ?end_:(x3575 : float option) () ->
    t_of_js
      (let x3580 = t_to_js x3579 in
       Ojs.call
         (Ojs.get_prop_ascii x3580 "slice")
         "apply"
         [| x3580
          ; (let x3576 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3574 with
             | Some x3578 ->
               ignore (Ojs.call x3576 "push" [| Ojs.float_to_js x3578 |])
             | None ->
               ());
             (match x3575 with
             | Some x3577 ->
               ignore (Ojs.call x3576 "push" [| Ojs.float_to_js x3577 |])
             | None ->
               ());
             x3576)
         |])

  let (some :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x3588 : t)
       ~predicate:(x3581 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x3582 : any option)
       () ->
    Ojs.bool_of_js
      (let x3589 = t_to_js x3588 in
       Ojs.call
         (Ojs.get_prop_ascii x3589 "some")
         "apply"
         [| x3589
          ; (let x3583 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3583
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3585 : Ojs.t) (x3586 : Ojs.t) (x3587 : Ojs.t) ->
                         unknown_to_js
                           (x3581
                              ~value:(Ojs.float_of_js x3585)
                              ~index:(Ojs.float_of_js x3586)
                              ~array:(t_of_js x3587)))
                  |]);
             (match x3582 with
             | Some x3584 ->
               ignore (Ojs.call x3583 "push" [| any_to_js x3584 |])
             | None ->
               ());
             x3583)
         |])

  let (sort : t -> ?compareFn:(a:float -> b:float -> float) -> unit -> t) =
   fun (x3595 : t) ?compareFn:(x3590 : (a:float -> b:float -> float) option) () ->
    t_of_js
      (let x3596 = t_to_js x3595 in
       Ojs.call
         (Ojs.get_prop_ascii x3596 "sort")
         "apply"
         [| x3596
          ; (let x3591 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3590 with
             | Some x3592 ->
               ignore
                 (Ojs.call
                    x3591
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x3593 : Ojs.t) (x3594 : Ojs.t) ->
                           Ojs.float_to_js
                             (x3592
                                ~a:(Ojs.float_of_js x3593)
                                ~b:(Ojs.float_of_js x3594)))
                    |])
             | None ->
               ());
             x3591)
         |])

  let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
   fun (x3602 : t)
       ?begin_:(x3597 : float option)
       ?end_:(x3598 : float option)
       () ->
    t_of_js
      (let x3603 = t_to_js x3602 in
       Ojs.call
         (Ojs.get_prop_ascii x3603 "subarray")
         "apply"
         [| x3603
          ; (let x3599 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3597 with
             | Some x3601 ->
               ignore (Ojs.call x3599 "push" [| Ojs.float_to_js x3601 |])
             | None ->
               ());
             (match x3598 with
             | Some x3600 ->
               ignore (Ojs.call x3599 "push" [| Ojs.float_to_js x3600 |])
             | None ->
               ());
             x3599)
         |])

  let (toLocaleString : t -> string) =
   fun (x3604 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x3604) "toLocaleString" [||])

  let (toString : t -> string) =
   fun (x3605 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x3605) "toString" [||])

  let (valueOf : t -> t) =
   fun (x3606 : t) -> t_of_js (Ojs.call (t_to_js x3606) "valueOf" [||])

  let (get : t -> float -> float) =
   fun (x3607 : t) (x3608 : float) ->
    Ojs.float_of_js (Ojs.get_prop (t_to_js x3607) (Ojs.float_to_js x3608))

  let (set : t -> float -> float -> unit) =
   fun (x3609 : t) (x3610 : float) (x3611 : float) ->
    Ojs.set_prop (t_to_js x3609) (Ojs.float_to_js x3610) (Ojs.float_to_js x3611)

  let (create : length:float -> _Int32Array) =
   fun ~length:(x3612 : float) ->
    _Int32Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Int32Array")
         [| Ojs.float_to_js x3612 |])

  let (create' : array:(_ArrayBuffer, float _Array) union2 -> _Int32Array) =
   fun ~array:(x3613 : (_ArrayBuffer, float _Array) union2) ->
    _Int32Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Int32Array")
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x3615 : float _Array) -> _Array_to_js Ojs.float_to_js x3615)
              x3613
         |])

  let (create'' :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Int32Array)
    =
   fun ~buffer:(x3617 : _ArrayBuffer)
       ?byteOffset:(x3618 : float option)
       ?length:(x3619 : float option)
       () ->
    _Int32Array_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Int32Array")
         (let x3620 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x3620 "push" [| _ArrayBuffer_to_js x3617 |]);
          (match x3618 with
          | Some x3622 ->
            ignore (Ojs.call x3620 "push" [| Ojs.float_to_js x3622 |])
          | None ->
            ());
          (match x3619 with
          | Some x3621 ->
            ignore (Ojs.call x3620 "push" [| Ojs.float_to_js x3621 |])
          | None ->
            ());
          x3620))

  let (get_BYTES_PER_ELEMENT : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Int32Array")
         "BYTES_PER_ELEMENT")

  let (of_ : items:float list -> _Int32Array) =
   fun ~items:(x3623 : float list) ->
    _Int32Array_of_js
      (let x3626 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
       Ojs.call
         (Ojs.get_prop_ascii x3626 "of")
         "apply"
         [| x3626
          ; (let x3624 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x3625 : float) ->
                 ignore (Ojs.call x3624 "push" [| Ojs.float_to_js x3625 |]))
               x3623;
             x3624)
         |])

  let (from : array:float _Array -> _Int32Array) =
   fun ~array:(x3627 : float _Array) ->
    _Int32Array_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Int32Array")
         "from"
         [| _Array_to_js Ojs.float_to_js x3627 |])

  let (from' :
        array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Int32Array)
    =
   fun ~array:(x3629 : 'T _Array)
       ~mapfn:(x3630 : v:'T -> k:float -> float)
       ?thisArg:(x3631 : any option)
       () ->
    _Int32Array_of_js
      (let x3637 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
       Ojs.call
         (Ojs.get_prop_ascii x3637 "from")
         "apply"
         [| x3637
          ; (let x3632 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3632 "push" [| _Array_to_js Obj.magic x3629 |]);
             ignore
               (Ojs.call
                  x3632
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x3634 : Ojs.t) (x3635 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3630
                              ~v:(Obj.magic x3634)
                              ~k:(Ojs.float_of_js x3635)))
                  |]);
             (match x3631 with
             | Some x3633 ->
               ignore (Ojs.call x3632 "push" [| any_to_js x3633 |])
             | None ->
               ());
             x3632)
         |])
end

module Int32ArrayConstructor = struct
  type t = _Int32ArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x3639 : Ojs.t) -> _Int32ArrayConstructor_of_js x3639

  and t_to_js : t -> Ojs.t =
   fun (x3638 : _Int32ArrayConstructor) -> _Int32ArrayConstructor_to_js x3638

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x3641 : Ojs.t) -> t_of_js x3641

  and t_0_to_js : t_0 -> Ojs.t = fun (x3640 : t) -> t_to_js x3640

  let (get_prototype : t -> _Int32Array) =
   fun (x3642 : t) ->
    _Int32Array_of_js (Ojs.get_prop_ascii (t_to_js x3642) "prototype")

  let (create : t -> length:float -> _Int32Array) =
   fun (x3644 : t) ~length:(x3643 : float) ->
    _Int32Array_of_js (Ojs.new_obj (t_to_js x3644) [| Ojs.float_to_js x3643 |])

  let (create' : t -> array:(_ArrayBuffer, float _Array) union2 -> _Int32Array) =
   fun (x3649 : t) ~array:(x3645 : (_ArrayBuffer, float _Array) union2) ->
    _Int32Array_of_js
      (Ojs.new_obj
         (t_to_js x3649)
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x3647 : float _Array) -> _Array_to_js Ojs.float_to_js x3647)
              x3645
         |])

  let (create'' :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Int32Array)
    =
   fun (x3656 : t)
       ~buffer:(x3650 : _ArrayBuffer)
       ?byteOffset:(x3651 : float option)
       ?length:(x3652 : float option)
       () ->
    _Int32Array_of_js
      (Ojs.new_obj_arr
         (t_to_js x3656)
         (let x3653 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x3653 "push" [| _ArrayBuffer_to_js x3650 |]);
          (match x3651 with
          | Some x3655 ->
            ignore (Ojs.call x3653 "push" [| Ojs.float_to_js x3655 |])
          | None ->
            ());
          (match x3652 with
          | Some x3654 ->
            ignore (Ojs.call x3653 "push" [| Ojs.float_to_js x3654 |])
          | None ->
            ());
          x3653))

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x3657 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3657) "BYTES_PER_ELEMENT")

  let (of_ : t -> items:float list -> _Int32Array) =
   fun (x3661 : t) ~items:(x3658 : float list) ->
    _Int32Array_of_js
      (let x3662 = t_to_js x3661 in
       Ojs.call
         (Ojs.get_prop_ascii x3662 "of")
         "apply"
         [| x3662
          ; (let x3659 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x3660 : float) ->
                 ignore (Ojs.call x3659 "push" [| Ojs.float_to_js x3660 |]))
               x3658;
             x3659)
         |])

  let (from : t -> array:float _Array -> _Int32Array) =
   fun (x3665 : t) ~array:(x3663 : float _Array) ->
    _Int32Array_of_js
      (Ojs.call (t_to_js x3665) "from" [| _Array_to_js Ojs.float_to_js x3663 |])

  let (from' :
        t
        -> array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Int32Array)
    =
   fun (x3674 : t)
       ~array:(x3666 : 'T _Array)
       ~mapfn:(x3667 : v:'T -> k:float -> float)
       ?thisArg:(x3668 : any option)
       () ->
    _Int32Array_of_js
      (let x3675 = t_to_js x3674 in
       Ojs.call
         (Ojs.get_prop_ascii x3675 "from")
         "apply"
         [| x3675
          ; (let x3669 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3669 "push" [| _Array_to_js Obj.magic x3666 |]);
             ignore
               (Ojs.call
                  x3669
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x3671 : Ojs.t) (x3672 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3667
                              ~v:(Obj.magic x3671)
                              ~k:(Ojs.float_of_js x3672)))
                  |]);
             (match x3668 with
             | Some x3670 ->
               ignore (Ojs.call x3669 "push" [| any_to_js x3670 |])
             | None ->
               ());
             x3669)
         |])
end

let (int32Array : _Int32ArrayConstructor) =
  _Int32ArrayConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Int32Array")

module Uint32Array = struct
  type t = _Uint32Array

  let rec t_of_js : Ojs.t -> t = fun (x3677 : Ojs.t) -> _Uint32Array_of_js x3677

  and t_to_js : t -> Ojs.t =
   fun (x3676 : _Uint32Array) -> _Uint32Array_to_js x3676

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x3679 : Ojs.t) -> t_of_js x3679

  and t_0_to_js : t_0 -> Ojs.t = fun (x3678 : t) -> t_to_js x3678

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x3680 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3680) "BYTES_PER_ELEMENT")

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x3681 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x3681) "buffer")

  let (get_byteLength : t -> float) =
   fun (x3682 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3682) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x3683 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3683) "byteOffset")

  let (copyWithin :
        t -> target:float -> start:float -> ?end_:float -> unit -> t)
    =
   fun (x3689 : t)
       ~target:(x3684 : float)
       ~start:(x3685 : float)
       ?end_:(x3686 : float option)
       () ->
    t_of_js
      (let x3690 = t_to_js x3689 in
       Ojs.call
         (Ojs.get_prop_ascii x3690 "copyWithin")
         "apply"
         [| x3690
          ; (let x3687 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3687 "push" [| Ojs.float_to_js x3684 |]);
             ignore (Ojs.call x3687 "push" [| Ojs.float_to_js x3685 |]);
             (match x3686 with
             | Some x3688 ->
               ignore (Ojs.call x3687 "push" [| Ojs.float_to_js x3688 |])
             | None ->
               ());
             x3687)
         |])

  let (every :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x3698 : t)
       ~predicate:(x3691 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x3692 : any option)
       () ->
    Ojs.bool_of_js
      (let x3699 = t_to_js x3698 in
       Ojs.call
         (Ojs.get_prop_ascii x3699 "every")
         "apply"
         [| x3699
          ; (let x3693 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3693
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3695 : Ojs.t) (x3696 : Ojs.t) (x3697 : Ojs.t) ->
                         unknown_to_js
                           (x3691
                              ~value:(Ojs.float_of_js x3695)
                              ~index:(Ojs.float_of_js x3696)
                              ~array:(t_of_js x3697)))
                  |]);
             (match x3692 with
             | Some x3694 ->
               ignore (Ojs.call x3693 "push" [| any_to_js x3694 |])
             | None ->
               ());
             x3693)
         |])

  let (fill : t -> value:float -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x3706 : t)
       ~value:(x3700 : float)
       ?start:(x3701 : float option)
       ?end_:(x3702 : float option)
       () ->
    t_of_js
      (let x3707 = t_to_js x3706 in
       Ojs.call
         (Ojs.get_prop_ascii x3707 "fill")
         "apply"
         [| x3707
          ; (let x3703 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3703 "push" [| Ojs.float_to_js x3700 |]);
             (match x3701 with
             | Some x3705 ->
               ignore (Ojs.call x3703 "push" [| Ojs.float_to_js x3705 |])
             | None ->
               ());
             (match x3702 with
             | Some x3704 ->
               ignore (Ojs.call x3703 "push" [| Ojs.float_to_js x3704 |])
             | None ->
               ());
             x3703)
         |])

  let (filter :
        t
        -> predicate:(value:float -> index:float -> array:t -> any)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x3715 : t)
       ~predicate:(x3708 : value:float -> index:float -> array:t -> any)
       ?thisArg:(x3709 : any option)
       () ->
    t_of_js
      (let x3716 = t_to_js x3715 in
       Ojs.call
         (Ojs.get_prop_ascii x3716 "filter")
         "apply"
         [| x3716
          ; (let x3710 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3710
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3712 : Ojs.t) (x3713 : Ojs.t) (x3714 : Ojs.t) ->
                         any_to_js
                           (x3708
                              ~value:(Ojs.float_of_js x3712)
                              ~index:(Ojs.float_of_js x3713)
                              ~array:(t_of_js x3714)))
                  |]);
             (match x3709 with
             | Some x3711 ->
               ignore (Ojs.call x3710 "push" [| any_to_js x3711 |])
             | None ->
               ());
             x3710)
         |])

  let (find :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float or_undefined)
    =
   fun (x3724 : t)
       ~predicate:(x3717 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x3718 : any option)
       () ->
    or_undefined_of_js
      Ojs.float_of_js
      (let x3725 = t_to_js x3724 in
       Ojs.call
         (Ojs.get_prop_ascii x3725 "find")
         "apply"
         [| x3725
          ; (let x3719 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3719
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3721 : Ojs.t) (x3722 : Ojs.t) (x3723 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x3717
                              ~value:(Ojs.float_of_js x3721)
                              ~index:(Ojs.float_of_js x3722)
                              ~obj:(t_of_js x3723)))
                  |]);
             (match x3718 with
             | Some x3720 ->
               ignore (Ojs.call x3719 "push" [| any_to_js x3720 |])
             | None ->
               ());
             x3719)
         |])

  let (findIndex :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float)
    =
   fun (x3734 : t)
       ~predicate:(x3727 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x3728 : any option)
       () ->
    Ojs.float_of_js
      (let x3735 = t_to_js x3734 in
       Ojs.call
         (Ojs.get_prop_ascii x3735 "findIndex")
         "apply"
         [| x3735
          ; (let x3729 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3729
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3731 : Ojs.t) (x3732 : Ojs.t) (x3733 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x3727
                              ~value:(Ojs.float_of_js x3731)
                              ~index:(Ojs.float_of_js x3732)
                              ~obj:(t_of_js x3733)))
                  |]);
             (match x3728 with
             | Some x3730 ->
               ignore (Ojs.call x3729 "push" [| any_to_js x3730 |])
             | None ->
               ());
             x3729)
         |])

  let (forEach :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x3743 : t)
       ~callbackfn:(x3736 : value:float -> index:float -> array:t -> unit)
       ?thisArg:(x3737 : any option)
       () ->
    ignore
      (let x3744 = t_to_js x3743 in
       Ojs.call
         (Ojs.get_prop_ascii x3744 "forEach")
         "apply"
         [| x3744
          ; (let x3738 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3738
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3740 : Ojs.t) (x3741 : Ojs.t) (x3742 : Ojs.t) ->
                         x3736
                           ~value:(Ojs.float_of_js x3740)
                           ~index:(Ojs.float_of_js x3741)
                           ~array:(t_of_js x3742))
                  |]);
             (match x3737 with
             | Some x3739 ->
               ignore (Ojs.call x3738 "push" [| any_to_js x3739 |])
             | None ->
               ());
             x3738)
         |])

  let (indexOf : t -> searchElement:float -> ?fromIndex:float -> unit -> float) =
   fun (x3749 : t)
       ~searchElement:(x3745 : float)
       ?fromIndex:(x3746 : float option)
       () ->
    Ojs.float_of_js
      (let x3750 = t_to_js x3749 in
       Ojs.call
         (Ojs.get_prop_ascii x3750 "indexOf")
         "apply"
         [| x3750
          ; (let x3747 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3747 "push" [| Ojs.float_to_js x3745 |]);
             (match x3746 with
             | Some x3748 ->
               ignore (Ojs.call x3747 "push" [| Ojs.float_to_js x3748 |])
             | None ->
               ());
             x3747)
         |])

  let (join : t -> ?separator:string -> unit -> string) =
   fun (x3754 : t) ?separator:(x3751 : string option) () ->
    Ojs.string_of_js
      (let x3755 = t_to_js x3754 in
       Ojs.call
         (Ojs.get_prop_ascii x3755 "join")
         "apply"
         [| x3755
          ; (let x3752 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3751 with
             | Some x3753 ->
               ignore (Ojs.call x3752 "push" [| Ojs.string_to_js x3753 |])
             | None ->
               ());
             x3752)
         |])

  let (lastIndexOf :
        t -> searchElement:float -> ?fromIndex:float -> unit -> float)
    =
   fun (x3760 : t)
       ~searchElement:(x3756 : float)
       ?fromIndex:(x3757 : float option)
       () ->
    Ojs.float_of_js
      (let x3761 = t_to_js x3760 in
       Ojs.call
         (Ojs.get_prop_ascii x3761 "lastIndexOf")
         "apply"
         [| x3761
          ; (let x3758 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3758 "push" [| Ojs.float_to_js x3756 |]);
             (match x3757 with
             | Some x3759 ->
               ignore (Ojs.call x3758 "push" [| Ojs.float_to_js x3759 |])
             | None ->
               ());
             x3758)
         |])

  let (get_length : t -> float) =
   fun (x3762 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3762) "length")

  let (map :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> float)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x3770 : t)
       ~callbackfn:(x3763 : value:float -> index:float -> array:t -> float)
       ?thisArg:(x3764 : any option)
       () ->
    t_of_js
      (let x3771 = t_to_js x3770 in
       Ojs.call
         (Ojs.get_prop_ascii x3771 "map")
         "apply"
         [| x3771
          ; (let x3765 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3765
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3767 : Ojs.t) (x3768 : Ojs.t) (x3769 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3763
                              ~value:(Ojs.float_of_js x3767)
                              ~index:(Ojs.float_of_js x3768)
                              ~array:(t_of_js x3769)))
                  |]);
             (match x3764 with
             | Some x3766 ->
               ignore (Ojs.call x3765 "push" [| any_to_js x3766 |])
             | None ->
               ());
             x3765)
         |])

  let (reduce :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x3777 : t)
       ~callbackfn:
         (x3772 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3777)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3773 : Ojs.t)
                (x3774 : Ojs.t)
                (x3775 : Ojs.t)
                (x3776 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3772
                     ~previousValue:(Ojs.float_of_js x3773)
                     ~currentValue:(Ojs.float_of_js x3774)
                     ~currentIndex:(Ojs.float_of_js x3775)
                     ~array:(t_of_js x3776)))
         |])

  let (reduce' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x3784 : t)
       ~callbackfn:
         (x3778 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x3783 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3784)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3779 : Ojs.t)
                (x3780 : Ojs.t)
                (x3781 : Ojs.t)
                (x3782 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3778
                     ~previousValue:(Ojs.float_of_js x3779)
                     ~currentValue:(Ojs.float_of_js x3780)
                     ~currentIndex:(Ojs.float_of_js x3781)
                     ~array:(t_of_js x3782)))
          ; Ojs.float_to_js x3783
         |])

  let (reduce'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x3791 : t)
       ~callbackfn:
         (x3785 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x3790 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x3791)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x3786 : Ojs.t)
                (x3787 : Ojs.t)
                (x3788 : Ojs.t)
                (x3789 : Ojs.t)
              ->
                Obj.magic
                  (x3785
                     ~previousValue:(Obj.magic x3786)
                     ~currentValue:(Ojs.float_of_js x3787)
                     ~currentIndex:(Ojs.float_of_js x3788)
                     ~array:(t_of_js x3789)))
          ; Obj.magic x3790
         |])

  let (reduceRight :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x3797 : t)
       ~callbackfn:
         (x3792 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3797)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3793 : Ojs.t)
                (x3794 : Ojs.t)
                (x3795 : Ojs.t)
                (x3796 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3792
                     ~previousValue:(Ojs.float_of_js x3793)
                     ~currentValue:(Ojs.float_of_js x3794)
                     ~currentIndex:(Ojs.float_of_js x3795)
                     ~array:(t_of_js x3796)))
         |])

  let (reduceRight' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x3804 : t)
       ~callbackfn:
         (x3798 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x3803 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x3804)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3799 : Ojs.t)
                (x3800 : Ojs.t)
                (x3801 : Ojs.t)
                (x3802 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x3798
                     ~previousValue:(Ojs.float_of_js x3799)
                     ~currentValue:(Ojs.float_of_js x3800)
                     ~currentIndex:(Ojs.float_of_js x3801)
                     ~array:(t_of_js x3802)))
          ; Ojs.float_to_js x3803
         |])

  let (reduceRight'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x3811 : t)
       ~callbackfn:
         (x3805 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x3810 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x3811)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x3806 : Ojs.t)
                (x3807 : Ojs.t)
                (x3808 : Ojs.t)
                (x3809 : Ojs.t)
              ->
                Obj.magic
                  (x3805
                     ~previousValue:(Obj.magic x3806)
                     ~currentValue:(Ojs.float_of_js x3807)
                     ~currentIndex:(Ojs.float_of_js x3808)
                     ~array:(t_of_js x3809)))
          ; Obj.magic x3810
         |])

  let (reverse : t -> t) =
   fun (x3812 : t) -> t_of_js (Ojs.call (t_to_js x3812) "reverse" [||])

  let (set_ : t -> array:float _Array -> ?offset:float -> unit -> unit) =
   fun (x3818 : t)
       ~array:(x3813 : float _Array)
       ?offset:(x3814 : float option)
       () ->
    ignore
      (let x3819 = t_to_js x3818 in
       Ojs.call
         (Ojs.get_prop_ascii x3819 "set")
         "apply"
         [| x3819
          ; (let x3815 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x3815 "push" [| _Array_to_js Ojs.float_to_js x3813 |]);
             (match x3814 with
             | Some x3816 ->
               ignore (Ojs.call x3815 "push" [| Ojs.float_to_js x3816 |])
             | None ->
               ());
             x3815)
         |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x3825 : t) ?start:(x3820 : float option) ?end_:(x3821 : float option) () ->
    t_of_js
      (let x3826 = t_to_js x3825 in
       Ojs.call
         (Ojs.get_prop_ascii x3826 "slice")
         "apply"
         [| x3826
          ; (let x3822 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3820 with
             | Some x3824 ->
               ignore (Ojs.call x3822 "push" [| Ojs.float_to_js x3824 |])
             | None ->
               ());
             (match x3821 with
             | Some x3823 ->
               ignore (Ojs.call x3822 "push" [| Ojs.float_to_js x3823 |])
             | None ->
               ());
             x3822)
         |])

  let (some :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x3834 : t)
       ~predicate:(x3827 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x3828 : any option)
       () ->
    Ojs.bool_of_js
      (let x3835 = t_to_js x3834 in
       Ojs.call
         (Ojs.get_prop_ascii x3835 "some")
         "apply"
         [| x3835
          ; (let x3829 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3829
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3831 : Ojs.t) (x3832 : Ojs.t) (x3833 : Ojs.t) ->
                         unknown_to_js
                           (x3827
                              ~value:(Ojs.float_of_js x3831)
                              ~index:(Ojs.float_of_js x3832)
                              ~array:(t_of_js x3833)))
                  |]);
             (match x3828 with
             | Some x3830 ->
               ignore (Ojs.call x3829 "push" [| any_to_js x3830 |])
             | None ->
               ());
             x3829)
         |])

  let (sort : t -> ?compareFn:(a:float -> b:float -> float) -> unit -> t) =
   fun (x3841 : t) ?compareFn:(x3836 : (a:float -> b:float -> float) option) () ->
    t_of_js
      (let x3842 = t_to_js x3841 in
       Ojs.call
         (Ojs.get_prop_ascii x3842 "sort")
         "apply"
         [| x3842
          ; (let x3837 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3836 with
             | Some x3838 ->
               ignore
                 (Ojs.call
                    x3837
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x3839 : Ojs.t) (x3840 : Ojs.t) ->
                           Ojs.float_to_js
                             (x3838
                                ~a:(Ojs.float_of_js x3839)
                                ~b:(Ojs.float_of_js x3840)))
                    |])
             | None ->
               ());
             x3837)
         |])

  let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
   fun (x3848 : t)
       ?begin_:(x3843 : float option)
       ?end_:(x3844 : float option)
       () ->
    t_of_js
      (let x3849 = t_to_js x3848 in
       Ojs.call
         (Ojs.get_prop_ascii x3849 "subarray")
         "apply"
         [| x3849
          ; (let x3845 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3843 with
             | Some x3847 ->
               ignore (Ojs.call x3845 "push" [| Ojs.float_to_js x3847 |])
             | None ->
               ());
             (match x3844 with
             | Some x3846 ->
               ignore (Ojs.call x3845 "push" [| Ojs.float_to_js x3846 |])
             | None ->
               ());
             x3845)
         |])

  let (toLocaleString : t -> string) =
   fun (x3850 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x3850) "toLocaleString" [||])

  let (toString : t -> string) =
   fun (x3851 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x3851) "toString" [||])

  let (valueOf : t -> t) =
   fun (x3852 : t) -> t_of_js (Ojs.call (t_to_js x3852) "valueOf" [||])

  let (get : t -> float -> float) =
   fun (x3853 : t) (x3854 : float) ->
    Ojs.float_of_js (Ojs.get_prop (t_to_js x3853) (Ojs.float_to_js x3854))

  let (set : t -> float -> float -> unit) =
   fun (x3855 : t) (x3856 : float) (x3857 : float) ->
    Ojs.set_prop (t_to_js x3855) (Ojs.float_to_js x3856) (Ojs.float_to_js x3857)

  let (create : length:float -> _Uint32Array) =
   fun ~length:(x3858 : float) ->
    _Uint32Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Uint32Array")
         [| Ojs.float_to_js x3858 |])

  let (create' : array:(_ArrayBuffer, float _Array) union2 -> _Uint32Array) =
   fun ~array:(x3859 : (_ArrayBuffer, float _Array) union2) ->
    _Uint32Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Uint32Array")
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x3861 : float _Array) -> _Array_to_js Ojs.float_to_js x3861)
              x3859
         |])

  let (create'' :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Uint32Array)
    =
   fun ~buffer:(x3863 : _ArrayBuffer)
       ?byteOffset:(x3864 : float option)
       ?length:(x3865 : float option)
       () ->
    _Uint32Array_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Uint32Array")
         (let x3866 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x3866 "push" [| _ArrayBuffer_to_js x3863 |]);
          (match x3864 with
          | Some x3868 ->
            ignore (Ojs.call x3866 "push" [| Ojs.float_to_js x3868 |])
          | None ->
            ());
          (match x3865 with
          | Some x3867 ->
            ignore (Ojs.call x3866 "push" [| Ojs.float_to_js x3867 |])
          | None ->
            ());
          x3866))

  let (get_BYTES_PER_ELEMENT : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Uint32Array")
         "BYTES_PER_ELEMENT")

  let (of_ : items:float list -> _Uint32Array) =
   fun ~items:(x3869 : float list) ->
    _Uint32Array_of_js
      (let x3872 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
       Ojs.call
         (Ojs.get_prop_ascii x3872 "of")
         "apply"
         [| x3872
          ; (let x3870 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x3871 : float) ->
                 ignore (Ojs.call x3870 "push" [| Ojs.float_to_js x3871 |]))
               x3869;
             x3870)
         |])

  let (from : array:float _Array -> _Uint32Array) =
   fun ~array:(x3873 : float _Array) ->
    _Uint32Array_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Uint32Array")
         "from"
         [| _Array_to_js Ojs.float_to_js x3873 |])

  let (from' :
        array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Uint32Array)
    =
   fun ~array:(x3875 : 'T _Array)
       ~mapfn:(x3876 : v:'T -> k:float -> float)
       ?thisArg:(x3877 : any option)
       () ->
    _Uint32Array_of_js
      (let x3883 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
       Ojs.call
         (Ojs.get_prop_ascii x3883 "from")
         "apply"
         [| x3883
          ; (let x3878 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3878 "push" [| _Array_to_js Obj.magic x3875 |]);
             ignore
               (Ojs.call
                  x3878
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x3880 : Ojs.t) (x3881 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3876
                              ~v:(Obj.magic x3880)
                              ~k:(Ojs.float_of_js x3881)))
                  |]);
             (match x3877 with
             | Some x3879 ->
               ignore (Ojs.call x3878 "push" [| any_to_js x3879 |])
             | None ->
               ());
             x3878)
         |])
end

module Uint32ArrayConstructor = struct
  type t = _Uint32ArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x3885 : Ojs.t) -> _Uint32ArrayConstructor_of_js x3885

  and t_to_js : t -> Ojs.t =
   fun (x3884 : _Uint32ArrayConstructor) -> _Uint32ArrayConstructor_to_js x3884

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x3887 : Ojs.t) -> t_of_js x3887

  and t_0_to_js : t_0 -> Ojs.t = fun (x3886 : t) -> t_to_js x3886

  let (get_prototype : t -> _Uint32Array) =
   fun (x3888 : t) ->
    _Uint32Array_of_js (Ojs.get_prop_ascii (t_to_js x3888) "prototype")

  let (create : t -> length:float -> _Uint32Array) =
   fun (x3890 : t) ~length:(x3889 : float) ->
    _Uint32Array_of_js (Ojs.new_obj (t_to_js x3890) [| Ojs.float_to_js x3889 |])

  let (create' : t -> array:(_ArrayBuffer, float _Array) union2 -> _Uint32Array)
    =
   fun (x3895 : t) ~array:(x3891 : (_ArrayBuffer, float _Array) union2) ->
    _Uint32Array_of_js
      (Ojs.new_obj
         (t_to_js x3895)
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x3893 : float _Array) -> _Array_to_js Ojs.float_to_js x3893)
              x3891
         |])

  let (create'' :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Uint32Array)
    =
   fun (x3902 : t)
       ~buffer:(x3896 : _ArrayBuffer)
       ?byteOffset:(x3897 : float option)
       ?length:(x3898 : float option)
       () ->
    _Uint32Array_of_js
      (Ojs.new_obj_arr
         (t_to_js x3902)
         (let x3899 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x3899 "push" [| _ArrayBuffer_to_js x3896 |]);
          (match x3897 with
          | Some x3901 ->
            ignore (Ojs.call x3899 "push" [| Ojs.float_to_js x3901 |])
          | None ->
            ());
          (match x3898 with
          | Some x3900 ->
            ignore (Ojs.call x3899 "push" [| Ojs.float_to_js x3900 |])
          | None ->
            ());
          x3899))

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x3903 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3903) "BYTES_PER_ELEMENT")

  let (of_ : t -> items:float list -> _Uint32Array) =
   fun (x3907 : t) ~items:(x3904 : float list) ->
    _Uint32Array_of_js
      (let x3908 = t_to_js x3907 in
       Ojs.call
         (Ojs.get_prop_ascii x3908 "of")
         "apply"
         [| x3908
          ; (let x3905 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x3906 : float) ->
                 ignore (Ojs.call x3905 "push" [| Ojs.float_to_js x3906 |]))
               x3904;
             x3905)
         |])

  let (from : t -> array:float _Array -> _Uint32Array) =
   fun (x3911 : t) ~array:(x3909 : float _Array) ->
    _Uint32Array_of_js
      (Ojs.call (t_to_js x3911) "from" [| _Array_to_js Ojs.float_to_js x3909 |])

  let (from' :
        t
        -> array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Uint32Array)
    =
   fun (x3920 : t)
       ~array:(x3912 : 'T _Array)
       ~mapfn:(x3913 : v:'T -> k:float -> float)
       ?thisArg:(x3914 : any option)
       () ->
    _Uint32Array_of_js
      (let x3921 = t_to_js x3920 in
       Ojs.call
         (Ojs.get_prop_ascii x3921 "from")
         "apply"
         [| x3921
          ; (let x3915 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3915 "push" [| _Array_to_js Obj.magic x3912 |]);
             ignore
               (Ojs.call
                  x3915
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x3917 : Ojs.t) (x3918 : Ojs.t) ->
                         Ojs.float_to_js
                           (x3913
                              ~v:(Obj.magic x3917)
                              ~k:(Ojs.float_of_js x3918)))
                  |]);
             (match x3914 with
             | Some x3916 ->
               ignore (Ojs.call x3915 "push" [| any_to_js x3916 |])
             | None ->
               ());
             x3915)
         |])
end

let (uint32Array : _Uint32ArrayConstructor) =
  _Uint32ArrayConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Uint32Array")

module Float32Array = struct
  type t = _Float32Array

  let rec t_of_js : Ojs.t -> t =
   fun (x3923 : Ojs.t) -> _Float32Array_of_js x3923

  and t_to_js : t -> Ojs.t =
   fun (x3922 : _Float32Array) -> _Float32Array_to_js x3922

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x3925 : Ojs.t) -> t_of_js x3925

  and t_0_to_js : t_0 -> Ojs.t = fun (x3924 : t) -> t_to_js x3924

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x3926 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3926) "BYTES_PER_ELEMENT")

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x3927 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x3927) "buffer")

  let (get_byteLength : t -> float) =
   fun (x3928 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3928) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x3929 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x3929) "byteOffset")

  let (copyWithin :
        t -> target:float -> start:float -> ?end_:float -> unit -> t)
    =
   fun (x3935 : t)
       ~target:(x3930 : float)
       ~start:(x3931 : float)
       ?end_:(x3932 : float option)
       () ->
    t_of_js
      (let x3936 = t_to_js x3935 in
       Ojs.call
         (Ojs.get_prop_ascii x3936 "copyWithin")
         "apply"
         [| x3936
          ; (let x3933 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3933 "push" [| Ojs.float_to_js x3930 |]);
             ignore (Ojs.call x3933 "push" [| Ojs.float_to_js x3931 |]);
             (match x3932 with
             | Some x3934 ->
               ignore (Ojs.call x3933 "push" [| Ojs.float_to_js x3934 |])
             | None ->
               ());
             x3933)
         |])

  let (every :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x3944 : t)
       ~predicate:(x3937 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x3938 : any option)
       () ->
    Ojs.bool_of_js
      (let x3945 = t_to_js x3944 in
       Ojs.call
         (Ojs.get_prop_ascii x3945 "every")
         "apply"
         [| x3945
          ; (let x3939 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3939
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3941 : Ojs.t) (x3942 : Ojs.t) (x3943 : Ojs.t) ->
                         unknown_to_js
                           (x3937
                              ~value:(Ojs.float_of_js x3941)
                              ~index:(Ojs.float_of_js x3942)
                              ~array:(t_of_js x3943)))
                  |]);
             (match x3938 with
             | Some x3940 ->
               ignore (Ojs.call x3939 "push" [| any_to_js x3940 |])
             | None ->
               ());
             x3939)
         |])

  let (fill : t -> value:float -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x3952 : t)
       ~value:(x3946 : float)
       ?start:(x3947 : float option)
       ?end_:(x3948 : float option)
       () ->
    t_of_js
      (let x3953 = t_to_js x3952 in
       Ojs.call
         (Ojs.get_prop_ascii x3953 "fill")
         "apply"
         [| x3953
          ; (let x3949 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3949 "push" [| Ojs.float_to_js x3946 |]);
             (match x3947 with
             | Some x3951 ->
               ignore (Ojs.call x3949 "push" [| Ojs.float_to_js x3951 |])
             | None ->
               ());
             (match x3948 with
             | Some x3950 ->
               ignore (Ojs.call x3949 "push" [| Ojs.float_to_js x3950 |])
             | None ->
               ());
             x3949)
         |])

  let (filter :
        t
        -> predicate:(value:float -> index:float -> array:t -> any)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x3961 : t)
       ~predicate:(x3954 : value:float -> index:float -> array:t -> any)
       ?thisArg:(x3955 : any option)
       () ->
    t_of_js
      (let x3962 = t_to_js x3961 in
       Ojs.call
         (Ojs.get_prop_ascii x3962 "filter")
         "apply"
         [| x3962
          ; (let x3956 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3956
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3958 : Ojs.t) (x3959 : Ojs.t) (x3960 : Ojs.t) ->
                         any_to_js
                           (x3954
                              ~value:(Ojs.float_of_js x3958)
                              ~index:(Ojs.float_of_js x3959)
                              ~array:(t_of_js x3960)))
                  |]);
             (match x3955 with
             | Some x3957 ->
               ignore (Ojs.call x3956 "push" [| any_to_js x3957 |])
             | None ->
               ());
             x3956)
         |])

  let (find :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float or_undefined)
    =
   fun (x3970 : t)
       ~predicate:(x3963 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x3964 : any option)
       () ->
    or_undefined_of_js
      Ojs.float_of_js
      (let x3971 = t_to_js x3970 in
       Ojs.call
         (Ojs.get_prop_ascii x3971 "find")
         "apply"
         [| x3971
          ; (let x3965 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3965
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3967 : Ojs.t) (x3968 : Ojs.t) (x3969 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x3963
                              ~value:(Ojs.float_of_js x3967)
                              ~index:(Ojs.float_of_js x3968)
                              ~obj:(t_of_js x3969)))
                  |]);
             (match x3964 with
             | Some x3966 ->
               ignore (Ojs.call x3965 "push" [| any_to_js x3966 |])
             | None ->
               ());
             x3965)
         |])

  let (findIndex :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float)
    =
   fun (x3980 : t)
       ~predicate:(x3973 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x3974 : any option)
       () ->
    Ojs.float_of_js
      (let x3981 = t_to_js x3980 in
       Ojs.call
         (Ojs.get_prop_ascii x3981 "findIndex")
         "apply"
         [| x3981
          ; (let x3975 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3975
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3977 : Ojs.t) (x3978 : Ojs.t) (x3979 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x3973
                              ~value:(Ojs.float_of_js x3977)
                              ~index:(Ojs.float_of_js x3978)
                              ~obj:(t_of_js x3979)))
                  |]);
             (match x3974 with
             | Some x3976 ->
               ignore (Ojs.call x3975 "push" [| any_to_js x3976 |])
             | None ->
               ());
             x3975)
         |])

  let (forEach :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x3989 : t)
       ~callbackfn:(x3982 : value:float -> index:float -> array:t -> unit)
       ?thisArg:(x3983 : any option)
       () ->
    ignore
      (let x3990 = t_to_js x3989 in
       Ojs.call
         (Ojs.get_prop_ascii x3990 "forEach")
         "apply"
         [| x3990
          ; (let x3984 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x3984
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x3986 : Ojs.t) (x3987 : Ojs.t) (x3988 : Ojs.t) ->
                         x3982
                           ~value:(Ojs.float_of_js x3986)
                           ~index:(Ojs.float_of_js x3987)
                           ~array:(t_of_js x3988))
                  |]);
             (match x3983 with
             | Some x3985 ->
               ignore (Ojs.call x3984 "push" [| any_to_js x3985 |])
             | None ->
               ());
             x3984)
         |])

  let (indexOf : t -> searchElement:float -> ?fromIndex:float -> unit -> float) =
   fun (x3995 : t)
       ~searchElement:(x3991 : float)
       ?fromIndex:(x3992 : float option)
       () ->
    Ojs.float_of_js
      (let x3996 = t_to_js x3995 in
       Ojs.call
         (Ojs.get_prop_ascii x3996 "indexOf")
         "apply"
         [| x3996
          ; (let x3993 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x3993 "push" [| Ojs.float_to_js x3991 |]);
             (match x3992 with
             | Some x3994 ->
               ignore (Ojs.call x3993 "push" [| Ojs.float_to_js x3994 |])
             | None ->
               ());
             x3993)
         |])

  let (join : t -> ?separator:string -> unit -> string) =
   fun (x4000 : t) ?separator:(x3997 : string option) () ->
    Ojs.string_of_js
      (let x4001 = t_to_js x4000 in
       Ojs.call
         (Ojs.get_prop_ascii x4001 "join")
         "apply"
         [| x4001
          ; (let x3998 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x3997 with
             | Some x3999 ->
               ignore (Ojs.call x3998 "push" [| Ojs.string_to_js x3999 |])
             | None ->
               ());
             x3998)
         |])

  let (lastIndexOf :
        t -> searchElement:float -> ?fromIndex:float -> unit -> float)
    =
   fun (x4006 : t)
       ~searchElement:(x4002 : float)
       ?fromIndex:(x4003 : float option)
       () ->
    Ojs.float_of_js
      (let x4007 = t_to_js x4006 in
       Ojs.call
         (Ojs.get_prop_ascii x4007 "lastIndexOf")
         "apply"
         [| x4007
          ; (let x4004 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x4004 "push" [| Ojs.float_to_js x4002 |]);
             (match x4003 with
             | Some x4005 ->
               ignore (Ojs.call x4004 "push" [| Ojs.float_to_js x4005 |])
             | None ->
               ());
             x4004)
         |])

  let (get_length : t -> float) =
   fun (x4008 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4008) "length")

  let (map :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> float)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x4016 : t)
       ~callbackfn:(x4009 : value:float -> index:float -> array:t -> float)
       ?thisArg:(x4010 : any option)
       () ->
    t_of_js
      (let x4017 = t_to_js x4016 in
       Ojs.call
         (Ojs.get_prop_ascii x4017 "map")
         "apply"
         [| x4017
          ; (let x4011 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x4011
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x4013 : Ojs.t) (x4014 : Ojs.t) (x4015 : Ojs.t) ->
                         Ojs.float_to_js
                           (x4009
                              ~value:(Ojs.float_of_js x4013)
                              ~index:(Ojs.float_of_js x4014)
                              ~array:(t_of_js x4015)))
                  |]);
             (match x4010 with
             | Some x4012 ->
               ignore (Ojs.call x4011 "push" [| any_to_js x4012 |])
             | None ->
               ());
             x4011)
         |])

  let (reduce :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x4023 : t)
       ~callbackfn:
         (x4018 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x4023)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x4019 : Ojs.t)
                (x4020 : Ojs.t)
                (x4021 : Ojs.t)
                (x4022 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x4018
                     ~previousValue:(Ojs.float_of_js x4019)
                     ~currentValue:(Ojs.float_of_js x4020)
                     ~currentIndex:(Ojs.float_of_js x4021)
                     ~array:(t_of_js x4022)))
         |])

  let (reduce' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x4030 : t)
       ~callbackfn:
         (x4024 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x4029 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x4030)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x4025 : Ojs.t)
                (x4026 : Ojs.t)
                (x4027 : Ojs.t)
                (x4028 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x4024
                     ~previousValue:(Ojs.float_of_js x4025)
                     ~currentValue:(Ojs.float_of_js x4026)
                     ~currentIndex:(Ojs.float_of_js x4027)
                     ~array:(t_of_js x4028)))
          ; Ojs.float_to_js x4029
         |])

  let (reduce'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x4037 : t)
       ~callbackfn:
         (x4031 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x4036 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x4037)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x4032 : Ojs.t)
                (x4033 : Ojs.t)
                (x4034 : Ojs.t)
                (x4035 : Ojs.t)
              ->
                Obj.magic
                  (x4031
                     ~previousValue:(Obj.magic x4032)
                     ~currentValue:(Ojs.float_of_js x4033)
                     ~currentIndex:(Ojs.float_of_js x4034)
                     ~array:(t_of_js x4035)))
          ; Obj.magic x4036
         |])

  let (reduceRight :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x4043 : t)
       ~callbackfn:
         (x4038 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x4043)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x4039 : Ojs.t)
                (x4040 : Ojs.t)
                (x4041 : Ojs.t)
                (x4042 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x4038
                     ~previousValue:(Ojs.float_of_js x4039)
                     ~currentValue:(Ojs.float_of_js x4040)
                     ~currentIndex:(Ojs.float_of_js x4041)
                     ~array:(t_of_js x4042)))
         |])

  let (reduceRight' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x4050 : t)
       ~callbackfn:
         (x4044 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x4049 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x4050)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x4045 : Ojs.t)
                (x4046 : Ojs.t)
                (x4047 : Ojs.t)
                (x4048 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x4044
                     ~previousValue:(Ojs.float_of_js x4045)
                     ~currentValue:(Ojs.float_of_js x4046)
                     ~currentIndex:(Ojs.float_of_js x4047)
                     ~array:(t_of_js x4048)))
          ; Ojs.float_to_js x4049
         |])

  let (reduceRight'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x4057 : t)
       ~callbackfn:
         (x4051 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x4056 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x4057)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x4052 : Ojs.t)
                (x4053 : Ojs.t)
                (x4054 : Ojs.t)
                (x4055 : Ojs.t)
              ->
                Obj.magic
                  (x4051
                     ~previousValue:(Obj.magic x4052)
                     ~currentValue:(Ojs.float_of_js x4053)
                     ~currentIndex:(Ojs.float_of_js x4054)
                     ~array:(t_of_js x4055)))
          ; Obj.magic x4056
         |])

  let (reverse : t -> t) =
   fun (x4058 : t) -> t_of_js (Ojs.call (t_to_js x4058) "reverse" [||])

  let (set_ : t -> array:float _Array -> ?offset:float -> unit -> unit) =
   fun (x4064 : t)
       ~array:(x4059 : float _Array)
       ?offset:(x4060 : float option)
       () ->
    ignore
      (let x4065 = t_to_js x4064 in
       Ojs.call
         (Ojs.get_prop_ascii x4065 "set")
         "apply"
         [| x4065
          ; (let x4061 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x4061 "push" [| _Array_to_js Ojs.float_to_js x4059 |]);
             (match x4060 with
             | Some x4062 ->
               ignore (Ojs.call x4061 "push" [| Ojs.float_to_js x4062 |])
             | None ->
               ());
             x4061)
         |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x4071 : t) ?start:(x4066 : float option) ?end_:(x4067 : float option) () ->
    t_of_js
      (let x4072 = t_to_js x4071 in
       Ojs.call
         (Ojs.get_prop_ascii x4072 "slice")
         "apply"
         [| x4072
          ; (let x4068 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x4066 with
             | Some x4070 ->
               ignore (Ojs.call x4068 "push" [| Ojs.float_to_js x4070 |])
             | None ->
               ());
             (match x4067 with
             | Some x4069 ->
               ignore (Ojs.call x4068 "push" [| Ojs.float_to_js x4069 |])
             | None ->
               ());
             x4068)
         |])

  let (some :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x4080 : t)
       ~predicate:(x4073 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x4074 : any option)
       () ->
    Ojs.bool_of_js
      (let x4081 = t_to_js x4080 in
       Ojs.call
         (Ojs.get_prop_ascii x4081 "some")
         "apply"
         [| x4081
          ; (let x4075 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x4075
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x4077 : Ojs.t) (x4078 : Ojs.t) (x4079 : Ojs.t) ->
                         unknown_to_js
                           (x4073
                              ~value:(Ojs.float_of_js x4077)
                              ~index:(Ojs.float_of_js x4078)
                              ~array:(t_of_js x4079)))
                  |]);
             (match x4074 with
             | Some x4076 ->
               ignore (Ojs.call x4075 "push" [| any_to_js x4076 |])
             | None ->
               ());
             x4075)
         |])

  let (sort : t -> ?compareFn:(a:float -> b:float -> float) -> unit -> t) =
   fun (x4087 : t) ?compareFn:(x4082 : (a:float -> b:float -> float) option) () ->
    t_of_js
      (let x4088 = t_to_js x4087 in
       Ojs.call
         (Ojs.get_prop_ascii x4088 "sort")
         "apply"
         [| x4088
          ; (let x4083 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x4082 with
             | Some x4084 ->
               ignore
                 (Ojs.call
                    x4083
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x4085 : Ojs.t) (x4086 : Ojs.t) ->
                           Ojs.float_to_js
                             (x4084
                                ~a:(Ojs.float_of_js x4085)
                                ~b:(Ojs.float_of_js x4086)))
                    |])
             | None ->
               ());
             x4083)
         |])

  let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
   fun (x4094 : t)
       ?begin_:(x4089 : float option)
       ?end_:(x4090 : float option)
       () ->
    t_of_js
      (let x4095 = t_to_js x4094 in
       Ojs.call
         (Ojs.get_prop_ascii x4095 "subarray")
         "apply"
         [| x4095
          ; (let x4091 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x4089 with
             | Some x4093 ->
               ignore (Ojs.call x4091 "push" [| Ojs.float_to_js x4093 |])
             | None ->
               ());
             (match x4090 with
             | Some x4092 ->
               ignore (Ojs.call x4091 "push" [| Ojs.float_to_js x4092 |])
             | None ->
               ());
             x4091)
         |])

  let (toLocaleString : t -> string) =
   fun (x4096 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x4096) "toLocaleString" [||])

  let (toString : t -> string) =
   fun (x4097 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x4097) "toString" [||])

  let (valueOf : t -> t) =
   fun (x4098 : t) -> t_of_js (Ojs.call (t_to_js x4098) "valueOf" [||])

  let (get : t -> float -> float) =
   fun (x4099 : t) (x4100 : float) ->
    Ojs.float_of_js (Ojs.get_prop (t_to_js x4099) (Ojs.float_to_js x4100))

  let (set : t -> float -> float -> unit) =
   fun (x4101 : t) (x4102 : float) (x4103 : float) ->
    Ojs.set_prop (t_to_js x4101) (Ojs.float_to_js x4102) (Ojs.float_to_js x4103)

  let (create : length:float -> _Float32Array) =
   fun ~length:(x4104 : float) ->
    _Float32Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Float32Array")
         [| Ojs.float_to_js x4104 |])

  let (create' : array:(_ArrayBuffer, float _Array) union2 -> _Float32Array) =
   fun ~array:(x4105 : (_ArrayBuffer, float _Array) union2) ->
    _Float32Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Float32Array")
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x4107 : float _Array) -> _Array_to_js Ojs.float_to_js x4107)
              x4105
         |])

  let (create'' :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Float32Array)
    =
   fun ~buffer:(x4109 : _ArrayBuffer)
       ?byteOffset:(x4110 : float option)
       ?length:(x4111 : float option)
       () ->
    _Float32Array_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Float32Array")
         (let x4112 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x4112 "push" [| _ArrayBuffer_to_js x4109 |]);
          (match x4110 with
          | Some x4114 ->
            ignore (Ojs.call x4112 "push" [| Ojs.float_to_js x4114 |])
          | None ->
            ());
          (match x4111 with
          | Some x4113 ->
            ignore (Ojs.call x4112 "push" [| Ojs.float_to_js x4113 |])
          | None ->
            ());
          x4112))

  let (get_BYTES_PER_ELEMENT : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Float32Array")
         "BYTES_PER_ELEMENT")

  let (of_ : items:float list -> _Float32Array) =
   fun ~items:(x4115 : float list) ->
    _Float32Array_of_js
      (let x4118 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
       Ojs.call
         (Ojs.get_prop_ascii x4118 "of")
         "apply"
         [| x4118
          ; (let x4116 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x4117 : float) ->
                 ignore (Ojs.call x4116 "push" [| Ojs.float_to_js x4117 |]))
               x4115;
             x4116)
         |])

  let (from : array:float _Array -> _Float32Array) =
   fun ~array:(x4119 : float _Array) ->
    _Float32Array_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Float32Array")
         "from"
         [| _Array_to_js Ojs.float_to_js x4119 |])

  let (from' :
        array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Float32Array)
    =
   fun ~array:(x4121 : 'T _Array)
       ~mapfn:(x4122 : v:'T -> k:float -> float)
       ?thisArg:(x4123 : any option)
       () ->
    _Float32Array_of_js
      (let x4129 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
       Ojs.call
         (Ojs.get_prop_ascii x4129 "from")
         "apply"
         [| x4129
          ; (let x4124 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x4124 "push" [| _Array_to_js Obj.magic x4121 |]);
             ignore
               (Ojs.call
                  x4124
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x4126 : Ojs.t) (x4127 : Ojs.t) ->
                         Ojs.float_to_js
                           (x4122
                              ~v:(Obj.magic x4126)
                              ~k:(Ojs.float_of_js x4127)))
                  |]);
             (match x4123 with
             | Some x4125 ->
               ignore (Ojs.call x4124 "push" [| any_to_js x4125 |])
             | None ->
               ());
             x4124)
         |])
end

module Float32ArrayConstructor = struct
  type t = _Float32ArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x4131 : Ojs.t) -> _Float32ArrayConstructor_of_js x4131

  and t_to_js : t -> Ojs.t =
   fun (x4130 : _Float32ArrayConstructor) ->
    _Float32ArrayConstructor_to_js x4130

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x4133 : Ojs.t) -> t_of_js x4133

  and t_0_to_js : t_0 -> Ojs.t = fun (x4132 : t) -> t_to_js x4132

  let (get_prototype : t -> _Float32Array) =
   fun (x4134 : t) ->
    _Float32Array_of_js (Ojs.get_prop_ascii (t_to_js x4134) "prototype")

  let (create : t -> length:float -> _Float32Array) =
   fun (x4136 : t) ~length:(x4135 : float) ->
    _Float32Array_of_js
      (Ojs.new_obj (t_to_js x4136) [| Ojs.float_to_js x4135 |])

  let (create' :
        t -> array:(_ArrayBuffer, float _Array) union2 -> _Float32Array)
    =
   fun (x4141 : t) ~array:(x4137 : (_ArrayBuffer, float _Array) union2) ->
    _Float32Array_of_js
      (Ojs.new_obj
         (t_to_js x4141)
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x4139 : float _Array) -> _Array_to_js Ojs.float_to_js x4139)
              x4137
         |])

  let (create'' :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Float32Array)
    =
   fun (x4148 : t)
       ~buffer:(x4142 : _ArrayBuffer)
       ?byteOffset:(x4143 : float option)
       ?length:(x4144 : float option)
       () ->
    _Float32Array_of_js
      (Ojs.new_obj_arr
         (t_to_js x4148)
         (let x4145 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x4145 "push" [| _ArrayBuffer_to_js x4142 |]);
          (match x4143 with
          | Some x4147 ->
            ignore (Ojs.call x4145 "push" [| Ojs.float_to_js x4147 |])
          | None ->
            ());
          (match x4144 with
          | Some x4146 ->
            ignore (Ojs.call x4145 "push" [| Ojs.float_to_js x4146 |])
          | None ->
            ());
          x4145))

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x4149 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4149) "BYTES_PER_ELEMENT")

  let (of_ : t -> items:float list -> _Float32Array) =
   fun (x4153 : t) ~items:(x4150 : float list) ->
    _Float32Array_of_js
      (let x4154 = t_to_js x4153 in
       Ojs.call
         (Ojs.get_prop_ascii x4154 "of")
         "apply"
         [| x4154
          ; (let x4151 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x4152 : float) ->
                 ignore (Ojs.call x4151 "push" [| Ojs.float_to_js x4152 |]))
               x4150;
             x4151)
         |])

  let (from : t -> array:float _Array -> _Float32Array) =
   fun (x4157 : t) ~array:(x4155 : float _Array) ->
    _Float32Array_of_js
      (Ojs.call (t_to_js x4157) "from" [| _Array_to_js Ojs.float_to_js x4155 |])

  let (from' :
        t
        -> array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Float32Array)
    =
   fun (x4166 : t)
       ~array:(x4158 : 'T _Array)
       ~mapfn:(x4159 : v:'T -> k:float -> float)
       ?thisArg:(x4160 : any option)
       () ->
    _Float32Array_of_js
      (let x4167 = t_to_js x4166 in
       Ojs.call
         (Ojs.get_prop_ascii x4167 "from")
         "apply"
         [| x4167
          ; (let x4161 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x4161 "push" [| _Array_to_js Obj.magic x4158 |]);
             ignore
               (Ojs.call
                  x4161
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x4163 : Ojs.t) (x4164 : Ojs.t) ->
                         Ojs.float_to_js
                           (x4159
                              ~v:(Obj.magic x4163)
                              ~k:(Ojs.float_of_js x4164)))
                  |]);
             (match x4160 with
             | Some x4162 ->
               ignore (Ojs.call x4161 "push" [| any_to_js x4162 |])
             | None ->
               ());
             x4161)
         |])
end

let (float32Array : _Float32ArrayConstructor) =
  _Float32ArrayConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Float32Array")

module Float64Array = struct
  type t = _Float64Array

  let rec t_of_js : Ojs.t -> t =
   fun (x4169 : Ojs.t) -> _Float64Array_of_js x4169

  and t_to_js : t -> Ojs.t =
   fun (x4168 : _Float64Array) -> _Float64Array_to_js x4168

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x4171 : Ojs.t) -> t_of_js x4171

  and t_0_to_js : t_0 -> Ojs.t = fun (x4170 : t) -> t_to_js x4170

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x4172 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4172) "BYTES_PER_ELEMENT")

  let (get_buffer : t -> _ArrayBuffer) =
   fun (x4173 : t) ->
    _ArrayBuffer_of_js (Ojs.get_prop_ascii (t_to_js x4173) "buffer")

  let (get_byteLength : t -> float) =
   fun (x4174 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4174) "byteLength")

  let (get_byteOffset : t -> float) =
   fun (x4175 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4175) "byteOffset")

  let (copyWithin :
        t -> target:float -> start:float -> ?end_:float -> unit -> t)
    =
   fun (x4181 : t)
       ~target:(x4176 : float)
       ~start:(x4177 : float)
       ?end_:(x4178 : float option)
       () ->
    t_of_js
      (let x4182 = t_to_js x4181 in
       Ojs.call
         (Ojs.get_prop_ascii x4182 "copyWithin")
         "apply"
         [| x4182
          ; (let x4179 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x4179 "push" [| Ojs.float_to_js x4176 |]);
             ignore (Ojs.call x4179 "push" [| Ojs.float_to_js x4177 |]);
             (match x4178 with
             | Some x4180 ->
               ignore (Ojs.call x4179 "push" [| Ojs.float_to_js x4180 |])
             | None ->
               ());
             x4179)
         |])

  let (every :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x4190 : t)
       ~predicate:(x4183 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x4184 : any option)
       () ->
    Ojs.bool_of_js
      (let x4191 = t_to_js x4190 in
       Ojs.call
         (Ojs.get_prop_ascii x4191 "every")
         "apply"
         [| x4191
          ; (let x4185 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x4185
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x4187 : Ojs.t) (x4188 : Ojs.t) (x4189 : Ojs.t) ->
                         unknown_to_js
                           (x4183
                              ~value:(Ojs.float_of_js x4187)
                              ~index:(Ojs.float_of_js x4188)
                              ~array:(t_of_js x4189)))
                  |]);
             (match x4184 with
             | Some x4186 ->
               ignore (Ojs.call x4185 "push" [| any_to_js x4186 |])
             | None ->
               ());
             x4185)
         |])

  let (fill : t -> value:float -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x4198 : t)
       ~value:(x4192 : float)
       ?start:(x4193 : float option)
       ?end_:(x4194 : float option)
       () ->
    t_of_js
      (let x4199 = t_to_js x4198 in
       Ojs.call
         (Ojs.get_prop_ascii x4199 "fill")
         "apply"
         [| x4199
          ; (let x4195 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x4195 "push" [| Ojs.float_to_js x4192 |]);
             (match x4193 with
             | Some x4197 ->
               ignore (Ojs.call x4195 "push" [| Ojs.float_to_js x4197 |])
             | None ->
               ());
             (match x4194 with
             | Some x4196 ->
               ignore (Ojs.call x4195 "push" [| Ojs.float_to_js x4196 |])
             | None ->
               ());
             x4195)
         |])

  let (filter :
        t
        -> predicate:(value:float -> index:float -> array:t -> any)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x4207 : t)
       ~predicate:(x4200 : value:float -> index:float -> array:t -> any)
       ?thisArg:(x4201 : any option)
       () ->
    t_of_js
      (let x4208 = t_to_js x4207 in
       Ojs.call
         (Ojs.get_prop_ascii x4208 "filter")
         "apply"
         [| x4208
          ; (let x4202 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x4202
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x4204 : Ojs.t) (x4205 : Ojs.t) (x4206 : Ojs.t) ->
                         any_to_js
                           (x4200
                              ~value:(Ojs.float_of_js x4204)
                              ~index:(Ojs.float_of_js x4205)
                              ~array:(t_of_js x4206)))
                  |]);
             (match x4201 with
             | Some x4203 ->
               ignore (Ojs.call x4202 "push" [| any_to_js x4203 |])
             | None ->
               ());
             x4202)
         |])

  let (find :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float or_undefined)
    =
   fun (x4216 : t)
       ~predicate:(x4209 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x4210 : any option)
       () ->
    or_undefined_of_js
      Ojs.float_of_js
      (let x4217 = t_to_js x4216 in
       Ojs.call
         (Ojs.get_prop_ascii x4217 "find")
         "apply"
         [| x4217
          ; (let x4211 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x4211
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x4213 : Ojs.t) (x4214 : Ojs.t) (x4215 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x4209
                              ~value:(Ojs.float_of_js x4213)
                              ~index:(Ojs.float_of_js x4214)
                              ~obj:(t_of_js x4215)))
                  |]);
             (match x4210 with
             | Some x4212 ->
               ignore (Ojs.call x4211 "push" [| any_to_js x4212 |])
             | None ->
               ());
             x4211)
         |])

  let (findIndex :
        t
        -> predicate:(value:float -> index:float -> obj:t -> bool)
        -> ?thisArg:any
        -> unit
        -> float)
    =
   fun (x4226 : t)
       ~predicate:(x4219 : value:float -> index:float -> obj:t -> bool)
       ?thisArg:(x4220 : any option)
       () ->
    Ojs.float_of_js
      (let x4227 = t_to_js x4226 in
       Ojs.call
         (Ojs.get_prop_ascii x4227 "findIndex")
         "apply"
         [| x4227
          ; (let x4221 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x4221
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x4223 : Ojs.t) (x4224 : Ojs.t) (x4225 : Ojs.t) ->
                         Ojs.bool_to_js
                           (x4219
                              ~value:(Ojs.float_of_js x4223)
                              ~index:(Ojs.float_of_js x4224)
                              ~obj:(t_of_js x4225)))
                  |]);
             (match x4220 with
             | Some x4222 ->
               ignore (Ojs.call x4221 "push" [| any_to_js x4222 |])
             | None ->
               ());
             x4221)
         |])

  let (forEach :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> unit)
        -> ?thisArg:any
        -> unit
        -> unit)
    =
   fun (x4235 : t)
       ~callbackfn:(x4228 : value:float -> index:float -> array:t -> unit)
       ?thisArg:(x4229 : any option)
       () ->
    ignore
      (let x4236 = t_to_js x4235 in
       Ojs.call
         (Ojs.get_prop_ascii x4236 "forEach")
         "apply"
         [| x4236
          ; (let x4230 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x4230
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x4232 : Ojs.t) (x4233 : Ojs.t) (x4234 : Ojs.t) ->
                         x4228
                           ~value:(Ojs.float_of_js x4232)
                           ~index:(Ojs.float_of_js x4233)
                           ~array:(t_of_js x4234))
                  |]);
             (match x4229 with
             | Some x4231 ->
               ignore (Ojs.call x4230 "push" [| any_to_js x4231 |])
             | None ->
               ());
             x4230)
         |])

  let (indexOf : t -> searchElement:float -> ?fromIndex:float -> unit -> float) =
   fun (x4241 : t)
       ~searchElement:(x4237 : float)
       ?fromIndex:(x4238 : float option)
       () ->
    Ojs.float_of_js
      (let x4242 = t_to_js x4241 in
       Ojs.call
         (Ojs.get_prop_ascii x4242 "indexOf")
         "apply"
         [| x4242
          ; (let x4239 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x4239 "push" [| Ojs.float_to_js x4237 |]);
             (match x4238 with
             | Some x4240 ->
               ignore (Ojs.call x4239 "push" [| Ojs.float_to_js x4240 |])
             | None ->
               ());
             x4239)
         |])

  let (join : t -> ?separator:string -> unit -> string) =
   fun (x4246 : t) ?separator:(x4243 : string option) () ->
    Ojs.string_of_js
      (let x4247 = t_to_js x4246 in
       Ojs.call
         (Ojs.get_prop_ascii x4247 "join")
         "apply"
         [| x4247
          ; (let x4244 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x4243 with
             | Some x4245 ->
               ignore (Ojs.call x4244 "push" [| Ojs.string_to_js x4245 |])
             | None ->
               ());
             x4244)
         |])

  let (lastIndexOf :
        t -> searchElement:float -> ?fromIndex:float -> unit -> float)
    =
   fun (x4252 : t)
       ~searchElement:(x4248 : float)
       ?fromIndex:(x4249 : float option)
       () ->
    Ojs.float_of_js
      (let x4253 = t_to_js x4252 in
       Ojs.call
         (Ojs.get_prop_ascii x4253 "lastIndexOf")
         "apply"
         [| x4253
          ; (let x4250 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x4250 "push" [| Ojs.float_to_js x4248 |]);
             (match x4249 with
             | Some x4251 ->
               ignore (Ojs.call x4250 "push" [| Ojs.float_to_js x4251 |])
             | None ->
               ());
             x4250)
         |])

  let (get_length : t -> float) =
   fun (x4254 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4254) "length")

  let (map :
        t
        -> callbackfn:(value:float -> index:float -> array:t -> float)
        -> ?thisArg:any
        -> unit
        -> t)
    =
   fun (x4262 : t)
       ~callbackfn:(x4255 : value:float -> index:float -> array:t -> float)
       ?thisArg:(x4256 : any option)
       () ->
    t_of_js
      (let x4263 = t_to_js x4262 in
       Ojs.call
         (Ojs.get_prop_ascii x4263 "map")
         "apply"
         [| x4263
          ; (let x4257 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x4257
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x4259 : Ojs.t) (x4260 : Ojs.t) (x4261 : Ojs.t) ->
                         Ojs.float_to_js
                           (x4255
                              ~value:(Ojs.float_of_js x4259)
                              ~index:(Ojs.float_of_js x4260)
                              ~array:(t_of_js x4261)))
                  |]);
             (match x4256 with
             | Some x4258 ->
               ignore (Ojs.call x4257 "push" [| any_to_js x4258 |])
             | None ->
               ());
             x4257)
         |])

  let (reduce :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x4269 : t)
       ~callbackfn:
         (x4264 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x4269)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x4265 : Ojs.t)
                (x4266 : Ojs.t)
                (x4267 : Ojs.t)
                (x4268 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x4264
                     ~previousValue:(Ojs.float_of_js x4265)
                     ~currentValue:(Ojs.float_of_js x4266)
                     ~currentIndex:(Ojs.float_of_js x4267)
                     ~array:(t_of_js x4268)))
         |])

  let (reduce' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x4276 : t)
       ~callbackfn:
         (x4270 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x4275 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x4276)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x4271 : Ojs.t)
                (x4272 : Ojs.t)
                (x4273 : Ojs.t)
                (x4274 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x4270
                     ~previousValue:(Ojs.float_of_js x4271)
                     ~currentValue:(Ojs.float_of_js x4272)
                     ~currentIndex:(Ojs.float_of_js x4273)
                     ~array:(t_of_js x4274)))
          ; Ojs.float_to_js x4275
         |])

  let (reduce'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x4283 : t)
       ~callbackfn:
         (x4277 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x4282 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x4283)
         "reduce"
         [| Ojs.fun_to_js
              4
              (fun
                (x4278 : Ojs.t)
                (x4279 : Ojs.t)
                (x4280 : Ojs.t)
                (x4281 : Ojs.t)
              ->
                Obj.magic
                  (x4277
                     ~previousValue:(Obj.magic x4278)
                     ~currentValue:(Ojs.float_of_js x4279)
                     ~currentIndex:(Ojs.float_of_js x4280)
                     ~array:(t_of_js x4281)))
          ; Obj.magic x4282
         |])

  let (reduceRight :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> float)
    =
   fun (x4289 : t)
       ~callbackfn:
         (x4284 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x4289)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x4285 : Ojs.t)
                (x4286 : Ojs.t)
                (x4287 : Ojs.t)
                (x4288 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x4284
                     ~previousValue:(Ojs.float_of_js x4285)
                     ~currentValue:(Ojs.float_of_js x4286)
                     ~currentIndex:(Ojs.float_of_js x4287)
                     ~array:(t_of_js x4288)))
         |])

  let (reduceRight' :
        t
        -> callbackfn:
             (previousValue:float
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> float)
        -> initialValue:float
        -> float)
    =
   fun (x4296 : t)
       ~callbackfn:
         (x4290 :
           previousValue:float
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> float)
       ~initialValue:(x4295 : float) ->
    Ojs.float_of_js
      (Ojs.call
         (t_to_js x4296)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x4291 : Ojs.t)
                (x4292 : Ojs.t)
                (x4293 : Ojs.t)
                (x4294 : Ojs.t)
              ->
                Ojs.float_to_js
                  (x4290
                     ~previousValue:(Ojs.float_of_js x4291)
                     ~currentValue:(Ojs.float_of_js x4292)
                     ~currentIndex:(Ojs.float_of_js x4293)
                     ~array:(t_of_js x4294)))
          ; Ojs.float_to_js x4295
         |])

  let (reduceRight'' :
        t
        -> callbackfn:
             (previousValue:'U
              -> currentValue:float
              -> currentIndex:float
              -> array:t
              -> 'U)
        -> initialValue:'U
        -> 'U)
    =
   fun (x4303 : t)
       ~callbackfn:
         (x4297 :
           previousValue:'U
           -> currentValue:float
           -> currentIndex:float
           -> array:t
           -> 'U)
       ~initialValue:(x4302 : 'U) ->
    Obj.magic
      (Ojs.call
         (t_to_js x4303)
         "reduceRight"
         [| Ojs.fun_to_js
              4
              (fun
                (x4298 : Ojs.t)
                (x4299 : Ojs.t)
                (x4300 : Ojs.t)
                (x4301 : Ojs.t)
              ->
                Obj.magic
                  (x4297
                     ~previousValue:(Obj.magic x4298)
                     ~currentValue:(Ojs.float_of_js x4299)
                     ~currentIndex:(Ojs.float_of_js x4300)
                     ~array:(t_of_js x4301)))
          ; Obj.magic x4302
         |])

  let (reverse : t -> t) =
   fun (x4304 : t) -> t_of_js (Ojs.call (t_to_js x4304) "reverse" [||])

  let (set_ : t -> array:float _Array -> ?offset:float -> unit -> unit) =
   fun (x4310 : t)
       ~array:(x4305 : float _Array)
       ?offset:(x4306 : float option)
       () ->
    ignore
      (let x4311 = t_to_js x4310 in
       Ojs.call
         (Ojs.get_prop_ascii x4311 "set")
         "apply"
         [| x4311
          ; (let x4307 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call x4307 "push" [| _Array_to_js Ojs.float_to_js x4305 |]);
             (match x4306 with
             | Some x4308 ->
               ignore (Ojs.call x4307 "push" [| Ojs.float_to_js x4308 |])
             | None ->
               ());
             x4307)
         |])

  let (slice : t -> ?start:float -> ?end_:float -> unit -> t) =
   fun (x4317 : t) ?start:(x4312 : float option) ?end_:(x4313 : float option) () ->
    t_of_js
      (let x4318 = t_to_js x4317 in
       Ojs.call
         (Ojs.get_prop_ascii x4318 "slice")
         "apply"
         [| x4318
          ; (let x4314 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x4312 with
             | Some x4316 ->
               ignore (Ojs.call x4314 "push" [| Ojs.float_to_js x4316 |])
             | None ->
               ());
             (match x4313 with
             | Some x4315 ->
               ignore (Ojs.call x4314 "push" [| Ojs.float_to_js x4315 |])
             | None ->
               ());
             x4314)
         |])

  let (some :
        t
        -> predicate:(value:float -> index:float -> array:t -> unknown)
        -> ?thisArg:any
        -> unit
        -> bool)
    =
   fun (x4326 : t)
       ~predicate:(x4319 : value:float -> index:float -> array:t -> unknown)
       ?thisArg:(x4320 : any option)
       () ->
    Ojs.bool_of_js
      (let x4327 = t_to_js x4326 in
       Ojs.call
         (Ojs.get_prop_ascii x4327 "some")
         "apply"
         [| x4327
          ; (let x4321 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore
               (Ojs.call
                  x4321
                  "push"
                  [| Ojs.fun_to_js
                       3
                       (fun (x4323 : Ojs.t) (x4324 : Ojs.t) (x4325 : Ojs.t) ->
                         unknown_to_js
                           (x4319
                              ~value:(Ojs.float_of_js x4323)
                              ~index:(Ojs.float_of_js x4324)
                              ~array:(t_of_js x4325)))
                  |]);
             (match x4320 with
             | Some x4322 ->
               ignore (Ojs.call x4321 "push" [| any_to_js x4322 |])
             | None ->
               ());
             x4321)
         |])

  let (sort : t -> ?compareFn:(a:float -> b:float -> float) -> unit -> t) =
   fun (x4333 : t) ?compareFn:(x4328 : (a:float -> b:float -> float) option) () ->
    t_of_js
      (let x4334 = t_to_js x4333 in
       Ojs.call
         (Ojs.get_prop_ascii x4334 "sort")
         "apply"
         [| x4334
          ; (let x4329 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x4328 with
             | Some x4330 ->
               ignore
                 (Ojs.call
                    x4329
                    "push"
                    [| Ojs.fun_to_js 2 (fun (x4331 : Ojs.t) (x4332 : Ojs.t) ->
                           Ojs.float_to_js
                             (x4330
                                ~a:(Ojs.float_of_js x4331)
                                ~b:(Ojs.float_of_js x4332)))
                    |])
             | None ->
               ());
             x4329)
         |])

  let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
   fun (x4340 : t)
       ?begin_:(x4335 : float option)
       ?end_:(x4336 : float option)
       () ->
    t_of_js
      (let x4341 = t_to_js x4340 in
       Ojs.call
         (Ojs.get_prop_ascii x4341 "subarray")
         "apply"
         [| x4341
          ; (let x4337 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             (match x4335 with
             | Some x4339 ->
               ignore (Ojs.call x4337 "push" [| Ojs.float_to_js x4339 |])
             | None ->
               ());
             (match x4336 with
             | Some x4338 ->
               ignore (Ojs.call x4337 "push" [| Ojs.float_to_js x4338 |])
             | None ->
               ());
             x4337)
         |])

  let (toString : t -> string) =
   fun (x4342 : t) ->
    Ojs.string_of_js (Ojs.call (t_to_js x4342) "toString" [||])

  let (valueOf : t -> t) =
   fun (x4343 : t) -> t_of_js (Ojs.call (t_to_js x4343) "valueOf" [||])

  let (get : t -> float -> float) =
   fun (x4344 : t) (x4345 : float) ->
    Ojs.float_of_js (Ojs.get_prop (t_to_js x4344) (Ojs.float_to_js x4345))

  let (set : t -> float -> float -> unit) =
   fun (x4346 : t) (x4347 : float) (x4348 : float) ->
    Ojs.set_prop (t_to_js x4346) (Ojs.float_to_js x4347) (Ojs.float_to_js x4348)

  let (create : length:float -> _Float64Array) =
   fun ~length:(x4349 : float) ->
    _Float64Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Float64Array")
         [| Ojs.float_to_js x4349 |])

  let (create' : array:(_ArrayBuffer, float _Array) union2 -> _Float64Array) =
   fun ~array:(x4350 : (_ArrayBuffer, float _Array) union2) ->
    _Float64Array_of_js
      (Ojs.new_obj
         (Ojs.get_prop_ascii Ojs.global "Float64Array")
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x4352 : float _Array) -> _Array_to_js Ojs.float_to_js x4352)
              x4350
         |])

  let (create'' :
        buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Float64Array)
    =
   fun ~buffer:(x4354 : _ArrayBuffer)
       ?byteOffset:(x4355 : float option)
       ?length:(x4356 : float option)
       () ->
    _Float64Array_of_js
      (Ojs.new_obj_arr
         (Ojs.get_prop_ascii Ojs.global "Float64Array")
         (let x4357 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x4357 "push" [| _ArrayBuffer_to_js x4354 |]);
          (match x4355 with
          | Some x4359 ->
            ignore (Ojs.call x4357 "push" [| Ojs.float_to_js x4359 |])
          | None ->
            ());
          (match x4356 with
          | Some x4358 ->
            ignore (Ojs.call x4357 "push" [| Ojs.float_to_js x4358 |])
          | None ->
            ());
          x4357))

  let (get_BYTES_PER_ELEMENT : float) =
    Ojs.float_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Float64Array")
         "BYTES_PER_ELEMENT")

  let (of_ : items:float list -> _Float64Array) =
   fun ~items:(x4360 : float list) ->
    _Float64Array_of_js
      (let x4363 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
       Ojs.call
         (Ojs.get_prop_ascii x4363 "of")
         "apply"
         [| x4363
          ; (let x4361 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x4362 : float) ->
                 ignore (Ojs.call x4361 "push" [| Ojs.float_to_js x4362 |]))
               x4360;
             x4361)
         |])

  let (from : array:float _Array -> _Float64Array) =
   fun ~array:(x4364 : float _Array) ->
    _Float64Array_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "Float64Array")
         "from"
         [| _Array_to_js Ojs.float_to_js x4364 |])

  let (from' :
        array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Float64Array)
    =
   fun ~array:(x4366 : 'T _Array)
       ~mapfn:(x4367 : v:'T -> k:float -> float)
       ?thisArg:(x4368 : any option)
       () ->
    _Float64Array_of_js
      (let x4374 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
       Ojs.call
         (Ojs.get_prop_ascii x4374 "from")
         "apply"
         [| x4374
          ; (let x4369 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x4369 "push" [| _Array_to_js Obj.magic x4366 |]);
             ignore
               (Ojs.call
                  x4369
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x4371 : Ojs.t) (x4372 : Ojs.t) ->
                         Ojs.float_to_js
                           (x4367
                              ~v:(Obj.magic x4371)
                              ~k:(Ojs.float_of_js x4372)))
                  |]);
             (match x4368 with
             | Some x4370 ->
               ignore (Ojs.call x4369 "push" [| any_to_js x4370 |])
             | None ->
               ());
             x4369)
         |])
end

module Float64ArrayConstructor = struct
  type t = _Float64ArrayConstructor

  let rec t_of_js : Ojs.t -> t =
   fun (x4376 : Ojs.t) -> _Float64ArrayConstructor_of_js x4376

  and t_to_js : t -> Ojs.t =
   fun (x4375 : _Float64ArrayConstructor) ->
    _Float64ArrayConstructor_to_js x4375

  type t_0 = t

  let rec t_0_of_js : Ojs.t -> t_0 = fun (x4378 : Ojs.t) -> t_of_js x4378

  and t_0_to_js : t_0 -> Ojs.t = fun (x4377 : t) -> t_to_js x4377

  let (get_prototype : t -> _Float64Array) =
   fun (x4379 : t) ->
    _Float64Array_of_js (Ojs.get_prop_ascii (t_to_js x4379) "prototype")

  let (create : t -> length:float -> _Float64Array) =
   fun (x4381 : t) ~length:(x4380 : float) ->
    _Float64Array_of_js
      (Ojs.new_obj (t_to_js x4381) [| Ojs.float_to_js x4380 |])

  let (create' :
        t -> array:(_ArrayBuffer, float _Array) union2 -> _Float64Array)
    =
   fun (x4386 : t) ~array:(x4382 : (_ArrayBuffer, float _Array) union2) ->
    _Float64Array_of_js
      (Ojs.new_obj
         (t_to_js x4386)
         [| union2_to_js
              _ArrayBuffer_to_js
              (fun (x4384 : float _Array) -> _Array_to_js Ojs.float_to_js x4384)
              x4382
         |])

  let (create'' :
        t
        -> buffer:_ArrayBuffer
        -> ?byteOffset:float
        -> ?length:float
        -> unit
        -> _Float64Array)
    =
   fun (x4393 : t)
       ~buffer:(x4387 : _ArrayBuffer)
       ?byteOffset:(x4388 : float option)
       ?length:(x4389 : float option)
       () ->
    _Float64Array_of_js
      (Ojs.new_obj_arr
         (t_to_js x4393)
         (let x4390 =
            Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
          in
          ignore (Ojs.call x4390 "push" [| _ArrayBuffer_to_js x4387 |]);
          (match x4388 with
          | Some x4392 ->
            ignore (Ojs.call x4390 "push" [| Ojs.float_to_js x4392 |])
          | None ->
            ());
          (match x4389 with
          | Some x4391 ->
            ignore (Ojs.call x4390 "push" [| Ojs.float_to_js x4391 |])
          | None ->
            ());
          x4390))

  let (get_BYTES_PER_ELEMENT : t -> float) =
   fun (x4394 : t) ->
    Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4394) "BYTES_PER_ELEMENT")

  let (of_ : t -> items:float list -> _Float64Array) =
   fun (x4398 : t) ~items:(x4395 : float list) ->
    _Float64Array_of_js
      (let x4399 = t_to_js x4398 in
       Ojs.call
         (Ojs.get_prop_ascii x4399 "of")
         "apply"
         [| x4399
          ; (let x4396 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             List.iter
               (fun (x4397 : float) ->
                 ignore (Ojs.call x4396 "push" [| Ojs.float_to_js x4397 |]))
               x4395;
             x4396)
         |])

  let (from : t -> array:float _Array -> _Float64Array) =
   fun (x4402 : t) ~array:(x4400 : float _Array) ->
    _Float64Array_of_js
      (Ojs.call (t_to_js x4402) "from" [| _Array_to_js Ojs.float_to_js x4400 |])

  let (from' :
        t
        -> array:'T _Array
        -> mapfn:(v:'T -> k:float -> float)
        -> ?thisArg:any
        -> unit
        -> _Float64Array)
    =
   fun (x4411 : t)
       ~array:(x4403 : 'T _Array)
       ~mapfn:(x4404 : v:'T -> k:float -> float)
       ?thisArg:(x4405 : any option)
       () ->
    _Float64Array_of_js
      (let x4412 = t_to_js x4411 in
       Ojs.call
         (Ojs.get_prop_ascii x4412 "from")
         "apply"
         [| x4412
          ; (let x4406 =
               Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
             in
             ignore (Ojs.call x4406 "push" [| _Array_to_js Obj.magic x4403 |]);
             ignore
               (Ojs.call
                  x4406
                  "push"
                  [| Ojs.fun_to_js 2 (fun (x4408 : Ojs.t) (x4409 : Ojs.t) ->
                         Ojs.float_to_js
                           (x4404
                              ~v:(Obj.magic x4408)
                              ~k:(Ojs.float_of_js x4409)))
                  |]);
             (match x4405 with
             | Some x4407 ->
               ignore (Ojs.call x4406 "push" [| any_to_js x4407 |])
             | None ->
               ());
             x4406)
         |])
end

let (float64Array : _Float64ArrayConstructor) =
  _Float64ArrayConstructor_of_js (Ojs.get_prop_ascii Ojs.global "Float64Array")

module Intl = struct
  module CollatorOptions = struct
    type t = _Intl_CollatorOptions

    let rec t_of_js : Ojs.t -> t =
     fun (x4414 : Ojs.t) -> _Intl_CollatorOptions_of_js x4414

    and t_to_js : t -> Ojs.t =
     fun (x4413 : _Intl_CollatorOptions) -> _Intl_CollatorOptions_to_js x4413

    type t_0 = t

    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4416 : Ojs.t) -> t_of_js x4416

    and t_0_to_js : t_0 -> Ojs.t = fun (x4415 : t) -> t_to_js x4415

    let (get_usage : t -> string) =
     fun (x4417 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4417) "usage")

    let (set_usage : t -> string -> unit) =
     fun (x4418 : t) (x4419 : string) ->
      Ojs.set_prop_ascii (t_to_js x4418) "usage" (Ojs.string_to_js x4419)

    let (get_localeMatcher : t -> string) =
     fun (x4420 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4420) "localeMatcher")

    let (set_localeMatcher : t -> string -> unit) =
     fun (x4421 : t) (x4422 : string) ->
      Ojs.set_prop_ascii
        (t_to_js x4421)
        "localeMatcher"
        (Ojs.string_to_js x4422)

    let (get_numeric : t -> bool) =
     fun (x4423 : t) ->
      Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4423) "numeric")

    let (set_numeric : t -> bool -> unit) =
     fun (x4424 : t) (x4425 : bool) ->
      Ojs.set_prop_ascii (t_to_js x4424) "numeric" (Ojs.bool_to_js x4425)

    let (get_caseFirst : t -> string) =
     fun (x4426 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4426) "caseFirst")

    let (set_caseFirst : t -> string -> unit) =
     fun (x4427 : t) (x4428 : string) ->
      Ojs.set_prop_ascii (t_to_js x4427) "caseFirst" (Ojs.string_to_js x4428)

    let (get_sensitivity : t -> string) =
     fun (x4429 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4429) "sensitivity")

    let (set_sensitivity : t -> string -> unit) =
     fun (x4430 : t) (x4431 : string) ->
      Ojs.set_prop_ascii (t_to_js x4430) "sensitivity" (Ojs.string_to_js x4431)

    let (get_ignorePunctuation : t -> bool) =
     fun (x4432 : t) ->
      Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4432) "ignorePunctuation")

    let (set_ignorePunctuation : t -> bool -> unit) =
     fun (x4433 : t) (x4434 : bool) ->
      Ojs.set_prop_ascii
        (t_to_js x4433)
        "ignorePunctuation"
        (Ojs.bool_to_js x4434)
  end

  module ResolvedCollatorOptions = struct
    type t = _Intl_ResolvedCollatorOptions

    let rec t_of_js : Ojs.t -> t =
     fun (x4436 : Ojs.t) -> _Intl_ResolvedCollatorOptions_of_js x4436

    and t_to_js : t -> Ojs.t =
     fun (x4435 : _Intl_ResolvedCollatorOptions) ->
      _Intl_ResolvedCollatorOptions_to_js x4435

    type t_0 = t

    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4438 : Ojs.t) -> t_of_js x4438

    and t_0_to_js : t_0 -> Ojs.t = fun (x4437 : t) -> t_to_js x4437

    let (get_locale : t -> string) =
     fun (x4439 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4439) "locale")

    let (set_locale : t -> string -> unit) =
     fun (x4440 : t) (x4441 : string) ->
      Ojs.set_prop_ascii (t_to_js x4440) "locale" (Ojs.string_to_js x4441)

    let (get_usage : t -> string) =
     fun (x4442 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4442) "usage")

    let (set_usage : t -> string -> unit) =
     fun (x4443 : t) (x4444 : string) ->
      Ojs.set_prop_ascii (t_to_js x4443) "usage" (Ojs.string_to_js x4444)

    let (get_sensitivity : t -> string) =
     fun (x4445 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4445) "sensitivity")

    let (set_sensitivity : t -> string -> unit) =
     fun (x4446 : t) (x4447 : string) ->
      Ojs.set_prop_ascii (t_to_js x4446) "sensitivity" (Ojs.string_to_js x4447)

    let (get_ignorePunctuation : t -> bool) =
     fun (x4448 : t) ->
      Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4448) "ignorePunctuation")

    let (set_ignorePunctuation : t -> bool -> unit) =
     fun (x4449 : t) (x4450 : bool) ->
      Ojs.set_prop_ascii
        (t_to_js x4449)
        "ignorePunctuation"
        (Ojs.bool_to_js x4450)

    let (get_collation : t -> string) =
     fun (x4451 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4451) "collation")

    let (set_collation : t -> string -> unit) =
     fun (x4452 : t) (x4453 : string) ->
      Ojs.set_prop_ascii (t_to_js x4452) "collation" (Ojs.string_to_js x4453)

    let (get_caseFirst : t -> string) =
     fun (x4454 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4454) "caseFirst")

    let (set_caseFirst : t -> string -> unit) =
     fun (x4455 : t) (x4456 : string) ->
      Ojs.set_prop_ascii (t_to_js x4455) "caseFirst" (Ojs.string_to_js x4456)

    let (get_numeric : t -> bool) =
     fun (x4457 : t) ->
      Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4457) "numeric")

    let (set_numeric : t -> bool -> unit) =
     fun (x4458 : t) (x4459 : bool) ->
      Ojs.set_prop_ascii (t_to_js x4458) "numeric" (Ojs.bool_to_js x4459)
  end

  module Collator = struct
    type t = _Intl_Collator

    let rec t_of_js : Ojs.t -> t =
     fun (x4461 : Ojs.t) -> _Intl_Collator_of_js x4461

    and t_to_js : t -> Ojs.t =
     fun (x4460 : _Intl_Collator) -> _Intl_Collator_to_js x4460

    type t_0 = t

    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4463 : Ojs.t) -> t_of_js x4463

    and t_0_to_js : t_0 -> Ojs.t = fun (x4462 : t) -> t_to_js x4462

    let (compare : t -> x:string -> y:string -> float) =
     fun (x4466 : t) ~x:(x4464 : string) ~y:(x4465 : string) ->
      Ojs.float_of_js
        (Ojs.call
           (t_to_js x4466)
           "compare"
           [| Ojs.string_to_js x4464; Ojs.string_to_js x4465 |])

    let (resolvedOptions : t -> _Intl_ResolvedCollatorOptions) =
     fun (x4467 : t) ->
      _Intl_ResolvedCollatorOptions_of_js
        (Ojs.call (t_to_js x4467) "resolvedOptions" [||])
  end

  let (collator : anonymous_interface_2) =
    anonymous_interface_2_of_js
      (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Intl") "Collator")

  module NumberFormatOptions = struct
    type t = _Intl_NumberFormatOptions

    let rec t_of_js : Ojs.t -> t =
     fun (x4469 : Ojs.t) -> _Intl_NumberFormatOptions_of_js x4469

    and t_to_js : t -> Ojs.t =
     fun (x4468 : _Intl_NumberFormatOptions) ->
      _Intl_NumberFormatOptions_to_js x4468

    type t_0 = t

    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4471 : Ojs.t) -> t_of_js x4471

    and t_0_to_js : t_0 -> Ojs.t = fun (x4470 : t) -> t_to_js x4470

    let (get_localeMatcher : t -> string) =
     fun (x4472 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4472) "localeMatcher")

    let (set_localeMatcher : t -> string -> unit) =
     fun (x4473 : t) (x4474 : string) ->
      Ojs.set_prop_ascii
        (t_to_js x4473)
        "localeMatcher"
        (Ojs.string_to_js x4474)

    let (get_style : t -> string) =
     fun (x4475 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4475) "style")

    let (set_style : t -> string -> unit) =
     fun (x4476 : t) (x4477 : string) ->
      Ojs.set_prop_ascii (t_to_js x4476) "style" (Ojs.string_to_js x4477)

    let (get_currency : t -> string) =
     fun (x4478 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4478) "currency")

    let (set_currency : t -> string -> unit) =
     fun (x4479 : t) (x4480 : string) ->
      Ojs.set_prop_ascii (t_to_js x4479) "currency" (Ojs.string_to_js x4480)

    let (get_currencyDisplay : t -> string) =
     fun (x4481 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4481) "currencyDisplay")

    let (set_currencyDisplay : t -> string -> unit) =
     fun (x4482 : t) (x4483 : string) ->
      Ojs.set_prop_ascii
        (t_to_js x4482)
        "currencyDisplay"
        (Ojs.string_to_js x4483)

    let (get_currencySign : t -> string) =
     fun (x4484 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4484) "currencySign")

    let (set_currencySign : t -> string -> unit) =
     fun (x4485 : t) (x4486 : string) ->
      Ojs.set_prop_ascii (t_to_js x4485) "currencySign" (Ojs.string_to_js x4486)

    let (get_useGrouping : t -> bool) =
     fun (x4487 : t) ->
      Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4487) "useGrouping")

    let (set_useGrouping : t -> bool -> unit) =
     fun (x4488 : t) (x4489 : bool) ->
      Ojs.set_prop_ascii (t_to_js x4488) "useGrouping" (Ojs.bool_to_js x4489)

    let (get_minimumIntegerDigits : t -> float) =
     fun (x4490 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4490) "minimumIntegerDigits")

    let (set_minimumIntegerDigits : t -> float -> unit) =
     fun (x4491 : t) (x4492 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4491)
        "minimumIntegerDigits"
        (Ojs.float_to_js x4492)

    let (get_minimumFractionDigits : t -> float) =
     fun (x4493 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4493) "minimumFractionDigits")

    let (set_minimumFractionDigits : t -> float -> unit) =
     fun (x4494 : t) (x4495 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4494)
        "minimumFractionDigits"
        (Ojs.float_to_js x4495)

    let (get_maximumFractionDigits : t -> float) =
     fun (x4496 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4496) "maximumFractionDigits")

    let (set_maximumFractionDigits : t -> float -> unit) =
     fun (x4497 : t) (x4498 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4497)
        "maximumFractionDigits"
        (Ojs.float_to_js x4498)

    let (get_minimumSignificantDigits : t -> float) =
     fun (x4499 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4499) "minimumSignificantDigits")

    let (set_minimumSignificantDigits : t -> float -> unit) =
     fun (x4500 : t) (x4501 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4500)
        "minimumSignificantDigits"
        (Ojs.float_to_js x4501)

    let (get_maximumSignificantDigits : t -> float) =
     fun (x4502 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4502) "maximumSignificantDigits")

    let (set_maximumSignificantDigits : t -> float -> unit) =
     fun (x4503 : t) (x4504 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4503)
        "maximumSignificantDigits"
        (Ojs.float_to_js x4504)
  end

  module ResolvedNumberFormatOptions = struct
    type t = _Intl_ResolvedNumberFormatOptions

    let rec t_of_js : Ojs.t -> t =
     fun (x4506 : Ojs.t) -> _Intl_ResolvedNumberFormatOptions_of_js x4506

    and t_to_js : t -> Ojs.t =
     fun (x4505 : _Intl_ResolvedNumberFormatOptions) ->
      _Intl_ResolvedNumberFormatOptions_to_js x4505

    type t_0 = t

    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4508 : Ojs.t) -> t_of_js x4508

    and t_0_to_js : t_0 -> Ojs.t = fun (x4507 : t) -> t_to_js x4507

    let (get_locale : t -> string) =
     fun (x4509 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4509) "locale")

    let (set_locale : t -> string -> unit) =
     fun (x4510 : t) (x4511 : string) ->
      Ojs.set_prop_ascii (t_to_js x4510) "locale" (Ojs.string_to_js x4511)

    let (get_numberingSystem : t -> string) =
     fun (x4512 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4512) "numberingSystem")

    let (set_numberingSystem : t -> string -> unit) =
     fun (x4513 : t) (x4514 : string) ->
      Ojs.set_prop_ascii
        (t_to_js x4513)
        "numberingSystem"
        (Ojs.string_to_js x4514)

    let (get_style : t -> string) =
     fun (x4515 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4515) "style")

    let (set_style : t -> string -> unit) =
     fun (x4516 : t) (x4517 : string) ->
      Ojs.set_prop_ascii (t_to_js x4516) "style" (Ojs.string_to_js x4517)

    let (get_currency : t -> string) =
     fun (x4518 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4518) "currency")

    let (set_currency : t -> string -> unit) =
     fun (x4519 : t) (x4520 : string) ->
      Ojs.set_prop_ascii (t_to_js x4519) "currency" (Ojs.string_to_js x4520)

    let (get_currencyDisplay : t -> string) =
     fun (x4521 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4521) "currencyDisplay")

    let (set_currencyDisplay : t -> string -> unit) =
     fun (x4522 : t) (x4523 : string) ->
      Ojs.set_prop_ascii
        (t_to_js x4522)
        "currencyDisplay"
        (Ojs.string_to_js x4523)

    let (get_minimumIntegerDigits : t -> float) =
     fun (x4524 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4524) "minimumIntegerDigits")

    let (set_minimumIntegerDigits : t -> float -> unit) =
     fun (x4525 : t) (x4526 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4525)
        "minimumIntegerDigits"
        (Ojs.float_to_js x4526)

    let (get_minimumFractionDigits : t -> float) =
     fun (x4527 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4527) "minimumFractionDigits")

    let (set_minimumFractionDigits : t -> float -> unit) =
     fun (x4528 : t) (x4529 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4528)
        "minimumFractionDigits"
        (Ojs.float_to_js x4529)

    let (get_maximumFractionDigits : t -> float) =
     fun (x4530 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4530) "maximumFractionDigits")

    let (set_maximumFractionDigits : t -> float -> unit) =
     fun (x4531 : t) (x4532 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4531)
        "maximumFractionDigits"
        (Ojs.float_to_js x4532)

    let (get_minimumSignificantDigits : t -> float) =
     fun (x4533 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4533) "minimumSignificantDigits")

    let (set_minimumSignificantDigits : t -> float -> unit) =
     fun (x4534 : t) (x4535 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4534)
        "minimumSignificantDigits"
        (Ojs.float_to_js x4535)

    let (get_maximumSignificantDigits : t -> float) =
     fun (x4536 : t) ->
      Ojs.float_of_js
        (Ojs.get_prop_ascii (t_to_js x4536) "maximumSignificantDigits")

    let (set_maximumSignificantDigits : t -> float -> unit) =
     fun (x4537 : t) (x4538 : float) ->
      Ojs.set_prop_ascii
        (t_to_js x4537)
        "maximumSignificantDigits"
        (Ojs.float_to_js x4538)

    let (get_useGrouping : t -> bool) =
     fun (x4539 : t) ->
      Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4539) "useGrouping")

    let (set_useGrouping : t -> bool -> unit) =
     fun (x4540 : t) (x4541 : bool) ->
      Ojs.set_prop_ascii (t_to_js x4540) "useGrouping" (Ojs.bool_to_js x4541)
  end

  module NumberFormat = struct
    type t = _Intl_NumberFormat

    let rec t_of_js : Ojs.t -> t =
     fun (x4543 : Ojs.t) -> _Intl_NumberFormat_of_js x4543

    and t_to_js : t -> Ojs.t =
     fun (x4542 : _Intl_NumberFormat) -> _Intl_NumberFormat_to_js x4542

    type t_0 = t

    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4545 : Ojs.t) -> t_of_js x4545

    and t_0_to_js : t_0 -> Ojs.t = fun (x4544 : t) -> t_to_js x4544

    let (format : t -> value:float -> string) =
     fun (x4547 : t) ~value:(x4546 : float) ->
      Ojs.string_of_js
        (Ojs.call (t_to_js x4547) "format" [| Ojs.float_to_js x4546 |])

    let (resolvedOptions : t -> _Intl_ResolvedNumberFormatOptions) =
     fun (x4548 : t) ->
      _Intl_ResolvedNumberFormatOptions_of_js
        (Ojs.call (t_to_js x4548) "resolvedOptions" [||])
  end

  let (numberFormat : anonymous_interface_4) =
    anonymous_interface_4_of_js
      (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Intl") "NumberFormat")

  module DateTimeFormatOptions = struct
    type t = _Intl_DateTimeFormatOptions

    let rec t_of_js : Ojs.t -> t =
     fun (x4550 : Ojs.t) -> _Intl_DateTimeFormatOptions_of_js x4550

    and t_to_js : t -> Ojs.t =
     fun (x4549 : _Intl_DateTimeFormatOptions) ->
      _Intl_DateTimeFormatOptions_to_js x4549

    type t_0 = t

    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4552 : Ojs.t) -> t_of_js x4552

    and t_0_to_js : t_0 -> Ojs.t = fun (x4551 : t) -> t_to_js x4551

    let (get_localeMatcher : t -> [ `L_s2_best_fit | `L_s4_lookup ]) =
     fun (x4553 : t) ->
      let x4554 = Ojs.get_prop_ascii (t_to_js x4553) "localeMatcher" in
      match Ojs.string_of_js x4554 with
      | "best fit" ->
        `L_s2_best_fit
      | "lookup" ->
        `L_s4_lookup
      | _ ->
        assert false

    let (set_localeMatcher : t -> [ `L_s2_best_fit | `L_s4_lookup ] -> unit) =
     fun (x4555 : t) (x4556 : [ `L_s2_best_fit | `L_s4_lookup ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4555)
        "localeMatcher"
        (match x4556 with
        | `L_s2_best_fit ->
          Ojs.string_to_js "LS2BestFit"
        | `L_s4_lookup ->
          Ojs.string_to_js "LS4Lookup")

    let (get_weekday : t -> [ `L_s3_long | `L_s5_narrow | `L_s7_short ]) =
     fun (x4557 : t) ->
      let x4558 = Ojs.get_prop_ascii (t_to_js x4557) "weekday" in
      match Ojs.string_of_js x4558 with
      | "long" ->
        `L_s3_long
      | "narrow" ->
        `L_s5_narrow
      | "short" ->
        `L_s7_short
      | _ ->
        assert false

    let (set_weekday : t -> [ `L_s3_long | `L_s5_narrow | `L_s7_short ] -> unit)
      =
     fun (x4559 : t) (x4560 : [ `L_s3_long | `L_s5_narrow | `L_s7_short ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4559)
        "weekday"
        (match x4560 with
        | `L_s3_long ->
          Ojs.string_to_js "LS3Long"
        | `L_s5_narrow ->
          Ojs.string_to_js "LS5Narrow"
        | `L_s7_short ->
          Ojs.string_to_js "LS7Short")

    let (get_era : t -> [ `L_s3_long | `L_s5_narrow | `L_s7_short ]) =
     fun (x4561 : t) ->
      let x4562 = Ojs.get_prop_ascii (t_to_js x4561) "era" in
      match Ojs.string_of_js x4562 with
      | "long" ->
        `L_s3_long
      | "narrow" ->
        `L_s5_narrow
      | "short" ->
        `L_s7_short
      | _ ->
        assert false

    let (set_era : t -> [ `L_s3_long | `L_s5_narrow | `L_s7_short ] -> unit) =
     fun (x4563 : t) (x4564 : [ `L_s3_long | `L_s5_narrow | `L_s7_short ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4563)
        "era"
        (match x4564 with
        | `L_s3_long ->
          Ojs.string_to_js "LS3Long"
        | `L_s5_narrow ->
          Ojs.string_to_js "LS5Narrow"
        | `L_s7_short ->
          Ojs.string_to_js "LS7Short")

    let (get_year : t -> [ `L_s0_2_digit | `L_s6_numeric ]) =
     fun (x4565 : t) ->
      let x4566 = Ojs.get_prop_ascii (t_to_js x4565) "year" in
      match Ojs.string_of_js x4566 with
      | "2-digit" ->
        `L_s0_2_digit
      | "numeric" ->
        `L_s6_numeric
      | _ ->
        assert false

    let (set_year : t -> [ `L_s0_2_digit | `L_s6_numeric ] -> unit) =
     fun (x4567 : t) (x4568 : [ `L_s0_2_digit | `L_s6_numeric ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4567)
        "year"
        (match x4568 with
        | `L_s0_2_digit ->
          Ojs.string_to_js "LS02Digit"
        | `L_s6_numeric ->
          Ojs.string_to_js "LS6Numeric")

    let (get_month :
          t
          -> [ `L_s0_2_digit
             | `L_s3_long
             | `L_s5_narrow
             | `L_s6_numeric
             | `L_s7_short
             ])
      =
     fun (x4569 : t) ->
      let x4570 = Ojs.get_prop_ascii (t_to_js x4569) "month" in
      match Ojs.string_of_js x4570 with
      | "2-digit" ->
        `L_s0_2_digit
      | "long" ->
        `L_s3_long
      | "narrow" ->
        `L_s5_narrow
      | "numeric" ->
        `L_s6_numeric
      | "short" ->
        `L_s7_short
      | _ ->
        assert false

    let (set_month :
          t
          -> [ `L_s0_2_digit
             | `L_s3_long
             | `L_s5_narrow
             | `L_s6_numeric
             | `L_s7_short
             ]
          -> unit)
      =
     fun (x4571 : t)
         (x4572 :
           [ `L_s0_2_digit
           | `L_s3_long
           | `L_s5_narrow
           | `L_s6_numeric
           | `L_s7_short
           ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4571)
        "month"
        (match x4572 with
        | `L_s0_2_digit ->
          Ojs.string_to_js "LS02Digit"
        | `L_s3_long ->
          Ojs.string_to_js "LS3Long"
        | `L_s5_narrow ->
          Ojs.string_to_js "LS5Narrow"
        | `L_s6_numeric ->
          Ojs.string_to_js "LS6Numeric"
        | `L_s7_short ->
          Ojs.string_to_js "LS7Short")

    let (get_day : t -> [ `L_s0_2_digit | `L_s6_numeric ]) =
     fun (x4573 : t) ->
      let x4574 = Ojs.get_prop_ascii (t_to_js x4573) "day" in
      match Ojs.string_of_js x4574 with
      | "2-digit" ->
        `L_s0_2_digit
      | "numeric" ->
        `L_s6_numeric
      | _ ->
        assert false

    let (set_day : t -> [ `L_s0_2_digit | `L_s6_numeric ] -> unit) =
     fun (x4575 : t) (x4576 : [ `L_s0_2_digit | `L_s6_numeric ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4575)
        "day"
        (match x4576 with
        | `L_s0_2_digit ->
          Ojs.string_to_js "LS02Digit"
        | `L_s6_numeric ->
          Ojs.string_to_js "LS6Numeric")

    let (get_hour : t -> [ `L_s0_2_digit | `L_s6_numeric ]) =
     fun (x4577 : t) ->
      let x4578 = Ojs.get_prop_ascii (t_to_js x4577) "hour" in
      match Ojs.string_of_js x4578 with
      | "2-digit" ->
        `L_s0_2_digit
      | "numeric" ->
        `L_s6_numeric
      | _ ->
        assert false

    let (set_hour : t -> [ `L_s0_2_digit | `L_s6_numeric ] -> unit) =
     fun (x4579 : t) (x4580 : [ `L_s0_2_digit | `L_s6_numeric ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4579)
        "hour"
        (match x4580 with
        | `L_s0_2_digit ->
          Ojs.string_to_js "LS02Digit"
        | `L_s6_numeric ->
          Ojs.string_to_js "LS6Numeric")

    let (get_minute : t -> [ `L_s0_2_digit | `L_s6_numeric ]) =
     fun (x4581 : t) ->
      let x4582 = Ojs.get_prop_ascii (t_to_js x4581) "minute" in
      match Ojs.string_of_js x4582 with
      | "2-digit" ->
        `L_s0_2_digit
      | "numeric" ->
        `L_s6_numeric
      | _ ->
        assert false

    let (set_minute : t -> [ `L_s0_2_digit | `L_s6_numeric ] -> unit) =
     fun (x4583 : t) (x4584 : [ `L_s0_2_digit | `L_s6_numeric ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4583)
        "minute"
        (match x4584 with
        | `L_s0_2_digit ->
          Ojs.string_to_js "LS02Digit"
        | `L_s6_numeric ->
          Ojs.string_to_js "LS6Numeric")

    let (get_second : t -> [ `L_s0_2_digit | `L_s6_numeric ]) =
     fun (x4585 : t) ->
      let x4586 = Ojs.get_prop_ascii (t_to_js x4585) "second" in
      match Ojs.string_of_js x4586 with
      | "2-digit" ->
        `L_s0_2_digit
      | "numeric" ->
        `L_s6_numeric
      | _ ->
        assert false

    let (set_second : t -> [ `L_s0_2_digit | `L_s6_numeric ] -> unit) =
     fun (x4587 : t) (x4588 : [ `L_s0_2_digit | `L_s6_numeric ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4587)
        "second"
        (match x4588 with
        | `L_s0_2_digit ->
          Ojs.string_to_js "LS02Digit"
        | `L_s6_numeric ->
          Ojs.string_to_js "LS6Numeric")

    let (get_timeZoneName : t -> [ `L_s3_long | `L_s7_short ]) =
     fun (x4589 : t) ->
      let x4590 = Ojs.get_prop_ascii (t_to_js x4589) "timeZoneName" in
      match Ojs.string_of_js x4590 with
      | "long" ->
        `L_s3_long
      | "short" ->
        `L_s7_short
      | _ ->
        assert false

    let (set_timeZoneName : t -> [ `L_s3_long | `L_s7_short ] -> unit) =
     fun (x4591 : t) (x4592 : [ `L_s3_long | `L_s7_short ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4591)
        "timeZoneName"
        (match x4592 with
        | `L_s3_long ->
          Ojs.string_to_js "LS3Long"
        | `L_s7_short ->
          Ojs.string_to_js "LS7Short")

    let (get_formatMatcher : t -> [ `L_s1_basic | `L_s2_best_fit ]) =
     fun (x4593 : t) ->
      let x4594 = Ojs.get_prop_ascii (t_to_js x4593) "formatMatcher" in
      match Ojs.string_of_js x4594 with
      | "basic" ->
        `L_s1_basic
      | "best fit" ->
        `L_s2_best_fit
      | _ ->
        assert false

    let (set_formatMatcher : t -> [ `L_s1_basic | `L_s2_best_fit ] -> unit) =
     fun (x4595 : t) (x4596 : [ `L_s1_basic | `L_s2_best_fit ]) ->
      Ojs.set_prop_ascii
        (t_to_js x4595)
        "formatMatcher"
        (match x4596 with
        | `L_s1_basic ->
          Ojs.string_to_js "LS1Basic"
        | `L_s2_best_fit ->
          Ojs.string_to_js "LS2BestFit")

    let (get_hour12 : t -> bool) =
     fun (x4597 : t) ->
      Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4597) "hour12")

    let (set_hour12 : t -> bool -> unit) =
     fun (x4598 : t) (x4599 : bool) ->
      Ojs.set_prop_ascii (t_to_js x4598) "hour12" (Ojs.bool_to_js x4599)

    let (get_timeZone : t -> string) =
     fun (x4600 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4600) "timeZone")

    let (set_timeZone : t -> string -> unit) =
     fun (x4601 : t) (x4602 : string) ->
      Ojs.set_prop_ascii (t_to_js x4601) "timeZone" (Ojs.string_to_js x4602)
  end

  module ResolvedDateTimeFormatOptions = struct
    type t = _Intl_ResolvedDateTimeFormatOptions

    let rec t_of_js : Ojs.t -> t =
     fun (x4604 : Ojs.t) -> _Intl_ResolvedDateTimeFormatOptions_of_js x4604

    and t_to_js : t -> Ojs.t =
     fun (x4603 : _Intl_ResolvedDateTimeFormatOptions) ->
      _Intl_ResolvedDateTimeFormatOptions_to_js x4603

    type t_0 = t

    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4606 : Ojs.t) -> t_of_js x4606

    and t_0_to_js : t_0 -> Ojs.t = fun (x4605 : t) -> t_to_js x4605

    let (get_locale : t -> string) =
     fun (x4607 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4607) "locale")

    let (set_locale : t -> string -> unit) =
     fun (x4608 : t) (x4609 : string) ->
      Ojs.set_prop_ascii (t_to_js x4608) "locale" (Ojs.string_to_js x4609)

    let (get_calendar : t -> string) =
     fun (x4610 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4610) "calendar")

    let (set_calendar : t -> string -> unit) =
     fun (x4611 : t) (x4612 : string) ->
      Ojs.set_prop_ascii (t_to_js x4611) "calendar" (Ojs.string_to_js x4612)

    let (get_numberingSystem : t -> string) =
     fun (x4613 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4613) "numberingSystem")

    let (set_numberingSystem : t -> string -> unit) =
     fun (x4614 : t) (x4615 : string) ->
      Ojs.set_prop_ascii
        (t_to_js x4614)
        "numberingSystem"
        (Ojs.string_to_js x4615)

    let (get_timeZone : t -> string) =
     fun (x4616 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4616) "timeZone")

    let (set_timeZone : t -> string -> unit) =
     fun (x4617 : t) (x4618 : string) ->
      Ojs.set_prop_ascii (t_to_js x4617) "timeZone" (Ojs.string_to_js x4618)

    let (get_hour12 : t -> bool) =
     fun (x4619 : t) ->
      Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4619) "hour12")

    let (set_hour12 : t -> bool -> unit) =
     fun (x4620 : t) (x4621 : bool) ->
      Ojs.set_prop_ascii (t_to_js x4620) "hour12" (Ojs.bool_to_js x4621)

    let (get_weekday : t -> string) =
     fun (x4622 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4622) "weekday")

    let (set_weekday : t -> string -> unit) =
     fun (x4623 : t) (x4624 : string) ->
      Ojs.set_prop_ascii (t_to_js x4623) "weekday" (Ojs.string_to_js x4624)

    let (get_era : t -> string) =
     fun (x4625 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4625) "era")

    let (set_era : t -> string -> unit) =
     fun (x4626 : t) (x4627 : string) ->
      Ojs.set_prop_ascii (t_to_js x4626) "era" (Ojs.string_to_js x4627)

    let (get_year : t -> string) =
     fun (x4628 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4628) "year")

    let (set_year : t -> string -> unit) =
     fun (x4629 : t) (x4630 : string) ->
      Ojs.set_prop_ascii (t_to_js x4629) "year" (Ojs.string_to_js x4630)

    let (get_month : t -> string) =
     fun (x4631 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4631) "month")

    let (set_month : t -> string -> unit) =
     fun (x4632 : t) (x4633 : string) ->
      Ojs.set_prop_ascii (t_to_js x4632) "month" (Ojs.string_to_js x4633)

    let (get_day : t -> string) =
     fun (x4634 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4634) "day")

    let (set_day : t -> string -> unit) =
     fun (x4635 : t) (x4636 : string) ->
      Ojs.set_prop_ascii (t_to_js x4635) "day" (Ojs.string_to_js x4636)

    let (get_hour : t -> string) =
     fun (x4637 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4637) "hour")

    let (set_hour : t -> string -> unit) =
     fun (x4638 : t) (x4639 : string) ->
      Ojs.set_prop_ascii (t_to_js x4638) "hour" (Ojs.string_to_js x4639)

    let (get_minute : t -> string) =
     fun (x4640 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4640) "minute")

    let (set_minute : t -> string -> unit) =
     fun (x4641 : t) (x4642 : string) ->
      Ojs.set_prop_ascii (t_to_js x4641) "minute" (Ojs.string_to_js x4642)

    let (get_second : t -> string) =
     fun (x4643 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4643) "second")

    let (set_second : t -> string -> unit) =
     fun (x4644 : t) (x4645 : string) ->
      Ojs.set_prop_ascii (t_to_js x4644) "second" (Ojs.string_to_js x4645)

    let (get_timeZoneName : t -> string) =
     fun (x4646 : t) ->
      Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4646) "timeZoneName")

    let (set_timeZoneName : t -> string -> unit) =
     fun (x4647 : t) (x4648 : string) ->
      Ojs.set_prop_ascii (t_to_js x4647) "timeZoneName" (Ojs.string_to_js x4648)
  end

  module DateTimeFormat = struct
    type t = _Intl_DateTimeFormat

    let rec t_of_js : Ojs.t -> t =
     fun (x4650 : Ojs.t) -> _Intl_DateTimeFormat_of_js x4650

    and t_to_js : t -> Ojs.t =
     fun (x4649 : _Intl_DateTimeFormat) -> _Intl_DateTimeFormat_to_js x4649

    type t_0 = t

    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4652 : Ojs.t) -> t_of_js x4652

    and t_0_to_js : t_0 -> Ojs.t = fun (x4651 : t) -> t_to_js x4651

    let (format : t -> ?date:_Date or_number -> unit -> string) =
     fun (x4657 : t) ?date:(x4653 : _Date or_number option) () ->
      Ojs.string_of_js
        (let x4658 = t_to_js x4657 in
         Ojs.call
           (Ojs.get_prop_ascii x4658 "format")
           "apply"
           [| x4658
            ; (let x4654 =
                 Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||]
               in
               (match x4653 with
               | Some x4655 ->
                 ignore
                   (Ojs.call
                      x4654
                      "push"
                      [| or_number_to_js _Date_to_js x4655 |])
               | None ->
                 ());
               x4654)
           |])

    let (resolvedOptions : t -> _Intl_ResolvedDateTimeFormatOptions) =
     fun (x4659 : t) ->
      _Intl_ResolvedDateTimeFormatOptions_of_js
        (Ojs.call (t_to_js x4659) "resolvedOptions" [||])
  end

  let (dateTimeFormat : anonymous_interface_3) =
    anonymous_interface_3_of_js
      (Ojs.get_prop_ascii
         (Ojs.get_prop_ascii Ojs.global "Intl")
         "DateTimeFormat")
end

include Intl
