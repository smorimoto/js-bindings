[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type http_Agent = [ `Http_Agent ] intf
        and http_AgentOptions = [ `Http_AgentOptions ] intf
        and http_ClientRequest =
          [ `Http_ClientRequest  | `Http_OutgoingMessage ] intf
        and http_ClientRequestArgs = [ `Http_ClientRequestArgs ] intf
        and http_HttpBase = [ `Http_HttpBase ] intf
        and http_IncomingHttpHeaders = [ `Http_IncomingHttpHeaders ] intf
        and http_IncomingMessage = [ `Http_IncomingMessage ] intf
        and http_InformationEvent = [ `Http_InformationEvent ] intf
        and http_OutgoingHttpHeader = string list or_string or_number
        and http_OutgoingHttpHeaders = [ `Http_OutgoingHttpHeaders ] intf
        and http_OutgoingMessage = [ `Http_OutgoingMessage ] intf
        and http_RequestListener = [ `Http_RequestListener ] intf
        and http_RequestOptions =
          [ `Http_RequestOptions  | `Http_ClientRequestArgs ] intf
        and http_Server = [ `Http_Server  | `Http_HttpBase ] intf
        and http_Server = [ `Http_Server  | `Http_HttpBase ] intf
        and http_ServerOptions = [ `Http_ServerOptions ] intf
        and http_ServerResponse =
          [ `Http_ServerResponse  | `Http_OutgoingMessage ] intf
        let rec http_Agent_of_js : Ojs.t -> http_Agent = Obj.magic
        and http_Agent_to_js : http_Agent -> Ojs.t = Obj.magic
        and http_AgentOptions_of_js : Ojs.t -> http_AgentOptions = Obj.magic
        and http_AgentOptions_to_js : http_AgentOptions -> Ojs.t = Obj.magic
        and http_ClientRequest_of_js : Ojs.t -> http_ClientRequest =
          Obj.magic
        and http_ClientRequest_to_js : http_ClientRequest -> Ojs.t =
          Obj.magic
        and http_ClientRequestArgs_of_js : Ojs.t -> http_ClientRequestArgs =
          Obj.magic
        and http_ClientRequestArgs_to_js : http_ClientRequestArgs -> Ojs.t =
          Obj.magic
        and http_HttpBase_of_js : Ojs.t -> http_HttpBase = Obj.magic
        and http_HttpBase_to_js : http_HttpBase -> Ojs.t = Obj.magic
        and http_IncomingHttpHeaders_of_js :
          Ojs.t -> http_IncomingHttpHeaders = Obj.magic
        and http_IncomingHttpHeaders_to_js :
          http_IncomingHttpHeaders -> Ojs.t = Obj.magic
        and http_IncomingMessage_of_js : Ojs.t -> http_IncomingMessage =
          Obj.magic
        and http_IncomingMessage_to_js : http_IncomingMessage -> Ojs.t =
          Obj.magic
        and http_InformationEvent_of_js : Ojs.t -> http_InformationEvent =
          Obj.magic
        and http_InformationEvent_to_js : http_InformationEvent -> Ojs.t =
          Obj.magic
        and http_OutgoingHttpHeader_of_js : Ojs.t -> http_OutgoingHttpHeader
          =
          fun (x5 : Ojs.t) ->
            or_number_of_js
              (fun (x6 : Ojs.t) ->
                 or_string_of_js
                   (fun (x7 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x7)
                   x6) x5
        and http_OutgoingHttpHeader_to_js : http_OutgoingHttpHeader -> Ojs.t
          =
          fun (x1 : string list or_string or_number) ->
            or_number_to_js
              (fun (x2 : string list or_string) ->
                 or_string_to_js
                   (fun (x3 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x3) x2) x1
        and http_OutgoingHttpHeaders_of_js :
          Ojs.t -> http_OutgoingHttpHeaders = Obj.magic
        and http_OutgoingHttpHeaders_to_js :
          http_OutgoingHttpHeaders -> Ojs.t = Obj.magic
        and http_OutgoingMessage_of_js : Ojs.t -> http_OutgoingMessage =
          Obj.magic
        and http_OutgoingMessage_to_js : http_OutgoingMessage -> Ojs.t =
          Obj.magic
        and http_RequestListener_of_js : Ojs.t -> http_RequestListener =
          Obj.magic
        and http_RequestListener_to_js : http_RequestListener -> Ojs.t =
          Obj.magic
        and http_RequestOptions_of_js : Ojs.t -> http_RequestOptions =
          Obj.magic
        and http_RequestOptions_to_js : http_RequestOptions -> Ojs.t =
          Obj.magic
        and http_Server_of_js : Ojs.t -> http_Server = Obj.magic
        and http_Server_to_js : http_Server -> Ojs.t = Obj.magic
        and http_Server_of_js : Ojs.t -> http_Server = Obj.magic
        and http_Server_to_js : http_Server -> Ojs.t = Obj.magic
        and http_ServerOptions_of_js : Ojs.t -> http_ServerOptions =
          Obj.magic
        and http_ServerOptions_to_js : http_ServerOptions -> Ojs.t =
          Obj.magic
        and http_ServerResponse_of_js : Ojs.t -> http_ServerResponse =
          Obj.magic
        and http_ServerResponse_to_js : http_ServerResponse -> Ojs.t =
          Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x10 : Ojs.t) -> anonymous_interface_0_of_js x10
    and t_to_js : t -> Ojs.t =
      fun (x9 : anonymous_interface_0) -> anonymous_interface_0_to_js x9
    let (get : t -> float -> string or_undefined) =
      fun (x11 : t) ->
        fun (x12 : float) ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop (t_to_js x11) (Ojs.float_to_js x12))
    let (set : t -> float -> string or_undefined -> unit) =
      fun (x14 : t) ->
        fun (x15 : float) ->
          fun (x16 : string or_undefined) ->
            Ojs.set_prop (t_to_js x14) (Ojs.float_to_js x15)
              (or_undefined_to_js Ojs.string_to_js x16)
    let (get' : t -> string -> string or_undefined) =
      fun (x18 : t) ->
        fun (x19 : string) ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop (t_to_js x18) (Ojs.string_to_js x19))
    let (set' : t -> string -> string or_undefined -> unit) =
      fun (x21 : t) ->
        fun (x22 : string) ->
          fun (x23 : string or_undefined) ->
            Ojs.set_prop (t_to_js x21) (Ojs.string_to_js x22)
              (or_undefined_to_js Ojs.string_to_js x23)
  end
module Node_http = struct  end
module Http =
  struct
    module IncomingHttpHeaders =
      struct
        type t = http_IncomingHttpHeaders
        let rec t_of_js : Ojs.t -> t =
          fun (x26 : Ojs.t) -> http_IncomingHttpHeaders_of_js x26
        and t_to_js : t -> Ojs.t =
          fun (x25 : http_IncomingHttpHeaders) ->
            http_IncomingHttpHeaders_to_js x25
        let (get_accept : t -> string) =
          fun (x27 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x27) "accept")
        let (set_accept : t -> string -> unit) =
          fun (x28 : t) ->
            fun (x29 : string) ->
              Ojs.set_prop_ascii (t_to_js x28) "accept"
                (Ojs.string_to_js x29)
        let (get_accept_language : t -> string) =
          fun (x30 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x30) "accept-language")
        let (set_accept_language : t -> string -> unit) =
          fun (x31 : t) ->
            fun (x32 : string) ->
              Ojs.set_prop_ascii (t_to_js x31) "accept-language"
                (Ojs.string_to_js x32)
        let (get_accept_patch : t -> string) =
          fun (x33 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x33) "accept-patch")
        let (set_accept_patch : t -> string -> unit) =
          fun (x34 : t) ->
            fun (x35 : string) ->
              Ojs.set_prop_ascii (t_to_js x34) "accept-patch"
                (Ojs.string_to_js x35)
        let (get_accept_ranges : t -> string) =
          fun (x36 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x36) "accept-ranges")
        let (set_accept_ranges : t -> string -> unit) =
          fun (x37 : t) ->
            fun (x38 : string) ->
              Ojs.set_prop_ascii (t_to_js x37) "accept-ranges"
                (Ojs.string_to_js x38)
        let (get_access_control_allow_credentials : t -> string) =
          fun (x39 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x39)
                 "access-control-allow-credentials")
        let (set_access_control_allow_credentials : t -> string -> unit) =
          fun (x40 : t) ->
            fun (x41 : string) ->
              Ojs.set_prop_ascii (t_to_js x40)
                "access-control-allow-credentials" (Ojs.string_to_js x41)
        let (get_access_control_allow_headers : t -> string) =
          fun (x42 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x42)
                 "access-control-allow-headers")
        let (set_access_control_allow_headers : t -> string -> unit) =
          fun (x43 : t) ->
            fun (x44 : string) ->
              Ojs.set_prop_ascii (t_to_js x43) "access-control-allow-headers"
                (Ojs.string_to_js x44)
        let (get_access_control_allow_methods : t -> string) =
          fun (x45 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x45)
                 "access-control-allow-methods")
        let (set_access_control_allow_methods : t -> string -> unit) =
          fun (x46 : t) ->
            fun (x47 : string) ->
              Ojs.set_prop_ascii (t_to_js x46) "access-control-allow-methods"
                (Ojs.string_to_js x47)
        let (get_access_control_allow_origin : t -> string) =
          fun (x48 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x48) "access-control-allow-origin")
        let (set_access_control_allow_origin : t -> string -> unit) =
          fun (x49 : t) ->
            fun (x50 : string) ->
              Ojs.set_prop_ascii (t_to_js x49) "access-control-allow-origin"
                (Ojs.string_to_js x50)
        let (get_access_control_expose_headers : t -> string) =
          fun (x51 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x51)
                 "access-control-expose-headers")
        let (set_access_control_expose_headers : t -> string -> unit) =
          fun (x52 : t) ->
            fun (x53 : string) ->
              Ojs.set_prop_ascii (t_to_js x52)
                "access-control-expose-headers" (Ojs.string_to_js x53)
        let (get_access_control_max_age : t -> string) =
          fun (x54 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x54) "access-control-max-age")
        let (set_access_control_max_age : t -> string -> unit) =
          fun (x55 : t) ->
            fun (x56 : string) ->
              Ojs.set_prop_ascii (t_to_js x55) "access-control-max-age"
                (Ojs.string_to_js x56)
        let (get_access_control_request_headers : t -> string) =
          fun (x57 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x57)
                 "access-control-request-headers")
        let (set_access_control_request_headers : t -> string -> unit) =
          fun (x58 : t) ->
            fun (x59 : string) ->
              Ojs.set_prop_ascii (t_to_js x58)
                "access-control-request-headers" (Ojs.string_to_js x59)
        let (get_access_control_request_method : t -> string) =
          fun (x60 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x60)
                 "access-control-request-method")
        let (set_access_control_request_method : t -> string -> unit) =
          fun (x61 : t) ->
            fun (x62 : string) ->
              Ojs.set_prop_ascii (t_to_js x61)
                "access-control-request-method" (Ojs.string_to_js x62)
        let (get_age : t -> string) =
          fun (x63 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x63) "age")
        let (set_age : t -> string -> unit) =
          fun (x64 : t) ->
            fun (x65 : string) ->
              Ojs.set_prop_ascii (t_to_js x64) "age" (Ojs.string_to_js x65)
        let (get_allow : t -> string) =
          fun (x66 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x66) "allow")
        let (set_allow : t -> string -> unit) =
          fun (x67 : t) ->
            fun (x68 : string) ->
              Ojs.set_prop_ascii (t_to_js x67) "allow" (Ojs.string_to_js x68)
        let (get_alt_svc : t -> string) =
          fun (x69 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x69) "alt-svc")
        let (set_alt_svc : t -> string -> unit) =
          fun (x70 : t) ->
            fun (x71 : string) ->
              Ojs.set_prop_ascii (t_to_js x70) "alt-svc"
                (Ojs.string_to_js x71)
        let (get_authorization : t -> string) =
          fun (x72 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x72) "authorization")
        let (set_authorization : t -> string -> unit) =
          fun (x73 : t) ->
            fun (x74 : string) ->
              Ojs.set_prop_ascii (t_to_js x73) "authorization"
                (Ojs.string_to_js x74)
        let (get_cache_control : t -> string) =
          fun (x75 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x75) "cache-control")
        let (set_cache_control : t -> string -> unit) =
          fun (x76 : t) ->
            fun (x77 : string) ->
              Ojs.set_prop_ascii (t_to_js x76) "cache-control"
                (Ojs.string_to_js x77)
        let (get_connection : t -> string) =
          fun (x78 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x78) "connection")
        let (set_connection : t -> string -> unit) =
          fun (x79 : t) ->
            fun (x80 : string) ->
              Ojs.set_prop_ascii (t_to_js x79) "connection"
                (Ojs.string_to_js x80)
        let (get_content_disposition : t -> string) =
          fun (x81 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x81) "content-disposition")
        let (set_content_disposition : t -> string -> unit) =
          fun (x82 : t) ->
            fun (x83 : string) ->
              Ojs.set_prop_ascii (t_to_js x82) "content-disposition"
                (Ojs.string_to_js x83)
        let (get_content_encoding : t -> string) =
          fun (x84 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x84) "content-encoding")
        let (set_content_encoding : t -> string -> unit) =
          fun (x85 : t) ->
            fun (x86 : string) ->
              Ojs.set_prop_ascii (t_to_js x85) "content-encoding"
                (Ojs.string_to_js x86)
        let (get_content_language : t -> string) =
          fun (x87 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x87) "content-language")
        let (set_content_language : t -> string -> unit) =
          fun (x88 : t) ->
            fun (x89 : string) ->
              Ojs.set_prop_ascii (t_to_js x88) "content-language"
                (Ojs.string_to_js x89)
        let (get_content_length : t -> string) =
          fun (x90 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x90) "content-length")
        let (set_content_length : t -> string -> unit) =
          fun (x91 : t) ->
            fun (x92 : string) ->
              Ojs.set_prop_ascii (t_to_js x91) "content-length"
                (Ojs.string_to_js x92)
        let (get_content_location : t -> string) =
          fun (x93 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x93) "content-location")
        let (set_content_location : t -> string -> unit) =
          fun (x94 : t) ->
            fun (x95 : string) ->
              Ojs.set_prop_ascii (t_to_js x94) "content-location"
                (Ojs.string_to_js x95)
        let (get_content_range : t -> string) =
          fun (x96 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x96) "content-range")
        let (set_content_range : t -> string -> unit) =
          fun (x97 : t) ->
            fun (x98 : string) ->
              Ojs.set_prop_ascii (t_to_js x97) "content-range"
                (Ojs.string_to_js x98)
        let (get_content_type : t -> string) =
          fun (x99 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x99) "content-type")
        let (set_content_type : t -> string -> unit) =
          fun (x100 : t) ->
            fun (x101 : string) ->
              Ojs.set_prop_ascii (t_to_js x100) "content-type"
                (Ojs.string_to_js x101)
        let (get_cookie : t -> string) =
          fun (x102 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x102) "cookie")
        let (set_cookie : t -> string -> unit) =
          fun (x103 : t) ->
            fun (x104 : string) ->
              Ojs.set_prop_ascii (t_to_js x103) "cookie"
                (Ojs.string_to_js x104)
        let (get_date : t -> string) =
          fun (x105 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x105) "date")
        let (set_date : t -> string -> unit) =
          fun (x106 : t) ->
            fun (x107 : string) ->
              Ojs.set_prop_ascii (t_to_js x106) "date"
                (Ojs.string_to_js x107)
        let (get_expect : t -> string) =
          fun (x108 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x108) "expect")
        let (set_expect : t -> string -> unit) =
          fun (x109 : t) ->
            fun (x110 : string) ->
              Ojs.set_prop_ascii (t_to_js x109) "expect"
                (Ojs.string_to_js x110)
        let (get_expires : t -> string) =
          fun (x111 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x111) "expires")
        let (set_expires : t -> string -> unit) =
          fun (x112 : t) ->
            fun (x113 : string) ->
              Ojs.set_prop_ascii (t_to_js x112) "expires"
                (Ojs.string_to_js x113)
        let (get_forwarded : t -> string) =
          fun (x114 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x114) "forwarded")
        let (set_forwarded : t -> string -> unit) =
          fun (x115 : t) ->
            fun (x116 : string) ->
              Ojs.set_prop_ascii (t_to_js x115) "forwarded"
                (Ojs.string_to_js x116)
        let (get_from : t -> string) =
          fun (x117 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x117) "from")
        let (set_from : t -> string -> unit) =
          fun (x118 : t) ->
            fun (x119 : string) ->
              Ojs.set_prop_ascii (t_to_js x118) "from"
                (Ojs.string_to_js x119)
        let (get_host : t -> string) =
          fun (x120 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x120) "host")
        let (set_host : t -> string -> unit) =
          fun (x121 : t) ->
            fun (x122 : string) ->
              Ojs.set_prop_ascii (t_to_js x121) "host"
                (Ojs.string_to_js x122)
        let (get_if_match : t -> string) =
          fun (x123 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x123) "if-match")
        let (set_if_match : t -> string -> unit) =
          fun (x124 : t) ->
            fun (x125 : string) ->
              Ojs.set_prop_ascii (t_to_js x124) "if-match"
                (Ojs.string_to_js x125)
        let (get_if_modified_since : t -> string) =
          fun (x126 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x126) "if-modified-since")
        let (set_if_modified_since : t -> string -> unit) =
          fun (x127 : t) ->
            fun (x128 : string) ->
              Ojs.set_prop_ascii (t_to_js x127) "if-modified-since"
                (Ojs.string_to_js x128)
        let (get_if_none_match : t -> string) =
          fun (x129 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x129) "if-none-match")
        let (set_if_none_match : t -> string -> unit) =
          fun (x130 : t) ->
            fun (x131 : string) ->
              Ojs.set_prop_ascii (t_to_js x130) "if-none-match"
                (Ojs.string_to_js x131)
        let (get_if_unmodified_since : t -> string) =
          fun (x132 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x132) "if-unmodified-since")
        let (set_if_unmodified_since : t -> string -> unit) =
          fun (x133 : t) ->
            fun (x134 : string) ->
              Ojs.set_prop_ascii (t_to_js x133) "if-unmodified-since"
                (Ojs.string_to_js x134)
        let (get_last_modified : t -> string) =
          fun (x135 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x135) "last-modified")
        let (set_last_modified : t -> string -> unit) =
          fun (x136 : t) ->
            fun (x137 : string) ->
              Ojs.set_prop_ascii (t_to_js x136) "last-modified"
                (Ojs.string_to_js x137)
        let (get_location : t -> string) =
          fun (x138 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x138) "location")
        let (set_location : t -> string -> unit) =
          fun (x139 : t) ->
            fun (x140 : string) ->
              Ojs.set_prop_ascii (t_to_js x139) "location"
                (Ojs.string_to_js x140)
        let (get_origin : t -> string) =
          fun (x141 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x141) "origin")
        let (set_origin : t -> string -> unit) =
          fun (x142 : t) ->
            fun (x143 : string) ->
              Ojs.set_prop_ascii (t_to_js x142) "origin"
                (Ojs.string_to_js x143)
        let (get_pragma : t -> string) =
          fun (x144 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x144) "pragma")
        let (set_pragma : t -> string -> unit) =
          fun (x145 : t) ->
            fun (x146 : string) ->
              Ojs.set_prop_ascii (t_to_js x145) "pragma"
                (Ojs.string_to_js x146)
        let (get_proxy_authenticate : t -> string) =
          fun (x147 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x147) "proxy-authenticate")
        let (set_proxy_authenticate : t -> string -> unit) =
          fun (x148 : t) ->
            fun (x149 : string) ->
              Ojs.set_prop_ascii (t_to_js x148) "proxy-authenticate"
                (Ojs.string_to_js x149)
        let (get_proxy_authorization : t -> string) =
          fun (x150 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x150) "proxy-authorization")
        let (set_proxy_authorization : t -> string -> unit) =
          fun (x151 : t) ->
            fun (x152 : string) ->
              Ojs.set_prop_ascii (t_to_js x151) "proxy-authorization"
                (Ojs.string_to_js x152)
        let (get_public_key_pins : t -> string) =
          fun (x153 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x153) "public-key-pins")
        let (set_public_key_pins : t -> string -> unit) =
          fun (x154 : t) ->
            fun (x155 : string) ->
              Ojs.set_prop_ascii (t_to_js x154) "public-key-pins"
                (Ojs.string_to_js x155)
        let (get_range : t -> string) =
          fun (x156 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x156) "range")
        let (set_range : t -> string -> unit) =
          fun (x157 : t) ->
            fun (x158 : string) ->
              Ojs.set_prop_ascii (t_to_js x157) "range"
                (Ojs.string_to_js x158)
        let (get_referer : t -> string) =
          fun (x159 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x159) "referer")
        let (set_referer : t -> string -> unit) =
          fun (x160 : t) ->
            fun (x161 : string) ->
              Ojs.set_prop_ascii (t_to_js x160) "referer"
                (Ojs.string_to_js x161)
        let (get_retry_after : t -> string) =
          fun (x162 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x162) "retry-after")
        let (set_retry_after : t -> string -> unit) =
          fun (x163 : t) ->
            fun (x164 : string) ->
              Ojs.set_prop_ascii (t_to_js x163) "retry-after"
                (Ojs.string_to_js x164)
        let (get_sec_websocket_accept : t -> string) =
          fun (x165 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x165) "sec-websocket-accept")
        let (set_sec_websocket_accept : t -> string -> unit) =
          fun (x166 : t) ->
            fun (x167 : string) ->
              Ojs.set_prop_ascii (t_to_js x166) "sec-websocket-accept"
                (Ojs.string_to_js x167)
        let (get_sec_websocket_extensions : t -> string) =
          fun (x168 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x168) "sec-websocket-extensions")
        let (set_sec_websocket_extensions : t -> string -> unit) =
          fun (x169 : t) ->
            fun (x170 : string) ->
              Ojs.set_prop_ascii (t_to_js x169) "sec-websocket-extensions"
                (Ojs.string_to_js x170)
        let (get_sec_websocket_key : t -> string) =
          fun (x171 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x171) "sec-websocket-key")
        let (set_sec_websocket_key : t -> string -> unit) =
          fun (x172 : t) ->
            fun (x173 : string) ->
              Ojs.set_prop_ascii (t_to_js x172) "sec-websocket-key"
                (Ojs.string_to_js x173)
        let (get_sec_websocket_protocol : t -> string) =
          fun (x174 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x174) "sec-websocket-protocol")
        let (set_sec_websocket_protocol : t -> string -> unit) =
          fun (x175 : t) ->
            fun (x176 : string) ->
              Ojs.set_prop_ascii (t_to_js x175) "sec-websocket-protocol"
                (Ojs.string_to_js x176)
        let (get_sec_websocket_version : t -> string) =
          fun (x177 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x177) "sec-websocket-version")
        let (set_sec_websocket_version : t -> string -> unit) =
          fun (x178 : t) ->
            fun (x179 : string) ->
              Ojs.set_prop_ascii (t_to_js x178) "sec-websocket-version"
                (Ojs.string_to_js x179)
        let (get_set_cookie : t -> string list) =
          fun (x180 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x180) "set-cookie")
        let (set_set_cookie : t -> string list -> unit) =
          fun (x182 : t) ->
            fun (x183 : string list) ->
              Ojs.set_prop_ascii (t_to_js x182) "set-cookie"
                (Ojs.list_to_js Ojs.string_to_js x183)
        let (get_strict_transport_security : t -> string) =
          fun (x185 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x185) "strict-transport-security")
        let (set_strict_transport_security : t -> string -> unit) =
          fun (x186 : t) ->
            fun (x187 : string) ->
              Ojs.set_prop_ascii (t_to_js x186) "strict-transport-security"
                (Ojs.string_to_js x187)
        let (get_tk : t -> string) =
          fun (x188 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x188) "tk")
        let (set_tk : t -> string -> unit) =
          fun (x189 : t) ->
            fun (x190 : string) ->
              Ojs.set_prop_ascii (t_to_js x189) "tk" (Ojs.string_to_js x190)
        let (get_trailer : t -> string) =
          fun (x191 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x191) "trailer")
        let (set_trailer : t -> string -> unit) =
          fun (x192 : t) ->
            fun (x193 : string) ->
              Ojs.set_prop_ascii (t_to_js x192) "trailer"
                (Ojs.string_to_js x193)
        let (get_transfer_encoding : t -> string) =
          fun (x194 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x194) "transfer-encoding")
        let (set_transfer_encoding : t -> string -> unit) =
          fun (x195 : t) ->
            fun (x196 : string) ->
              Ojs.set_prop_ascii (t_to_js x195) "transfer-encoding"
                (Ojs.string_to_js x196)
        let (get_upgrade : t -> string) =
          fun (x197 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x197) "upgrade")
        let (set_upgrade : t -> string -> unit) =
          fun (x198 : t) ->
            fun (x199 : string) ->
              Ojs.set_prop_ascii (t_to_js x198) "upgrade"
                (Ojs.string_to_js x199)
        let (get_user_agent : t -> string) =
          fun (x200 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x200) "user-agent")
        let (set_user_agent : t -> string -> unit) =
          fun (x201 : t) ->
            fun (x202 : string) ->
              Ojs.set_prop_ascii (t_to_js x201) "user-agent"
                (Ojs.string_to_js x202)
        let (get_vary : t -> string) =
          fun (x203 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x203) "vary")
        let (set_vary : t -> string -> unit) =
          fun (x204 : t) ->
            fun (x205 : string) ->
              Ojs.set_prop_ascii (t_to_js x204) "vary"
                (Ojs.string_to_js x205)
        let (get_via : t -> string) =
          fun (x206 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x206) "via")
        let (set_via : t -> string -> unit) =
          fun (x207 : t) ->
            fun (x208 : string) ->
              Ojs.set_prop_ascii (t_to_js x207) "via" (Ojs.string_to_js x208)
        let (get_warning : t -> string) =
          fun (x209 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x209) "warning")
        let (set_warning : t -> string -> unit) =
          fun (x210 : t) ->
            fun (x211 : string) ->
              Ojs.set_prop_ascii (t_to_js x210) "warning"
                (Ojs.string_to_js x211)
        let (get_www_authenticate : t -> string) =
          fun (x212 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x212) "www-authenticate")
        let (set_www_authenticate : t -> string -> unit) =
          fun (x213 : t) ->
            fun (x214 : string) ->
              Ojs.set_prop_ascii (t_to_js x213) "www-authenticate"
                (Ojs.string_to_js x214)
        let (cast : t -> string list or_string NodeJS.Dict.t_1) =
          fun (x215 : t) ->
            NodeJS.Dict.t_1_of_js
              (fun (x216 : Ojs.t) ->
                 or_string_of_js
                   (fun (x217 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x217) x216)
              (t_to_js x215)
      end
    module OutgoingHttpHeader =
      struct
        type t = http_OutgoingHttpHeader
        let rec t_of_js : Ojs.t -> t =
          fun (x220 : Ojs.t) -> http_OutgoingHttpHeader_of_js x220
        and t_to_js : t -> Ojs.t =
          fun (x219 : http_OutgoingHttpHeader) ->
            http_OutgoingHttpHeader_to_js x219
      end
    module OutgoingHttpHeaders =
      struct
        type t = http_OutgoingHttpHeaders
        let rec t_of_js : Ojs.t -> t =
          fun (x222 : Ojs.t) -> http_OutgoingHttpHeaders_of_js x222
        and t_to_js : t -> Ojs.t =
          fun (x221 : http_OutgoingHttpHeaders) ->
            http_OutgoingHttpHeaders_to_js x221
        let (cast : t -> http_OutgoingHttpHeader NodeJS.Dict.t_1) =
          fun (x223 : t) ->
            NodeJS.Dict.t_1_of_js http_OutgoingHttpHeader_of_js
              (t_to_js x223)
      end
    module ClientRequestArgs =
      struct
        type t = http_ClientRequestArgs
        let rec t_of_js : Ojs.t -> t =
          fun (x226 : Ojs.t) -> http_ClientRequestArgs_of_js x226
        and t_to_js : t -> Ojs.t =
          fun (x225 : http_ClientRequestArgs) ->
            http_ClientRequestArgs_to_js x225
        let (get_protocol : t -> string or_null) =
          fun (x227 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x227) "protocol")
        let (set_protocol : t -> string or_null -> unit) =
          fun (x229 : t) ->
            fun (x230 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x229) "protocol"
                (or_null_to_js Ojs.string_to_js x230)
        let (get_host : t -> string or_null) =
          fun (x232 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x232) "host")
        let (set_host : t -> string or_null -> unit) =
          fun (x234 : t) ->
            fun (x235 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x234) "host"
                (or_null_to_js Ojs.string_to_js x235)
        let (get_hostname : t -> string or_null) =
          fun (x237 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x237) "hostname")
        let (set_hostname : t -> string or_null -> unit) =
          fun (x239 : t) ->
            fun (x240 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x239) "hostname"
                (or_null_to_js Ojs.string_to_js x240)
        let (get_family : t -> float) =
          fun (x242 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x242) "family")
        let (set_family : t -> float -> unit) =
          fun (x243 : t) ->
            fun (x244 : float) ->
              Ojs.set_prop_ascii (t_to_js x243) "family"
                (Ojs.float_to_js x244)
        let (get_port : t -> string or_number or_null) =
          fun (x245 : t) ->
            or_null_of_js
              (fun (x246 : Ojs.t) -> or_number_of_js Ojs.string_of_js x246)
              (Ojs.get_prop_ascii (t_to_js x245) "port")
        let (set_port : t -> string or_number or_null -> unit) =
          fun (x248 : t) ->
            fun (x249 : string or_number or_null) ->
              Ojs.set_prop_ascii (t_to_js x248) "port"
                (or_null_to_js
                   (fun (x250 : string or_number) ->
                      or_number_to_js Ojs.string_to_js x250) x249)
        let (get_defaultPort : t -> string or_number) =
          fun (x252 : t) ->
            or_number_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x252) "defaultPort")
        let (set_defaultPort : t -> string or_number -> unit) =
          fun (x254 : t) ->
            fun (x255 : string or_number) ->
              Ojs.set_prop_ascii (t_to_js x254) "defaultPort"
                (or_number_to_js Ojs.string_to_js x255)
        let (get_localAddress : t -> string) =
          fun (x257 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x257) "localAddress")
        let (set_localAddress : t -> string -> unit) =
          fun (x258 : t) ->
            fun (x259 : string) ->
              Ojs.set_prop_ascii (t_to_js x258) "localAddress"
                (Ojs.string_to_js x259)
        let (get_socketPath : t -> string) =
          fun (x260 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x260) "socketPath")
        let (set_socketPath : t -> string -> unit) =
          fun (x261 : t) ->
            fun (x262 : string) ->
              Ojs.set_prop_ascii (t_to_js x261) "socketPath"
                (Ojs.string_to_js x262)
        let (get_maxHeaderSize : t -> float) =
          fun (x263 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x263) "maxHeaderSize")
        let (set_maxHeaderSize : t -> float -> unit) =
          fun (x264 : t) ->
            fun (x265 : float) ->
              Ojs.set_prop_ascii (t_to_js x264) "maxHeaderSize"
                (Ojs.float_to_js x265)
        let (get_method : t -> string) =
          fun (x266 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x266) "method")
        let (set_method : t -> string -> unit) =
          fun (x267 : t) ->
            fun (x268 : string) ->
              Ojs.set_prop_ascii (t_to_js x267) "method"
                (Ojs.string_to_js x268)
        let (get_path : t -> string or_null) =
          fun (x269 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x269) "path")
        let (set_path : t -> string or_null -> unit) =
          fun (x271 : t) ->
            fun (x272 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x271) "path"
                (or_null_to_js Ojs.string_to_js x272)
        let (get_headers : t -> http_OutgoingHttpHeaders) =
          fun (x274 : t) ->
            http_OutgoingHttpHeaders_of_js
              (Ojs.get_prop_ascii (t_to_js x274) "headers")
        let (set_headers : t -> http_OutgoingHttpHeaders -> unit) =
          fun (x275 : t) ->
            fun (x276 : http_OutgoingHttpHeaders) ->
              Ojs.set_prop_ascii (t_to_js x275) "headers"
                (http_OutgoingHttpHeaders_to_js x276)
        let (get_auth : t -> string or_null) =
          fun (x277 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x277) "auth")
        let (set_auth : t -> string or_null -> unit) =
          fun (x279 : t) ->
            fun (x280 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x279) "auth"
                (or_null_to_js Ojs.string_to_js x280)
        let (get_agent : t -> http_Agent or_boolean) =
          fun (x282 : t) ->
            or_boolean_of_js http_Agent_of_js
              (Ojs.get_prop_ascii (t_to_js x282) "agent")
        let (set_agent : t -> http_Agent or_boolean -> unit) =
          fun (x284 : t) ->
            fun (x285 : http_Agent or_boolean) ->
              Ojs.set_prop_ascii (t_to_js x284) "agent"
                (or_boolean_to_js http_Agent_to_js x285)
        let (get__defaultAgent : t -> http_Agent) =
          fun (x287 : t) ->
            http_Agent_of_js
              (Ojs.get_prop_ascii (t_to_js x287) "_defaultAgent")
        let (set__defaultAgent : t -> http_Agent -> unit) =
          fun (x288 : t) ->
            fun (x289 : http_Agent) ->
              Ojs.set_prop_ascii (t_to_js x288) "_defaultAgent"
                (http_Agent_to_js x289)
        let (get_timeout : t -> float) =
          fun (x290 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x290) "timeout")
        let (set_timeout : t -> float -> unit) =
          fun (x291 : t) ->
            fun (x292 : float) ->
              Ojs.set_prop_ascii (t_to_js x291) "timeout"
                (Ojs.float_to_js x292)
        let (get_setHost : t -> bool) =
          fun (x293 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x293) "setHost")
        let (set_setHost : t -> bool -> unit) =
          fun (x294 : t) ->
            fun (x295 : bool) ->
              Ojs.set_prop_ascii (t_to_js x294) "setHost"
                (Ojs.bool_to_js x295)
        let (createConnection :
          t ->
            options:t ->
              oncreate:(err:Error.t_0 -> socket:Socket.t_0 -> unit) ->
                Socket.t_0)
          =
          fun (x300 : t) ->
            fun ~options:(x296 : t) ->
              fun
                ~oncreate:(x297 : err:Error.t_0 -> socket:Socket.t_0 -> unit)
                ->
                Socket.t_0_of_js
                  (Ojs.call (t_to_js x300) "createConnection"
                     [|(t_to_js x296);(Ojs.fun_to_js 2
                                         (fun (x298 : Ojs.t) ->
                                            fun (x299 : Ojs.t) ->
                                              x297
                                                ~err:(Error.t_0_of_js x298)
                                                ~socket:(Socket.t_0_of_js
                                                           x299)))|])
      end
    module ServerOptions =
      struct
        type t = http_ServerOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x302 : Ojs.t) -> http_ServerOptions_of_js x302
        and t_to_js : t -> Ojs.t =
          fun (x301 : http_ServerOptions) -> http_ServerOptions_to_js x301
        let (get_IncomingMessage : t -> any) =
          fun (x303 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x303) "IncomingMessage")
        let (set_IncomingMessage : t -> any -> unit) =
          fun (x304 : t) ->
            fun (x305 : any) ->
              Ojs.set_prop_ascii (t_to_js x304) "IncomingMessage"
                (any_to_js x305)
        let (get_ServerResponse : t -> any) =
          fun (x306 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x306) "ServerResponse")
        let (set_ServerResponse : t -> any -> unit) =
          fun (x307 : t) ->
            fun (x308 : any) ->
              Ojs.set_prop_ascii (t_to_js x307) "ServerResponse"
                (any_to_js x308)
        let (get_maxHeaderSize : t -> float) =
          fun (x309 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x309) "maxHeaderSize")
        let (set_maxHeaderSize : t -> float -> unit) =
          fun (x310 : t) ->
            fun (x311 : float) ->
              Ojs.set_prop_ascii (t_to_js x310) "maxHeaderSize"
                (Ojs.float_to_js x311)
        let (get_insecureHTTPParser : t -> bool) =
          fun (x312 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x312) "insecureHTTPParser")
        let (set_insecureHTTPParser : t -> bool -> unit) =
          fun (x313 : t) ->
            fun (x314 : bool) ->
              Ojs.set_prop_ascii (t_to_js x313) "insecureHTTPParser"
                (Ojs.bool_to_js x314)
      end
    module RequestListener =
      struct
        type t = http_RequestListener
        let rec t_of_js : Ojs.t -> t =
          fun (x316 : Ojs.t) -> http_RequestListener_of_js x316
        and t_to_js : t -> Ojs.t =
          fun (x315 : http_RequestListener) ->
            http_RequestListener_to_js x315
        let (apply :
          t -> req:http_IncomingMessage -> res:http_ServerResponse -> unit) =
          fun (x319 : t) ->
            fun ~req:(x317 : http_IncomingMessage) ->
              fun ~res:(x318 : http_ServerResponse) ->
                ignore
                  (Ojs.apply (t_to_js x319)
                     [|(http_IncomingMessage_to_js x317);(http_ServerResponse_to_js
                                                            x318)|])
      end
    module HttpBase =
      struct
        type t = http_HttpBase
        let rec t_of_js : Ojs.t -> t =
          fun (x321 : Ojs.t) -> http_HttpBase_of_js x321
        and t_to_js : t -> Ojs.t =
          fun (x320 : http_HttpBase) -> http_HttpBase_to_js x320
        let (setTimeout :
          t -> ?msecs:float -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x327 : t) ->
            fun ?msecs:(x322 : float option) ->
              fun ?callback:(x323 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x328 = t_to_js x327 in
                     Ojs.call (Ojs.get_prop_ascii x328 "setTimeout") "apply"
                       [|x328;((let x324 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x322 with
                                 | Some x326 ->
                                     ignore
                                       (Ojs.call x324 "push"
                                          [|(Ojs.float_to_js x326)|])
                                 | None -> ());
                                (match x323 with
                                 | Some x325 ->
                                     ignore
                                       (Ojs.call x324 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x325 ()))|])
                                 | None -> ());
                                x324))|])
        let (setTimeout' : t -> callback:(unit -> unit) -> t) =
          fun (x330 : t) ->
            fun ~callback:(x329 : unit -> unit) ->
              t_of_js
                (Ojs.call (t_to_js x330) "setTimeout"
                   [|(Ojs.fun_to_js 1 (fun _ -> x329 ()))|])
        let (get_maxHeadersCount : t -> float or_null) =
          fun (x331 : t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x331) "maxHeadersCount")
        let (set_maxHeadersCount : t -> float or_null -> unit) =
          fun (x333 : t) ->
            fun (x334 : float or_null) ->
              Ojs.set_prop_ascii (t_to_js x333) "maxHeadersCount"
                (or_null_to_js Ojs.float_to_js x334)
        let (get_timeout : t -> float) =
          fun (x336 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x336) "timeout")
        let (set_timeout : t -> float -> unit) =
          fun (x337 : t) ->
            fun (x338 : float) ->
              Ojs.set_prop_ascii (t_to_js x337) "timeout"
                (Ojs.float_to_js x338)
        let (get_headersTimeout : t -> float) =
          fun (x339 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x339) "headersTimeout")
        let (set_headersTimeout : t -> float -> unit) =
          fun (x340 : t) ->
            fun (x341 : float) ->
              Ojs.set_prop_ascii (t_to_js x340) "headersTimeout"
                (Ojs.float_to_js x341)
        let (get_keepAliveTimeout : t -> float) =
          fun (x342 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x342) "keepAliveTimeout")
        let (set_keepAliveTimeout : t -> float -> unit) =
          fun (x343 : t) ->
            fun (x344 : float) ->
              Ojs.set_prop_ascii (t_to_js x343) "keepAliveTimeout"
                (Ojs.float_to_js x344)
        let (get_requestTimeout : t -> float) =
          fun (x345 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x345) "requestTimeout")
        let (set_requestTimeout : t -> float -> unit) =
          fun (x346 : t) ->
            fun (x347 : float) ->
              Ojs.set_prop_ascii (t_to_js x346) "requestTimeout"
                (Ojs.float_to_js x347)
      end
    module Server =
      struct
        type t = http_Server
        let rec t_of_js : Ojs.t -> t =
          fun (x349 : Ojs.t) -> http_Server_of_js x349
        and t_to_js : t -> Ojs.t =
          fun (x348 : http_Server) -> http_Server_to_js x348
        let (cast : t -> http_HttpBase) =
          fun (x350 : t) -> http_HttpBase_of_js (t_to_js x350)
      end
    module Server =
      struct
        type t = http_Server
        let rec t_of_js : Ojs.t -> t =
          fun (x352 : Ojs.t) -> http_Server_of_js x352
        and t_to_js : t -> Ojs.t =
          fun (x351 : http_Server) -> http_Server_to_js x351
        let (create : ?requestListener:http_RequestListener -> unit -> t) =
          fun ?requestListener:(x353 : http_RequestListener option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "http")
                      "Server")
                   (let x354 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x353 with
                     | Some x355 ->
                         ignore
                           (Ojs.call x354 "push"
                              [|(http_RequestListener_to_js x355)|])
                     | None -> ());
                    x354))
        let (create' :
          options:http_ServerOptions ->
            ?requestListener:http_RequestListener -> unit -> t)
          =
          fun ~options:(x356 : http_ServerOptions) ->
            fun ?requestListener:(x357 : http_RequestListener option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "http") "Server")
                     (let x358 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x358 "push"
                           [|(http_ServerOptions_to_js x356)|]);
                      (match x357 with
                       | Some x359 ->
                           ignore
                             (Ojs.call x358 "push"
                                [|(http_RequestListener_to_js x359)|])
                       | None -> ());
                      x358))
        let (cast : t -> NetServer.t_0) =
          fun (x360 : t) -> NetServer.t_0_of_js (t_to_js x360)
      end
    module OutgoingMessage =
      struct
        type t = http_OutgoingMessage
        let rec t_of_js : Ojs.t -> t =
          fun (x362 : Ojs.t) -> http_OutgoingMessage_of_js x362
        and t_to_js : t -> Ojs.t =
          fun (x361 : http_OutgoingMessage) ->
            http_OutgoingMessage_to_js x361
        let (get_upgrading : t -> bool) =
          fun (x363 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x363) "upgrading")
        let (set_upgrading : t -> bool -> unit) =
          fun (x364 : t) ->
            fun (x365 : bool) ->
              Ojs.set_prop_ascii (t_to_js x364) "upgrading"
                (Ojs.bool_to_js x365)
        let (get_chunkedEncoding : t -> bool) =
          fun (x366 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x366) "chunkedEncoding")
        let (set_chunkedEncoding : t -> bool -> unit) =
          fun (x367 : t) ->
            fun (x368 : bool) ->
              Ojs.set_prop_ascii (t_to_js x367) "chunkedEncoding"
                (Ojs.bool_to_js x368)
        let (get_shouldKeepAlive : t -> bool) =
          fun (x369 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x369) "shouldKeepAlive")
        let (set_shouldKeepAlive : t -> bool -> unit) =
          fun (x370 : t) ->
            fun (x371 : bool) ->
              Ojs.set_prop_ascii (t_to_js x370) "shouldKeepAlive"
                (Ojs.bool_to_js x371)
        let (get_useChunkedEncodingByDefault : t -> bool) =
          fun (x372 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x372)
                 "useChunkedEncodingByDefault")
        let (set_useChunkedEncodingByDefault : t -> bool -> unit) =
          fun (x373 : t) ->
            fun (x374 : bool) ->
              Ojs.set_prop_ascii (t_to_js x373) "useChunkedEncodingByDefault"
                (Ojs.bool_to_js x374)
        let (get_sendDate : t -> bool) =
          fun (x375 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x375) "sendDate")
        let (set_sendDate : t -> bool -> unit) =
          fun (x376 : t) ->
            fun (x377 : bool) ->
              Ojs.set_prop_ascii (t_to_js x376) "sendDate"
                (Ojs.bool_to_js x377)
        let (get_finished : t -> bool) =
          fun (x378 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x378) "finished")
        let (set_finished : t -> bool -> unit) =
          fun (x379 : t) ->
            fun (x380 : bool) ->
              Ojs.set_prop_ascii (t_to_js x379) "finished"
                (Ojs.bool_to_js x380)
        let (get_headersSent : t -> bool) =
          fun (x381 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x381) "headersSent")
        let (set_headersSent : t -> bool -> unit) =
          fun (x382 : t) ->
            fun (x383 : bool) ->
              Ojs.set_prop_ascii (t_to_js x382) "headersSent"
                (Ojs.bool_to_js x383)
        let (get_connection : t -> Socket.t_0 or_null) =
          fun (x384 : t) ->
            or_null_of_js Socket.t_0_of_js
              (Ojs.get_prop_ascii (t_to_js x384) "connection")
        let (set_connection : t -> Socket.t_0 or_null -> unit) =
          fun (x386 : t) ->
            fun (x387 : Socket.t_0 or_null) ->
              Ojs.set_prop_ascii (t_to_js x386) "connection"
                (or_null_to_js Socket.t_0_to_js x387)
        let (get_socket : t -> Socket.t_0 or_null) =
          fun (x389 : t) ->
            or_null_of_js Socket.t_0_of_js
              (Ojs.get_prop_ascii (t_to_js x389) "socket")
        let (set_socket : t -> Socket.t_0 or_null -> unit) =
          fun (x391 : t) ->
            fun (x392 : Socket.t_0 or_null) ->
              Ojs.set_prop_ascii (t_to_js x391) "socket"
                (or_null_to_js Socket.t_0_to_js x392)
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "http")
                    "OutgoingMessage") [||])
        let (setTimeout :
          t -> msecs:float -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x398 : t) ->
            fun ~msecs:(x394 : float) ->
              fun ?callback:(x395 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x399 = t_to_js x398 in
                     Ojs.call (Ojs.get_prop_ascii x399 "setTimeout") "apply"
                       [|x399;((let x396 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x396 "push"
                                     [|(Ojs.float_to_js x394)|]);
                                (match x395 with
                                 | Some x397 ->
                                     ignore
                                       (Ojs.call x396 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x397 ()))|])
                                 | None -> ());
                                x396))|])
        let (setHeader :
          t -> name:string -> value:string list or_string or_number -> unit)
          =
          fun (x405 : t) ->
            fun ~name:(x400 : string) ->
              fun ~value:(x401 : string list or_string or_number) ->
                ignore
                  (Ojs.call (t_to_js x405) "setHeader"
                     [|(Ojs.string_to_js x400);(or_number_to_js
                                                  (fun
                                                     (x402 :
                                                       string list or_string)
                                                     ->
                                                     or_string_to_js
                                                       (fun
                                                          (x403 :
                                                            string list)
                                                          ->
                                                          Ojs.list_to_js
                                                            Ojs.string_to_js
                                                            x403) x402) x401)|])
        let (getHeader :
          t -> name:string -> string list or_string or_number or_undefined) =
          fun (x407 : t) ->
            fun ~name:(x406 : string) ->
              or_undefined_of_js
                (fun (x408 : Ojs.t) ->
                   or_number_of_js
                     (fun (x409 : Ojs.t) ->
                        or_string_of_js
                          (fun (x410 : Ojs.t) ->
                             Ojs.list_of_js Ojs.string_of_js x410) x409) x408)
                (Ojs.call (t_to_js x407) "getHeader"
                   [|(Ojs.string_to_js x406)|])
        let (getHeaders : t -> http_OutgoingHttpHeaders) =
          fun (x412 : t) ->
            http_OutgoingHttpHeaders_of_js
              (Ojs.call (t_to_js x412) "getHeaders" [||])
        let (getHeaderNames : t -> string list) =
          fun (x413 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x413) "getHeaderNames" [||])
        let (hasHeader : t -> name:string -> bool) =
          fun (x416 : t) ->
            fun ~name:(x415 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x416) "hasHeader"
                   [|(Ojs.string_to_js x415)|])
        let (removeHeader : t -> name:string -> unit) =
          fun (x418 : t) ->
            fun ~name:(x417 : string) ->
              ignore
                (Ojs.call (t_to_js x418) "removeHeader"
                   [|(Ojs.string_to_js x417)|])
        let (addTrailers :
          t ->
            headers:(http_OutgoingHttpHeaders, (string * string) list) union2
              -> unit)
          =
          fun (x426 : t) ->
            fun
              ~headers:(x419 :
                         (http_OutgoingHttpHeaders, (string * string) list)
                           union2)
              ->
              ignore
                (Ojs.call (t_to_js x426) "addTrailers"
                   [|(union2_to_js http_OutgoingHttpHeaders_to_js
                        (fun (x421 : (string * string) list) ->
                           Ojs.list_to_js
                             (fun (x422 : (string * string)) ->
                                let (x423, x424) = x422 in
                                let x425 = Ojs.array_make 2 in
                                Ojs.array_set x425 0 (Ojs.string_to_js x423);
                                Ojs.array_set x425 1 (Ojs.string_to_js x424);
                                x425) x421) x419)|])
        let (flushHeaders : t -> unit) =
          fun (x427 : t) ->
            ignore (Ojs.call (t_to_js x427) "flushHeaders" [||])
        let (cast : t -> Stream.Writable.t_0) =
          fun (x428 : t) -> Stream.Writable.t_0_of_js (t_to_js x428)
      end
    module ServerResponse =
      struct
        type t = http_ServerResponse
        let rec t_of_js : Ojs.t -> t =
          fun (x430 : Ojs.t) -> http_ServerResponse_of_js x430
        and t_to_js : t -> Ojs.t =
          fun (x429 : http_ServerResponse) -> http_ServerResponse_to_js x429
        let (get_statusCode : t -> float) =
          fun (x431 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x431) "statusCode")
        let (set_statusCode : t -> float -> unit) =
          fun (x432 : t) ->
            fun (x433 : float) ->
              Ojs.set_prop_ascii (t_to_js x432) "statusCode"
                (Ojs.float_to_js x433)
        let (get_statusMessage : t -> string) =
          fun (x434 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x434) "statusMessage")
        let (set_statusMessage : t -> string -> unit) =
          fun (x435 : t) ->
            fun (x436 : string) ->
              Ojs.set_prop_ascii (t_to_js x435) "statusMessage"
                (Ojs.string_to_js x436)
        let (create : req:http_IncomingMessage -> t) =
          fun ~req:(x437 : http_IncomingMessage) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "http")
                    "ServerResponse") [|(http_IncomingMessage_to_js x437)|])
        let (assignSocket : t -> socket:Socket.t_0 -> unit) =
          fun (x439 : t) ->
            fun ~socket:(x438 : Socket.t_0) ->
              ignore
                (Ojs.call (t_to_js x439) "assignSocket"
                   [|(Socket.t_0_to_js x438)|])
        let (detachSocket : t -> socket:Socket.t_0 -> unit) =
          fun (x441 : t) ->
            fun ~socket:(x440 : Socket.t_0) ->
              ignore
                (Ojs.call (t_to_js x441) "detachSocket"
                   [|(Socket.t_0_to_js x440)|])
        let (writeContinue : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x445 : t) ->
            fun ?callback:(x442 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x446 = t_to_js x445 in
                   Ojs.call (Ojs.get_prop_ascii x446 "writeContinue") "apply"
                     [|x446;((let x443 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x442 with
                               | Some x444 ->
                                   ignore
                                     (Ojs.call x443 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x444 ()))|])
                               | None -> ());
                              x443))|])
        let (writeHead :
          t ->
            statusCode:float ->
              ?reasonPhrase:string ->
                ?headers:(http_OutgoingHttpHeaders, http_OutgoingHttpHeader)
                  or_array -> unit -> t)
          =
          fun (x455 : t) ->
            fun ~statusCode:(x447 : float) ->
              fun ?reasonPhrase:(x448 : string option) ->
                fun
                  ?headers:(x449 :
                             (http_OutgoingHttpHeaders,
                               http_OutgoingHttpHeader) or_array option)
                  ->
                  fun () ->
                    t_of_js
                      (let x456 = t_to_js x455 in
                       Ojs.call (Ojs.get_prop_ascii x456 "writeHead") "apply"
                         [|x456;((let x450 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x450 "push"
                                       [|(Ojs.float_to_js x447)|]);
                                  (match x448 with
                                   | Some x454 ->
                                       ignore
                                         (Ojs.call x450 "push"
                                            [|(Ojs.string_to_js x454)|])
                                   | None -> ());
                                  (match x449 with
                                   | Some x451 ->
                                       ignore
                                         (Ojs.call x450 "push"
                                            [|(or_array_to_js
                                                 http_OutgoingHttpHeaders_to_js
                                                 http_OutgoingHttpHeader_to_js
                                                 x451)|])
                                   | None -> ());
                                  x450))|])
        let (writeHead' :
          t ->
            statusCode:float ->
              ?headers:(http_OutgoingHttpHeaders, http_OutgoingHttpHeader)
                or_array -> unit -> t)
          =
          fun (x463 : t) ->
            fun ~statusCode:(x457 : float) ->
              fun
                ?headers:(x458 :
                           (http_OutgoingHttpHeaders,
                             http_OutgoingHttpHeader) or_array option)
                ->
                fun () ->
                  t_of_js
                    (let x464 = t_to_js x463 in
                     Ojs.call (Ojs.get_prop_ascii x464 "writeHead") "apply"
                       [|x464;((let x459 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x459 "push"
                                     [|(Ojs.float_to_js x457)|]);
                                (match x458 with
                                 | Some x460 ->
                                     ignore
                                       (Ojs.call x459 "push"
                                          [|(or_array_to_js
                                               http_OutgoingHttpHeaders_to_js
                                               http_OutgoingHttpHeader_to_js
                                               x460)|])
                                 | None -> ());
                                x459))|])
        let (writeProcessing : t -> unit) =
          fun (x465 : t) ->
            ignore (Ojs.call (t_to_js x465) "writeProcessing" [||])
        let (cast : t -> http_OutgoingMessage) =
          fun (x466 : t) -> http_OutgoingMessage_of_js (t_to_js x466)
      end
    module InformationEvent =
      struct
        type t = http_InformationEvent
        let rec t_of_js : Ojs.t -> t =
          fun (x468 : Ojs.t) -> http_InformationEvent_of_js x468
        and t_to_js : t -> Ojs.t =
          fun (x467 : http_InformationEvent) ->
            http_InformationEvent_to_js x467
        let (get_statusCode : t -> float) =
          fun (x469 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x469) "statusCode")
        let (set_statusCode : t -> float -> unit) =
          fun (x470 : t) ->
            fun (x471 : float) ->
              Ojs.set_prop_ascii (t_to_js x470) "statusCode"
                (Ojs.float_to_js x471)
        let (get_statusMessage : t -> string) =
          fun (x472 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x472) "statusMessage")
        let (set_statusMessage : t -> string -> unit) =
          fun (x473 : t) ->
            fun (x474 : string) ->
              Ojs.set_prop_ascii (t_to_js x473) "statusMessage"
                (Ojs.string_to_js x474)
        let (get_httpVersion : t -> string) =
          fun (x475 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x475) "httpVersion")
        let (set_httpVersion : t -> string -> unit) =
          fun (x476 : t) ->
            fun (x477 : string) ->
              Ojs.set_prop_ascii (t_to_js x476) "httpVersion"
                (Ojs.string_to_js x477)
        let (get_httpVersionMajor : t -> float) =
          fun (x478 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x478) "httpVersionMajor")
        let (set_httpVersionMajor : t -> float -> unit) =
          fun (x479 : t) ->
            fun (x480 : float) ->
              Ojs.set_prop_ascii (t_to_js x479) "httpVersionMajor"
                (Ojs.float_to_js x480)
        let (get_httpVersionMinor : t -> float) =
          fun (x481 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x481) "httpVersionMinor")
        let (set_httpVersionMinor : t -> float -> unit) =
          fun (x482 : t) ->
            fun (x483 : float) ->
              Ojs.set_prop_ascii (t_to_js x482) "httpVersionMinor"
                (Ojs.float_to_js x483)
        let (get_headers : t -> http_IncomingHttpHeaders) =
          fun (x484 : t) ->
            http_IncomingHttpHeaders_of_js
              (Ojs.get_prop_ascii (t_to_js x484) "headers")
        let (set_headers : t -> http_IncomingHttpHeaders -> unit) =
          fun (x485 : t) ->
            fun (x486 : http_IncomingHttpHeaders) ->
              Ojs.set_prop_ascii (t_to_js x485) "headers"
                (http_IncomingHttpHeaders_to_js x486)
        let (get_rawHeaders : t -> string list) =
          fun (x487 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x487) "rawHeaders")
        let (set_rawHeaders : t -> string list -> unit) =
          fun (x489 : t) ->
            fun (x490 : string list) ->
              Ojs.set_prop_ascii (t_to_js x489) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x490)
      end
    module ClientRequest =
      struct
        type t = http_ClientRequest
        let rec t_of_js : Ojs.t -> t =
          fun (x493 : Ojs.t) -> http_ClientRequest_of_js x493
        and t_to_js : t -> Ojs.t =
          fun (x492 : http_ClientRequest) -> http_ClientRequest_to_js x492
        let (get_aborted : t -> bool) =
          fun (x494 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x494) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x495 : t) ->
            fun (x496 : bool) ->
              Ojs.set_prop_ascii (t_to_js x495) "aborted"
                (Ojs.bool_to_js x496)
        let (get_host : t -> string) =
          fun (x497 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x497) "host")
        let (set_host : t -> string -> unit) =
          fun (x498 : t) ->
            fun (x499 : string) ->
              Ojs.set_prop_ascii (t_to_js x498) "host"
                (Ojs.string_to_js x499)
        let (get_protocol : t -> string) =
          fun (x500 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x500) "protocol")
        let (set_protocol : t -> string -> unit) =
          fun (x501 : t) ->
            fun (x502 : string) ->
              Ojs.set_prop_ascii (t_to_js x501) "protocol"
                (Ojs.string_to_js x502)
        let (create :
          url:(http_ClientRequestArgs, URL.t_0) union2 or_string ->
            ?cb:(res:http_IncomingMessage -> unit) -> unit -> t)
          =
          fun
            ~url:(x503 : (http_ClientRequestArgs, URL.t_0) union2 or_string)
            ->
            fun ?cb:(x504 : (res:http_IncomingMessage -> unit) option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "http")
                        "ClientRequest")
                     (let x505 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x505 "push"
                           [|(or_string_to_js
                                (fun
                                   (x508 :
                                     (http_ClientRequestArgs, URL.t_0) union2)
                                   ->
                                   union2_to_js http_ClientRequestArgs_to_js
                                     URL.t_0_to_js x508) x503)|]);
                      (match x504 with
                       | Some x506 ->
                           ignore
                             (Ojs.call x505 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x507 : Ojs.t) ->
                                        x506
                                          ~res:(http_IncomingMessage_of_js
                                                  x507)))|])
                       | None -> ());
                      x505))
        let (get_method : t -> string) =
          fun (x511 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x511) "method")
        let (set_method : t -> string -> unit) =
          fun (x512 : t) ->
            fun (x513 : string) ->
              Ojs.set_prop_ascii (t_to_js x512) "method"
                (Ojs.string_to_js x513)
        let (get_path : t -> string) =
          fun (x514 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x514) "path")
        let (set_path : t -> string -> unit) =
          fun (x515 : t) ->
            fun (x516 : string) ->
              Ojs.set_prop_ascii (t_to_js x515) "path"
                (Ojs.string_to_js x516)
        let (abort : t -> unit) =
          fun (x517 : t) -> ignore (Ojs.call (t_to_js x517) "abort" [||])
        let (onSocket : t -> socket:Socket.t_0 -> unit) =
          fun (x519 : t) ->
            fun ~socket:(x518 : Socket.t_0) ->
              ignore
                (Ojs.call (t_to_js x519) "onSocket"
                   [|(Socket.t_0_to_js x518)|])
        let (setTimeout :
          t -> timeout:float -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x524 : t) ->
            fun ~timeout:(x520 : float) ->
              fun ?callback:(x521 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x525 = t_to_js x524 in
                     Ojs.call (Ojs.get_prop_ascii x525 "setTimeout") "apply"
                       [|x525;((let x522 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x522 "push"
                                     [|(Ojs.float_to_js x520)|]);
                                (match x521 with
                                 | Some x523 ->
                                     ignore
                                       (Ojs.call x522 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x523 ()))|])
                                 | None -> ());
                                x522))|])
        let (setNoDelay : t -> ?noDelay:bool -> unit -> unit) =
          fun (x529 : t) ->
            fun ?noDelay:(x526 : bool option) ->
              fun () ->
                ignore
                  (let x530 = t_to_js x529 in
                   Ojs.call (Ojs.get_prop_ascii x530 "setNoDelay") "apply"
                     [|x530;((let x527 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x526 with
                               | Some x528 ->
                                   ignore
                                     (Ojs.call x527 "push"
                                        [|(Ojs.bool_to_js x528)|])
                               | None -> ());
                              x527))|])
        let (setSocketKeepAlive :
          t -> ?enable:bool -> ?initialDelay:float -> unit -> unit) =
          fun (x536 : t) ->
            fun ?enable:(x531 : bool option) ->
              fun ?initialDelay:(x532 : float option) ->
                fun () ->
                  ignore
                    (let x537 = t_to_js x536 in
                     Ojs.call (Ojs.get_prop_ascii x537 "setSocketKeepAlive")
                       "apply"
                       [|x537;((let x533 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x531 with
                                 | Some x535 ->
                                     ignore
                                       (Ojs.call x533 "push"
                                          [|(Ojs.bool_to_js x535)|])
                                 | None -> ());
                                (match x532 with
                                 | Some x534 ->
                                     ignore
                                       (Ojs.call x533 "push"
                                          [|(Ojs.float_to_js x534)|])
                                 | None -> ());
                                x533))|])
        let (addListener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x540 : t) ->
            fun ~event:(x538 : [ `abort ]) ->
              fun ~listener:(x539 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x540) "addListener"
                     [|((match x538 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x539 ()))|])
        let (addListener' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x546 : t) ->
            fun ~event:(x541 : [ `connect ]) ->
              fun
                ~listener:(x542 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x546) "addListener"
                     [|((match x541 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x543 : Ojs.t) ->
                            fun (x544 : Ojs.t) ->
                              fun (x545 : Ojs.t) ->
                                x542
                                  ~response:(http_IncomingMessage_of_js x543)
                                  ~socket:(Socket.t_0_of_js x544)
                                  ~head:(Buffer.t_0_of_js x545)))|])
        let (addListener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x549 : t) ->
            fun ~event:(x547 : [ `continue ]) ->
              fun ~listener:(x548 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x549) "addListener"
                     [|((match x547 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x548 ()))|])
        let (addListener''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x553 : t) ->
            fun ~event:(x550 : [ `information ]) ->
              fun ~listener:(x551 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x553) "addListener"
                     [|((match x550 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x552 : Ojs.t) ->
                            x551 ~info:(http_InformationEvent_of_js x552)))|])
        let (addListener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x557 : t) ->
            fun ~event:(x554 : [ `response ]) ->
              fun ~listener:(x555 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x557) "addListener"
                     [|((match x554 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x556 : Ojs.t) ->
                            x555 ~response:(http_IncomingMessage_of_js x556)))|])
        let (addListener''''' :
          t -> event:[ `socket ] -> listener:(socket:Socket.t_0 -> unit) -> t)
          =
          fun (x561 : t) ->
            fun ~event:(x558 : [ `socket ]) ->
              fun ~listener:(x559 : socket:Socket.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x561) "addListener"
                     [|((match x558 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x560 :
                                                                    Ojs.t) ->
                                                                    x559
                                                                    ~socket:(
                                                                    Socket.t_0_of_js
                                                                    x560)))|])
        let (addListener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x564 : t) ->
            fun ~event:(x562 : [ `timeout ]) ->
              fun ~listener:(x563 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x564) "addListener"
                     [|((match x562 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x563 ()))|])
        let (addListener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x570 : t) ->
            fun ~event:(x565 : [ `upgrade ]) ->
              fun
                ~listener:(x566 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x570) "addListener"
                     [|((match x565 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x567 : Ojs.t) ->
                            fun (x568 : Ojs.t) ->
                              fun (x569 : Ojs.t) ->
                                x566
                                  ~response:(http_IncomingMessage_of_js x567)
                                  ~socket:(Socket.t_0_of_js x568)
                                  ~head:(Buffer.t_0_of_js x569)))|])
        let (addListener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x573 : t) ->
            fun ~event:(x571 : [ `close ]) ->
              fun ~listener:(x572 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x573) "addListener"
                     [|((match x571 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x572 ()))|])
        let (addListener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x576 : t) ->
            fun ~event:(x574 : [ `drain ]) ->
              fun ~listener:(x575 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x576) "addListener"
                     [|((match x574 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x575 ()))|])
        let (addListener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t) =
          fun (x580 : t) ->
            fun ~event:(x577 : [ `error ]) ->
              fun ~listener:(x578 : err:Error.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x580) "addListener"
                     [|((match x577 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x579 : Ojs.t) ->
                            x578 ~err:(Error.t_0_of_js x579)))|])
        let (addListener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x583 : t) ->
            fun ~event:(x581 : [ `finish ]) ->
              fun ~listener:(x582 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x583) "addListener"
                     [|((match x581 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x582 ()))|])
        let (addListener'''''''''''' :
          t ->
            event:[ `pipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x587 : t) ->
            fun ~event:(x584 : [ `pipe ]) ->
              fun ~listener:(x585 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x587) "addListener"
                     [|((match x584 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x586 : Ojs.t) ->
                            x585 ~src:(Stream.Readable.t_0_of_js x586)))|])
        let (addListener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x591 : t) ->
            fun ~event:(x588 : [ `unpipe ]) ->
              fun ~listener:(x589 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x591) "addListener"
                     [|((match x588 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x590 :
                                                                    Ojs.t) ->
                                                                    x589
                                                                    ~src:(
                                                                    Stream.Readable.t_0_of_js
                                                                    x590)))|])
        let (addListener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x597 : t) ->
            fun ~event:(x592 : symbol or_string) ->
              fun ~listener:(x594 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x597) "addListener"
                     [|(or_string_to_js symbol_to_js x592);(Ojs.fun_to_js_args
                                                              (fun (x595 : _)
                                                                 ->
                                                                 x594
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x595 0)))|])
        let (on : t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x600 : t) ->
            fun ~event:(x598 : [ `abort ]) ->
              fun ~listener:(x599 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x600) "on"
                     [|((match x598 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x599 ()))|])
        let (on' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x606 : t) ->
            fun ~event:(x601 : [ `connect ]) ->
              fun
                ~listener:(x602 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x606) "on"
                     [|((match x601 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x603 : Ojs.t) ->
                            fun (x604 : Ojs.t) ->
                              fun (x605 : Ojs.t) ->
                                x602
                                  ~response:(http_IncomingMessage_of_js x603)
                                  ~socket:(Socket.t_0_of_js x604)
                                  ~head:(Buffer.t_0_of_js x605)))|])
        let (on'' : t -> event:[ `continue ] -> listener:(unit -> unit) -> t)
          =
          fun (x609 : t) ->
            fun ~event:(x607 : [ `continue ]) ->
              fun ~listener:(x608 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x609) "on"
                     [|((match x607 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x608 ()))|])
        let (on''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x613 : t) ->
            fun ~event:(x610 : [ `information ]) ->
              fun ~listener:(x611 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x613) "on"
                     [|((match x610 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x612 : Ojs.t) ->
                            x611 ~info:(http_InformationEvent_of_js x612)))|])
        let (on'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x617 : t) ->
            fun ~event:(x614 : [ `response ]) ->
              fun ~listener:(x615 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x617) "on"
                     [|((match x614 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x616 : Ojs.t) ->
                            x615 ~response:(http_IncomingMessage_of_js x616)))|])
        let (on''''' :
          t -> event:[ `socket ] -> listener:(socket:Socket.t_0 -> unit) -> t)
          =
          fun (x621 : t) ->
            fun ~event:(x618 : [ `socket ]) ->
              fun ~listener:(x619 : socket:Socket.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x621) "on"
                     [|((match x618 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x620 :
                                                                    Ojs.t) ->
                                                                    x619
                                                                    ~socket:(
                                                                    Socket.t_0_of_js
                                                                    x620)))|])
        let (on'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x624 : t) ->
            fun ~event:(x622 : [ `timeout ]) ->
              fun ~listener:(x623 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x624) "on"
                     [|((match x622 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x623 ()))|])
        let (on''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x630 : t) ->
            fun ~event:(x625 : [ `upgrade ]) ->
              fun
                ~listener:(x626 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x630) "on"
                     [|((match x625 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x627 : Ojs.t) ->
                            fun (x628 : Ojs.t) ->
                              fun (x629 : Ojs.t) ->
                                x626
                                  ~response:(http_IncomingMessage_of_js x627)
                                  ~socket:(Socket.t_0_of_js x628)
                                  ~head:(Buffer.t_0_of_js x629)))|])
        let (on'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x633 : t) ->
            fun ~event:(x631 : [ `close ]) ->
              fun ~listener:(x632 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x633) "on"
                     [|((match x631 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x632 ()))|])
        let (on''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x636 : t) ->
            fun ~event:(x634 : [ `drain ]) ->
              fun ~listener:(x635 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x636) "on"
                     [|((match x634 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x635 ()))|])
        let (on'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t) =
          fun (x640 : t) ->
            fun ~event:(x637 : [ `error ]) ->
              fun ~listener:(x638 : err:Error.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x640) "on"
                     [|((match x637 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x639 : Ojs.t) ->
                            x638 ~err:(Error.t_0_of_js x639)))|])
        let (on''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x643 : t) ->
            fun ~event:(x641 : [ `finish ]) ->
              fun ~listener:(x642 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x643) "on"
                     [|((match x641 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x642 ()))|])
        let (on'''''''''''' :
          t ->
            event:[ `pipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x647 : t) ->
            fun ~event:(x644 : [ `pipe ]) ->
              fun ~listener:(x645 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x647) "on"
                     [|((match x644 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x646 : Ojs.t) ->
                            x645 ~src:(Stream.Readable.t_0_of_js x646)))|])
        let (on''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x651 : t) ->
            fun ~event:(x648 : [ `unpipe ]) ->
              fun ~listener:(x649 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x651) "on"
                     [|((match x648 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x650 :
                                                                    Ojs.t) ->
                                                                    x649
                                                                    ~src:(
                                                                    Stream.Readable.t_0_of_js
                                                                    x650)))|])
        let (on'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x657 : t) ->
            fun ~event:(x652 : symbol or_string) ->
              fun ~listener:(x654 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x657) "on"
                     [|(or_string_to_js symbol_to_js x652);(Ojs.fun_to_js_args
                                                              (fun (x655 : _)
                                                                 ->
                                                                 x654
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x655 0)))|])
        let (once : t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x660 : t) ->
            fun ~event:(x658 : [ `abort ]) ->
              fun ~listener:(x659 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x660) "once"
                     [|((match x658 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x659 ()))|])
        let (once' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x666 : t) ->
            fun ~event:(x661 : [ `connect ]) ->
              fun
                ~listener:(x662 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x666) "once"
                     [|((match x661 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x663 : Ojs.t) ->
                            fun (x664 : Ojs.t) ->
                              fun (x665 : Ojs.t) ->
                                x662
                                  ~response:(http_IncomingMessage_of_js x663)
                                  ~socket:(Socket.t_0_of_js x664)
                                  ~head:(Buffer.t_0_of_js x665)))|])
        let (once'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x669 : t) ->
            fun ~event:(x667 : [ `continue ]) ->
              fun ~listener:(x668 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x669) "once"
                     [|((match x667 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x668 ()))|])
        let (once''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x673 : t) ->
            fun ~event:(x670 : [ `information ]) ->
              fun ~listener:(x671 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x673) "once"
                     [|((match x670 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x672 : Ojs.t) ->
                            x671 ~info:(http_InformationEvent_of_js x672)))|])
        let (once'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x677 : t) ->
            fun ~event:(x674 : [ `response ]) ->
              fun ~listener:(x675 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x677) "once"
                     [|((match x674 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x676 : Ojs.t) ->
                            x675 ~response:(http_IncomingMessage_of_js x676)))|])
        let (once''''' :
          t -> event:[ `socket ] -> listener:(socket:Socket.t_0 -> unit) -> t)
          =
          fun (x681 : t) ->
            fun ~event:(x678 : [ `socket ]) ->
              fun ~listener:(x679 : socket:Socket.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x681) "once"
                     [|((match x678 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x680 :
                                                                    Ojs.t) ->
                                                                    x679
                                                                    ~socket:(
                                                                    Socket.t_0_of_js
                                                                    x680)))|])
        let (once'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x684 : t) ->
            fun ~event:(x682 : [ `timeout ]) ->
              fun ~listener:(x683 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x684) "once"
                     [|((match x682 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x683 ()))|])
        let (once''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x690 : t) ->
            fun ~event:(x685 : [ `upgrade ]) ->
              fun
                ~listener:(x686 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x690) "once"
                     [|((match x685 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x687 : Ojs.t) ->
                            fun (x688 : Ojs.t) ->
                              fun (x689 : Ojs.t) ->
                                x686
                                  ~response:(http_IncomingMessage_of_js x687)
                                  ~socket:(Socket.t_0_of_js x688)
                                  ~head:(Buffer.t_0_of_js x689)))|])
        let (once'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x693 : t) ->
            fun ~event:(x691 : [ `close ]) ->
              fun ~listener:(x692 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x693) "once"
                     [|((match x691 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x692 ()))|])
        let (once''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x696 : t) ->
            fun ~event:(x694 : [ `drain ]) ->
              fun ~listener:(x695 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x696) "once"
                     [|((match x694 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x695 ()))|])
        let (once'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t) =
          fun (x700 : t) ->
            fun ~event:(x697 : [ `error ]) ->
              fun ~listener:(x698 : err:Error.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x700) "once"
                     [|((match x697 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x699 : Ojs.t) ->
                            x698 ~err:(Error.t_0_of_js x699)))|])
        let (once''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x703 : t) ->
            fun ~event:(x701 : [ `finish ]) ->
              fun ~listener:(x702 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x703) "once"
                     [|((match x701 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x702 ()))|])
        let (once'''''''''''' :
          t ->
            event:[ `pipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x707 : t) ->
            fun ~event:(x704 : [ `pipe ]) ->
              fun ~listener:(x705 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x707) "once"
                     [|((match x704 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x706 : Ojs.t) ->
                            x705 ~src:(Stream.Readable.t_0_of_js x706)))|])
        let (once''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x711 : t) ->
            fun ~event:(x708 : [ `unpipe ]) ->
              fun ~listener:(x709 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x711) "once"
                     [|((match x708 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x710 :
                                                                    Ojs.t) ->
                                                                    x709
                                                                    ~src:(
                                                                    Stream.Readable.t_0_of_js
                                                                    x710)))|])
        let (once'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x717 : t) ->
            fun ~event:(x712 : symbol or_string) ->
              fun ~listener:(x714 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x717) "once"
                     [|(or_string_to_js symbol_to_js x712);(Ojs.fun_to_js_args
                                                              (fun (x715 : _)
                                                                 ->
                                                                 x714
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x715 0)))|])
        let (prependListener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x720 : t) ->
            fun ~event:(x718 : [ `abort ]) ->
              fun ~listener:(x719 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x720) "prependListener"
                     [|((match x718 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x719 ()))|])
        let (prependListener' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x726 : t) ->
            fun ~event:(x721 : [ `connect ]) ->
              fun
                ~listener:(x722 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x726) "prependListener"
                     [|((match x721 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x723 : Ojs.t) ->
                            fun (x724 : Ojs.t) ->
                              fun (x725 : Ojs.t) ->
                                x722
                                  ~response:(http_IncomingMessage_of_js x723)
                                  ~socket:(Socket.t_0_of_js x724)
                                  ~head:(Buffer.t_0_of_js x725)))|])
        let (prependListener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x729 : t) ->
            fun ~event:(x727 : [ `continue ]) ->
              fun ~listener:(x728 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x729) "prependListener"
                     [|((match x727 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x728 ()))|])
        let (prependListener''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x733 : t) ->
            fun ~event:(x730 : [ `information ]) ->
              fun ~listener:(x731 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x733) "prependListener"
                     [|((match x730 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x732 : Ojs.t) ->
                            x731 ~info:(http_InformationEvent_of_js x732)))|])
        let (prependListener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x737 : t) ->
            fun ~event:(x734 : [ `response ]) ->
              fun ~listener:(x735 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x737) "prependListener"
                     [|((match x734 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x736 : Ojs.t) ->
                            x735 ~response:(http_IncomingMessage_of_js x736)))|])
        let (prependListener''''' :
          t -> event:[ `socket ] -> listener:(socket:Socket.t_0 -> unit) -> t)
          =
          fun (x741 : t) ->
            fun ~event:(x738 : [ `socket ]) ->
              fun ~listener:(x739 : socket:Socket.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x741) "prependListener"
                     [|((match x738 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x740 :
                                                                    Ojs.t) ->
                                                                    x739
                                                                    ~socket:(
                                                                    Socket.t_0_of_js
                                                                    x740)))|])
        let (prependListener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x744 : t) ->
            fun ~event:(x742 : [ `timeout ]) ->
              fun ~listener:(x743 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x744) "prependListener"
                     [|((match x742 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x743 ()))|])
        let (prependListener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x750 : t) ->
            fun ~event:(x745 : [ `upgrade ]) ->
              fun
                ~listener:(x746 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x750) "prependListener"
                     [|((match x745 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x747 : Ojs.t) ->
                            fun (x748 : Ojs.t) ->
                              fun (x749 : Ojs.t) ->
                                x746
                                  ~response:(http_IncomingMessage_of_js x747)
                                  ~socket:(Socket.t_0_of_js x748)
                                  ~head:(Buffer.t_0_of_js x749)))|])
        let (prependListener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x753 : t) ->
            fun ~event:(x751 : [ `close ]) ->
              fun ~listener:(x752 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x753) "prependListener"
                     [|((match x751 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x752 ()))|])
        let (prependListener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x756 : t) ->
            fun ~event:(x754 : [ `drain ]) ->
              fun ~listener:(x755 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x756) "prependListener"
                     [|((match x754 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x755 ()))|])
        let (prependListener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t) =
          fun (x760 : t) ->
            fun ~event:(x757 : [ `error ]) ->
              fun ~listener:(x758 : err:Error.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x760) "prependListener"
                     [|((match x757 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x759 : Ojs.t) ->
                            x758 ~err:(Error.t_0_of_js x759)))|])
        let (prependListener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x763 : t) ->
            fun ~event:(x761 : [ `finish ]) ->
              fun ~listener:(x762 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x763) "prependListener"
                     [|((match x761 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x762 ()))|])
        let (prependListener'''''''''''' :
          t ->
            event:[ `pipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x767 : t) ->
            fun ~event:(x764 : [ `pipe ]) ->
              fun ~listener:(x765 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x767) "prependListener"
                     [|((match x764 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x766 : Ojs.t) ->
                            x765 ~src:(Stream.Readable.t_0_of_js x766)))|])
        let (prependListener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x771 : t) ->
            fun ~event:(x768 : [ `unpipe ]) ->
              fun ~listener:(x769 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x771) "prependListener"
                     [|((match x768 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x770 :
                                                                    Ojs.t) ->
                                                                    x769
                                                                    ~src:(
                                                                    Stream.Readable.t_0_of_js
                                                                    x770)))|])
        let (prependListener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x777 : t) ->
            fun ~event:(x772 : symbol or_string) ->
              fun ~listener:(x774 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x777) "prependListener"
                     [|(or_string_to_js symbol_to_js x772);(Ojs.fun_to_js_args
                                                              (fun (x775 : _)
                                                                 ->
                                                                 x774
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x775 0)))|])
        let (prependOnceListener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x780 : t) ->
            fun ~event:(x778 : [ `abort ]) ->
              fun ~listener:(x779 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x780) "prependOnceListener"
                     [|((match x778 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x779 ()))|])
        let (prependOnceListener' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x786 : t) ->
            fun ~event:(x781 : [ `connect ]) ->
              fun
                ~listener:(x782 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x786) "prependOnceListener"
                     [|((match x781 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x783 : Ojs.t) ->
                            fun (x784 : Ojs.t) ->
                              fun (x785 : Ojs.t) ->
                                x782
                                  ~response:(http_IncomingMessage_of_js x783)
                                  ~socket:(Socket.t_0_of_js x784)
                                  ~head:(Buffer.t_0_of_js x785)))|])
        let (prependOnceListener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x789 : t) ->
            fun ~event:(x787 : [ `continue ]) ->
              fun ~listener:(x788 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x789) "prependOnceListener"
                     [|((match x787 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x788 ()))|])
        let (prependOnceListener''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x793 : t) ->
            fun ~event:(x790 : [ `information ]) ->
              fun ~listener:(x791 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x793) "prependOnceListener"
                     [|((match x790 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x792 : Ojs.t) ->
                            x791 ~info:(http_InformationEvent_of_js x792)))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x797 : t) ->
            fun ~event:(x794 : [ `response ]) ->
              fun ~listener:(x795 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x797) "prependOnceListener"
                     [|((match x794 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x796 : Ojs.t) ->
                            x795 ~response:(http_IncomingMessage_of_js x796)))|])
        let (prependOnceListener''''' :
          t -> event:[ `socket ] -> listener:(socket:Socket.t_0 -> unit) -> t)
          =
          fun (x801 : t) ->
            fun ~event:(x798 : [ `socket ]) ->
              fun ~listener:(x799 : socket:Socket.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x801) "prependOnceListener"
                     [|((match x798 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x800 :
                                                                    Ojs.t) ->
                                                                    x799
                                                                    ~socket:(
                                                                    Socket.t_0_of_js
                                                                    x800)))|])
        let (prependOnceListener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x804 : t) ->
            fun ~event:(x802 : [ `timeout ]) ->
              fun ~listener:(x803 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x804) "prependOnceListener"
                     [|((match x802 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x803 ()))|])
        let (prependOnceListener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                -> t)
          =
          fun (x810 : t) ->
            fun ~event:(x805 : [ `upgrade ]) ->
              fun
                ~listener:(x806 :
                            response:http_IncomingMessage ->
                              socket:Socket.t_0 -> head:Buffer.t_0 -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x810) "prependOnceListener"
                     [|((match x805 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x807 : Ojs.t) ->
                            fun (x808 : Ojs.t) ->
                              fun (x809 : Ojs.t) ->
                                x806
                                  ~response:(http_IncomingMessage_of_js x807)
                                  ~socket:(Socket.t_0_of_js x808)
                                  ~head:(Buffer.t_0_of_js x809)))|])
        let (prependOnceListener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x813 : t) ->
            fun ~event:(x811 : [ `close ]) ->
              fun ~listener:(x812 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x813) "prependOnceListener"
                     [|((match x811 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x812 ()))|])
        let (prependOnceListener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x816 : t) ->
            fun ~event:(x814 : [ `drain ]) ->
              fun ~listener:(x815 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x816) "prependOnceListener"
                     [|((match x814 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x815 ()))|])
        let (prependOnceListener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t_0 -> unit) -> t) =
          fun (x820 : t) ->
            fun ~event:(x817 : [ `error ]) ->
              fun ~listener:(x818 : err:Error.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x820) "prependOnceListener"
                     [|((match x817 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x819 : Ojs.t) ->
                            x818 ~err:(Error.t_0_of_js x819)))|])
        let (prependOnceListener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x823 : t) ->
            fun ~event:(x821 : [ `finish ]) ->
              fun ~listener:(x822 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x823) "prependOnceListener"
                     [|((match x821 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x822 ()))|])
        let (prependOnceListener'''''''''''' :
          t ->
            event:[ `pipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x827 : t) ->
            fun ~event:(x824 : [ `pipe ]) ->
              fun ~listener:(x825 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x827) "prependOnceListener"
                     [|((match x824 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x826 : Ojs.t) ->
                            x825 ~src:(Stream.Readable.t_0_of_js x826)))|])
        let (prependOnceListener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t_0 -> unit) -> t)
          =
          fun (x831 : t) ->
            fun ~event:(x828 : [ `unpipe ]) ->
              fun ~listener:(x829 : src:Stream.Readable.t_0 -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x831) "prependOnceListener"
                     [|((match x828 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x830 :
                                                                    Ojs.t) ->
                                                                    x829
                                                                    ~src:(
                                                                    Stream.Readable.t_0_of_js
                                                                    x830)))|])
        let (prependOnceListener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x837 : t) ->
            fun ~event:(x832 : symbol or_string) ->
              fun ~listener:(x834 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x837) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x832);(Ojs.fun_to_js_args
                                                              (fun (x835 : _)
                                                                 ->
                                                                 x834
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x835 0)))|])
        let (cast : t -> http_OutgoingMessage) =
          fun (x838 : t) -> http_OutgoingMessage_of_js (t_to_js x838)
      end
    module IncomingMessage =
      struct
        type t = http_IncomingMessage
        let rec t_of_js : Ojs.t -> t =
          fun (x840 : Ojs.t) -> http_IncomingMessage_of_js x840
        and t_to_js : t -> Ojs.t =
          fun (x839 : http_IncomingMessage) ->
            http_IncomingMessage_to_js x839
        let (create : socket:Socket.t_0 -> t) =
          fun ~socket:(x841 : Socket.t_0) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "http")
                    "IncomingMessage") [|(Socket.t_0_to_js x841)|])
        let (get_aborted : t -> bool) =
          fun (x842 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x842) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x843 : t) ->
            fun (x844 : bool) ->
              Ojs.set_prop_ascii (t_to_js x843) "aborted"
                (Ojs.bool_to_js x844)
        let (get_httpVersion : t -> string) =
          fun (x845 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x845) "httpVersion")
        let (set_httpVersion : t -> string -> unit) =
          fun (x846 : t) ->
            fun (x847 : string) ->
              Ojs.set_prop_ascii (t_to_js x846) "httpVersion"
                (Ojs.string_to_js x847)
        let (get_httpVersionMajor : t -> float) =
          fun (x848 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x848) "httpVersionMajor")
        let (set_httpVersionMajor : t -> float -> unit) =
          fun (x849 : t) ->
            fun (x850 : float) ->
              Ojs.set_prop_ascii (t_to_js x849) "httpVersionMajor"
                (Ojs.float_to_js x850)
        let (get_httpVersionMinor : t -> float) =
          fun (x851 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x851) "httpVersionMinor")
        let (set_httpVersionMinor : t -> float -> unit) =
          fun (x852 : t) ->
            fun (x853 : float) ->
              Ojs.set_prop_ascii (t_to_js x852) "httpVersionMinor"
                (Ojs.float_to_js x853)
        let (get_complete : t -> bool) =
          fun (x854 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x854) "complete")
        let (set_complete : t -> bool -> unit) =
          fun (x855 : t) ->
            fun (x856 : bool) ->
              Ojs.set_prop_ascii (t_to_js x855) "complete"
                (Ojs.bool_to_js x856)
        let (get_connection : t -> Socket.t_0) =
          fun (x857 : t) ->
            Socket.t_0_of_js (Ojs.get_prop_ascii (t_to_js x857) "connection")
        let (set_connection : t -> Socket.t_0 -> unit) =
          fun (x858 : t) ->
            fun (x859 : Socket.t_0) ->
              Ojs.set_prop_ascii (t_to_js x858) "connection"
                (Socket.t_0_to_js x859)
        let (get_socket : t -> Socket.t_0) =
          fun (x860 : t) ->
            Socket.t_0_of_js (Ojs.get_prop_ascii (t_to_js x860) "socket")
        let (set_socket : t -> Socket.t_0 -> unit) =
          fun (x861 : t) ->
            fun (x862 : Socket.t_0) ->
              Ojs.set_prop_ascii (t_to_js x861) "socket"
                (Socket.t_0_to_js x862)
        let (get_headers : t -> http_IncomingHttpHeaders) =
          fun (x863 : t) ->
            http_IncomingHttpHeaders_of_js
              (Ojs.get_prop_ascii (t_to_js x863) "headers")
        let (set_headers : t -> http_IncomingHttpHeaders -> unit) =
          fun (x864 : t) ->
            fun (x865 : http_IncomingHttpHeaders) ->
              Ojs.set_prop_ascii (t_to_js x864) "headers"
                (http_IncomingHttpHeaders_to_js x865)
        let (get_rawHeaders : t -> string list) =
          fun (x866 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x866) "rawHeaders")
        let (set_rawHeaders : t -> string list -> unit) =
          fun (x868 : t) ->
            fun (x869 : string list) ->
              Ojs.set_prop_ascii (t_to_js x868) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x869)
        let (get_trailers : t -> string NodeJS.Dict.t_1) =
          fun (x871 : t) ->
            NodeJS.Dict.t_1_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x871) "trailers")
        let (set_trailers : t -> string NodeJS.Dict.t_1 -> unit) =
          fun (x873 : t) ->
            fun (x874 : string NodeJS.Dict.t_1) ->
              Ojs.set_prop_ascii (t_to_js x873) "trailers"
                (NodeJS.Dict.t_1_to_js Ojs.string_to_js x874)
        let (get_rawTrailers : t -> string list) =
          fun (x876 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x876) "rawTrailers")
        let (set_rawTrailers : t -> string list -> unit) =
          fun (x878 : t) ->
            fun (x879 : string list) ->
              Ojs.set_prop_ascii (t_to_js x878) "rawTrailers"
                (Ojs.list_to_js Ojs.string_to_js x879)
        let (setTimeout :
          t -> msecs:float -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x885 : t) ->
            fun ~msecs:(x881 : float) ->
              fun ?callback:(x882 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x886 = t_to_js x885 in
                     Ojs.call (Ojs.get_prop_ascii x886 "setTimeout") "apply"
                       [|x886;((let x883 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x883 "push"
                                     [|(Ojs.float_to_js x881)|]);
                                (match x882 with
                                 | Some x884 ->
                                     ignore
                                       (Ojs.call x883 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x884 ()))|])
                                 | None -> ());
                                x883))|])
        let (get_method : t -> string) =
          fun (x887 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x887) "method")
        let (set_method : t -> string -> unit) =
          fun (x888 : t) ->
            fun (x889 : string) ->
              Ojs.set_prop_ascii (t_to_js x888) "method"
                (Ojs.string_to_js x889)
        let (get_url : t -> string) =
          fun (x890 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x890) "url")
        let (set_url : t -> string -> unit) =
          fun (x891 : t) ->
            fun (x892 : string) ->
              Ojs.set_prop_ascii (t_to_js x891) "url" (Ojs.string_to_js x892)
        let (get_statusCode : t -> float) =
          fun (x893 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x893) "statusCode")
        let (set_statusCode : t -> float -> unit) =
          fun (x894 : t) ->
            fun (x895 : float) ->
              Ojs.set_prop_ascii (t_to_js x894) "statusCode"
                (Ojs.float_to_js x895)
        let (get_statusMessage : t -> string) =
          fun (x896 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x896) "statusMessage")
        let (set_statusMessage : t -> string -> unit) =
          fun (x897 : t) ->
            fun (x898 : string) ->
              Ojs.set_prop_ascii (t_to_js x897) "statusMessage"
                (Ojs.string_to_js x898)
        let (destroy : t -> ?error:Error.t_0 -> unit -> unit) =
          fun (x902 : t) ->
            fun ?error:(x899 : Error.t_0 option) ->
              fun () ->
                ignore
                  (let x903 = t_to_js x902 in
                   Ojs.call (Ojs.get_prop_ascii x903 "destroy") "apply"
                     [|x903;((let x900 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x899 with
                               | Some x901 ->
                                   ignore
                                     (Ojs.call x900 "push"
                                        [|(Error.t_0_to_js x901)|])
                               | None -> ());
                              x900))|])
        let (cast : t -> Stream.Readable.t_0) =
          fun (x904 : t) -> Stream.Readable.t_0_of_js (t_to_js x904)
      end
    module AgentOptions =
      struct
        type t = http_AgentOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x906 : Ojs.t) -> http_AgentOptions_of_js x906
        and t_to_js : t -> Ojs.t =
          fun (x905 : http_AgentOptions) -> http_AgentOptions_to_js x905
        let (get_keepAlive : t -> bool) =
          fun (x907 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x907) "keepAlive")
        let (set_keepAlive : t -> bool -> unit) =
          fun (x908 : t) ->
            fun (x909 : bool) ->
              Ojs.set_prop_ascii (t_to_js x908) "keepAlive"
                (Ojs.bool_to_js x909)
        let (get_keepAliveMsecs : t -> float) =
          fun (x910 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x910) "keepAliveMsecs")
        let (set_keepAliveMsecs : t -> float -> unit) =
          fun (x911 : t) ->
            fun (x912 : float) ->
              Ojs.set_prop_ascii (t_to_js x911) "keepAliveMsecs"
                (Ojs.float_to_js x912)
        let (get_maxSockets : t -> float) =
          fun (x913 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x913) "maxSockets")
        let (set_maxSockets : t -> float -> unit) =
          fun (x914 : t) ->
            fun (x915 : float) ->
              Ojs.set_prop_ascii (t_to_js x914) "maxSockets"
                (Ojs.float_to_js x915)
        let (get_maxTotalSockets : t -> float) =
          fun (x916 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x916) "maxTotalSockets")
        let (set_maxTotalSockets : t -> float -> unit) =
          fun (x917 : t) ->
            fun (x918 : float) ->
              Ojs.set_prop_ascii (t_to_js x917) "maxTotalSockets"
                (Ojs.float_to_js x918)
        let (get_maxFreeSockets : t -> float) =
          fun (x919 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x919) "maxFreeSockets")
        let (set_maxFreeSockets : t -> float -> unit) =
          fun (x920 : t) ->
            fun (x921 : float) ->
              Ojs.set_prop_ascii (t_to_js x920) "maxFreeSockets"
                (Ojs.float_to_js x921)
        let (get_timeout : t -> float) =
          fun (x922 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x922) "timeout")
        let (set_timeout : t -> float -> unit) =
          fun (x923 : t) ->
            fun (x924 : float) ->
              Ojs.set_prop_ascii (t_to_js x923) "timeout"
                (Ojs.float_to_js x924)
        let (get_scheduling : t -> [ `fifo  | `lifo ]) =
          fun (x925 : t) ->
            let x926 = Ojs.get_prop_ascii (t_to_js x925) "scheduling" in
            match Ojs.string_of_js x926 with
            | "fifo" -> `fifo
            | "lifo" -> `lifo
            | _ -> assert false
        let (set_scheduling : t -> [ `fifo  | `lifo ] -> unit) =
          fun (x927 : t) ->
            fun (x928 : [ `fifo  | `lifo ]) ->
              Ojs.set_prop_ascii (t_to_js x927) "scheduling"
                (match x928 with
                 | `fifo -> Ojs.string_to_js "fifo"
                 | `lifo -> Ojs.string_to_js "lifo")
      end
    module Agent =
      struct
        type t = http_Agent
        let rec t_of_js : Ojs.t -> t =
          fun (x930 : Ojs.t) -> http_Agent_of_js x930
        and t_to_js : t -> Ojs.t =
          fun (x929 : http_Agent) -> http_Agent_to_js x929
        let (get_maxFreeSockets : t -> float) =
          fun (x931 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x931) "maxFreeSockets")
        let (set_maxFreeSockets : t -> float -> unit) =
          fun (x932 : t) ->
            fun (x933 : float) ->
              Ojs.set_prop_ascii (t_to_js x932) "maxFreeSockets"
                (Ojs.float_to_js x933)
        let (get_maxSockets : t -> float) =
          fun (x934 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x934) "maxSockets")
        let (set_maxSockets : t -> float -> unit) =
          fun (x935 : t) ->
            fun (x936 : float) ->
              Ojs.set_prop_ascii (t_to_js x935) "maxSockets"
                (Ojs.float_to_js x936)
        let (get_maxTotalSockets : t -> float) =
          fun (x937 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x937) "maxTotalSockets")
        let (set_maxTotalSockets : t -> float -> unit) =
          fun (x938 : t) ->
            fun (x939 : float) ->
              Ojs.set_prop_ascii (t_to_js x938) "maxTotalSockets"
                (Ojs.float_to_js x939)
        let (get_freeSockets : t -> Socket.t_0 list NodeJS.ReadOnlyDict.t_1)
          =
          fun (x940 : t) ->
            NodeJS.ReadOnlyDict.t_1_of_js
              (fun (x941 : Ojs.t) -> Ojs.list_of_js Socket.t_0_of_js x941)
              (Ojs.get_prop_ascii (t_to_js x940) "freeSockets")
        let (get_sockets : t -> Socket.t_0 list NodeJS.ReadOnlyDict.t_1) =
          fun (x943 : t) ->
            NodeJS.ReadOnlyDict.t_1_of_js
              (fun (x944 : Ojs.t) -> Ojs.list_of_js Socket.t_0_of_js x944)
              (Ojs.get_prop_ascii (t_to_js x943) "sockets")
        let (get_requests :
          t -> http_IncomingMessage list NodeJS.ReadOnlyDict.t_1) =
          fun (x946 : t) ->
            NodeJS.ReadOnlyDict.t_1_of_js
              (fun (x947 : Ojs.t) ->
                 Ojs.list_of_js http_IncomingMessage_of_js x947)
              (Ojs.get_prop_ascii (t_to_js x946) "requests")
        let (create : ?opts:http_AgentOptions -> unit -> t) =
          fun ?opts:(x949 : http_AgentOptions option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "http")
                      "Agent")
                   (let x950 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x949 with
                     | Some x951 ->
                         ignore
                           (Ojs.call x950 "push"
                              [|(http_AgentOptions_to_js x951)|])
                     | None -> ());
                    x950))
        let (destroy : t -> unit) =
          fun (x952 : t) -> ignore (Ojs.call (t_to_js x952) "destroy" [||])
      end
    let (mETHODS : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "http") "METHODS")
    let (sTATUS_CODES : anonymous_interface_0) =
      anonymous_interface_0_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "http")
           "STATUS_CODES")
    let (createServer :
      ?requestListener:http_RequestListener -> unit -> http_Server) =
      fun ?requestListener:(x954 : http_RequestListener option) ->
        fun () ->
          http_Server_of_js
            (let x957 = Ojs.get_prop_ascii Ojs.global "http" in
             Ojs.call (Ojs.get_prop_ascii x957 "createServer") "apply"
               [|x957;((let x955 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x954 with
                         | Some x956 ->
                             ignore
                               (Ojs.call x955 "push"
                                  [|(http_RequestListener_to_js x956)|])
                         | None -> ());
                        x955))|])
    let (createServer :
      options:http_ServerOptions ->
        ?requestListener:http_RequestListener -> unit -> http_Server)
      =
      fun ~options:(x958 : http_ServerOptions) ->
        fun ?requestListener:(x959 : http_RequestListener option) ->
          fun () ->
            http_Server_of_js
              (let x962 = Ojs.get_prop_ascii Ojs.global "http" in
               Ojs.call (Ojs.get_prop_ascii x962 "createServer") "apply"
                 [|x962;((let x960 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x960 "push"
                               [|(http_ServerOptions_to_js x958)|]);
                          (match x959 with
                           | Some x961 ->
                               ignore
                                 (Ojs.call x960 "push"
                                    [|(http_RequestListener_to_js x961)|])
                           | None -> ());
                          x960))|])
    module RequestOptions =
      struct
        type t = http_RequestOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x964 : Ojs.t) -> http_RequestOptions_of_js x964
        and t_to_js : t -> Ojs.t =
          fun (x963 : http_RequestOptions) -> http_RequestOptions_to_js x963
        let (cast : t -> http_ClientRequestArgs) =
          fun (x965 : t) -> http_ClientRequestArgs_of_js (t_to_js x965)
      end
    let (request :
      options:(http_RequestOptions, URL.t_0) union2 or_string ->
        ?callback:(res:http_IncomingMessage -> unit) ->
          unit -> http_ClientRequest)
      =
      fun ~options:(x966 : (http_RequestOptions, URL.t_0) union2 or_string)
        ->
        fun ?callback:(x967 : (res:http_IncomingMessage -> unit) option) ->
          fun () ->
            http_ClientRequest_of_js
              (let x974 = Ojs.get_prop_ascii Ojs.global "http" in
               Ojs.call (Ojs.get_prop_ascii x974 "request") "apply"
                 [|x974;((let x968 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x968 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x971 :
                                         (http_RequestOptions, URL.t_0)
                                           union2)
                                       ->
                                       union2_to_js http_RequestOptions_to_js
                                         URL.t_0_to_js x971) x966)|]);
                          (match x967 with
                           | Some x969 ->
                               ignore
                                 (Ojs.call x968 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x970 : Ojs.t) ->
                                            x969
                                              ~res:(http_IncomingMessage_of_js
                                                      x970)))|])
                           | None -> ());
                          x968))|])
    let (request :
      url:URL.t_0 or_string ->
        options:http_RequestOptions ->
          ?callback:(res:http_IncomingMessage -> unit) ->
            unit -> http_ClientRequest)
      =
      fun ~url:(x975 : URL.t_0 or_string) ->
        fun ~options:(x976 : http_RequestOptions) ->
          fun ?callback:(x977 : (res:http_IncomingMessage -> unit) option) ->
            fun () ->
              http_ClientRequest_of_js
                (let x982 = Ojs.get_prop_ascii Ojs.global "http" in
                 Ojs.call (Ojs.get_prop_ascii x982 "request") "apply"
                   [|x982;((let x978 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x978 "push"
                                 [|(or_string_to_js URL.t_0_to_js x975)|]);
                            ignore
                              (Ojs.call x978 "push"
                                 [|(http_RequestOptions_to_js x976)|]);
                            (match x977 with
                             | Some x979 ->
                                 ignore
                                   (Ojs.call x978 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x980 : Ojs.t) ->
                                              x979
                                                ~res:(http_IncomingMessage_of_js
                                                        x980)))|])
                             | None -> ());
                            x978))|])
    let (get_ :
      options:(http_RequestOptions, URL.t_0) union2 or_string ->
        ?callback:(res:http_IncomingMessage -> unit) ->
          unit -> http_ClientRequest)
      =
      fun ~options:(x983 : (http_RequestOptions, URL.t_0) union2 or_string)
        ->
        fun ?callback:(x984 : (res:http_IncomingMessage -> unit) option) ->
          fun () ->
            http_ClientRequest_of_js
              (let x991 = Ojs.get_prop_ascii Ojs.global "http" in
               Ojs.call (Ojs.get_prop_ascii x991 "get") "apply"
                 [|x991;((let x985 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x985 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x988 :
                                         (http_RequestOptions, URL.t_0)
                                           union2)
                                       ->
                                       union2_to_js http_RequestOptions_to_js
                                         URL.t_0_to_js x988) x983)|]);
                          (match x984 with
                           | Some x986 ->
                               ignore
                                 (Ojs.call x985 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x987 : Ojs.t) ->
                                            x986
                                              ~res:(http_IncomingMessage_of_js
                                                      x987)))|])
                           | None -> ());
                          x985))|])
    let (get_ :
      url:URL.t_0 or_string ->
        options:http_RequestOptions ->
          ?callback:(res:http_IncomingMessage -> unit) ->
            unit -> http_ClientRequest)
      =
      fun ~url:(x992 : URL.t_0 or_string) ->
        fun ~options:(x993 : http_RequestOptions) ->
          fun ?callback:(x994 : (res:http_IncomingMessage -> unit) option) ->
            fun () ->
              http_ClientRequest_of_js
                (let x999 = Ojs.get_prop_ascii Ojs.global "http" in
                 Ojs.call (Ojs.get_prop_ascii x999 "get") "apply"
                   [|x999;((let x995 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x995 "push"
                                 [|(or_string_to_js URL.t_0_to_js x992)|]);
                            ignore
                              (Ojs.call x995 "push"
                                 [|(http_RequestOptions_to_js x993)|]);
                            (match x994 with
                             | Some x996 ->
                                 ignore
                                   (Ojs.call x995 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x997 : Ojs.t) ->
                                              x996
                                                ~res:(http_IncomingMessage_of_js
                                                        x997)))|])
                             | None -> ());
                            x995))|])
    let (globalAgent : http_Agent) =
      http_Agent_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "http")
           "globalAgent")
    let (maxHeaderSize : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "http")
           "maxHeaderSize")
  end
