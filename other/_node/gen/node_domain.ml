[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type domain_Domain = [ `Domain_Domain ] intf
        and domain_Domain = [ `Domain_Domain ] intf
        and domain_global_NodeJS_Domain =
          [ `Domain_global_NodeJS_Domain ] intf
        let rec domain_Domain_of_js : Ojs.t -> domain_Domain = Obj.magic
        and domain_Domain_to_js : domain_Domain -> Ojs.t = Obj.magic
        and domain_Domain_of_js : Ojs.t -> domain_Domain = Obj.magic
        and domain_Domain_to_js : domain_Domain -> Ojs.t = Obj.magic
        and domain_global_NodeJS_Domain_of_js :
          Ojs.t -> domain_global_NodeJS_Domain = Obj.magic
        and domain_global_NodeJS_Domain_to_js :
          domain_global_NodeJS_Domain -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module Node_domain = struct  end
module Domain =
  struct
    module Global =
      struct
        module NodeJS =
          struct
            module Domain =
              struct
                type t = domain_global_NodeJS_Domain
                let rec t_of_js : Ojs.t -> t =
                  fun (x2 : Ojs.t) -> domain_global_NodeJS_Domain_of_js x2
                and t_to_js : t -> Ojs.t =
                  fun (x1 : domain_global_NodeJS_Domain) ->
                    domain_global_NodeJS_Domain_to_js x1
                let (run :
                  t -> fn:(args:any list -> 'T) -> args:any list -> 'T) =
                  fun (x9 : t) ->
                    fun ~fn:(x3 : args:any list -> 'T) ->
                      fun ~args:(x4 : any list) ->
                        Obj.magic
                          (let x10 = t_to_js x9 in
                           Ojs.call (Ojs.get_prop_ascii x10 "run") "apply"
                             [|x10;((let x5 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x5 "push"
                                          [|(Ojs.fun_to_js_args
                                               (fun (x7 : _) ->
                                                  Obj.magic
                                                    (x3
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js x7
                                                                0))))|]);
                                     List.iter
                                       (fun (x6 : any) ->
                                          ignore
                                            (Ojs.call x5 "push"
                                               [|(any_to_js x6)|])) x4;
                                     x5))|])
                let (add :
                  t -> emitter:(EventEmitter.t_0, Timer.t_0) union2 -> unit)
                  =
                  fun (x14 : t) ->
                    fun ~emitter:(x11 : (EventEmitter.t_0, Timer.t_0) union2)
                      ->
                      ignore
                        (Ojs.call (t_to_js x14) "add"
                           [|(union2_to_js EventEmitter.t_0_to_js
                                Timer.t_0_to_js x11)|])
                let (remove :
                  t -> emitter:(EventEmitter.t_0, Timer.t_0) union2 -> unit)
                  =
                  fun (x18 : t) ->
                    fun ~emitter:(x15 : (EventEmitter.t_0, Timer.t_0) union2)
                      ->
                      ignore
                        (Ojs.call (t_to_js x18) "remove"
                           [|(union2_to_js EventEmitter.t_0_to_js
                                Timer.t_0_to_js x15)|])
                let (bind : t -> cb:'T -> 'T) =
                  fun (x20 : t) ->
                    fun ~cb:(x19 : 'T) ->
                      Obj.magic
                        (Ojs.call (t_to_js x20) "bind" [|(Obj.magic x19)|])
                let (intercept : t -> cb:'T -> 'T) =
                  fun (x22 : t) ->
                    fun ~cb:(x21 : 'T) ->
                      Obj.magic
                        (Ojs.call (t_to_js x22) "intercept"
                           [|(Obj.magic x21)|])
                let (cast : t -> EventEmitter.t_0) =
                  fun (x23 : t) -> EventEmitter.t_0_of_js (t_to_js x23)
              end
          end
      end
    module Domain =
      struct
        type t = domain_Domain
        let rec t_of_js : Ojs.t -> t =
          fun (x25 : Ojs.t) -> domain_Domain_of_js x25
        and t_to_js : t -> Ojs.t =
          fun (x24 : domain_Domain) -> domain_Domain_to_js x24
        let (cast : t -> NodeJS.Domain.t_0) =
          fun (x26 : t) -> NodeJS.Domain.t_0_of_js (t_to_js x26)
      end
    module Domain =
      struct
        type t = domain_Domain
        let rec t_of_js : Ojs.t -> t =
          fun (x28 : Ojs.t) -> domain_Domain_of_js x28
        and t_to_js : t -> Ojs.t =
          fun (x27 : domain_Domain) -> domain_Domain_to_js x27
        let (get_members :
          t -> (EventEmitter.t_0, NodeJS.Timer.t_0) union2 list) =
          fun (x29 : t) ->
            Ojs.list_of_js
              (fun (x30 : Ojs.t) ->
                 union2_of_js EventEmitter.t_0_of_js NodeJS.Timer.t_0_of_js
                   x30) (Ojs.get_prop_ascii (t_to_js x29) "members")
        let (set_members :
          t -> (EventEmitter.t_0, NodeJS.Timer.t_0) union2 list -> unit) =
          fun (x33 : t) ->
            fun (x34 : (EventEmitter.t_0, NodeJS.Timer.t_0) union2 list) ->
              Ojs.set_prop_ascii (t_to_js x33) "members"
                (Ojs.list_to_js
                   (fun (x35 : (EventEmitter.t_0, NodeJS.Timer.t_0) union2)
                      ->
                      union2_to_js EventEmitter.t_0_to_js
                        NodeJS.Timer.t_0_to_js x35) x34)
        let (enter : t -> unit) =
          fun (x38 : t) -> ignore (Ojs.call (t_to_js x38) "enter" [||])
        let (exit : t -> unit) =
          fun (x39 : t) -> ignore (Ojs.call (t_to_js x39) "exit" [||])
        let (cast : t -> EventEmitter.t_0) =
          fun (x40 : t) -> EventEmitter.t_0_of_js (t_to_js x40)
      end
    let (create_ : unit -> domain_Domain) =
      fun () ->
        domain_Domain_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "domain") "create" [||])
  end
