[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type events_DOMEventTarget = [ `Events_DOMEventTarget ] intf
        and events_EventEmitter = [ `Events_EventEmitter ] intf
        and events_EventEmitter = [ `Events_EventEmitter ] intf
        and events_EventEmitterOptions = [ `Events_EventEmitterOptions ] intf
        and events_NodeEventTarget = [ `Events_NodeEventTarget ] intf
        and events_global_NodeJS_EventEmitter =
          [ `Events_global_NodeJS_EventEmitter ] intf
        let rec events_DOMEventTarget_of_js : Ojs.t -> events_DOMEventTarget
          = Obj.magic
        and events_DOMEventTarget_to_js : events_DOMEventTarget -> Ojs.t =
          Obj.magic
        and events_EventEmitter_of_js : Ojs.t -> events_EventEmitter =
          Obj.magic
        and events_EventEmitter_to_js : events_EventEmitter -> Ojs.t =
          Obj.magic
        and events_EventEmitter_of_js : Ojs.t -> events_EventEmitter =
          Obj.magic
        and events_EventEmitter_to_js : events_EventEmitter -> Ojs.t =
          Obj.magic
        and events_EventEmitterOptions_of_js :
          Ojs.t -> events_EventEmitterOptions = Obj.magic
        and events_EventEmitterOptions_to_js :
          events_EventEmitterOptions -> Ojs.t = Obj.magic
        and events_NodeEventTarget_of_js : Ojs.t -> events_NodeEventTarget =
          Obj.magic
        and events_NodeEventTarget_to_js : events_NodeEventTarget -> Ojs.t =
          Obj.magic
        and events_global_NodeJS_EventEmitter_of_js :
          Ojs.t -> events_global_NodeJS_EventEmitter = Obj.magic
        and events_global_NodeJS_EventEmitter_to_js :
          events_global_NodeJS_EventEmitter -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) -> anonymous_interface_0_of_js x2
    and t_to_js : t -> Ojs.t =
      fun (x1 : anonymous_interface_0) -> anonymous_interface_0_to_js x1
    let (get_once : t -> bool) =
      fun (x3 : t) -> Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3) "once")
    let (set_once : t -> bool -> unit) =
      fun (x4 : t) ->
        fun (x5 : bool) ->
          Ojs.set_prop_ascii (t_to_js x4) "once" (Ojs.bool_to_js x5)
  end
module Node_events = struct  end
module Events =
  struct
    module EventEmitterOptions =
      struct
        type t = events_EventEmitterOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x7 : Ojs.t) -> events_EventEmitterOptions_of_js x7
        and t_to_js : t -> Ojs.t =
          fun (x6 : events_EventEmitterOptions) ->
            events_EventEmitterOptions_to_js x6
        let (get_captureRejections : t -> bool) =
          fun (x8 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x8) "captureRejections")
        let (set_captureRejections : t -> bool -> unit) =
          fun (x9 : t) ->
            fun (x10 : bool) ->
              Ojs.set_prop_ascii (t_to_js x9) "captureRejections"
                (Ojs.bool_to_js x10)
      end
    module NodeEventTarget =
      struct
        type t = events_NodeEventTarget
        let rec t_of_js : Ojs.t -> t =
          fun (x12 : Ojs.t) -> events_NodeEventTarget_of_js x12
        and t_to_js : t -> Ojs.t =
          fun (x11 : events_NodeEventTarget) ->
            events_NodeEventTarget_to_js x11
        let (once :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x18 : t) ->
            fun ~event:(x13 : symbol or_string) ->
              fun ~listener:(x15 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x18) "once"
                     [|(or_string_to_js symbol_to_js x13);(Ojs.fun_to_js_args
                                                             (fun (x16 : _)
                                                                ->
                                                                x15
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x16 0)))|])
      end
    module DOMEventTarget =
      struct
        type t = events_DOMEventTarget
        let rec t_of_js : Ojs.t -> t =
          fun (x20 : Ojs.t) -> events_DOMEventTarget_of_js x20
        and t_to_js : t -> Ojs.t =
          fun (x19 : events_DOMEventTarget) ->
            events_DOMEventTarget_to_js x19
        let (addEventListener :
          t ->
            event:string ->
              listener:(args:any list -> unit) ->
                ?opts:anonymous_interface_0 -> unit -> any)
          =
          fun (x28 : t) ->
            fun ~event:(x21 : string) ->
              fun ~listener:(x22 : args:any list -> unit) ->
                fun ?opts:(x23 : anonymous_interface_0 option) ->
                  fun () ->
                    any_of_js
                      (let x29 = t_to_js x28 in
                       Ojs.call (Ojs.get_prop_ascii x29 "addEventListener")
                         "apply"
                         [|x29;((let x24 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x24 "push"
                                      [|(Ojs.string_to_js x21)|]);
                                 ignore
                                   (Ojs.call x24 "push"
                                      [|(Ojs.fun_to_js_args
                                           (fun (x26 : _) ->
                                              x22
                                                ~args:(Ojs.list_of_js_from
                                                         any_of_js x26 0)))|]);
                                 (match x23 with
                                  | Some x25 ->
                                      ignore
                                        (Ojs.call x24 "push"
                                           [|(anonymous_interface_0_to_js x25)|])
                                  | None -> ());
                                 x24))|])
      end
    module EventEmitter =
      struct
        type t = events_EventEmitter
        let rec t_of_js : Ojs.t -> t =
          fun (x31 : Ojs.t) -> events_EventEmitter_of_js x31
        and t_to_js : t -> Ojs.t =
          fun (x30 : events_EventEmitter) -> events_EventEmitter_to_js x30
        let (cast : t -> NodeJS.EventEmitter.t_0) =
          fun (x32 : t) -> NodeJS.EventEmitter.t_0_of_js (t_to_js x32)
      end
    module EventEmitter =
      struct
        type t = events_EventEmitter
        let rec t_of_js : Ojs.t -> t =
          fun (x34 : Ojs.t) -> events_EventEmitter_of_js x34
        and t_to_js : t -> Ojs.t =
          fun (x33 : events_EventEmitter) -> events_EventEmitter_to_js x33
        let (create : ?options:events_EventEmitterOptions -> unit -> t) =
          fun ?options:(x35 : events_EventEmitterOptions option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "events") "EventEmitter")
                   (let x36 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x35 with
                     | Some x37 ->
                         ignore
                           (Ojs.call x36 "push"
                              [|(events_EventEmitterOptions_to_js x37)|])
                     | None -> ());
                    x36))
        let (once :
          emitter:events_NodeEventTarget ->
            event:symbol or_string -> any list Promise.t)
          =
          fun ~emitter:(x38 : events_NodeEventTarget) ->
            fun ~event:(x39 : symbol or_string) ->
              Promise.t_of_js
                (fun (x41 : Ojs.t) -> Ojs.list_of_js any_of_js x41)
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "events") "EventEmitter")
                   "once"
                   [|(events_NodeEventTarget_to_js x38);(or_string_to_js
                                                           symbol_to_js x39)|])
        let (once' :
          emitter:events_DOMEventTarget -> event:string -> any list Promise.t)
          =
          fun ~emitter:(x43 : events_DOMEventTarget) ->
            fun ~event:(x44 : string) ->
              Promise.t_of_js
                (fun (x45 : Ojs.t) -> Ojs.list_of_js any_of_js x45)
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "events") "EventEmitter")
                   "once"
                   [|(events_DOMEventTarget_to_js x43);(Ojs.string_to_js x44)|])
        let (on :
          emitter:NodeJS.EventEmitter.t_0 ->
            event:string -> any AsyncIterableIterator.t)
          =
          fun ~emitter:(x47 : NodeJS.EventEmitter.t_0) ->
            fun ~event:(x48 : string) ->
              AsyncIterableIterator.t_of_js any_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "events") "EventEmitter")
                   "on"
                   [|(NodeJS.EventEmitter.t_0_to_js x47);(Ojs.string_to_js
                                                            x48)|])
        let (listenerCount :
          emitter:NodeJS.EventEmitter.t_0 -> event:symbol or_string -> float)
          =
          fun ~emitter:(x50 : NodeJS.EventEmitter.t_0) ->
            fun ~event:(x51 : symbol or_string) ->
              Ojs.float_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "events") "EventEmitter")
                   "listenerCount"
                   [|(NodeJS.EventEmitter.t_0_to_js x50);(or_string_to_js
                                                            symbol_to_js x51)|])
        let (get_errorMonitor : unit -> any) =
          fun () ->
            any_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "events")
                    "EventEmitter") "errorMonitor")
        let (get_captureRejectionSymbol : unit -> any) =
          fun () ->
            any_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "events")
                    "EventEmitter") "captureRejectionSymbol")
        let (get_captureRejections : unit -> bool) =
          fun () ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "events")
                    "EventEmitter") "captureRejections")
        let (set_captureRejections : bool -> unit) =
          fun (x53 : bool) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "events")
                 "EventEmitter") "captureRejections" (Ojs.bool_to_js x53)
        let (get_defaultMaxListeners : unit -> float) =
          fun () ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "events")
                    "EventEmitter") "defaultMaxListeners")
        let (set_defaultMaxListeners : float -> unit) =
          fun (x54 : float) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "events")
                 "EventEmitter") "defaultMaxListeners" (Ojs.float_to_js x54)
      end
    module EventEmitter = struct  end
    module Global =
      struct
        module NodeJS =
          struct
            module EventEmitter =
              struct
                type t = events_global_NodeJS_EventEmitter
                let rec t_of_js : Ojs.t -> t =
                  fun (x56 : Ojs.t) ->
                    events_global_NodeJS_EventEmitter_of_js x56
                and t_to_js : t -> Ojs.t =
                  fun (x55 : events_global_NodeJS_EventEmitter) ->
                    events_global_NodeJS_EventEmitter_to_js x55
                let (addListener :
                  t ->
                    event:symbol or_string ->
                      listener:(args:any list -> unit) -> t)
                  =
                  fun (x62 : t) ->
                    fun ~event:(x57 : symbol or_string) ->
                      fun ~listener:(x59 : args:any list -> unit) ->
                        t_of_js
                          (Ojs.call (t_to_js x62) "addListener"
                             [|(or_string_to_js symbol_to_js x57);(Ojs.fun_to_js_args
                                                                    (fun
                                                                    (x60 : _)
                                                                    ->
                                                                    x59
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x60 0)))|])
                let (on :
                  t ->
                    event:symbol or_string ->
                      listener:(args:any list -> unit) -> t)
                  =
                  fun (x68 : t) ->
                    fun ~event:(x63 : symbol or_string) ->
                      fun ~listener:(x65 : args:any list -> unit) ->
                        t_of_js
                          (Ojs.call (t_to_js x68) "on"
                             [|(or_string_to_js symbol_to_js x63);(Ojs.fun_to_js_args
                                                                    (fun
                                                                    (x66 : _)
                                                                    ->
                                                                    x65
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x66 0)))|])
                let (once :
                  t ->
                    event:symbol or_string ->
                      listener:(args:any list -> unit) -> t)
                  =
                  fun (x74 : t) ->
                    fun ~event:(x69 : symbol or_string) ->
                      fun ~listener:(x71 : args:any list -> unit) ->
                        t_of_js
                          (Ojs.call (t_to_js x74) "once"
                             [|(or_string_to_js symbol_to_js x69);(Ojs.fun_to_js_args
                                                                    (fun
                                                                    (x72 : _)
                                                                    ->
                                                                    x71
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x72 0)))|])
                let (removeListener :
                  t ->
                    event:symbol or_string ->
                      listener:(args:any list -> unit) -> t)
                  =
                  fun (x80 : t) ->
                    fun ~event:(x75 : symbol or_string) ->
                      fun ~listener:(x77 : args:any list -> unit) ->
                        t_of_js
                          (Ojs.call (t_to_js x80) "removeListener"
                             [|(or_string_to_js symbol_to_js x75);(Ojs.fun_to_js_args
                                                                    (fun
                                                                    (x78 : _)
                                                                    ->
                                                                    x77
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x78 0)))|])
                let (off :
                  t ->
                    event:symbol or_string ->
                      listener:(args:any list -> unit) -> t)
                  =
                  fun (x86 : t) ->
                    fun ~event:(x81 : symbol or_string) ->
                      fun ~listener:(x83 : args:any list -> unit) ->
                        t_of_js
                          (Ojs.call (t_to_js x86) "off"
                             [|(or_string_to_js symbol_to_js x81);(Ojs.fun_to_js_args
                                                                    (fun
                                                                    (x84 : _)
                                                                    ->
                                                                    x83
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x84 0)))|])
                let (removeAllListeners :
                  t -> ?event:symbol or_string -> unit -> t) =
                  fun (x91 : t) ->
                    fun ?event:(x87 : symbol or_string option) ->
                      fun () ->
                        t_of_js
                          (let x92 = t_to_js x91 in
                           Ojs.call
                             (Ojs.get_prop_ascii x92 "removeAllListeners")
                             "apply"
                             [|x92;((let x88 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x87 with
                                      | Some x89 ->
                                          ignore
                                            (Ojs.call x88 "push"
                                               [|(or_string_to_js
                                                    symbol_to_js x89)|])
                                      | None -> ());
                                     x88))|])
                let (setMaxListeners : t -> n:float -> t) =
                  fun (x94 : t) ->
                    fun ~n:(x93 : float) ->
                      t_of_js
                        (Ojs.call (t_to_js x94) "setMaxListeners"
                           [|(Ojs.float_to_js x93)|])
                let (getMaxListeners : t -> float) =
                  fun (x95 : t) ->
                    Ojs.float_of_js
                      (Ojs.call (t_to_js x95) "getMaxListeners" [||])
                let (listeners :
                  t -> event:symbol or_string -> untyped_function list) =
                  fun (x98 : t) ->
                    fun ~event:(x96 : symbol or_string) ->
                      Ojs.list_of_js untyped_function_of_js
                        (Ojs.call (t_to_js x98) "listeners"
                           [|(or_string_to_js symbol_to_js x96)|])
                let (rawListeners :
                  t -> event:symbol or_string -> untyped_function list) =
                  fun (x102 : t) ->
                    fun ~event:(x100 : symbol or_string) ->
                      Ojs.list_of_js untyped_function_of_js
                        (Ojs.call (t_to_js x102) "rawListeners"
                           [|(or_string_to_js symbol_to_js x100)|])
                let (emit :
                  t -> event:symbol or_string -> args:any list -> bool) =
                  fun (x109 : t) ->
                    fun ~event:(x104 : symbol or_string) ->
                      fun ~args:(x105 : any list) ->
                        Ojs.bool_of_js
                          (let x110 = t_to_js x109 in
                           Ojs.call (Ojs.get_prop_ascii x110 "emit") "apply"
                             [|x110;((let x106 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x106 "push"
                                           [|(or_string_to_js symbol_to_js
                                                x104)|]);
                                      List.iter
                                        (fun (x107 : any) ->
                                           ignore
                                             (Ojs.call x106 "push"
                                                [|(any_to_js x107)|])) x105;
                                      x106))|])
                let (listenerCount : t -> event:symbol or_string -> float) =
                  fun (x113 : t) ->
                    fun ~event:(x111 : symbol or_string) ->
                      Ojs.float_of_js
                        (Ojs.call (t_to_js x113) "listenerCount"
                           [|(or_string_to_js symbol_to_js x111)|])
                let (prependListener :
                  t ->
                    event:symbol or_string ->
                      listener:(args:any list -> unit) -> t)
                  =
                  fun (x119 : t) ->
                    fun ~event:(x114 : symbol or_string) ->
                      fun ~listener:(x116 : args:any list -> unit) ->
                        t_of_js
                          (Ojs.call (t_to_js x119) "prependListener"
                             [|(or_string_to_js symbol_to_js x114);(Ojs.fun_to_js_args
                                                                    (fun
                                                                    (x117 :
                                                                    _) ->
                                                                    x116
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x117 0)))|])
                let (prependOnceListener :
                  t ->
                    event:symbol or_string ->
                      listener:(args:any list -> unit) -> t)
                  =
                  fun (x125 : t) ->
                    fun ~event:(x120 : symbol or_string) ->
                      fun ~listener:(x122 : args:any list -> unit) ->
                        t_of_js
                          (Ojs.call (t_to_js x125) "prependOnceListener"
                             [|(or_string_to_js symbol_to_js x120);(Ojs.fun_to_js_args
                                                                    (fun
                                                                    (x123 :
                                                                    _) ->
                                                                    x122
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x123 0)))|])
                let (eventNames : t -> symbol or_string list) =
                  fun (x126 : t) ->
                    Ojs.list_of_js
                      (fun (x127 : Ojs.t) ->
                         or_string_of_js symbol_of_js x127)
                      (Ojs.call (t_to_js x126) "eventNames" [||])
              end
          end
      end
  end
