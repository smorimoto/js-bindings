[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type zlib_BrotliCompress =
          [ `Zlib_BrotliCompress  | `Zlib_Zlib ] intf
        and zlib_BrotliDecompress =
          [ `Zlib_BrotliDecompress  | `Zlib_Zlib ] intf
        and zlib_BrotliOptions = [ `Zlib_BrotliOptions ] intf
        and zlib_CompressCallback = [ `Zlib_CompressCallback ] intf
        and zlib_Deflate =
          [ `Zlib_Deflate  | `Zlib_Zlib  | `Zlib_ZlibParams 
          | `Zlib_ZlibReset ] intf
        and zlib_DeflateRaw =
          [ `Zlib_DeflateRaw  | `Zlib_Zlib  | `Zlib_ZlibParams 
          | `Zlib_ZlibReset ] intf
        and zlib_Gunzip = [ `Zlib_Gunzip  | `Zlib_Zlib ] intf
        and zlib_Gzip = [ `Zlib_Gzip  | `Zlib_Zlib ] intf
        and zlib_Inflate =
          [ `Zlib_Inflate  | `Zlib_Zlib  | `Zlib_ZlibReset ] intf
        and zlib_InflateRaw =
          [ `Zlib_InflateRaw  | `Zlib_Zlib  | `Zlib_ZlibReset ] intf
        and zlib_InputType =
          (ArrayBuffer.t, NodeJS.ArrayBufferView.t_0) union2 or_string
        and zlib_Unzip = [ `Zlib_Unzip  | `Zlib_Zlib ] intf
        and zlib_Zlib = [ `Zlib_Zlib ] intf
        and zlib_ZlibOptions = [ `Zlib_ZlibOptions ] intf
        and zlib_ZlibParams = [ `Zlib_ZlibParams ] intf
        and zlib_ZlibReset = [ `Zlib_ZlibReset ] intf
        let rec zlib_BrotliCompress_of_js : Ojs.t -> zlib_BrotliCompress =
          Obj.magic
        and zlib_BrotliCompress_to_js : zlib_BrotliCompress -> Ojs.t =
          Obj.magic
        and zlib_BrotliDecompress_of_js : Ojs.t -> zlib_BrotliDecompress =
          Obj.magic
        and zlib_BrotliDecompress_to_js : zlib_BrotliDecompress -> Ojs.t =
          Obj.magic
        and zlib_BrotliOptions_of_js : Ojs.t -> zlib_BrotliOptions =
          Obj.magic
        and zlib_BrotliOptions_to_js : zlib_BrotliOptions -> Ojs.t =
          Obj.magic
        and zlib_CompressCallback_of_js : Ojs.t -> zlib_CompressCallback =
          Obj.magic
        and zlib_CompressCallback_to_js : zlib_CompressCallback -> Ojs.t =
          Obj.magic
        and zlib_Deflate_of_js : Ojs.t -> zlib_Deflate = Obj.magic
        and zlib_Deflate_to_js : zlib_Deflate -> Ojs.t = Obj.magic
        and zlib_DeflateRaw_of_js : Ojs.t -> zlib_DeflateRaw = Obj.magic
        and zlib_DeflateRaw_to_js : zlib_DeflateRaw -> Ojs.t = Obj.magic
        and zlib_Gunzip_of_js : Ojs.t -> zlib_Gunzip = Obj.magic
        and zlib_Gunzip_to_js : zlib_Gunzip -> Ojs.t = Obj.magic
        and zlib_Gzip_of_js : Ojs.t -> zlib_Gzip = Obj.magic
        and zlib_Gzip_to_js : zlib_Gzip -> Ojs.t = Obj.magic
        and zlib_Inflate_of_js : Ojs.t -> zlib_Inflate = Obj.magic
        and zlib_Inflate_to_js : zlib_Inflate -> Ojs.t = Obj.magic
        and zlib_InflateRaw_of_js : Ojs.t -> zlib_InflateRaw = Obj.magic
        and zlib_InflateRaw_to_js : zlib_InflateRaw -> Ojs.t = Obj.magic
        and zlib_InputType_of_js : Ojs.t -> zlib_InputType =
          fun (x5 : Ojs.t) ->
            or_string_of_js
              (fun (x6 : Ojs.t) ->
                 union2_of_js ArrayBuffer.t_of_js
                   NodeJS.ArrayBufferView.t_0_of_js x6) x5
        and zlib_InputType_to_js : zlib_InputType -> Ojs.t =
          fun
            (x1 :
              (ArrayBuffer.t, NodeJS.ArrayBufferView.t_0) union2 or_string)
            ->
            or_string_to_js
              (fun (x2 : (ArrayBuffer.t, NodeJS.ArrayBufferView.t_0) union2)
                 ->
                 union2_to_js ArrayBuffer.t_to_js
                   NodeJS.ArrayBufferView.t_0_to_js x2) x1
        and zlib_Unzip_of_js : Ojs.t -> zlib_Unzip = Obj.magic
        and zlib_Unzip_to_js : zlib_Unzip -> Ojs.t = Obj.magic
        and zlib_Zlib_of_js : Ojs.t -> zlib_Zlib = Obj.magic
        and zlib_Zlib_to_js : zlib_Zlib -> Ojs.t = Obj.magic
        and zlib_ZlibOptions_of_js : Ojs.t -> zlib_ZlibOptions = Obj.magic
        and zlib_ZlibOptions_to_js : zlib_ZlibOptions -> Ojs.t = Obj.magic
        and zlib_ZlibParams_of_js : Ojs.t -> zlib_ZlibParams = Obj.magic
        and zlib_ZlibParams_to_js : zlib_ZlibParams -> Ojs.t = Obj.magic
        and zlib_ZlibReset_of_js : Ojs.t -> zlib_ZlibReset = Obj.magic
        and zlib_ZlibReset_to_js : zlib_ZlibReset -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x10 : Ojs.t) -> anonymous_interface_0_of_js x10
    and t_to_js : t -> Ojs.t =
      fun (x9 : anonymous_interface_0) -> anonymous_interface_0_to_js x9
    let (get : t -> float -> bool or_number) =
      fun (x11 : t) ->
        fun (x12 : float) ->
          or_number_of_js Ojs.bool_of_js
            (Ojs.get_prop (t_to_js x11) (Ojs.float_to_js x12))
    let (set : t -> float -> bool or_number -> unit) =
      fun (x14 : t) ->
        fun (x15 : float) ->
          fun (x16 : bool or_number) ->
            Ojs.set_prop (t_to_js x14) (Ojs.float_to_js x15)
              (or_number_to_js Ojs.bool_to_js x16)
  end
module Node_zlib = struct  end
module Zlib =
  struct
    module ZlibOptions =
      struct
        type t = zlib_ZlibOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x19 : Ojs.t) -> zlib_ZlibOptions_of_js x19
        and t_to_js : t -> Ojs.t =
          fun (x18 : zlib_ZlibOptions) -> zlib_ZlibOptions_to_js x18
        let (get_flush : t -> float) =
          fun (x20 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x20) "flush")
        let (set_flush : t -> float -> unit) =
          fun (x21 : t) ->
            fun (x22 : float) ->
              Ojs.set_prop_ascii (t_to_js x21) "flush" (Ojs.float_to_js x22)
        let (get_finishFlush : t -> float) =
          fun (x23 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x23) "finishFlush")
        let (set_finishFlush : t -> float -> unit) =
          fun (x24 : t) ->
            fun (x25 : float) ->
              Ojs.set_prop_ascii (t_to_js x24) "finishFlush"
                (Ojs.float_to_js x25)
        let (get_chunkSize : t -> float) =
          fun (x26 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x26) "chunkSize")
        let (set_chunkSize : t -> float -> unit) =
          fun (x27 : t) ->
            fun (x28 : float) ->
              Ojs.set_prop_ascii (t_to_js x27) "chunkSize"
                (Ojs.float_to_js x28)
        let (get_windowBits : t -> float) =
          fun (x29 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x29) "windowBits")
        let (set_windowBits : t -> float -> unit) =
          fun (x30 : t) ->
            fun (x31 : float) ->
              Ojs.set_prop_ascii (t_to_js x30) "windowBits"
                (Ojs.float_to_js x31)
        let (get_level : t -> float) =
          fun (x32 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x32) "level")
        let (set_level : t -> float -> unit) =
          fun (x33 : t) ->
            fun (x34 : float) ->
              Ojs.set_prop_ascii (t_to_js x33) "level" (Ojs.float_to_js x34)
        let (get_memLevel : t -> float) =
          fun (x35 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x35) "memLevel")
        let (set_memLevel : t -> float -> unit) =
          fun (x36 : t) ->
            fun (x37 : float) ->
              Ojs.set_prop_ascii (t_to_js x36) "memLevel"
                (Ojs.float_to_js x37)
        let (get_strategy : t -> float) =
          fun (x38 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x38) "strategy")
        let (set_strategy : t -> float -> unit) =
          fun (x39 : t) ->
            fun (x40 : float) ->
              Ojs.set_prop_ascii (t_to_js x39) "strategy"
                (Ojs.float_to_js x40)
        let (get_dictionary :
          t -> (ArrayBuffer.t, NodeJS.ArrayBufferView.t_0) union2) =
          fun (x41 : t) ->
            union2_of_js ArrayBuffer.t_of_js NodeJS.ArrayBufferView.t_0_of_js
              (Ojs.get_prop_ascii (t_to_js x41) "dictionary")
        let (set_dictionary :
          t -> (ArrayBuffer.t, NodeJS.ArrayBufferView.t_0) union2 -> unit) =
          fun (x44 : t) ->
            fun (x45 : (ArrayBuffer.t, NodeJS.ArrayBufferView.t_0) union2) ->
              Ojs.set_prop_ascii (t_to_js x44) "dictionary"
                (union2_to_js ArrayBuffer.t_to_js
                   NodeJS.ArrayBufferView.t_0_to_js x45)
        let (get_info : t -> bool) =
          fun (x48 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x48) "info")
        let (set_info : t -> bool -> unit) =
          fun (x49 : t) ->
            fun (x50 : bool) ->
              Ojs.set_prop_ascii (t_to_js x49) "info" (Ojs.bool_to_js x50)
        let (get_maxOutputLength : t -> float) =
          fun (x51 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x51) "maxOutputLength")
        let (set_maxOutputLength : t -> float -> unit) =
          fun (x52 : t) ->
            fun (x53 : float) ->
              Ojs.set_prop_ascii (t_to_js x52) "maxOutputLength"
                (Ojs.float_to_js x53)
      end
    module BrotliOptions =
      struct
        type t = zlib_BrotliOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x55 : Ojs.t) -> zlib_BrotliOptions_of_js x55
        and t_to_js : t -> Ojs.t =
          fun (x54 : zlib_BrotliOptions) -> zlib_BrotliOptions_to_js x54
        let (get_flush : t -> float) =
          fun (x56 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x56) "flush")
        let (set_flush : t -> float -> unit) =
          fun (x57 : t) ->
            fun (x58 : float) ->
              Ojs.set_prop_ascii (t_to_js x57) "flush" (Ojs.float_to_js x58)
        let (get_finishFlush : t -> float) =
          fun (x59 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x59) "finishFlush")
        let (set_finishFlush : t -> float -> unit) =
          fun (x60 : t) ->
            fun (x61 : float) ->
              Ojs.set_prop_ascii (t_to_js x60) "finishFlush"
                (Ojs.float_to_js x61)
        let (get_chunkSize : t -> float) =
          fun (x62 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x62) "chunkSize")
        let (set_chunkSize : t -> float -> unit) =
          fun (x63 : t) ->
            fun (x64 : float) ->
              Ojs.set_prop_ascii (t_to_js x63) "chunkSize"
                (Ojs.float_to_js x64)
        let (get_params : t -> anonymous_interface_0) =
          fun (x65 : t) ->
            anonymous_interface_0_of_js
              (Ojs.get_prop_ascii (t_to_js x65) "params")
        let (set_params : t -> anonymous_interface_0 -> unit) =
          fun (x66 : t) ->
            fun (x67 : anonymous_interface_0) ->
              Ojs.set_prop_ascii (t_to_js x66) "params"
                (anonymous_interface_0_to_js x67)
        let (get_maxOutputLength : t -> float) =
          fun (x68 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x68) "maxOutputLength")
        let (set_maxOutputLength : t -> float -> unit) =
          fun (x69 : t) ->
            fun (x70 : float) ->
              Ojs.set_prop_ascii (t_to_js x69) "maxOutputLength"
                (Ojs.float_to_js x70)
      end
    module Zlib =
      struct
        type t = zlib_Zlib
        let rec t_of_js : Ojs.t -> t =
          fun (x72 : Ojs.t) -> zlib_Zlib_of_js x72
        and t_to_js : t -> Ojs.t =
          fun (x71 : zlib_Zlib) -> zlib_Zlib_to_js x71
        let (get_bytesRead : t -> float) =
          fun (x73 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x73) "bytesRead")
        let (get_bytesWritten : t -> float) =
          fun (x74 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x74) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x75 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x75) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x77 : t) ->
            fun (x78 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x77) "shell"
                (or_string_to_js Ojs.bool_to_js x78)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x83 : t) ->
            fun ?callback:(x80 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x84 = t_to_js x83 in
                   Ojs.call (Ojs.get_prop_ascii x84 "close") "apply"
                     [|x84;((let x81 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x80 with
                              | Some x82 ->
                                  ignore
                                    (Ojs.call x81 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x82 ()))|])
                              | None -> ());
                             x81))|])
        let (flush :
          t -> ?kind:float -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x90 : t) ->
            fun ?kind:(x85 : float option) ->
              fun ?callback:(x86 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x91 = t_to_js x90 in
                     Ojs.call (Ojs.get_prop_ascii x91 "flush") "apply"
                       [|x91;((let x87 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x85 with
                                | Some x89 ->
                                    ignore
                                      (Ojs.call x87 "push"
                                         [|(Ojs.float_to_js x89)|])
                                | None -> ());
                               (match x86 with
                                | Some x88 ->
                                    ignore
                                      (Ojs.call x87 "push"
                                         [|(Ojs.fun_to_js 1 (fun _ -> x88 ()))|])
                                | None -> ());
                               x87))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x95 : t) ->
            fun ?callback:(x92 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x96 = t_to_js x95 in
                   Ojs.call (Ojs.get_prop_ascii x96 "flush") "apply"
                     [|x96;((let x93 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x92 with
                              | Some x94 ->
                                  ignore
                                    (Ojs.call x93 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x94 ()))|])
                              | None -> ());
                             x93))|])
      end
    module ZlibParams =
      struct
        type t = zlib_ZlibParams
        let rec t_of_js : Ojs.t -> t =
          fun (x98 : Ojs.t) -> zlib_ZlibParams_of_js x98
        and t_to_js : t -> Ojs.t =
          fun (x97 : zlib_ZlibParams) -> zlib_ZlibParams_to_js x97
        let (params :
          t ->
            level:float -> strategy:float -> callback:(unit -> unit) -> unit)
          =
          fun (x102 : t) ->
            fun ~level:(x99 : float) ->
              fun ~strategy:(x100 : float) ->
                fun ~callback:(x101 : unit -> unit) ->
                  ignore
                    (Ojs.call (t_to_js x102) "params"
                       [|(Ojs.float_to_js x99);(Ojs.float_to_js x100);(
                         Ojs.fun_to_js 1 (fun _ -> x101 ()))|])
      end
    module ZlibReset =
      struct
        type t = zlib_ZlibReset
        let rec t_of_js : Ojs.t -> t =
          fun (x104 : Ojs.t) -> zlib_ZlibReset_of_js x104
        and t_to_js : t -> Ojs.t =
          fun (x103 : zlib_ZlibReset) -> zlib_ZlibReset_to_js x103
        let (reset : t -> unit) =
          fun (x105 : t) -> ignore (Ojs.call (t_to_js x105) "reset" [||])
      end
    module BrotliCompress =
      struct
        type t = zlib_BrotliCompress
        let rec t_of_js : Ojs.t -> t =
          fun (x107 : Ojs.t) -> zlib_BrotliCompress_of_js x107
        and t_to_js : t -> Ojs.t =
          fun (x106 : zlib_BrotliCompress) -> zlib_BrotliCompress_to_js x106
        let (cast : t -> Stream.Transform.t_0) =
          fun (x108 : t) -> Stream.Transform.t_0_of_js (t_to_js x108)
        let (cast' : t -> zlib_Zlib) =
          fun (x109 : t) -> zlib_Zlib_of_js (t_to_js x109)
      end
    module BrotliDecompress =
      struct
        type t = zlib_BrotliDecompress
        let rec t_of_js : Ojs.t -> t =
          fun (x111 : Ojs.t) -> zlib_BrotliDecompress_of_js x111
        and t_to_js : t -> Ojs.t =
          fun (x110 : zlib_BrotliDecompress) ->
            zlib_BrotliDecompress_to_js x110
        let (cast : t -> Stream.Transform.t_0) =
          fun (x112 : t) -> Stream.Transform.t_0_of_js (t_to_js x112)
        let (cast' : t -> zlib_Zlib) =
          fun (x113 : t) -> zlib_Zlib_of_js (t_to_js x113)
      end
    module Gzip =
      struct
        type t = zlib_Gzip
        let rec t_of_js : Ojs.t -> t =
          fun (x115 : Ojs.t) -> zlib_Gzip_of_js x115
        and t_to_js : t -> Ojs.t =
          fun (x114 : zlib_Gzip) -> zlib_Gzip_to_js x114
        let (cast : t -> Stream.Transform.t_0) =
          fun (x116 : t) -> Stream.Transform.t_0_of_js (t_to_js x116)
        let (cast' : t -> zlib_Zlib) =
          fun (x117 : t) -> zlib_Zlib_of_js (t_to_js x117)
      end
    module Gunzip =
      struct
        type t = zlib_Gunzip
        let rec t_of_js : Ojs.t -> t =
          fun (x119 : Ojs.t) -> zlib_Gunzip_of_js x119
        and t_to_js : t -> Ojs.t =
          fun (x118 : zlib_Gunzip) -> zlib_Gunzip_to_js x118
        let (cast : t -> Stream.Transform.t_0) =
          fun (x120 : t) -> Stream.Transform.t_0_of_js (t_to_js x120)
        let (cast' : t -> zlib_Zlib) =
          fun (x121 : t) -> zlib_Zlib_of_js (t_to_js x121)
      end
    module Deflate =
      struct
        type t = zlib_Deflate
        let rec t_of_js : Ojs.t -> t =
          fun (x123 : Ojs.t) -> zlib_Deflate_of_js x123
        and t_to_js : t -> Ojs.t =
          fun (x122 : zlib_Deflate) -> zlib_Deflate_to_js x122
        let (cast : t -> Stream.Transform.t_0) =
          fun (x124 : t) -> Stream.Transform.t_0_of_js (t_to_js x124)
        let (cast' : t -> zlib_Zlib) =
          fun (x125 : t) -> zlib_Zlib_of_js (t_to_js x125)
        let (cast'' : t -> zlib_ZlibReset) =
          fun (x126 : t) -> zlib_ZlibReset_of_js (t_to_js x126)
        let (cast''' : t -> zlib_ZlibParams) =
          fun (x127 : t) -> zlib_ZlibParams_of_js (t_to_js x127)
      end
    module Inflate =
      struct
        type t = zlib_Inflate
        let rec t_of_js : Ojs.t -> t =
          fun (x129 : Ojs.t) -> zlib_Inflate_of_js x129
        and t_to_js : t -> Ojs.t =
          fun (x128 : zlib_Inflate) -> zlib_Inflate_to_js x128
        let (cast : t -> Stream.Transform.t_0) =
          fun (x130 : t) -> Stream.Transform.t_0_of_js (t_to_js x130)
        let (cast' : t -> zlib_Zlib) =
          fun (x131 : t) -> zlib_Zlib_of_js (t_to_js x131)
        let (cast'' : t -> zlib_ZlibReset) =
          fun (x132 : t) -> zlib_ZlibReset_of_js (t_to_js x132)
      end
    module DeflateRaw =
      struct
        type t = zlib_DeflateRaw
        let rec t_of_js : Ojs.t -> t =
          fun (x134 : Ojs.t) -> zlib_DeflateRaw_of_js x134
        and t_to_js : t -> Ojs.t =
          fun (x133 : zlib_DeflateRaw) -> zlib_DeflateRaw_to_js x133
        let (cast : t -> Stream.Transform.t_0) =
          fun (x135 : t) -> Stream.Transform.t_0_of_js (t_to_js x135)
        let (cast' : t -> zlib_Zlib) =
          fun (x136 : t) -> zlib_Zlib_of_js (t_to_js x136)
        let (cast'' : t -> zlib_ZlibReset) =
          fun (x137 : t) -> zlib_ZlibReset_of_js (t_to_js x137)
        let (cast''' : t -> zlib_ZlibParams) =
          fun (x138 : t) -> zlib_ZlibParams_of_js (t_to_js x138)
      end
    module InflateRaw =
      struct
        type t = zlib_InflateRaw
        let rec t_of_js : Ojs.t -> t =
          fun (x140 : Ojs.t) -> zlib_InflateRaw_of_js x140
        and t_to_js : t -> Ojs.t =
          fun (x139 : zlib_InflateRaw) -> zlib_InflateRaw_to_js x139
        let (cast : t -> Stream.Transform.t_0) =
          fun (x141 : t) -> Stream.Transform.t_0_of_js (t_to_js x141)
        let (cast' : t -> zlib_Zlib) =
          fun (x142 : t) -> zlib_Zlib_of_js (t_to_js x142)
        let (cast'' : t -> zlib_ZlibReset) =
          fun (x143 : t) -> zlib_ZlibReset_of_js (t_to_js x143)
      end
    module Unzip =
      struct
        type t = zlib_Unzip
        let rec t_of_js : Ojs.t -> t =
          fun (x145 : Ojs.t) -> zlib_Unzip_of_js x145
        and t_to_js : t -> Ojs.t =
          fun (x144 : zlib_Unzip) -> zlib_Unzip_to_js x144
        let (cast : t -> Stream.Transform.t_0) =
          fun (x146 : t) -> Stream.Transform.t_0_of_js (t_to_js x146)
        let (cast' : t -> zlib_Zlib) =
          fun (x147 : t) -> zlib_Zlib_of_js (t_to_js x147)
      end
    let (createBrotliCompress :
      ?options:zlib_BrotliOptions -> unit -> zlib_BrotliCompress) =
      fun ?options:(x148 : zlib_BrotliOptions option) ->
        fun () ->
          zlib_BrotliCompress_of_js
            (let x151 = Ojs.get_prop_ascii Ojs.global "zlib" in
             Ojs.call (Ojs.get_prop_ascii x151 "createBrotliCompress")
               "apply"
               [|x151;((let x149 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x148 with
                         | Some x150 ->
                             ignore
                               (Ojs.call x149 "push"
                                  [|(zlib_BrotliOptions_to_js x150)|])
                         | None -> ());
                        x149))|])
    let (createBrotliDecompress :
      ?options:zlib_BrotliOptions -> unit -> zlib_BrotliDecompress) =
      fun ?options:(x152 : zlib_BrotliOptions option) ->
        fun () ->
          zlib_BrotliDecompress_of_js
            (let x155 = Ojs.get_prop_ascii Ojs.global "zlib" in
             Ojs.call (Ojs.get_prop_ascii x155 "createBrotliDecompress")
               "apply"
               [|x155;((let x153 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x152 with
                         | Some x154 ->
                             ignore
                               (Ojs.call x153 "push"
                                  [|(zlib_BrotliOptions_to_js x154)|])
                         | None -> ());
                        x153))|])
    let (createGzip : ?options:zlib_ZlibOptions -> unit -> zlib_Gzip) =
      fun ?options:(x156 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Gzip_of_js
            (let x159 = Ojs.get_prop_ascii Ojs.global "zlib" in
             Ojs.call (Ojs.get_prop_ascii x159 "createGzip") "apply"
               [|x159;((let x157 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x156 with
                         | Some x158 ->
                             ignore
                               (Ojs.call x157 "push"
                                  [|(zlib_ZlibOptions_to_js x158)|])
                         | None -> ());
                        x157))|])
    let (createGunzip : ?options:zlib_ZlibOptions -> unit -> zlib_Gunzip) =
      fun ?options:(x160 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Gunzip_of_js
            (let x163 = Ojs.get_prop_ascii Ojs.global "zlib" in
             Ojs.call (Ojs.get_prop_ascii x163 "createGunzip") "apply"
               [|x163;((let x161 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x160 with
                         | Some x162 ->
                             ignore
                               (Ojs.call x161 "push"
                                  [|(zlib_ZlibOptions_to_js x162)|])
                         | None -> ());
                        x161))|])
    let (createDeflate : ?options:zlib_ZlibOptions -> unit -> zlib_Deflate) =
      fun ?options:(x164 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Deflate_of_js
            (let x167 = Ojs.get_prop_ascii Ojs.global "zlib" in
             Ojs.call (Ojs.get_prop_ascii x167 "createDeflate") "apply"
               [|x167;((let x165 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x164 with
                         | Some x166 ->
                             ignore
                               (Ojs.call x165 "push"
                                  [|(zlib_ZlibOptions_to_js x166)|])
                         | None -> ());
                        x165))|])
    let (createInflate : ?options:zlib_ZlibOptions -> unit -> zlib_Inflate) =
      fun ?options:(x168 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Inflate_of_js
            (let x171 = Ojs.get_prop_ascii Ojs.global "zlib" in
             Ojs.call (Ojs.get_prop_ascii x171 "createInflate") "apply"
               [|x171;((let x169 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x168 with
                         | Some x170 ->
                             ignore
                               (Ojs.call x169 "push"
                                  [|(zlib_ZlibOptions_to_js x170)|])
                         | None -> ());
                        x169))|])
    let (createDeflateRaw :
      ?options:zlib_ZlibOptions -> unit -> zlib_DeflateRaw) =
      fun ?options:(x172 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_DeflateRaw_of_js
            (let x175 = Ojs.get_prop_ascii Ojs.global "zlib" in
             Ojs.call (Ojs.get_prop_ascii x175 "createDeflateRaw") "apply"
               [|x175;((let x173 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x172 with
                         | Some x174 ->
                             ignore
                               (Ojs.call x173 "push"
                                  [|(zlib_ZlibOptions_to_js x174)|])
                         | None -> ());
                        x173))|])
    let (createInflateRaw :
      ?options:zlib_ZlibOptions -> unit -> zlib_InflateRaw) =
      fun ?options:(x176 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_InflateRaw_of_js
            (let x179 = Ojs.get_prop_ascii Ojs.global "zlib" in
             Ojs.call (Ojs.get_prop_ascii x179 "createInflateRaw") "apply"
               [|x179;((let x177 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x176 with
                         | Some x178 ->
                             ignore
                               (Ojs.call x177 "push"
                                  [|(zlib_ZlibOptions_to_js x178)|])
                         | None -> ());
                        x177))|])
    let (createUnzip : ?options:zlib_ZlibOptions -> unit -> zlib_Unzip) =
      fun ?options:(x180 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Unzip_of_js
            (let x183 = Ojs.get_prop_ascii Ojs.global "zlib" in
             Ojs.call (Ojs.get_prop_ascii x183 "createUnzip") "apply"
               [|x183;((let x181 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x180 with
                         | Some x182 ->
                             ignore
                               (Ojs.call x181 "push"
                                  [|(zlib_ZlibOptions_to_js x182)|])
                         | None -> ());
                        x181))|])
    module InputType =
      struct
        type t = zlib_InputType
        let rec t_of_js : Ojs.t -> t =
          fun (x185 : Ojs.t) -> zlib_InputType_of_js x185
        and t_to_js : t -> Ojs.t =
          fun (x184 : zlib_InputType) -> zlib_InputType_to_js x184
      end
    module CompressCallback =
      struct
        type t = zlib_CompressCallback
        let rec t_of_js : Ojs.t -> t =
          fun (x187 : Ojs.t) -> zlib_CompressCallback_of_js x187
        and t_to_js : t -> Ojs.t =
          fun (x186 : zlib_CompressCallback) ->
            zlib_CompressCallback_to_js x186
        let (apply :
          t -> error:Error.t_0 or_null -> result:Buffer.t_0 -> unit) =
          fun (x191 : t) ->
            fun ~error:(x188 : Error.t_0 or_null) ->
              fun ~result:(x190 : Buffer.t_0) ->
                ignore
                  (Ojs.apply (t_to_js x191)
                     [|(or_null_to_js Error.t_0_to_js x188);(Buffer.t_0_to_js
                                                               x190)|])
      end
    let (brotliCompress :
      buf:zlib_InputType ->
        options:zlib_BrotliOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x192 : zlib_InputType) ->
        fun ~options:(x193 : zlib_BrotliOptions) ->
          fun ~callback:(x194 : zlib_CompressCallback) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib")
                 "brotliCompress"
                 [|(zlib_InputType_to_js x192);(zlib_BrotliOptions_to_js x193);(
                   zlib_CompressCallback_to_js x194)|])
    let (brotliCompress :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x195 : zlib_InputType) ->
        fun ~callback:(x196 : zlib_CompressCallback) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "brotliCompress"
               [|(zlib_InputType_to_js x195);(zlib_CompressCallback_to_js
                                                x196)|])
    module BrotliCompress =
      struct
        let (__promisify__ :
          buffer:zlib_InputType ->
            ?options:zlib_BrotliOptions -> unit -> Buffer.t_0 Promise.t)
          =
          fun ~buffer:(x197 : zlib_InputType) ->
            fun ?options:(x198 : zlib_BrotliOptions option) ->
              fun () ->
                Promise.t_of_js Buffer.t_0_of_js
                  (let x201 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "zlib")
                       "brotliCompress" in
                   Ojs.call (Ojs.get_prop_ascii x201 "__promisify__") "apply"
                     [|x201;((let x199 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x199 "push"
                                   [|(zlib_InputType_to_js x197)|]);
                              (match x198 with
                               | Some x200 ->
                                   ignore
                                     (Ojs.call x199 "push"
                                        [|(zlib_BrotliOptions_to_js x200)|])
                               | None -> ());
                              x199))|])
      end
    let (brotliCompressSync :
      buf:zlib_InputType -> ?options:zlib_BrotliOptions -> unit -> Buffer.t_0)
      =
      fun ~buf:(x203 : zlib_InputType) ->
        fun ?options:(x204 : zlib_BrotliOptions option) ->
          fun () ->
            Buffer.t_0_of_js
              (let x207 = Ojs.get_prop_ascii Ojs.global "zlib" in
               Ojs.call (Ojs.get_prop_ascii x207 "brotliCompressSync")
                 "apply"
                 [|x207;((let x205 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x205 "push"
                               [|(zlib_InputType_to_js x203)|]);
                          (match x204 with
                           | Some x206 ->
                               ignore
                                 (Ojs.call x205 "push"
                                    [|(zlib_BrotliOptions_to_js x206)|])
                           | None -> ());
                          x205))|])
    let (brotliDecompress :
      buf:zlib_InputType ->
        options:zlib_BrotliOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x208 : zlib_InputType) ->
        fun ~options:(x209 : zlib_BrotliOptions) ->
          fun ~callback:(x210 : zlib_CompressCallback) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib")
                 "brotliDecompress"
                 [|(zlib_InputType_to_js x208);(zlib_BrotliOptions_to_js x209);(
                   zlib_CompressCallback_to_js x210)|])
    let (brotliDecompress :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x211 : zlib_InputType) ->
        fun ~callback:(x212 : zlib_CompressCallback) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib")
               "brotliDecompress"
               [|(zlib_InputType_to_js x211);(zlib_CompressCallback_to_js
                                                x212)|])
    module BrotliDecompress =
      struct
        let (__promisify__ :
          buffer:zlib_InputType ->
            ?options:zlib_BrotliOptions -> unit -> Buffer.t_0 Promise.t)
          =
          fun ~buffer:(x213 : zlib_InputType) ->
            fun ?options:(x214 : zlib_BrotliOptions option) ->
              fun () ->
                Promise.t_of_js Buffer.t_0_of_js
                  (let x217 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "zlib")
                       "brotliDecompress" in
                   Ojs.call (Ojs.get_prop_ascii x217 "__promisify__") "apply"
                     [|x217;((let x215 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x215 "push"
                                   [|(zlib_InputType_to_js x213)|]);
                              (match x214 with
                               | Some x216 ->
                                   ignore
                                     (Ojs.call x215 "push"
                                        [|(zlib_BrotliOptions_to_js x216)|])
                               | None -> ());
                              x215))|])
      end
    let (brotliDecompressSync :
      buf:zlib_InputType -> ?options:zlib_BrotliOptions -> unit -> Buffer.t_0)
      =
      fun ~buf:(x219 : zlib_InputType) ->
        fun ?options:(x220 : zlib_BrotliOptions option) ->
          fun () ->
            Buffer.t_0_of_js
              (let x223 = Ojs.get_prop_ascii Ojs.global "zlib" in
               Ojs.call (Ojs.get_prop_ascii x223 "brotliDecompressSync")
                 "apply"
                 [|x223;((let x221 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x221 "push"
                               [|(zlib_InputType_to_js x219)|]);
                          (match x220 with
                           | Some x222 ->
                               ignore
                                 (Ojs.call x221 "push"
                                    [|(zlib_BrotliOptions_to_js x222)|])
                           | None -> ());
                          x221))|])
    let (deflate :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x224 : zlib_InputType) ->
        fun ~callback:(x225 : zlib_CompressCallback) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "deflate"
               [|(zlib_InputType_to_js x224);(zlib_CompressCallback_to_js
                                                x225)|])
    let (deflate :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x226 : zlib_InputType) ->
        fun ~options:(x227 : zlib_ZlibOptions) ->
          fun ~callback:(x228 : zlib_CompressCallback) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "deflate"
                 [|(zlib_InputType_to_js x226);(zlib_ZlibOptions_to_js x227);(
                   zlib_CompressCallback_to_js x228)|])
    module Deflate =
      struct
        let (__promisify__ :
          buffer:zlib_InputType ->
            ?options:zlib_ZlibOptions -> unit -> Buffer.t_0 Promise.t)
          =
          fun ~buffer:(x229 : zlib_InputType) ->
            fun ?options:(x230 : zlib_ZlibOptions option) ->
              fun () ->
                Promise.t_of_js Buffer.t_0_of_js
                  (let x233 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "zlib") "deflate" in
                   Ojs.call (Ojs.get_prop_ascii x233 "__promisify__") "apply"
                     [|x233;((let x231 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x231 "push"
                                   [|(zlib_InputType_to_js x229)|]);
                              (match x230 with
                               | Some x232 ->
                                   ignore
                                     (Ojs.call x231 "push"
                                        [|(zlib_ZlibOptions_to_js x232)|])
                               | None -> ());
                              x231))|])
      end
    let (deflateSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t_0)
      =
      fun ~buf:(x235 : zlib_InputType) ->
        fun ?options:(x236 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_0_of_js
              (let x239 = Ojs.get_prop_ascii Ojs.global "zlib" in
               Ojs.call (Ojs.get_prop_ascii x239 "deflateSync") "apply"
                 [|x239;((let x237 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x237 "push"
                               [|(zlib_InputType_to_js x235)|]);
                          (match x236 with
                           | Some x238 ->
                               ignore
                                 (Ojs.call x237 "push"
                                    [|(zlib_ZlibOptions_to_js x238)|])
                           | None -> ());
                          x237))|])
    let (deflateRaw :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x240 : zlib_InputType) ->
        fun ~callback:(x241 : zlib_CompressCallback) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "deflateRaw"
               [|(zlib_InputType_to_js x240);(zlib_CompressCallback_to_js
                                                x241)|])
    let (deflateRaw :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x242 : zlib_InputType) ->
        fun ~options:(x243 : zlib_ZlibOptions) ->
          fun ~callback:(x244 : zlib_CompressCallback) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "deflateRaw"
                 [|(zlib_InputType_to_js x242);(zlib_ZlibOptions_to_js x243);(
                   zlib_CompressCallback_to_js x244)|])
    module DeflateRaw =
      struct
        let (__promisify__ :
          buffer:zlib_InputType ->
            ?options:zlib_ZlibOptions -> unit -> Buffer.t_0 Promise.t)
          =
          fun ~buffer:(x245 : zlib_InputType) ->
            fun ?options:(x246 : zlib_ZlibOptions option) ->
              fun () ->
                Promise.t_of_js Buffer.t_0_of_js
                  (let x249 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "zlib") "deflateRaw" in
                   Ojs.call (Ojs.get_prop_ascii x249 "__promisify__") "apply"
                     [|x249;((let x247 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x247 "push"
                                   [|(zlib_InputType_to_js x245)|]);
                              (match x246 with
                               | Some x248 ->
                                   ignore
                                     (Ojs.call x247 "push"
                                        [|(zlib_ZlibOptions_to_js x248)|])
                               | None -> ());
                              x247))|])
      end
    let (deflateRawSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t_0)
      =
      fun ~buf:(x251 : zlib_InputType) ->
        fun ?options:(x252 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_0_of_js
              (let x255 = Ojs.get_prop_ascii Ojs.global "zlib" in
               Ojs.call (Ojs.get_prop_ascii x255 "deflateRawSync") "apply"
                 [|x255;((let x253 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x253 "push"
                               [|(zlib_InputType_to_js x251)|]);
                          (match x252 with
                           | Some x254 ->
                               ignore
                                 (Ojs.call x253 "push"
                                    [|(zlib_ZlibOptions_to_js x254)|])
                           | None -> ());
                          x253))|])
    let (gzip : buf:zlib_InputType -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x256 : zlib_InputType) ->
        fun ~callback:(x257 : zlib_CompressCallback) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "gzip"
               [|(zlib_InputType_to_js x256);(zlib_CompressCallback_to_js
                                                x257)|])
    let (gzip :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x258 : zlib_InputType) ->
        fun ~options:(x259 : zlib_ZlibOptions) ->
          fun ~callback:(x260 : zlib_CompressCallback) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "gzip"
                 [|(zlib_InputType_to_js x258);(zlib_ZlibOptions_to_js x259);(
                   zlib_CompressCallback_to_js x260)|])
    module Gzip =
      struct
        let (__promisify__ :
          buffer:zlib_InputType ->
            ?options:zlib_ZlibOptions -> unit -> Buffer.t_0 Promise.t)
          =
          fun ~buffer:(x261 : zlib_InputType) ->
            fun ?options:(x262 : zlib_ZlibOptions option) ->
              fun () ->
                Promise.t_of_js Buffer.t_0_of_js
                  (let x265 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "zlib") "gzip" in
                   Ojs.call (Ojs.get_prop_ascii x265 "__promisify__") "apply"
                     [|x265;((let x263 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x263 "push"
                                   [|(zlib_InputType_to_js x261)|]);
                              (match x262 with
                               | Some x264 ->
                                   ignore
                                     (Ojs.call x263 "push"
                                        [|(zlib_ZlibOptions_to_js x264)|])
                               | None -> ());
                              x263))|])
      end
    let (gzipSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t_0)
      =
      fun ~buf:(x267 : zlib_InputType) ->
        fun ?options:(x268 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_0_of_js
              (let x271 = Ojs.get_prop_ascii Ojs.global "zlib" in
               Ojs.call (Ojs.get_prop_ascii x271 "gzipSync") "apply"
                 [|x271;((let x269 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x269 "push"
                               [|(zlib_InputType_to_js x267)|]);
                          (match x268 with
                           | Some x270 ->
                               ignore
                                 (Ojs.call x269 "push"
                                    [|(zlib_ZlibOptions_to_js x270)|])
                           | None -> ());
                          x269))|])
    let (gunzip :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x272 : zlib_InputType) ->
        fun ~callback:(x273 : zlib_CompressCallback) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "gunzip"
               [|(zlib_InputType_to_js x272);(zlib_CompressCallback_to_js
                                                x273)|])
    let (gunzip :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x274 : zlib_InputType) ->
        fun ~options:(x275 : zlib_ZlibOptions) ->
          fun ~callback:(x276 : zlib_CompressCallback) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "gunzip"
                 [|(zlib_InputType_to_js x274);(zlib_ZlibOptions_to_js x275);(
                   zlib_CompressCallback_to_js x276)|])
    module Gunzip =
      struct
        let (__promisify__ :
          buffer:zlib_InputType ->
            ?options:zlib_ZlibOptions -> unit -> Buffer.t_0 Promise.t)
          =
          fun ~buffer:(x277 : zlib_InputType) ->
            fun ?options:(x278 : zlib_ZlibOptions option) ->
              fun () ->
                Promise.t_of_js Buffer.t_0_of_js
                  (let x281 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "zlib") "gunzip" in
                   Ojs.call (Ojs.get_prop_ascii x281 "__promisify__") "apply"
                     [|x281;((let x279 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x279 "push"
                                   [|(zlib_InputType_to_js x277)|]);
                              (match x278 with
                               | Some x280 ->
                                   ignore
                                     (Ojs.call x279 "push"
                                        [|(zlib_ZlibOptions_to_js x280)|])
                               | None -> ());
                              x279))|])
      end
    let (gunzipSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t_0)
      =
      fun ~buf:(x283 : zlib_InputType) ->
        fun ?options:(x284 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_0_of_js
              (let x287 = Ojs.get_prop_ascii Ojs.global "zlib" in
               Ojs.call (Ojs.get_prop_ascii x287 "gunzipSync") "apply"
                 [|x287;((let x285 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x285 "push"
                               [|(zlib_InputType_to_js x283)|]);
                          (match x284 with
                           | Some x286 ->
                               ignore
                                 (Ojs.call x285 "push"
                                    [|(zlib_ZlibOptions_to_js x286)|])
                           | None -> ());
                          x285))|])
    let (inflate :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x288 : zlib_InputType) ->
        fun ~callback:(x289 : zlib_CompressCallback) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "inflate"
               [|(zlib_InputType_to_js x288);(zlib_CompressCallback_to_js
                                                x289)|])
    let (inflate :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x290 : zlib_InputType) ->
        fun ~options:(x291 : zlib_ZlibOptions) ->
          fun ~callback:(x292 : zlib_CompressCallback) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "inflate"
                 [|(zlib_InputType_to_js x290);(zlib_ZlibOptions_to_js x291);(
                   zlib_CompressCallback_to_js x292)|])
    module Inflate =
      struct
        let (__promisify__ :
          buffer:zlib_InputType ->
            ?options:zlib_ZlibOptions -> unit -> Buffer.t_0 Promise.t)
          =
          fun ~buffer:(x293 : zlib_InputType) ->
            fun ?options:(x294 : zlib_ZlibOptions option) ->
              fun () ->
                Promise.t_of_js Buffer.t_0_of_js
                  (let x297 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "zlib") "inflate" in
                   Ojs.call (Ojs.get_prop_ascii x297 "__promisify__") "apply"
                     [|x297;((let x295 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x295 "push"
                                   [|(zlib_InputType_to_js x293)|]);
                              (match x294 with
                               | Some x296 ->
                                   ignore
                                     (Ojs.call x295 "push"
                                        [|(zlib_ZlibOptions_to_js x296)|])
                               | None -> ());
                              x295))|])
      end
    let (inflateSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t_0)
      =
      fun ~buf:(x299 : zlib_InputType) ->
        fun ?options:(x300 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_0_of_js
              (let x303 = Ojs.get_prop_ascii Ojs.global "zlib" in
               Ojs.call (Ojs.get_prop_ascii x303 "inflateSync") "apply"
                 [|x303;((let x301 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x301 "push"
                               [|(zlib_InputType_to_js x299)|]);
                          (match x300 with
                           | Some x302 ->
                               ignore
                                 (Ojs.call x301 "push"
                                    [|(zlib_ZlibOptions_to_js x302)|])
                           | None -> ());
                          x301))|])
    let (inflateRaw :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x304 : zlib_InputType) ->
        fun ~callback:(x305 : zlib_CompressCallback) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "inflateRaw"
               [|(zlib_InputType_to_js x304);(zlib_CompressCallback_to_js
                                                x305)|])
    let (inflateRaw :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x306 : zlib_InputType) ->
        fun ~options:(x307 : zlib_ZlibOptions) ->
          fun ~callback:(x308 : zlib_CompressCallback) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "inflateRaw"
                 [|(zlib_InputType_to_js x306);(zlib_ZlibOptions_to_js x307);(
                   zlib_CompressCallback_to_js x308)|])
    module InflateRaw =
      struct
        let (__promisify__ :
          buffer:zlib_InputType ->
            ?options:zlib_ZlibOptions -> unit -> Buffer.t_0 Promise.t)
          =
          fun ~buffer:(x309 : zlib_InputType) ->
            fun ?options:(x310 : zlib_ZlibOptions option) ->
              fun () ->
                Promise.t_of_js Buffer.t_0_of_js
                  (let x313 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "zlib") "inflateRaw" in
                   Ojs.call (Ojs.get_prop_ascii x313 "__promisify__") "apply"
                     [|x313;((let x311 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x311 "push"
                                   [|(zlib_InputType_to_js x309)|]);
                              (match x310 with
                               | Some x312 ->
                                   ignore
                                     (Ojs.call x311 "push"
                                        [|(zlib_ZlibOptions_to_js x312)|])
                               | None -> ());
                              x311))|])
      end
    let (inflateRawSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t_0)
      =
      fun ~buf:(x315 : zlib_InputType) ->
        fun ?options:(x316 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_0_of_js
              (let x319 = Ojs.get_prop_ascii Ojs.global "zlib" in
               Ojs.call (Ojs.get_prop_ascii x319 "inflateRawSync") "apply"
                 [|x319;((let x317 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x317 "push"
                               [|(zlib_InputType_to_js x315)|]);
                          (match x316 with
                           | Some x318 ->
                               ignore
                                 (Ojs.call x317 "push"
                                    [|(zlib_ZlibOptions_to_js x318)|])
                           | None -> ());
                          x317))|])
    let (unzip :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x320 : zlib_InputType) ->
        fun ~callback:(x321 : zlib_CompressCallback) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "unzip"
               [|(zlib_InputType_to_js x320);(zlib_CompressCallback_to_js
                                                x321)|])
    let (unzip :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x322 : zlib_InputType) ->
        fun ~options:(x323 : zlib_ZlibOptions) ->
          fun ~callback:(x324 : zlib_CompressCallback) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "zlib") "unzip"
                 [|(zlib_InputType_to_js x322);(zlib_ZlibOptions_to_js x323);(
                   zlib_CompressCallback_to_js x324)|])
    module Unzip =
      struct
        let (__promisify__ :
          buffer:zlib_InputType ->
            ?options:zlib_ZlibOptions -> unit -> Buffer.t_0 Promise.t)
          =
          fun ~buffer:(x325 : zlib_InputType) ->
            fun ?options:(x326 : zlib_ZlibOptions option) ->
              fun () ->
                Promise.t_of_js Buffer.t_0_of_js
                  (let x329 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "zlib") "unzip" in
                   Ojs.call (Ojs.get_prop_ascii x329 "__promisify__") "apply"
                     [|x329;((let x327 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x327 "push"
                                   [|(zlib_InputType_to_js x325)|]);
                              (match x326 with
                               | Some x328 ->
                                   ignore
                                     (Ojs.call x327 "push"
                                        [|(zlib_ZlibOptions_to_js x328)|])
                               | None -> ());
                              x327))|])
      end
    let (unzipSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t_0)
      =
      fun ~buf:(x331 : zlib_InputType) ->
        fun ?options:(x332 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_0_of_js
              (let x335 = Ojs.get_prop_ascii Ojs.global "zlib" in
               Ojs.call (Ojs.get_prop_ascii x335 "unzipSync") "apply"
                 [|x335;((let x333 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x333 "push"
                               [|(zlib_InputType_to_js x331)|]);
                          (match x332 with
                           | Some x334 ->
                               ignore
                                 (Ojs.call x333 "push"
                                    [|(zlib_ZlibOptions_to_js x334)|])
                           | None -> ());
                          x333))|])
    module Constants =
      struct
        let (bROTLI_DECODE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODE")
        let (bROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES")
        let (bROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP")
        let (bROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES")
        let (bROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1")
        let (bROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2")
        let (bROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS")
        let (bROTLI_DECODER_ERROR_DICTIONARY_NOT_SET : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET")
        let (bROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1")
        let (bROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2")
        let (bROTLI_DECODER_ERROR_FORMAT_CL_SPACE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_CL_SPACE")
        let (bROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants")
               "BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT")
        let (bROTLI_DECODER_ERROR_FORMAT_DICTIONARY : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_DICTIONARY")
        let (bROTLI_DECODER_ERROR_FORMAT_DISTANCE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_DISTANCE")
        let (bROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants")
               "BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE")
        let (bROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE")
        let (bROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE")
        let (bROTLI_DECODER_ERROR_FORMAT_PADDING_1 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_PADDING_1")
        let (bROTLI_DECODER_ERROR_FORMAT_PADDING_2 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_PADDING_2")
        let (bROTLI_DECODER_ERROR_FORMAT_RESERVED : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_RESERVED")
        let (bROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants")
               "BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET")
        let (bROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants")
               "BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME")
        let (bROTLI_DECODER_ERROR_FORMAT_TRANSFORM : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_TRANSFORM")
        let (bROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS")
        let (bROTLI_DECODER_ERROR_INVALID_ARGUMENTS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_INVALID_ARGUMENTS")
        let (bROTLI_DECODER_ERROR_UNREACHABLE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_ERROR_UNREACHABLE")
        let (bROTLI_DECODER_NEEDS_MORE_INPUT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_NEEDS_MORE_INPUT")
        let (bROTLI_DECODER_NEEDS_MORE_OUTPUT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_NEEDS_MORE_OUTPUT")
        let (bROTLI_DECODER_NO_ERROR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_NO_ERROR")
        let (bROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION : 
          float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants")
               "BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION")
        let (bROTLI_DECODER_PARAM_LARGE_WINDOW : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_PARAM_LARGE_WINDOW")
        let (bROTLI_DECODER_RESULT_ERROR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_RESULT_ERROR")
        let (bROTLI_DECODER_RESULT_NEEDS_MORE_INPUT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT")
        let (bROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT")
        let (bROTLI_DECODER_RESULT_SUCCESS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_RESULT_SUCCESS")
        let (bROTLI_DECODER_SUCCESS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DECODER_SUCCESS")
        let (bROTLI_DEFAULT_MODE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DEFAULT_MODE")
        let (bROTLI_DEFAULT_QUALITY : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DEFAULT_QUALITY")
        let (bROTLI_DEFAULT_WINDOW : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_DEFAULT_WINDOW")
        let (bROTLI_ENCODE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_ENCODE")
        let (bROTLI_LARGE_MAX_WINDOW_BITS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_LARGE_MAX_WINDOW_BITS")
        let (bROTLI_MAX_INPUT_BLOCK_BITS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_MAX_INPUT_BLOCK_BITS")
        let (bROTLI_MAX_QUALITY : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_MAX_QUALITY")
        let (bROTLI_MAX_WINDOW_BITS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_MAX_WINDOW_BITS")
        let (bROTLI_MIN_INPUT_BLOCK_BITS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_MIN_INPUT_BLOCK_BITS")
        let (bROTLI_MIN_QUALITY : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_MIN_QUALITY")
        let (bROTLI_MIN_WINDOW_BITS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_MIN_WINDOW_BITS")
        let (bROTLI_MODE_FONT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_MODE_FONT")
        let (bROTLI_MODE_GENERIC : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_MODE_GENERIC")
        let (bROTLI_MODE_TEXT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_MODE_TEXT")
        let (bROTLI_OPERATION_EMIT_METADATA : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_OPERATION_EMIT_METADATA")
        let (bROTLI_OPERATION_FINISH : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_OPERATION_FINISH")
        let (bROTLI_OPERATION_FLUSH : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_OPERATION_FLUSH")
        let (bROTLI_OPERATION_PROCESS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_OPERATION_PROCESS")
        let (bROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants")
               "BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING")
        let (bROTLI_PARAM_LARGE_WINDOW : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_PARAM_LARGE_WINDOW")
        let (bROTLI_PARAM_LGBLOCK : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_PARAM_LGBLOCK")
        let (bROTLI_PARAM_LGWIN : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_PARAM_LGWIN")
        let (bROTLI_PARAM_MODE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_PARAM_MODE")
        let (bROTLI_PARAM_NDIRECT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_PARAM_NDIRECT")
        let (bROTLI_PARAM_NPOSTFIX : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_PARAM_NPOSTFIX")
        let (bROTLI_PARAM_QUALITY : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_PARAM_QUALITY")
        let (bROTLI_PARAM_SIZE_HINT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "BROTLI_PARAM_SIZE_HINT")
        let (dEFLATE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "DEFLATE")
        let (dEFLATERAW : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "DEFLATERAW")
        let (gUNZIP : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "GUNZIP")
        let (gZIP : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "GZIP")
        let (iNFLATE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "INFLATE")
        let (iNFLATERAW : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "INFLATERAW")
        let (uNZIP : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "UNZIP")
        let (z_NO_FLUSH : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_NO_FLUSH")
        let (z_PARTIAL_FLUSH : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_PARTIAL_FLUSH")
        let (z_SYNC_FLUSH : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_SYNC_FLUSH")
        let (z_FULL_FLUSH : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_FULL_FLUSH")
        let (z_FINISH : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_FINISH")
        let (z_BLOCK : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_BLOCK")
        let (z_TREES : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_TREES")
        let (z_OK : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_OK")
        let (z_STREAM_END : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_STREAM_END")
        let (z_NEED_DICT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_NEED_DICT")
        let (z_ERRNO : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_ERRNO")
        let (z_STREAM_ERROR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_STREAM_ERROR")
        let (z_DATA_ERROR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_DATA_ERROR")
        let (z_MEM_ERROR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_MEM_ERROR")
        let (z_BUF_ERROR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_BUF_ERROR")
        let (z_VERSION_ERROR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_VERSION_ERROR")
        let (z_NO_COMPRESSION : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_NO_COMPRESSION")
        let (z_BEST_SPEED : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_BEST_SPEED")
        let (z_BEST_COMPRESSION : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_BEST_COMPRESSION")
        let (z_DEFAULT_COMPRESSION : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_DEFAULT_COMPRESSION")
        let (z_FILTERED : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_FILTERED")
        let (z_HUFFMAN_ONLY : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_HUFFMAN_ONLY")
        let (z_RLE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_RLE")
        let (z_FIXED : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_FIXED")
        let (z_DEFAULT_STRATEGY : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_DEFAULT_STRATEGY")
        let (z_DEFAULT_WINDOWBITS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_DEFAULT_WINDOWBITS")
        let (z_MIN_WINDOWBITS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_MIN_WINDOWBITS")
        let (z_MAX_WINDOWBITS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_MAX_WINDOWBITS")
        let (z_MIN_CHUNK : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_MIN_CHUNK")
        let (z_MAX_CHUNK : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_MAX_CHUNK")
        let (z_DEFAULT_CHUNK : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_DEFAULT_CHUNK")
        let (z_MIN_MEMLEVEL : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_MIN_MEMLEVEL")
        let (z_MAX_MEMLEVEL : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_MAX_MEMLEVEL")
        let (z_DEFAULT_MEMLEVEL : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_DEFAULT_MEMLEVEL")
        let (z_MIN_LEVEL : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_MIN_LEVEL")
        let (z_MAX_LEVEL : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_MAX_LEVEL")
        let (z_DEFAULT_LEVEL : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "Z_DEFAULT_LEVEL")
        let (zLIB_VERNUM : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
                  "constants") "ZLIB_VERNUM")
      end
    let (z_NO_FLUSH : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_NO_FLUSH")
    let (z_PARTIAL_FLUSH : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_PARTIAL_FLUSH")
    let (z_SYNC_FLUSH : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_SYNC_FLUSH")
    let (z_FULL_FLUSH : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_FULL_FLUSH")
    let (z_FINISH : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_FINISH")
    let (z_BLOCK : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_BLOCK")
    let (z_TREES : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_TREES")
    let (z_OK : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_OK")
    let (z_STREAM_END : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_STREAM_END")
    let (z_NEED_DICT : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_NEED_DICT")
    let (z_ERRNO : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_ERRNO")
    let (z_STREAM_ERROR : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_STREAM_ERROR")
    let (z_DATA_ERROR : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_DATA_ERROR")
    let (z_MEM_ERROR : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_MEM_ERROR")
    let (z_BUF_ERROR : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_BUF_ERROR")
    let (z_VERSION_ERROR : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_VERSION_ERROR")
    let (z_NO_COMPRESSION : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_NO_COMPRESSION")
    let (z_BEST_SPEED : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_BEST_SPEED")
    let (z_BEST_COMPRESSION : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_BEST_COMPRESSION")
    let (z_DEFAULT_COMPRESSION : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_DEFAULT_COMPRESSION")
    let (z_FILTERED : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_FILTERED")
    let (z_HUFFMAN_ONLY : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_HUFFMAN_ONLY")
    let (z_RLE : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_RLE")
    let (z_FIXED : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_FIXED")
    let (z_DEFAULT_STRATEGY : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_DEFAULT_STRATEGY")
    let (z_BINARY : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_BINARY")
    let (z_TEXT : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_TEXT")
    let (z_ASCII : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib") "Z_ASCII")
    let (z_UNKNOWN : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_UNKNOWN")
    let (z_DEFLATED : float) =
      Ojs.float_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "zlib")
           "Z_DEFLATED")
  end
